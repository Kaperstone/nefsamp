/*======================================================================*\
|| #################################################################### ||
|| # Project Havoc Server						        			  # ||
|| # ---------------------------------------------------------------- # ||
|| # Copyright (c)2011-2015 Havoc Server			  				  # ||
|| # Created by Mellnik                                               # ||
|| # ---------------------------------------------------------------- # ||
|| # https://havocserver.com		                      			  # ||
|| #################################################################### ||
\*======================================================================*/

/*
|| Build Dependencies:
|| SA-MP Server 0.3z-R4
|| NEFMOD Core, latest
|| YSI Library 3.1.133
|| sscanf Plugin 2.8.1
|| Streamer Plugin v2.7.4
|| MySQL Plugin R38
|| CrashDetect 4.15
|| amx_assembly Library .318
||
|| Build notes:
|| compile -d3 with crashdetect
||
|| Database changes:
||
|| Script limits:
|| Max teleport categories: 9
|| Max teleports per category: 32
|| Max teleport command name: 17
|| Max businesses: 700
|| Max gang zones: 60
|| Max houses: 700
|| Gang name: 4-20 chars
|| Money range: -2147483648 - 2147483647
|| Score range: -8388608 - 8388607
*/

#pragma dynamic 8192        // for md-sort

#define IS_RELEASE_BUILD (true)
#define INC_ENVIRONMENT (true)
#define WINTER_EDITION (true) // Requires FS ferriswheelfair.amx
#define _YSI_NO_VERSION_CHECK
#define YSI_IS_SERVER

#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS (400)
#include <a_http>           // API Requests
#include <nefmod>
#include <crashdetect>
#include <amx\os>
#include <YSI\y_iterate>
#include <YSI\y_stringhash>
#include <YSI\y_commands>
#include <YSI\y_master>
#include <YSI\y_va>
#include <sscanf2>
#include <streamer>
#include <a_mysql_R38>
#include <utconvert>
#include <mSelection>       // 1.1 R3
#include <Dini>         	// 1.6
#include <md-sort>      	// 13/02/2014
#if INC_ENVIRONMENT == true
#include <server_maps>
#include <server_maps_2>
#include <server_maps_3>
#include <server_maps_4>
#endif
#include <server_map_patches>
#include <server_map_vehicles>

native IsValidVehicle(vehicleid); // undefined in a_samp.inc
native gpci(playerid, serial[], maxlen); // undefined in a_samp.inc

// Protoypes
Float:GetElevatorZCoordForFloor(floorid);
Float:GetDoorsZCoordForFloor(floorid);
Float:GetDistance3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);

// MySQL
#define SQL_HOST   						"::1"
#define SQL_PORT                        (3306)
#if IS_RELEASE_BUILD == true
#define SQL_USER   						"havocserver"
#define SQL_PASS   						"nlR:o%k15N5*5/u"
#define SQL_DATA   						"havocserver"
#else
#define SQL_USER   						"havocdev"
#define SQL_PASS   						"83Qhfdawdfrb-.a7ghb7tgbfsds"
#define SQL_DATA                        "havocdev"
#endif

// Server
#define SVRNAME                      	"Havoc Freeroam"
#define SVRSC	                    	"Havoc"
#define SVRLOGO                         "{646464}«(-|-|"nef_yellow"New "nef_green"Evolution "nef_red"Freeroam{F0F0F0}™{646464}|-|-)»"
#define SVRURL                          "havocserver.com"
#define SVRURLWWW                       "www.havocserver.com"
#define SVRFORUM                        "forum.nefserver.net"
#define SERVER_IP                       "31.204.153.110:7777"
#define HOSTNAME                        " 	      ..:: NEF ::.. ×Stunt/DM/Race/Minigames×"
#define HOSTNAME                        "Havoc Freeroam"
#if IS_RELEASE_BUILD == true
#define CURRENT_VERSION                 "1.00"
#else
#define CURRENT_VERSION                 "beta-1.00"
#endif
#define SAMP_VERSION                    "0.3z-R4"
#define MAX_REPORTS 					(7)
#define MAX_GANG_NAME					(20)
#define MIN_GANG_NAME					(4)
#define GANG_POS_NONE                   (0)
#define GANG_POS_JUNIOR_MEMBER          (1)
#define GANG_POS_MEMBER                 (2)
#define GANG_POS_SENIOR_MEMBER          (3)
#define GANG_POS_ADVISOR                (4)
#define GANG_POS_LEADER                 (5)
#define GANG_POS_CO_FOUNDER             (6)
#define GANG_POS_FOUNDER            	(7)
#define house_mark                      "{FFFFFF}[{88EE88}House{FFFFFF}]"
#define business_mark                   "{FFFFFF}[{AAAAFF}Business{FFFFFF}]"
#define gwars_mark                      "{FFFFFF}[{2DFF00}Gang Zone{FFFFFF}]"
#define derby_sign                      "{FFFFFF}[{AAAAFF}DERBY{FFFFFF}]"
#define race_sign                       "{FFFFFF}[{AAAAFF}RACE{FFFFFF}]"
#define tdm_sign                        "{FFFFFF}[{AAAAFF}TDM{FFFFFF}]"
#define cnr_sign                        "{FFFFFF}[{AAAAFF}CNR{FFFFFF}]"
#define war_sign                        "{FFFFFF}[{AAAAFF}WAR{FFFFFF}]"
#define gungame_sign                    "{FFFFFF}[{AAAAFF}GUNGAME{FFFFFF}]"
#define fallout_sign                    "{FFFFFF}[{AAAAFF}FALLOUT{FFFFFF}]"
#define server_sign                     "{FFFFFF}[{FF005F}SERVER{FFFFFF}]"
#define gang_sign                       "{FFFFFF}[{FFA000}GANG{FFFFFF}]"
#define nefa                            "{FFFFFF}[{FFE600}"SVRSC"{FFFFFF}]"
#define nef                             "{FFE600}"SVRSC"{FFFFFF}"
#define NO_PERM                     	"{FF000F}[INFO] {FF000F}Insufficient permissions"
#define NOT_AVAIL                       "{FF000F}[INFO] {FF000F}You can't use this command now! Use /exit to leave."
#define er                              "{FF000F}[INFO] {FF000F}" // D2D2D2
#define Error(%1,%2) 					SendClientMessage(%1, -1, "{F42626}[INFO] "GREY2_E""%2)
#define dl                              "{FFE600}• {F0F0F0}"
#define notlogged(%1)                   ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef"", ""white"You need to be logged in to use this feature.\n\n"nef_yellow"Type /register to create an new account for you current name.", "OK", "")
#define MAX_ADMIN_LEVEL         		(5)
#define MAX_WARNINGS 					(3)
#define ELEVATOR_SPEED      			(5.0)
#define DOORS_SPEED         			(4.0)
#define ELEVATOR_WAIT_TIME  			(5000)
#define X_DOOR_CLOSED       			(1786.627685)
#define X_DOOR_R_OPENED     			(1785.027685)
#define X_DOOR_L_OPENED     			(1788.227685)
#define GROUND_Z_COORD      			(14.511476)
#define ELEVATOR_OFFSET     			(0.059523)
#define ELEVATOR_STATE_IDLE     		(0)
#define ELEVATOR_STATE_WAITING  		(1)
#define ELEVATOR_STATE_MOVING   		(2)
#define INVALID_FLOOR           		(-1)
#define RESPAWN_TIME                    (60)
#define SCM SendClientMessage
#define SCMToAll SendClientMessageToAll
#define MAX_ZONE_NAME                   (28)
#define CAR_SHOPS                       (3)
#define RGBA(%1,%2,%3,%4) (((((%1) & 0xff) << 24) | (((%2) & 0xff) << 16) | (((%3) & 0xff) << 8) | ((%4) & 0xff)))
#define UpperToLower(%1) for(new ToLowerChar; ToLowerChar < strlen(%1); ToLowerChar++) if(%1[ToLowerChar] > 64 && %1[ToLowerChar] < 91) %1[ToLowerChar] += 32

// Derby
#define DERBY_WIHLE_CAM_M1				-3948.2632, 951.8198, 78.4012
#define DERBY_WIHLE_CAM_M2          	2953.7620, 486.3492, 44.3681
#define DERBY_WIHLE_CAM_M3          	214.0030, 1637.5992, 369.9997
#define DERBY_WIHLE_CAM_M4              1509.0637, -1790.3726, 77.7660
#define DERBY_WIHLE_CAM_M5              -1923.6121, -859.1075, 86.4540
#define DERBY_WIHLE_CAM_M6              3749.7786, -69.5137, 34.7968
#define DERBY_WIHLE_CAM_M7              4028.5825, -1909.2007, 56.6765
#define DERBY_WIHLE_CAM_M8              2876.0093, -3530.1829, 24.4397
#define DERBY_WIHLE_CAM_M9              4520.9189, -1753.6084, 56.1358
#define DERBY_CAMPOS_M1                 -4031.8118, 985.9628, 73.5483
#define DERBY_CAMPOS_M2                 2878.3738, 509.6317, 57.4209
#define DERBY_CAMPOS_M3                 146.2626, 1726.9897, 375.9173
#define DERBY_CAMPOS_M4                 1481.6500, -1713.3242, 58.8331
#define DERBY_CAMPOS_M5                 -1990.0116, -962.2039, 65.3364
#define DERBY_CAMPOS_M6                 3917.3489, -53.3306, 18.7947
#define DERBY_CAMPOS_M7                 4090.4087, -1995.4886, 50.2633
#define DERBY_CAMPOS_M8                 2800.4382, -3449.5762, 39.5314
#define DERBY_CAMPOS_M9                 4453.8774, -1642.1117, 36.6551
#define DERBY_CAMLA_M1                  -4030.9736, 985.4224, 73.2184
#define DERBY_CAMLA_M2                  2879.3184, 509.2916, 56.9258
#define DERBY_CAMLA_M3                  147.0293, 1726.3483, 375.4769
#define DERBY_CAMLA_M4                  1481.6300, -1714.3220, 58.3079
#define DERBY_CAMLA_M5                  -1989.5079, -961.3351, 64.8612
#define DERBY_CAMLA_M6                  3916.3560, -53.4894, 18.5597
#define DERBY_CAMLA_M7                  4089.7327, -1994.7545, 49.7484
#define DERBY_CAMLA_M8                  2801.1716, -3450.2600, 38.9760
#define DERBY_CAMLA_M9                  4454.6743, -1642.7051, 36.2001
#define DERBY_FALLOVER_M1     			(20)
#define DERBY_FALLOVER_M2               (1)
#define DERBY_FALLOVER_M3               (327)
#define DERBY_FALLOVER_M4               (27)
#define DERBY_FALLOVER_M5               (36)
#define DERBY_FALLOVER_M6               (1)
#define DERBY_FALLOVER_M7               (1)
#define DERBY_FALLOVER_M8               (1)
#define DERBY_FALLOVER_M9               (1)
#define MAX_DERBY_PLAYERS  				(20)
#define DERBY_WORLD                     (5050)
#define DERBY_TIME      				(180000)
#define DERBY_VOTING_TIME     			(15000)
#define DEFAULT_DERBY_TIME              (180)
#define DERBY_FALLOVER_CHECK_TIME   	(500)
#define DERBY_FREEZE_TIME 				(1750)
#define DERBY_FREEZE_INTERVAL 			(70)

// TDM
#define BG_WORLD                        (5048)
#define DEFAULT_BG_TIME                 (240)
#define BG_MAP1_WHILECAM                -512.8727, -121.8333, 97.8991
#define BG_MAP2_WHILECAM                623.2424,-2418.4194,9.4857
#define BG_MAP3_WHILECAM                -2156.0381, -233.5269, 51.2263
#define BG_MAP4_WHILECAM                738.9284, -2306.1187, 117.9879
#define BG_MAP5_WHILECAM                1757.4000, -3023.5654, 26.0215
#define BG_MAP6_WHILECAM                1984.9636, 4063.1216, 95.1510
#define BG_MAP1_CAMPOS                  -409.0511, -39.5656, 126.9736
#define BG_MAP2_CAMPOS                  620.6779, -2421.5466, 17.5673
#define BG_MAP3_CAMPOS                  -2134.0254, -191.9131, 57.6586
#define BG_MAP4_CAMPOS                  726.9686, -2300.6931, 118.7531
#define BG_MAP5_CAMPOS                  1784.0186, -2997.1704, 30.8122
#define BG_MAP6_CAMPOS                  2003.5298, 4065.2922, 95.3498
#define BG_MAP1_CAMLA                   -409.8650, -40.1510, 126.3882
#define BG_MAP2_CAMLA                   618.8812,-2419.9033,15.4312
#define BG_MAP3_CAMLA                   -2134.6445, -192.7050, 57.1735
#define BG_MAP4_CAMLA                   726.3855, -2301.5107, 118.2781
#define BG_MAP5_CAMLA                   1784.7314, -2997.8691, 30.3122
#define BG_MAP6_CAMLA                   2004.3510, 4064.7246, 95.0798
#define BG_TEAM1                        (1)
#define BG_TEAM2                        (2)
#define BG_VOTING                       (0)
#define BG_MAP1                         (1)
#define BG_MAP2                         (2)
#define BG_MAP3                         (3)
#define BG_MAP4                         (4)
#define BG_MAP5                         (5)
#define BG_MAP6                         (6)
#define BG_TIME                         (240000)
#define BG_VOTING_TIME                  (15000)

// Fallout
#define FALLOUT_OBJECTS                 (100)
#define FALLOUT_WORLD                   (121212)
#define DEFAULT_FALLOUT_TIME            (240)

// Deathmatch
#define SAWN_WORLD                      (42014)
#define DM_WORLD                        (541378)
#define DM_1                            (1)
#define DM_2                            (2)
#define DM_3                            (3)
#define DM_4                            (4)

// CNR
#define CNR_WORLD                       (20)
#define COLOR_CNR_COP 					0x1F75FEFF
#define COLOR_CNR_PRO_ROBBER            0xFF3200FF

// GWARS
#define MAX_GZONES						(63)
#define MAX_GZONES_PER_GANG             (15)
#define GZONE_SIZE                      (70.0)
#define COLOR_HOSTILE                   (0x95133499)
#define COLOR_FRIENDLY                  (0x33FF3399)
#define COLOR_NONE                      (0xFFFFFFAA)

// Houses
#define MAX_HOUSES 						(600)
#define MAX_PLAYER_HOUSES 				(5)
#define MAX_HOUSE_OBJECTS               (10)

// Businesses
#define MAX_BUSINESSES                  (700)
#define MAX_BUSINESS_LEVEL              (20)
#define MAX_PLAYER_BUSINESSES           (5)

// Misc
#define REAC_TIME              			(900000)
#define MAX_BANKS    			 		20
#define MAX_AMMUNATIONS    		 		20
#define MAX_BURGERSHOTS    		 		20
#define MAX_CLUCKINBELLS    	 		20
#define MAX_PIZZASTACKS 		 		20
#define MAX_TFS                         20
#define MAX_STORES 						(MAX_BANKS + MAX_AMMUNATIONS + MAX_BURGERSHOTS + MAX_CLUCKINBELLS + MAX_PIZZASTACKS + MAX_TFS)
#define COUNT_DOWN_TILL_RACE_START 		(21)
#define MAX_RACE_TIME 					(300)
#define RACE_MAX_CHECKPOINTS            (75)
#define RACE_MAX_PLAYERS 				(12)
#define Key(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define PreloadAnimLib(%1,%2)			ApplyAnimation(%1,%2,"NULL",0.0,0,0,0,0,0)
#define MINIGUN_WORLD                   (1268565)
#define MINIGUN2_WORLD                  (168566)
#define SNIPER_WORLD                    (157412)
#define ROCKETDM_WORLD                  (157411)
#define SERVERMSGS_TIME                 (850000)
#define MAX_PLAYER_PVS	                (8)

#define function:%1(%2) \
	forward public %1(%2); \
	public %1(%2)

#define ConvertTime(%0,%1,%2,%3,%4) \
	new \
	    Float:%0 = floatdiv(%1, 60000) \
	;\
	%2 = floatround(%0, floatround_tozero); \
	%3 = floatround(floatmul(%0 - %2, 60), floatround_tozero); \
	%4 = floatround(floatmul(floatmul(%0 - %2, 60) - %3, 1000), floatround_tozero)

// Colors
#define SEMI_TRANS                      (0x0A0A0A55)
#define SEMI_WHITE                      (0xFEFEFEC3)
#define PURPLE                  		(0x7800FF85)
#define NEF_GREEN                      	(0x2DFF00FF)
#define NEF_YELLOW                      (0xFFE600FF)
#define NEF_RED		                    (0xFF000FFF)
#define GREEN 							(0x0BDDC4FF)
#define GREEN2		 					(0x3BBD44FF)
#define RED        						(0xFF000FFF)
#define ORANGE 							(0xFF96008B)
#define BLUE 							(0x3793FAFF)
#define YELLOW 							(0xF2F853FF)
#define FYELLOW                         (0xFFE600FF)
#define LIGHT_YELLOW                    (0xFFFF0066)
#define WHITE 							(0xFEFEFEFF)
#define PINK 							(0xFF00EB80)
#define LILA 							(0xFF005FFF)
#define GREY 							(0x8C8C8CFF)
#define BROWN 							(0xA52A2AAA)
#define BLACK       					(0x0A0A0AFF)
#define ADMIN       					(0xF50000FF)
#define BESCH                           (0xE8D04CFF)
#define R_BESCH                         (0x00FFB4FF)
#define r_besch                         "{00FFB4}"
#define besch                           "{E8D04C}"
#define lila                            "{FF005F}"
#define vlila                           "{4764EF}"
#define lgreen                          "{88EE88}"
#define green2                          "{43D017}"
#define vgreen                          "{6EF83C}"
#define purple                          "{7800FF}"
#define green                           "{0BDDC4}"
#define yellow                          "{F2F853}"
#define fyellow                         "{FFE600}"
#define yellow_e                        "{DBED15}"
#define light_yellow                    "{FFFA00}"
#define white                           "{F0F0F0}"
#define blue							"{0087FF}"
#define orange                          "{FFA000}"
#define grey                            "{969696}"
#define red                             "{FF000F}"
#define lb_e 							"{15D4ED}"
#define nef_green                      	"{2DFF00}"
#define nef_yellow                      "{FFE600}"
#define nef_red                         "{FF000F}"
#define ngs_green                       "{2DFF00}"
#define ngs_blue                        "{0055FF}"

// old Stunt Evolution Colors
#define COLOR_WHITE 					0xFFFFFFFF
#define COLOR_WHITEP 					0xFFE4C4FF
#define COLOR_ORANGE   					0xDB881AFF
#define COLOR_ORANGE2					0xFF5000FF
#define COLOR_IVORY 					0xFFFF82FF
#define COLOR_BLUE						0x004BFFFF
#define COLOR_RCONBLUE      			0x0080FF99
#define COLOR_PURPLE 					0x5A00FFFF
#define COLOR_RED 						0xFF0000FF
#define COLOR_LIGHTGREEN 				0x00FF00FF
#define COLOR_YELLOW 					0xFFFF00FF
#define COLOR_YELLOW2 					0xF5DEB3FF
#define COLOR_LIGHTBLUE 				0x87CEFAFF
#define COLOR_PINK						0xEE82EEFF
#define COLOR_GOLD						0xFFD700FF
#define COLOR_FIREBRICK 				0xB22222FF
#define COLOR_GREEN 					0x3BBD44FF
#define COLOR_GREY						0xBABABAFF
#define COLOR_GREY2 					0x778899FF
#define COLOR_BROWN 					0x8B4513FF
#define COLOR_STEELBLUE 				0xB0C4DEFF
#define COLOR_SYSTEM 					0xEFEFF7FF
#define COLOR_CNR_COP       			0x1F75FEFF

#define RED_E 							"{FF0000}"
#define BLUE_E 							"{004BFF}"
#define PINK_E 							"{FFB6C1}"
#define YELLOW_E 						"{DBED15}"
#define LG_E 							"{00FF00}"
#define LB_E 							"{15D4ED}"
#define LB2_E							"{87CEFA}"
#define GREY_E 							"{BABABA}"
#define GREY2_E 						"{778899}"
#define WHITE_E 						"{FFFFFF}"
#define WHITEP_E 						"{FFE4C4}"
#define IVORY_E 						"{FFFF82}"
#define ORANGE_E 						"{DB881A}"
#define GREEN_E 						"{3BBD44}"
#define PURPLE_E 						"{5A00FF}"

// NEF 2.0 Colors
//#define X_RED                           ()
//#define X_RED_L                         ()
//#define x_red                           ""
#define x_red_l                         "{F64B4B}"

// Player
#define MAX_PLAYER_SCORE                (999999)
#define MAX_PLAYER_MONEY                (1000000000)
#define MAX_PLAYER_IP                   (16)
#define COOLDOWN_CMD_BAN                (125000)
#define COOLDOWN_CMD_AR                 (1000)
#define COOLDOWN_CMD_ROB                (10000)
#define COOLDOWN_CMD_BUY                (2000)
#define COOLDOWN_CMD_PBUY               (2000)
#define COOLDOWN_CMD_LOCK               (1000)
#define COOLDOWN_CMD_GIVECASH           (120000)
#define COOLDOWN_CMD_REPORT             (30000)
#define COOLDOWN_CMD_SELL               (2000)
#define COOLDOWN_CMD_PSELL              (2000)
#define COOLDOWN_CMD_CHANGEPASS         (30000)
#define COOLDOWN_CMD_PM                 (3000)
#define COOLDOWN_CMD_HITMAN             (30000)
#define COOLDOWN_CMD_GINVITE            (60000)
#define COOLDOWN_CMD_GKICK              (8000)
#define COOLDOWN_CMD_GCREATE            (5000)
#define COOLDOWN_CMD                  	(900)
#define COOLDOWN_CHAT                   (1000)
#define COOLDOWN_CMD_HAREFILL           (120000)
#define COOLDOWN_CMD_VIPLI              (15000)
#define COOLDOWN_CMD_CD                 (60000)
#define COOLDOWN_BIKEC                  (300000)
#define COOLDOWN_CMD_MEDKIT             (120000)
#define COOLDOWN_VEHICLE                (220)
#define COOLDOWN_PICKUP_HEALTH          (60000)
#define COOLDOWN_PICKUP_ARMOR           (60000)

// Log
enum E_LOG_LEVEL
{
	LOG_INIT,
	LOG_EXIT,
	LOG_ONLINE,
	LOG_NET,
	LOG_PLAYER,
	LOG_WORLD,
	LOG_FAIL,
	LOG_SUSPECT
};

// Dialogs
enum
{
	EXIT_NONE,
	EXIT_LOGGED,
	EXIT_FIRST_SPAWNED
};

enum (+= 56)
{
    DIALOG_RACE_RACESTARTPOS,
    DIALOG_RACE_CHECKPOINTS,
    DIALOG_RACE_RACERDY,
    DIALOG_RACE_RACEVEH,
    DIALOG_RACE_RACEVW,
    DIALOG_RACE_RACETYPE,
    DIALOG_RECOVERY_EMAIL,
    REGISTER_DIALOG,
    LOGIN_DIALOG,
    TELE_DIALOG,
    WEAPON_DIALOG,
    STREAM_DIALOG,
    ACHS_DIALOG,
    LIFT_DIALOG,
    BANK_DIALOG,
    SERVERSTATS_DIALOG,
    VEHICLE_DIALOG,
    TOY_DIALOG,
    CARBUY_DIALOG,
    VEHICLE_PLATE_DIALOG,
    CUSTOM_PLATE_DIALOG,
    VMENU_DIALOG,
    NEON_DIALOG,
    GMENU_DIALOG,
    BGVOTING_DIALOG,
    DERBY_VOTING_DIALOG,
    HELP_DIALOG,
    ANIMS_DIALOG,
    STATS_DIALOG,
    WANTEDS_DIALOG,
    TOPLIST_DIALOG,
    ADMINS_DIALOG,
    CMDS_DIALOG,
    MOST_DEATHS_DIALOG,
	MOST_KILLS_DIALOG,
	FIRST_SPAWN_DIALOG,
	MOST_PLAYING_TIME_DIALOG,
	RICHLIST_DIALOG,
	SCORE_DIALOG,
	GANGS_DIALOG,
	HOUSE_UPGRADE_DIALOG,
	HOUSE_MENU_DIALOG,
	DIALOG_BUSINESS,
	DIALOG_UPGRADE_BUSINESS,
	DIALOG_SET_BUSINESS_TYPE,
	SETTINGS_DIALOG,
	GANG_KICK_DIALOG,
	CLOSE_GANG_DIALOG,
	GANG_SET_RANK_DIALOG,
	RULES_DIALOG,
    TOP_GANGS_DIALOG,
    NAME_CHANGE_DIALOG,
    HAREFILL_DIALOG,
    VCONTROL_DIALOG,
    VIP_DIALOG,
    ADMIN_CMD_DIALOG,
    LABEL_DIALOG,
    COLOR_DIALOG,
    ANN2_DIALOG,
    REFIL_DIALOG,
    PV_SLOT_SELECT_DIALOG,
    CM_DIALOG,
    CNR_DIALOG,
    COPS_REFILL,
    ROBBER_REFILL,
    NO_CREDITS_DIALOG,
    DIALOG_DUEL,
    NO_DIALOG_ID
};

// MySQL
enum
{
   	THREAD_GANG_EXIST,
  	THREAD_CREATE_GANG,
  	THREAD_FETCH_GANG_MEMBER_NAMES,
  	THREAD_FETCH_GANG_INFO,
  	THREAD_KICK_FROM_GANG,
  	THREAD_KICK_FROM_GANG_2,
 	THREAD_ASSIGN_RANK,
	THREAD_ASSIGN_RANK_2,
  	THREAD_GANG_DESTROY,
  	THREAD_RACE_TOPLIST,
  	THREAD_RACE_FINISH,
  	THREAD_RACE_LATEST
};

enum (+= 10)
{
	ACCOUNT_REQUEST_BANNED,
	ACCOUNT_REQUEST_IP_BANNED,
	ACCOUNT_REQUEST_EXIST,
	ACCOUNT_REQUEST_AUTO_LOGIN,
	ACCOUNT_REQUST_VERIFY_REGISTER,
	ACCOUNT_REQUEST_LOAD,
	ACCOUNT_REQUEST_GANG_LOAD,
	ACCOUNT_REQUEST_ACHS_LOAD,
	ACCOUNT_REQUEST_TOYS_LOAD,
	ACCOUNT_REQUEST_PVS_LOAD,
    ACCOUNT_REQUEST_LOGIN
};

enum
{
	REGISTER_CONNECT,
	REGISTER_ONLINE
};

// Player Team
enum
{
	gNONE,
	gFREEROAM,
	DERBY,
 	gRACE,
	gBG_TEAM1,
	gBG_TEAM2,
	gBG_VOTING,
	MINIGUN,
	MINIGUN2,
	SNIPER,
	ROCKETDM,
	JETPACKDM,
	BG,
	DM,
	WAR,
	CNR,
	HOUSE,
	BUYCAR,
	gDUEL,
	GUNGAME,
	FALLOUT,
	gBUILDRACE,
	STORE,
	SPEC,
	VIPL,
	JAIL,
	gSAWN
};

// Player related
enum e_gang_pos
{
	E_gang_pos_name[16]
};

enum E_STAFF_LEVELS
{
	e_level,
	e_rank[32],
	e_department[32],
	e_color[10]
};

enum BOOST:(<<= 1)
{
	BOOST_MONEY_x2 = 1,
	BOOST_MONEY_x3,
	BOOST_SCORE_x2,
	BOOST_SCORE_x3,
	BOOST_MASTER
};

enum SUSPECT:(<<= 1)
{
	SUSPECT_VALID_ARMOR = 1,
	SUSPECT_PROAIM,
	SUSPECT_CRASHER_OPWS,
	SUSPECT_CRASHER_OVM,
	SUSPECT_FAKE_PACKETS,
	SUSPECT_AIMBOT,
	SUSPECT_WEAPON,
	SUSPECT_IMMUNE
};

enum CNR_FRACTION (<<= 1)
{
	CNR_NONE,
	CNR_COP = 1,
	CNR_ROBBER,
	CNR_PRO_ROBBER,
	CNR_ARMY,
	CNR_SWAT
};

enum E_PLAYER_DATA // Prefixes: i = Integer, s = String, b = bool, f = Float, p = Pointer, t3d = 3DTextLabel, g_ = Global, tick = tickcounts, t = Timer, bw = bitwise
{
	/* ORM */
	ORM:e_ormid,
	
	/* PLAYER DATA */
	e_accountid,
	e_name[MAX_PLAYER_NAME + 1],
	e_ip[MAX_PLAYER_IP + 1],
	e_email[26],
	e_level,
	e_score,
	e_money,
	e_bank,
	e_color,
	e_kills,
	e_deaths,
	e_time,
	e_skin,
	e_payday,
	e_reaction,
	e_mathwins,
	e_houses,
	e_gangid,
	e_gangrank,
	e_addpvslots,
	e_addtoyslots,
	e_addhouseslots,
	e_addbizzslots,
	e_addhouseitemslots,
	e_derbywins,
	e_racewins,
	e_tdmwins,
	e_falloutwins,
	e_gungamewins,
	e_eventwins,
	e_wanteds,
	e_vip,
	e_credits,
	e_medkits,
	e_regdate,
	e_lastlogin,
	e_lastnc,
	e_skinsave,

	/* INTERNAL */
    tickLastAr,
	tickLastShot,
	tickLastRob,
	tickVehicleEnterTime,
	tickLastGiveCash,
	tickLastMedkit,
	tickLastVIPLInv,
	tickLastRefill,
	tickLastReport,
	tickLastHitman,
	tickLastGInvite,
	tickLastGKick,
	tickLastGCreate,
	tickLastLocked,
	tickLastBIKEC,
  	tickLastBuy,
  	tickLastPBuy,
  	tickLastSell,
  	tickLastPSell,
  	tickLastPW,
  	tickLastChat,
  	tickLastPM,
  	tickPlayerUpdate,
  	tickPlayerUpdateCalls,
  	tickPlayerUpdateCalls2,
  	tickLastCD,
    tickJoin_bmx,
    tickLastBan,
    tickLastPickup[2],
    bool:bHideGC,
	bool:bAchsLoad,
	bool:bVIPLInv,
	bool:bIsDead,
	bool:bShowToys,
	bool:bAllowPlayerTeleport,
	bool:bFrozen,
	bool:bAllowSpawn,
 	bool:bDuty,
	bool:bMuted,
 	bool:bSpeedBoost,
 	bool:bSuperJump,
	bool:bOnlineAdmin,
 	bool:bGangInvite,
 	bool:bFalloutLost,
	bool:bStateSaved,
	bool:bHasCustomSpawn,
	bool:bFirstSpawn,
	bool:bTextdraws,
	bool:bRainbow,
	bool:bVehicleInfo,
	bool:bRampActive,
	bool:bCaps,
	bool:bGod,
	bool:bGWarMode,
	bool:bLoadMap,
	bool:bOpenSeason,
	bool:bLogged,
	bool:bSpeedo,
	bool:bDerbyWinner,
	bool:bDerbyAFK,
	bool:bDerbyHealthBarShowing,
	Float:fDerbyVehicleHealth,
	Float:fDerbyVehicleDamage,
	Float:fDerbyCDamage,
	iProAimCount,
	pPreviewVehicle,
	iKickBanIssued,
	iCoolDownCommand,
	iCoolDownChat,
	iLastDeathTime,
	iDeathCountThreshold,
	PlayerText3D:t3dDerbyVehicleLabel,
	pDerbyVehicle,
	pTrailerVehicle,
	pVehicle,
	iJailTime,
	CNR_FRACTION:bwCNRFraction,
	iRobberyCount,
	tRobbery,
	tLoadMap,
	tDerbyHealthBar,
	tRainbow,
	tTDhandle,
	tMedkit,
	BOOST:Boost,
	SUSPECT:bwSuspect,
	BoostDeplete,
	Float:fOldPos[4],
	HouseSlotSelected,
	BusinessIdSelected,
	DrawnNumber,
	ExitType,
	iMedkitTime,
	GCPlayer,
	GCNameHash,
	GCOffer,
	GCPrice,
	VIPPlayer,
	VIPNameHash,
	VIPOffer,
	VehicleSpamViolation,
	ConnectTime,
	Warnings,
	RankSelected,
	HitmanHit,
	DmgMsg[10],
	PlayerText:DmgBox[2],
	Text3D:AdminDutyLabel,
	Text3D:VIPLabel,
	iLastChat,
	tMute,
 	TmpGangID,
	Text3D:GangLabel,
	GangKickMem[MAX_PLAYER_NAME+1],
	GangAssignRank[MAX_PLAYER_NAME+1],
 	GangName[21],
 	GangTag[5],
 	HouseIntSelected,
	SpecID,
	Float:SpecX,
	Float:SpecY,
	Float:SpecZ,
	Float:SpecA,
	Float:CSpawnX,
	Float:CSpawnY,
	Float:CSpawnZ,
	Float:CSpawnA,
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sA,
	toy_selected,
	houseobj_selected,
	DuelWeapon,
	DuelLocation,
	DuelRequest,
    DuelRequestRecv
};

enum E_PLAYER_ACH_DATA
{
    e_ach_styler, // Buy a toy (/toy)
	e_ach_grimreaper, // Make 300 Kills
	e_ach_masskiller, // Get a 30 Killstreak
	e_ach_eliteracer, // win 10 races
	e_ach_toofast, // win 10 reaction tests
	e_ach_scorewhore, // get 2000 score
	e_ach_destroyer, // win 20 derbys
	e_ach_restinpeace, // die 50 times
	e_ach_silentkiller, // kill someone with a knife
    e_ach_oneshot2kills, // win 10 gungames
    e_ach_deepimpact, // win 10 fallouts
	e_ach_skydiver, // win /skydive and /skydive2 in a row
	e_ach_biker, // win /bikec
	e_ach_bmxmaster, // win /bmx
	e_ach_settled, // buy a house
	e_ach_biocalc, // Solve 40 math question
	e_ach_mademan // rise a bizz to level 20
};

enum e_credits_matrix
{
	E_item_name[32],
	E_item_credits,
	E_item_quantity,
	E_item_duration[32],
	E_item_description[255]
};

enum e_top_wanteds
{
	E_playerid,
	E_wanteds
};

enum e_top_richlist
{
	E_playerid,
	E_money
};

enum e_top_score
{
	E_playerid,
	E_pscore
};

enum e_top_kills
{
	E_playerid,
	E_kills
};

enum e_top_deaths
{
	E_playerid,
	E_deaths
};

enum e_top_time
{
	E_playerid,
	E_time
};

enum e_top_reacts
{
	E_playerid,
	E_test
};

enum e_top_derby
{
	E_playerid,
	E_derby
};

enum e_top_fallout
{
	E_playerid,
	E_fallout
};

enum e_top_race
{
	E_playerid,
	E_race
};

enum e_top_gungame
{
	E_playerid,
	E_gungame
};

enum E_TOY_DATA
{
	toy_model,
	toy_bone,
	Float:toy_x,
	Float:toy_y,
	Float:toy_z,
	Float:toy_rx,
	Float:toy_ry,
	Float:toy_rz,
	Float:toy_sx,
	Float:toy_sy,
	Float:toy_sz
};

enum E_PV_DATA
{
	/* DATA */
	e_model,
	e_plate[13],
	e_paintjob,
	e_color1,
	e_color2,
	e_mods[17],
	
	/* INTERNAL */
	e_vehicleid,
	Text3D:e_labelid,
	e_neon1,
	e_neon2
};

// Server related
enum SAZONE_MAIN
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

enum E_CAR_SHOP
{
    e_pickup,
    e_mapicon,
    Text3D:e_3dlabel
};

enum E_GZONE_DATA
{
	/* ORM */
	ORM:e_ormid,

	/* DATA */
	e_id,
	e_zname[41],
	Float:e_pos[3],
	e_localgang,
	e_locked,
	
	/* INTERNAL */
	e_timeleft,
	bool:e_underattack,
	e_attacker,
	e_defender,
	e_iconid,
	Text3D:e_labelid,
	Text:e_txtid,
	e_pickupid,
	e_checkid,
	e_zoneid,
	e_areaid
};

enum E_HOUSE_DATA
{
	e_id,
	Owner[25],
	Float:e_x,
	Float:e_y,
	Float:e_z,
	interior,
	price,
	e_score,
	Text3D:e_labelid,
	sold,
	locked,
	pickid,
	e_iconid,
	E_Obj_Model[MAX_HOUSE_OBJECTS],
	E_Obj_ObjectID[MAX_HOUSE_OBJECTS],
	Text3D:E_Obj_Label[MAX_HOUSE_OBJECTS],
	date
};

enum E_BUSINESS_TYPES
{
    BUSINESS_LOANSHARKS,
	BUSINESS_ROBBERY,
	BUSINESS_SMUGGLING,
	BUSINESS_NUDE,
    BUSINESS_METHLAB
};

enum E_BUSINESS_DATA
{
	/* ORM */
	ORM:e_ormid,
	
	/* DATA */
	e_id,
	e_owner[MAX_PLAYER_NAME + 1],
	Float:e_pos[3],
	E_BUSINESS_TYPES:e_type,
	e_level,
	e_sold,
	e_date,
	
	/* INTERNAL */
	Text3D:e_label_id,
	e_icon_id,
	e_pickup_id
};

enum e_buss_matrix
{
	E_blevel,
	E_bupgradeprice,
	E_bearnings
};

enum e_house_type
{
	interior,
	Float:house_x,
	Float:house_y,
	Float:house_z,
	intname[32],
	price
};

enum e_pv_matrix
{
	pv_category,
	pv_modelid,
	pv_price,
	pv_modelname[30]
};

enum e_derby_map1_data
{
	Float:m1sX,
	Float:m1sY,
	Float:m1sZ,
	Float:m1sA,
	bool:m1sUsed
};
enum e_derby_map2_data
{
	Float:m2sX,
	Float:m2sY,
	Float:m2sZ,
	Float:m2sA,
	bool:m2sUsed
};
enum e_derby_map3_data
{
	Float:m3sX,
	Float:m3sY,
	Float:m3sZ,
	Float:m3sA,
	bool:m3sUsed
};
enum e_derby_map4_data
{
	Float:m4sX,
	Float:m4sY,
	Float:m4sZ,
	Float:m4sA,
	bool:m4sUsed
};
enum e_derby_map5_data
{
	Float:m5sX,
	Float:m5sY,
	Float:m5sZ,
	Float:m5sA,
	bool:m5sUsed
};
enum e_derby_map6_data
{
	Float:m6sX,
	Float:m6sY,
	Float:m6sZ,
	Float:m6sA,
	bool:m6sUsed
};
enum e_derby_map7_data
{
	Float:m7sX,
	Float:m7sY,
	Float:m7sZ,
	Float:m7sA,
	bool:m7sUsed
};
enum e_derby_map8_data
{
	Float:m8sX,
	Float:m8sY,
	Float:m8sZ,
	Float:m8sA,
	bool:m8sUsed
};
enum e_derby_map9_data
{
	Float:m9sX,
	Float:m9sY,
	Float:m9sZ,
	Float:m9sA,
	bool:m9sUsed
};

enum E_FALLOUT_DATA
{
	I_tShake[FALLOUT_OBJECTS],
	I_iNumberout[FALLOUT_OBJECTS],
	I_iObject[FALLOUT_OBJECTS],
	I_iShake[FALLOUT_OBJECTS],
	I_tSolarfall,
	I_tCountdown,
	I_tLoseGame,
	I_iCount,
	bool:I_iFirstShake
};

enum
{
	e_Fallout_Inactive,
	e_Fallout_Startup,
	e_Fallout_Running,
	e_Fallout_Finish
};

enum e_gungame_data
{
	level,
	bool:dead,
	bool:pw
};

enum e_GunGame
{
	GG_iPlayer,
	GG_iLevel
};

enum e_race_position
{
	RP_iPlayer,
	RP_iValue
};

enum e_race_data
{
	E_vModel,
	E_rType,
	E_rWorld,
	E_rCPs,
	E_DeployTime
};

enum
{
	RaceStatus_Inactive,
	RaceStatus_StandBy,
	RaceStatus_StartUp,
	RaceStatus_Active
};

enum e_firework
{
    FireCracker,
    Firerocket1,
    Firerocket2,
    Crackerroll,
    Fountain1,
    Fountain2,
    Fountain3,
    RocketB,
    DrawDistance,
};

// Global Variables
static const g_aSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

static const g_szBusinessTypes[5][] =
{
	"Loan Sharks",
	"Robbery",
	"Smuggling",
	"Prostitution",
	"Meth Lab"
};

#if WINTER_EDITION == true
static Float:g_aCowCars[5][4] =
{
    {1082.0734, -1794.0173, 13.6664, 1.5867},
    {1093.6932, -1780.2679, 13.5951, 90.2608},
    {1051.3721, -1763.8722, 13.6411, 91.5142},
    {1051.2327, -1770.2203, 13.6252, 117.5446},
    {1014.6099, -1859.9781, 13.0385, 188.3820}
};
#endif

static const stock GangCarLevels[7][2] =
{
	{567, 500},
	{517, 1000},
	{522, 2500},
	{589, 4000},
	{560, 6500},
	{506, 10000},
	{528, 25000}
};

new Derby_Map1Spawns[MAX_DERBY_PLAYERS][e_derby_map1_data] =
{
	{-3957.3640, 969.7915, 65.6281, 235.3673, false},
	{-3942.8943, 938.6829, 65.6085, 359.7384, false},
	{-3905.7332, 922.6584, 52.5285, 268.2442, false},
	{-3878.5010, 922.4542, 52.5285, 91.23260, false},
	{-3862.9128, 927.0121, 52.5081, 323.7048, false},
	{-3846.5625, 931.5337, 52.5081, 36.39880, false},
	{-3847.0959, 946.5208, 52.5281, 71.17910, false},
	{-3862.3210, 960.0160, 52.5281, 244.1173, false},
	{-3845.7188, 989.4063, 52.5285, 272.0277, false},
	{-3886.8899, 989.3755, 52.5285, 89.35270, false},
	{-3890.9119, 969.2299, 52.5285, 177.0868, false},
	{-3893.9905, 949.9914, 52.5285, 131.3398, false},
	{-3912.6133, 948.6409, 52.5285, 91.54600, false},
	{-3934.2073, 961.6917, 52.5085, 1.931900, false},
	{-3929.2332, 975.3268, 40.8805, 268.2678, false},
	{-3941.8633, 957.9515, 36.3281, 39.84560, false},
	{-3974.4358, 959.5692, 36.3285, 118.8063, false},
	{-4013.4832, 925.3674, 52.5285, 356.6052, false},
	{-4011.8496, 954.6926, 52.5285, 268.5577, false},
	{-3993.0066, 978.3261, 52.5085, 107.5262, false}
};

new Derby_Map2Spawns[MAX_DERBY_PLAYERS][e_derby_map2_data] =
{
	{3067.4111, 556.9147, 40.7377, 147.9308, false},
	{3050.3350, 531.4977, 40.7381, 147.9308, false},
	{3047.3203, 557.5518, 40.6794, 144.7741, false},
	{3073.9629, 533.7264, 40.9304, 326.5092, false},
	{3030.9526, 501.8501, 40.8286, 145.4242, false},
	{2982.2078, 465.6787, 10.7985, 89.65030, false},
	{2951.7710, 465.3126, 10.7985, 89.65030, false},
	{2943.5374, 454.8485, 10.7985, 181.7712, false},
	{2928.1584, 445.1630, 13.0385, 145.1108, false},
	{2916.7087, 429.5787, 13.0385, 150.1242, false},
	{2930.4187, 408.3071, 17.5582, 234.4117, false},
	{3011.3757, 448.3677, 16.2772, 265.1187, false},
	{3032.5698, 434.8050, 21.3385, 359.4096, false},
	{2991.1526, 439.6288, 39.2401, 358.7829, false},
	{3036.7063, 510.8661, 4.36850, 177.0712, false},
	{3036.4888, 484.0915, 4.36850, 177.0712, false},
	{3009.2834, 478.9747, 4.38850, 90.27710, false},
	{2952.6309, 501.4793, 22.0385, 90.27710, false},
	{2920.8032, 516.9267, 22.0285, 355.9628, false},
	{2946.0103, 526.7934, 22.0185, 86.80700, false}
};

new Derby_Map3Spawns[MAX_DERBY_PLAYERS][e_derby_map3_data] =
{
	{246.3290, 1714.4462, 352.5285, 178.5039, false},
	{222.8298, 1714.9265, 352.5285, 90.14300, false},
	{185.5551, 1714.3876, 343.5285, 181.9506, false},
	{186.1509, 1696.8904, 343.5285, 181.9506, false},
	{186.4787, 1669.7019, 343.5285, 7.445600, false},
	{208.2734, 1657.8409, 352.5285, 178.1905, false},
	{194.5793, 1636.9927, 354.3859, 89.51640, false},
	{186.6167, 1663.1619, 343.5285, 356.8490, false},
	{172.9417, 1637.2440, 357.0097, 180.6972, false},
	{173.0500, 1618.4937, 357.0097, 279.0848, false},
	{210.4522, 1618.9490, 361.8463, 83.32920, false},
	{241.8557, 1617.7828, 363.6497, 300.1908, false},
	{246.1263, 1631.1395, 363.6497, 357.5313, false},
	{246.6167, 1674.6024, 352.5485, 357.5313, false},
	{233.8339, 1689.3091, 352.5285, 89.96550, false},
	{208.1478, 1680.4999, 352.5085, 176.8159, false},
	{226.0559, 1666.7491, 355.5157, 178.3825, false},
	{226.4928, 1635.9159, 361.0836, 357.6671, false},
	{229.3643, 1715.0703, 352.5285, 90.70460, false},
	{170.1862, 1689.3947, 352.5285, 273.0662, false}
};

new Derby_Map4Spawns[MAX_DERBY_PLAYERS][e_derby_map4_data] =
{
	{1487.6512, -1755.2731, 33.4297, 262.8351, false},
	{1506.7178, -1760.9492, 33.4297, 268.7939, false},
	{1511.1926, -1771.6134, 33.4297, 267.3918, false},
	{1532.4257, -1764.9232, 33.4297, 179.4124, false},
	{1542.7130, -1779.0228, 33.4297, 179.0619, false},
	{1532.5718, -1792.3685, 33.4297, 169.9484, false},
	{1519.6860, -1817.5404, 33.4243, 87.9278, false},
	{1489.2483, -1816.4391, 33.4243, 87.9278, false},
	{1470.1770, -1812.2526, 33.4243, 87.9278, false},
	{1456.9327, -1818.6555, 33.4243, 87.9278, false},
	{1441.1545, -1811.5428, 33.4243, 67.5979, false},
	{1425.7040, -1812.7531, 33.4297, 1.3505, false},
	{1418.1497, -1796.1854, 33.4297, 353.2886, false},
	{1429.6094, -1786.4208, 33.4297, 347.6803, false},
	{1425.8998, -1764.4401, 33.4297, 275.1236, false},
	{1444.4971, -1767.0941, 33.4297, 275.1236, false},
	{1459.3033, -1758.2831, 33.4297, 288.0927, false},
	{1478.1750, -1755.6753, 33.4297, 275.4741, false},
	{1457.6566, -1805.7548, 33.4243, 88.9793, false},
	{1502.2307, -1805.2515, 33.4243, 86.8763, false}
};

new Derby_Map5Spawns[MAX_DERBY_PLAYERS][e_derby_map5_data] =
{
	{-1951.3622, -924.9825, 41.5739, 0.4935, false},
	{-1951.3545, -907.4986, 41.3420, 0.8532, false},
	{-1951.3573, -861.6216, 41.4833, 0.8344, false},
	{-1950.2805, -823.5054, 41.1760, 1.0857, false},
	{-1950.8802, -802.3750, 41.2701, 2.0072, false},
	{-1950.5498, -782.8512, 41.2198, 358.4045, false},
	{-1950.5662, -770.9384, 41.2223, 2.5244, false},
	{-1950.4987, -752.6329, 41.2115, 359.5575, false},
	{-1961.9818, -754.6239, 40.4814, 180.7448, false},
	{-1961.7175, -763.6168, 40.5629, 182.1786, false},
	{-1968.2728, -768.7271, 39.3264, 90.9983, false},
	{-1960.7704, -791.6741, 41.5325, 177.1483, false},
	{-1960.9248, -820.2233, 40.7711, 179.9023, false},
	{-1968.1675, -827.4709, 39.3269, 90.9073, false},
	{-1960.7595, -858.5953, 41.5654, 179.5008, false},
	{-1960.5577, -878.2072, 40.8663, 182.2004, false},
	{-1960.8175, -897.6044, 40.7994, 179.1699, false},
	{-1968.1946, -902.1904, 39.3299, 83.8091, false},
	{-1959.5391, -928.6652, 41.3451, 177.8511, false},
	{-1960.3411, -951.4661, 40.9212, 180.5387, false}
};

new Derby_Map6Spawns[MAX_DERBY_PLAYERS][e_derby_map6_data] =
{
	{3873.0828,-75.0219,2.3334,84.3515, false},
	{3872.4290,-55.6568,2.3383,112.0350, false},
	{3867.7134,-42.0787,2.3380,138.8138, false},
	{3853.3616,-29.6537,2.3480,154.4953, false},
	{3843.4478,-21.2739,2.3483,145.6348, false},
	{3825.0579,-17.4116,2.3482,188.3425, false},
	{3798.9045,-36.7079,2.3488,239.5291, false},
	{3782.3035,-51.6286,2.3867,257.4987, false},
	{3782.2983,-66.7195,2.3882,267.7532, false},
	{3782.0959,-91.3813,2.3687,296.6480, false},
	{3794.5774,-106.9509,2.3785,222.5016, false},
	{3811.3721,-116.6408,2.3781,249.0273, false},
	{3825.9817,-130.9541,2.3697,1.4488, false},
	{3844.4924,-124.6570,2.3294,29.5070, false},
	{3856.8303,-123.1470,2.3281,42.7229, false},
	{3875.8503,-97.7704,2.3264,61.1305, false},
	{3880.7490,-84.9508,2.3166,39.3552, false},
	{3850.8860,-74.6005,2.3381,77.7126, false},
	{3822.9360,-91.4808,2.3782,123.4223, false},
	{3812.7500,-73.1342,2.3881,0.9317, false}
};

new Derby_Map7Spawns[MAX_DERBY_PLAYERS][e_derby_map7_data] =
{
	{3960.6386, -1944.5787, 18.4141, 358.5083, false},
	{3980.8674, -1929.7977, 18.4195, 268.1833, false},
	{4022.4838, -1930.0488, 18.4187, 269.7169, false},
	{4045.8247, -1907.4794, 18.4188, 357.8791, false},
	{4030.3295, -1887.8428, 18.4189, 91.7818, false},
	{4016.0778, -1865.5898, 18.4192, 358.0066, false},
	{4035.0522, -1852.3995, 18.4187, 274.9741, false},
	{4061.4140, -1861.6960, 18.4195, 182.9152, false},
	{4021.7668, -1860.1213, 2.3192, 358.7831, false},
	{4010.0903, -1839.4732, 2.3187, 89.5712, false},
	{4000.9663, -1855.6241, 2.3181, 179.8362, false},
	{4000.9157, -1889.3894, 2.3193, 179.4432, false},
	{4002.6320, -1934.3292, 2.3212, 270.4774, false},
	{4055.7233, -1934.5892, 2.3187, 269.3928, false},
	{4078.1877, -1958.6982, 11.8245, 181.6002, false},
	{4075.5852, -1981.8278, 18.5128, 90.4912, false},
	{3970.4362, -1887.3116, 34.5187, 269.4546, false},
	{4055.2961, -1839.7485, 2.3198, 269.8952, false},
	{3987.2399, -1877.1705, 2.3187, 29.7201, false},
	{3949.7727, -1876.2434, 2.3193, 120.9179, false}
};

new Derby_Map8Spawns[MAX_DERBY_PLAYERS][e_derby_map8_data] =
{
	{2877.0895, -3516.3852, 3.8995, 3.6558, false},
	{2876.3090, -3489.0278, 3.7439, 359.1965, false},
	{2862.3476, -3455.2319, 3.7448, 87.9087, false},
	{2822.9160, -3455.1120, 3.7435, 90.5475, false},
	{2810.1420, -3470.2883, 3.7450, 184.3539, false},
	{2811.4875, -3500.8076, 3.7440, 181.9071, false},
	{2837.4123, -3532.7248, 3.7446, 273.5574, false},
	{2914.0532, -3521.1247, 3.7449, 276.6305, false},
	{2939.2919, -3483.3242, 3.7434, 359.0291, false},
	{2810.0517, -3533.5646, 3.6433, 179.0697, false},
	{2806.7663, -3556.5236, 3.6172, 163.5164, false},
	{2823.8247, -3620.4379, 3.6288, 196.9598, false},
	{2874.1066, -3651.7585, 3.6459, 292.5925, false},
	{2897.0979, -3629.5671, 3.6586, 303.1914, false},
	{2929.5373, -3612.1718, 4.0115, 298.3864, false},
	{2931.2968, -3570.4431, 4.4742, 55.9420, false},
	{2903.1877, -3607.6376, 3.7671, 26.7458, false},
	{2922.8671, -3455.3676, 3.7374, 269.1679, false},
	{2940.0532, -3483.3977, 3.7377, 179.7474, false},
	{2906.5222, -3545.7534, 4.8501, 43.4955, false}
};

new Derby_Map9Spawns[MAX_DERBY_PLAYERS][e_derby_map9_data] =
{
	{4564.8662, -1780.7690, 3.4892, 113.5751, false},
	{4537.0317, -1773.2226, 3.5079, 17.6972, false},
	{4532.4731, -1730.4630, 3.5094, 1.5997, false},
	{4528.1772, -1693.3404, 3.5067, 9.8237, false},
	{4509.5317, -1651.5343, 3.5063, 36.9094, false},
	{4476.1191, -1650.5437, 3.5087, 183.0121, false},
	{4478.9091, -1687.5764, 3.5100, 183.2693, false},
	{4479.6303, -1734.8458, 3.5113, 179.2202, false},
	{4496.7563, -1803.1461, 3.5070, 302.3572, false},
	{4553.0380, -1734.8894, 3.5056, 270.5491, false},
	{4539.4926, -1761.5322, 18.3019, 7.2416, false},
	{4525.7851, -1701.7504, 18.2979, 7.8820, false},
	{4496.1748, -1657.7183, 18.3030, 129.2133, false},
	{4543.4536, -1796.9326, 18.3018, 187.9175, false},
	{4505.9531, -1744.8052, 3.5002, 269.9085, false},
	{4515.0185, -1760.6062, 3.5032, 216.3052, false},
	{4565.7241, -1689.1856, 3.4987, 59.0123, false},
	{4540.9121, -1656.6251, 3.5087, 1.8054, false},
	{4558.3378, -1645.2890, 3.4925, 145.0575, false},
	{4507.0502, -1796.4394, 3.5054, 120.5433, false}
};

static const g_szGangRanks[8][e_gang_pos] =
{
	{"None"},
	{"Junior Member"},
	{"Member"},
	{"Senior Member"},
	{"Advisor"},
	{"Leader"},
	{"Co-Founder"},
	{"Gang Founder"}
};

static const g_szStaffLevelNames[MAX_ADMIN_LEVEL + 1][E_STAFF_LEVELS] =
{
	{0, "Player", "Players", "{FFFFFF}"},
	{1, "Junior Administrator", "Junior Administration", "{1607a1}"},
	{2, "General Administrator", "General Administration", "{0e5c0b}"},
	{3, "Senior Administrator", "Senior Administration", "{DB5F70}"},
	{4, "Head Administrator", "Head Administration", "{ae2a2a}"},
    {5, "Executive Administrator", "Executive Administration", "{0069ff}"}
};

static const g_szCustomCarCategories[11][] =
{
	/*0*/{"Lowriders"},
	/*1*/{"Sport Vehicles"},
 	/*2*/{"Saloons"},
 	/*3*/{"Bikes"},
 	/*4*/{"Convertibles"},
 	/*5*/{"Off Road"},
 	/*6*/{"Industrial"},
 	/*7*/{"Unique Vehicles"},
 	/*8*/{""nef_yellow"VIP Vehicles"},
 	/*9*/{"Public Service"},
 	/*10*/{"Aircraft"}
};

static const g_aBusinessLevelMatrix[21][e_buss_matrix] =
{
	{1, 0, 1000},
	{2, 5000, 1250},
	{3, 15000, 1550},
	{4, 38000, 1750},
	{5, 50000, 2350},
	{6, 70000, 3000},
	{7, 89950, 3800},
	{8, 100000, 4950},
	{9, 125000, 6350},
	{10, 180000, 8000},
	{11, 210000, 9850},
	{12, 250000, 11500},
	{13, 300000, 12950},
	{14, 350000, 14500},
	{14, 420000, 17450},
	{15, 500000, 19700},
	{16, 650000, 20850},
	{17, 800000, 22600},
	{18, 1000000, 24000},
	{19, 1400000, 27000},
	{20, 2000000, 30000}
};

static const g_aPVMatrix[101][e_pv_matrix] =
{
	{0, 536, 595000, "Blade"},
	{0, 575, 390000, "Broadway"},
	{0, 534, 500000, "Remington"},
	{0, 567, 530000, "Savanna"},
	{0, 535, 390000, "Slamvan"},
	{0, 566, 300000, "Tahoma"},
	{0, 576, 399000, "Tornado"},
	{0, 412, 500000, "Voodoo"},
	{1, 602, 400000, "Alpha"},
	{1, 429, 600000, "Banshee"},
	{1, 402, 450000, "Buffalo"},
	{1, 541, 950000, "Bullet"},
	{1, 415, 498000, "Cheetah"},
	{1, 589, 295000, "Club"},
	{1, 587, 310000, "Euros"},
	{1, 411, 1250000, "Infernus"},
	{1, 559, 1400000, "Jester"},
	{1, 603, 995000, "Phoenix"},
	{1, 475, 495000, "Sabre"},
	{1, 506, 600000, "Super GT"},
	{1, 451, 980000, "Turismo"},
	{1, 558, 450000, "Uranus"},
	{1, 477, 450000, "ZR-350"},
	{1, 565, 470000, "Flash"},
	{1, 494, 550200, "Hotring Racer"},
	{2, 518, 300000, "Buccaneer"},
	{2, 401, 200000, "Bravura"},
	{2, 405, 350000, "Sentinel"},
	{2, 410, 200000, "Manana"},
	{2, 419, 200000, "Esperanto"},
	{2, 421, 350000, "Washington"},
	{2, 426, 400000, "Premier"},
    {2, 445, 300000, "Admiral"},
    {2, 466, 300000, "Glendale"},
    {2, 467, 300000, "Oceanic"},
    {2, 474, 300000, "Hermes"},
    {2, 492, 350000, "Greenwood"},
    {2, 507, 400000, "Elegant"},
    {2, 526, 500000, "Fortune"},
    {2, 542, 400000, "Clover"},
    {2, 549, 250000, "Tampa"},
    {2, 550, 450000, "Sunrise"},
    {2, 560, 550000, "Sultan"},
    {2, 551, 400000, "Merit"},
    {2, 562, 500000, "Elegy"},
    {2, 561, 100000, "Stratum"},
    {3, 581, 500000, "BF-400"},
    {3, 586, 200000, "Wayfarer"},
    {3, 461, 340000, "PCJ-600"},
    {3, 462, 100000, "Faggio"},
    {3, 463, 550000, "Freeway"},
    {3, 468, 400000, "Sanchez"},
    {3, 521, 359000, "FCR-900"},
    {3, 522, 780000, "NRG-500"},
    {4, 439, 251000, "Stallion"},
    {4, 480, 400000, "Comet"},
    {4, 533, 680000, "Feltzer"},
    {4, 555, 500000, "Windsor"},
    {5, 400, 300000, "Landstalker"},
    {5, 424, 650000, "BF Injection"},
    {5, 444, 700000, "Monster"},
    {5, 470, 455000, "Patriot"},
    {5, 489, 300000, "Rancher"},
    {5, 495, 500000, "Sandking"},
    {6, 515, 300000, "Roadtrain"},
    {6, 531, 200000, "Tractor"},
    {6, 554, 210000, "Yosemite"},
    {6, 578, 150000, "DFT-30"},
    {6, 609, 50000, "Boxville"},
    {6, 413, 50000, "Pony"},
    {6, 455, 75000, "Flatbed"},
    {6, 414, 50000, "Mule"},
    {6, 478, 50000, "Walton"},
    {6, 600, 75000, "Picador"},
    {7, 574, 50000, "Sweeper"},
    {7, 508, 250000, "Journey"},
    {7, 588, 100000, "Hotdog"},
    {7, 406, 200000, "Dumper"},
    {7, 423, 500000, "Mr Whoopee"},
    {7, 442, 100000, "Romero"},
    {7, 483, 250000, "Camper"},
    {8, 539, 1, "Vortex"},
    {8, 545, 1, "Hustler"},
    {8, 568, 1, "Bandito"},
    {8, 571, 1, "Kart"},
    {8, 572, 1, "Mower"},
    {8, 434, 1, "Hotknife"},
    {8, 601, 1, "S.W.A.T."},
    {9, 438, 250000, "Cabbie"},
    {9, 497, 450000, "Police Maverick"},
    {9, 596, 300000, "Police Car (LSPD)"},
    {9, 597, 300000, "Police Car (SFPD)"},
    {9, 598, 300000, "Police Car (LVPD)"},
    {9, 599, 350500, "Police Ranger"},
    {9, 470, 490600, "Patriot"},
	{9, 488, 450000, "SAN News Maverick"},
    {10, 511, 402300, "Beagle"},
    {10, 512, 200000, "Cropduster"},
    {10, 513, 1000000, "Stuntplane"},
    {10, 593, 351500, "Dodo"},
    {10, 487, 500000, "Maverick"}
};

// Toy slots, pvs slots, house slots, house obj slots, business slot, instant namechange, medkit x20, medkit x100, money boost x2, money boost x3, scoreboost x2, scoreboost x3
static const g_aCreditsProductMatrix[14][e_credits_matrix] =
{
	{"Toy slot", 1000, 1, "Permanent", "This item expands your toy slots by 1.You can have 10 toy slots at most."},
    {"Custom car slot", 1500, 1, "Permanent", "This item expands your private vehicle slots by 1.\nYou can have 8 pv slots at most."},
    {"House slot", 2000, 1, "Permanent", "This item expands your house slots by 1. You can have 5 house slots at most."},
    {"House item slot", 1000, 1, "Permanent", "This item expands your house item slots by 1. You can have 10 house item slots at most."},
    {"Business slot", 2000, 1, "Permanent", "This item expands your business slots by 1. You can have 5 business slots at most."},
    {"Instant name change access", 1000, 1, "Usable 1 time", "This item grants you instant access to /changename."},
    {"20 Medits", 1000, 20, "Usable 20 times", "This item is usable in minigames only. Use /mk to consume 1 medkit.\nHeals you by 50hp in 10 seconds."},
    {"100 Medits", 2500, 100, "Usable 100 times", "This item is usable in minigames only. Use /mk to consume 1 medkit.\nHeals you by 50hp in 10 seconds."},
    {"Money Boost x2", 1000, 1, "24 Hours", "This item gives an additional double money.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Money Boost x3", 1500, 1, "24 Hours", "This item gives an additional triple money.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Score Boost x2", 1000, 1, "24 Hours", "This item gives an additional double score.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Score Boost x3", 1500, 1, "24 Hours", "This item gives an additional triple score.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Master Boost", 2500, 1, "24 Hours", "The Master Boost gives you an additional triple score and money!\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
	{"Reset K/D", 3500, 1, "Permanent", "This item sets your kills and deaths to 0. Be careful you can't undo it."}
};

static const g_aHouseInteriorTypes[15][e_house_type] =
{
    {1, 244.411987, 305.032989, 999.148437, "Barrack", 30000}, //0 			// 7, klein billig aber gut
    {2, 225.756989, 1240.000000, 1082.149902, "Standard", 1000000}, //1 				// 1, billig haus
    {1, 223.043991, 1289.259888, 1082.199951, "Advanced Standard", 250000}, //2			// 2, klein aber fein
    {2, 2454.717041, -1700.871582, 1013.515197, "Ryders House", 300000}, //3				// 13, normal wohnung pic 443
    {8, 2807.619873, -1171.899902, 1025.570312, "Bunker House", 450000}, //4			// 9, muss raus // jetzt ist Colonel Furhberger's drinne
    {4, 302.180999, 300.722991, 999.148437, "Underground", 500000}, 	//5			// 10, nette bude
    {2, 271.884979, 306.631988, 999.148437, "Nice Small Hotel Room", 600000},//6 			// 8, nice one /white
	{3, 2496.049804, -1695.238159, 1014.742187, "CJs House", 750000}, //7			// 4, muss raus exec // jetzt ist CJ drinne
	{3, 235.508994, 1189.169897, 1080.339966, "Luxury House", 900000}, //8			// 0,  schÃ¶nes haus mit roten boden pic 429
	{2, 1204.809936, -11.586799, 1000.921875, "Strip Club", 1000000}, //9			// 6, mus raus exec // jetzt ist strip club drinne
	{15,2215.454833, -1147.475585, 1025.796875, "Entire Motel", 1200000}, //10					// 12, muss raus // jetzt ist jeff motel drinne
	{12,2324.419921, -1145.568359, 1050.710083, "Small Villa", 1500000}, 	//11			// 11, muss raus // jetzt ist small villa drinne
	{7, 225.630997, 1022.479980, 1084.069946, "Big Villa", 2000000}, //12			// 3, big villa
	{5, 1267.663208, -781.323242, 1091.906250, "Madd Doggs Mansion", 3000000}, 	//13		// 5, muss raus exec // jetzt ist maddog drinne
	{1, 2535.83, -1674.32, 1015.50, "Sweets House", 100000}
};

static const Float:FloorZOffsets[21] =
{
    0.0,
    8.5479,
    13.99945,
    19.45100,
    24.90255,
    30.35410,
    35.80565,
    41.25720,
    46.70875,
    52.16030,
    57.61185,
    63.06340,
    68.51495,
    73.96650,
    79.41805,
    84.86960,
    90.32115,
    95.77270,
    101.22425,
    106.67580,
    112.12735
};

static const FloorNames[21][] =
{
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor",
	"Tenth Floor",
	"Eleventh Floor",
	"Twelfth Floor",
	"Thirteenth Floor",
	"Fourteenth Floor",
	"Fifteenth Floor",
	"Sixteenth Floor",
	"Seventeenth Floor",
	"Eighteenth Floor",
	"Admin Headquarter O.o",
	"Penthouse (not really)"
};

static const GunGame_Weapons[] =
{
	23,	22, 27, 26, 29, 32, 30, 31, 38, 33, 34, 35, 36, 24
};

static const Float:Minigun_Spawns[10][4] =
{
	{38.1505, 1564.5778, 12.7500, 132.2755},
	{8.7437, 1549.5354, 12.7560, 55.1620},
	{-33.0755, 1519.6864, 12.7560, 287.5538},
	{-38.9135, 1488.4835, 12.7500, 315.2241},
	{-16.4189, 1478.1693, 12.7500, 307.5128},
	{4.4626, 1506.1968, 16.5952, 347.8221},
	{28.7336, 1517.8481, 12.7560, 121.7190},
	{9.5176, 1560.8956, 12.7500, 217.7807},
	{16.0684, 1552.2834, 28.2681, 151.2032},
	{-4.4292, 1508.5903, 20.0397, 338.7700}
};
static const Float:Minigun2_Spawns[19][4] =
{
	{2566.7075,1682.9153,10.8203,267.6416},
	{2632.4512,1658.9364,10.8203,356.0025},
	{2628.0430,1663.1805,26.9442,353.4489},
	{2635.4561,1683.8428,15.0390,97.4765},
	{2622.8230,1717.2472,11.0234,354.7022},
	{2604.3816,1733.9994,10.8203,89.9564},
	{2605.7612,1766.4749,10.8203,270.1014},
	{2596.8813,1823.4506,10.8203,268.5347},
	{2596.9121,1889.5470,11.0312,94.6564},
	{2549.2439,1883.8960,18.8093,177.6437},
	{2535.0269,1787.8772,26.3558,274.1513},
	{2546.2554,1775.0450,18.8093,269.4512},
	{2589.8413,1649.2517,30.6641,357.1855},
	{2653.4441,1681.2477,19.7100,90.5597},
	{2652.6572,1823.1228,26.3242,92.1265},
	{2651.3879,1889.4817,18.8092,359.6923},
	{2632.0039,1918.0391,20.3243,177.6673},
	{2598.1194,1900.5646,23.6854,172.0273},
	{2561.9282,1897.9984,10.8222,263.8113}
};
static const Float:Sniper_Spawns[14][4] =
{
	{-1528.3020, -330.2366, 267.8116, 182.4561},
	{-1503.6364, -340.5645, 265.9578, 205.9406},
	{-1496.8945, -396.1531, 265.9578, 15.2601},
	{-1526.2155, -444.1110, 265.9578, 5.7962},
	{-1545.0111, -405.7469, 265.9578, 270.0850},
	{-1550.2539, -390.3828, 273.7288, 91.6521},
	{-1607.9478, -392.2644, 267.1663, 74.1264},
	{-1644.1897, -394.3685, 273.4054, 269.7141},
	{-1613.9907, -381.9904, 273.4054, 3.3222},
	{-1619.4110, -397.6560, 273.4254, 272.8892},
	{-1565.0505, -304.0998, 271.3497, 85.3634},
	{-1571.2914, -301.3372, 271.3497, 265.8995},
	{-1550.1138, -307.6401, 270.5767, 52.7860},
	{-1560.4999, -317.0979, 285.0981, 163.2189}
};
static const Float:RocketDM_Spawns[8][4] =
{
	{-1073.5320,-657.2906,59.5660,182.2739},
	{-1077.9768,-613.3954,50.5078,187.6731},
	{-1112.2423,-628.5490,50.5078,230.9135},
	{-1111.1577,-656.5370,59.6051,258.1738},
	{-1100.4790,-735.2442,59.5487,301.0774},
	{-1055.5299,-735.7858,59.6239,332.7244},
	{-1039.2628,-700.3466,64.5321,8.7347},
	{-1058.5487,-696.2102,67.1242,89.5754}
};
static const Float:GunGame_Spawns[9][4] =
{
	{133.2702, 2076.2271, 70.1628, 182.0589},
	{157.3591, 2062.8499, 67.4000, 85.6672},
	{134.7271, 2052.1414, 72.1535, 346.4713},
	{128.3802, 2049.6685, 88.4781, 8.9248},
	{110.9025, 2050.5190, 73.0875, 2.9044},
	{115.5225, 2063.9746, 65.2181, 314.8837},
	{130.2743, 2101.7676, 61.6595, 195.0075},
	{135.0822, 2041.0424, 65.1818, 86.6981},
	{121.3894, 2036.3778, 69.1681, 331.7290}
};
static const Float:BG_M1_T1_Spawns[4][4] =
{
	{-455.7792, -58.5108, 59.8029, 139.7756},
	{-435.4336, -56.8861, 58.8833, 97.0126},
	{-440.3568, -77.4319, 59.0455, 116.2910},
	{-455.1911, -70.1563, 59.7096, 136.2704}
};
static const Float:BG_M1_T2_Spawns[4][4] =
{
	{-578.6148, -180.4718, 78.7617, 320.9920},
	{-583.2191, -170.5733, 79.2114, 320.99205},
	{-571.3069, -183.6573, 78.4063, 251.5899},
	{-557.7114, -181.2337, 78.4047, 339.2187}
};
static const Float:BG_M2_T1_Spawns[4][4] =
{
	{566.4445, -2441.1155, 3.2606, 90.0},
	{557.8643, -2439.3618, 3.2606, 90.0},
	{558.2055, -2431.5737, 3.2606, 90.0},
	{566.3401, -2428.1511, 3.2606, 90.0}
};
static const Float:BG_M2_T2_Spawns[4][4] =
{
	{692.2197, -2430.2900, 3.2606, 90.0},
	{683.4767, -2429.1997, 3.2606, 90.0},
	{685.1592, -2439.1643, 3.2606, 90.0},
	{691.5789, -2437.9065, 3.2606, 90.0}
};
static const Float:BG_M3_T1_Spawns[4][4] =
{
	{-2180.0020, -266.4913, 36.5156, 277.7783},
	{-2180.3604, -260.0984, 36.5156, 281.6340},
	{-2183.8555, -265.5697, 36.5156, 281.6340},
	{-2183.7983, -262.1465, 40.7195, 266.1907}
};
static const Float:BG_M3_T2_Spawns[4][4] =
{
	{-2187.3665, -209.5552, 36.5156, 182.4175},
	{-2183.3145, -214.3069, 36.5156, 182.4175},
	{-2188.1506, -223.1832, 36.5156, 182.4175},
	{-2183.5532, -223.9128, 36.5156, 87.0773}
};
static const Float:BG_M4_T1_Spawns[4][4] =
{
	{673.8533, -2399.7190, 107.1669, 270.3580},
	{685.6569, -2407.2200, 107.1804, 356.2215},
	{712.4095, -2400.4097, 106.9510, 83.4871},
	{663.0553, -2398.7061, 111.9654, 269.9614}
};
static const Float:BG_M4_T2_Spawns[4][4] =
{
	{722.7262, -2304.8560, 107.9041, 130.8066},
	{721.2896, -2319.1465, 107.6767, 84.8891},
	{709.2130, -2304.4978, 107.8904, 194.9510},
	{708.6271, -2315.9961, 107.7215, 160.2499}
};
static const Float:BG_M5_T1_Spawns[4][4] =
{
	{1804.2432, -2994.2014, 6.1094, 177.3439},
	{1807.2275, -2998.5554, 6.1044, 133.5295},
	{1794.2000, -2997.5786, 8.7994, 221.8594},
	{1788.9626, -2984.6211, 6.9992, 227.8387}
};
static const Float:BG_M5_T2_Spawns[4][4] =
{
	{1844.8651, -3067.3420, 19.2294, 18.9314},
	{1843.7288, -3058.2097, 14.0106, 26.2922},
	{1852.3188, -3045.4287, 6.0944, 34.0036},
	{1826.1392, -3048.5820, 6.1044, 41.0139}
};
static const Float:BG_M6_T1_Spawns[4][4] =
{
	{2157.8413, 4025.3105, 92.5781, 90.0},
	{2118.6831, 3990.2087, 76.8234, 90.0},
	{2098.3066, 4061.2534, 76.5134, 90.0},
	{2136.7742, 4041.2144, 76.5134, 90.0}
};
static const Float:BG_M6_T2_Spawns[4][4] =
{
	{2016.4438, 4042.5627, 92.5781, 90.0},
	{2037.7231, 4054.4719, 80.9250, 90.0},
	{2034.2903, 4009.7451, 76.5134, 90.0},
	{2056.8708, 3975.7813, 84.1782, 90.0}
};
static const Float:DuelMaps[3][2][4] =
{
	{
		{1144.1377, 1529.8433, 52.4003, 87.1090},
		{1049.4922, 1529.3169, 52.4077, 271.6640}
	},
	{
		{-2220.6504, 640.9958, 49.4492, 270.8222},
		{-2176.0908, 641.5275, 49.4375, 89.4239}
	},
	{
	    {-22.3681, 1353.8052, 11.7029, 180.0},
	    {29.7761, 1375.0975, 10.6471, 0.0}
	}
};
static const DuelWeapons[15] =
{
    4, 9, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35
};
static const Float:WorldSpawns[4][4] =
{
	{341.8535, -1852.6327, 8.2618, 90.2136}, // /beach
	{-1196.3280, -17.4523, 15.8281, 42.5799}, // /sfa
	{386.0204, 2541.1179, 19.0953, 181.2326}, // /aa
	{-2330.8264, -1636.1765, 485.6543, 265.8250} // /mc
};
static const Float:g_ArmorPickups[16][3] =
{
	{352.8291, 2431.7050, 17.6194},
	{-1865.9051, 63.9332, 15.3537},
	{-1706.3911, -5.0743, 3.5489},
	{2283.8637, 1570.6878, 11.0468},
	{2402.2744, 2527.7585, 21.4463},
	{-2452.2761, -1638.7027, 461.4188},
	{1381.0902, -1659.5491, 13.4683},
	{2043.9702, -1941.0736, 7.5484},
	{2667.4177, -2561.4240, 2.7000},
	{2545.7580, -1610.3024, 10.9728},
	{2884.4536, 942.8223, 10.3225},
	{2886.7478, 2807.7963, 18.1855},
	{1936.7396, 2777.8854, 10.3662},
	{874.3151, 2717.5383, 20.1042},
	{795.4474, 854.0259, 9.0281},
	{-669.9799, 972.6474, 11.683}
};
static const Float:g_CarShopLocations[CAR_SHOPS][4] =
{
	{2131.2915, -1144.3942, 24.7986, 291.9600},
	{-1639.0990, 1202.4598, 7.2247, 68.4220},
	{2106.9548, 1403.5167, 11.1395, 89.2744}
};
static const Float:g_CarShopTelePos[CAR_SHOPS][4] =
{
	{2107.1802, 1378.5853, 10.8618, 1.2502},
	{2127.6726, -1129.2881, 25.5523, 175.3369},
	{-1622.3246, 1198.9712, 7.0391, 68.1087}
};
static const Float:DM_MAP_1[2][4] =
{
	{1309.0240, 2110.4265, 11.0156, 316.7284},
	{1383.8239, 2185.6218, 11.0234, 137.8134}
};
static const Float:DM_MAP_2[2][4] =
{
	{-2226.4497, 2348.3804, 4.9922, 114.9160},
	{-2232.0962, 2400.4670, 2.4852, 221.4737}
};
static const Float:DM_MAP_3[2][4] =
{
	{1050.2189, 1024.4153, 11.0000, 327.1479},
	{1114.4515, 1097.1134, 10.2734, 141.6762}
};
static const Float:DM_MAP_4[2][4] =
{
	{2609.7583, 2831.2527, 10.8203, 97.2059},
	{2553.1912, 2824.4099, 10.8203, 283.9544}
};

static const szPlayerColors[511] =
{
	0x000022FF, 0x000044FF, 0x000066FF, 0x000088FF, 0x0000AAFF, 0x0000CCFF, 0x0000EEFF,
	0x002200FF, 0x002222FF, 0x002244FF, 0x002266FF, 0x002288FF, 0x0022AAFF, 0x0022CCFF, 0x0022EEFF,
	0x004400FF, 0x004422FF, 0x004444FF, 0x004466FF, 0x004488FF, 0x0044AAFF, 0x0044CCFF, 0x0044EEFF,
	0x006600FF, 0x006622FF, 0x006644FF, 0x006666FF, 0x006688FF, 0x0066AAFF, 0x0066CCFF, 0x0066EEFF,
	0x008800FF, 0x008822FF, 0x008844FF, 0x008866FF, 0x008888FF, 0x0088AAFF, 0x0088CCFF, 0x0088EEFF,
	0x00AA00FF, 0x00AA22FF, 0x00AA44FF, 0x00AA66FF, 0x00AA88FF, 0x00AAAAFF, 0x00AACCFF, 0x00AAEEFF,
	0x00CC00FF, 0x00CC22FF, 0x00CC44FF, 0x00CC66FF, 0x00CC88FF, 0x00CCAAFF, 0x00CCCCFF, 0x00CCEEFF,
	0x00EE00FF, 0x00EE22FF, 0x00EE44FF, 0x00EE66FF, 0x00EE88FF, 0x00EEAAFF, 0x00EECCFF, 0x00EEEEFF,
	0x220000FF, 0x220022FF, 0x220044FF, 0x220066FF, 0x220088FF, 0x2200AAFF, 0x2200CCFF, 0x2200FFFF,
	0x222200FF, 0x222222FF, 0x222244FF, 0x222266FF, 0x222288FF, 0x2222AAFF, 0x2222CCFF, 0x2222EEFF,
	0x224400FF, 0x224422FF, 0x224444FF, 0x224466FF, 0x224488FF, 0x2244AAFF, 0x2244CCFF, 0x2244EEFF,
	0x226600FF, 0x226622FF, 0x226644FF, 0x226666FF, 0x226688FF, 0x2266AAFF, 0x2266CCFF, 0x2266EEFF,
	0x228800FF, 0x228822FF, 0x228844FF, 0x228866FF, 0x228888FF, 0x2288AAFF, 0x2288CCFF, 0x2288EEFF,
	0x22AA00FF, 0x22AA22FF, 0x22AA44FF, 0x22AA66FF, 0x22AA88FF, 0x22AAAAFF, 0x22AACCFF, 0x22AAEEFF,
	0x22CC00FF, 0x22CC22FF, 0x22CC44FF, 0x22CC66FF, 0x22CC88FF, 0x22CCAAFF, 0x22CCCCFF, 0x22CCEEFF,
	0x22EE00FF, 0x22EE22FF, 0x22EE44FF, 0x22EE66FF, 0x22EE88FF, 0x22EEAAFF, 0x22EECCFF, 0x22EEEEFF,
	0x440000FF, 0x440022FF, 0x440044FF, 0x440066FF, 0x440088FF, 0x4400AAFF, 0x4400CCFF, 0x4400FFFF,
	0x442200FF, 0x442222FF, 0x442244FF, 0x442266FF, 0x442288FF, 0x4422AAFF, 0x4422CCFF, 0x4422EEFF,
	0x444400FF, 0x444422FF, 0x444444FF, 0x444466FF, 0x444488FF, 0x4444AAFF, 0x4444CCFF, 0x4444EEFF,
	0x446600FF, 0x446622FF, 0x446644FF, 0x446666FF, 0x446688FF, 0x4466AAFF, 0x4466CCFF, 0x4466EEFF,
	0x448800FF, 0x448822FF, 0x448844FF, 0x448866FF, 0x448888FF, 0x4488AAFF, 0x4488CCFF, 0x4488EEFF,
	0x44AA00FF, 0x44AA22FF, 0x44AA44FF, 0x44AA66FF, 0x44AA88FF, 0x44AAAAFF, 0x44AACCFF, 0x44AAEEFF,
	0x44CC00FF, 0x44CC22FF, 0x44CC44FF, 0x44CC66FF, 0x44CC88FF, 0x44CCAAFF, 0x44CCCCFF, 0x44CCEEFF,
	0x44EE00FF, 0x44EE22FF, 0x44EE44FF, 0x44EE66FF, 0x44EE88FF, 0x44EEAAFF, 0x44EECCFF, 0x44EEEEFF,
	0x660000FF, 0x660022FF, 0x660044FF, 0x660066FF, 0x660088FF, 0x6600AAFF, 0x6600CCFF, 0x6600FFFF,
	0x662200FF, 0x662222FF, 0x662244FF, 0x662266FF, 0x662288FF, 0x6622AAFF, 0x6622CCFF, 0x6622EEFF,
	0x664400FF, 0x664422FF, 0x664444FF, 0x664466FF, 0x664488FF, 0x6644AAFF, 0x6644CCFF, 0x6644EEFF,
	0x666600FF, 0x666622FF, 0x666644FF, 0x666666FF, 0x666688FF, 0x6666AAFF, 0x6666CCFF, 0x6666EEFF,
	0x668800FF, 0x668822FF, 0x668844FF, 0x668866FF, 0x668888FF, 0x6688AAFF, 0x6688CCFF, 0x6688EEFF,
	0x66AA00FF, 0x66AA22FF, 0x66AA44FF, 0x66AA66FF, 0x66AA88FF, 0x66AAAAFF, 0x66AACCFF, 0x66AAEEFF,
	0x66CC00FF, 0x66CC22FF, 0x66CC44FF, 0x66CC66FF, 0x66CC88FF, 0x66CCAAFF, 0x66CCCCFF, 0x66CCEEFF,
	0x66EE00FF, 0x66EE22FF, 0x66EE44FF, 0x66EE66FF, 0x66EE88FF, 0x66EEAAFF, 0x66EECCFF, 0x66EEEEFF,
	0x880000FF, 0x880022FF, 0x880044FF, 0x880066FF, 0x880088FF, 0x8800AAFF, 0x8800CCFF, 0x8800FFFF,
	0x882200FF, 0x882222FF, 0x882244FF, 0x882266FF, 0x882288FF, 0x8822AAFF, 0x8822CCFF, 0x8822EEFF,
	0x884400FF, 0x884422FF, 0x884444FF, 0x884466FF, 0x884488FF, 0x8844AAFF, 0x8844CCFF, 0x8844EEFF,
	0x886600FF, 0x886622FF, 0x886644FF, 0x886666FF, 0x886688FF, 0x8866AAFF, 0x8866CCFF, 0x8866EEFF,
	0x888800FF, 0x888822FF, 0x888844FF, 0x888866FF, 0x888888FF, 0x8888AAFF, 0x8888CCFF, 0x8888EEFF,
	0x88AA00FF, 0x88AA22FF, 0x88AA44FF, 0x88AA66FF, 0x88AA88FF, 0x88AAAAFF, 0x88AACCFF, 0x88AAEEFF,
	0x88CC00FF, 0x88CC22FF, 0x88CC44FF, 0x88CC66FF, 0x88CC88FF, 0x88CCAAFF, 0x88CCCCFF, 0x88CCEEFF,
	0x88EE00FF, 0x88EE22FF, 0x88EE44FF, 0x88EE66FF, 0x88EE88FF, 0x88EEAAFF, 0x88EECCFF, 0x88EEEEFF,
	0xAA0000FF, 0xAA0022FF, 0xAA0044FF, 0xAA0066FF, 0xAA0088FF, 0xAA00AAFF, 0xAA00CCFF, 0xAA00FFFF,
	0xAA2200FF, 0xAA2222FF, 0xAA2244FF, 0xAA2266FF, 0xAA2288FF, 0xAA22AAFF, 0xAA22CCFF, 0xAA22EEFF,
	0xAA4400FF, 0xAA4422FF, 0xAA4444FF, 0xAA4466FF, 0xAA4488FF, 0xAA44AAFF, 0xAA44CCFF, 0xAA44EEFF,
	0xAA6600FF, 0xAA6622FF, 0xAA6644FF, 0xAA6666FF, 0xAA6688FF, 0xAA66AAFF, 0xAA66CCFF, 0xAA66EEFF,
	0xAA8800FF, 0xAA8822FF, 0xAA8844FF, 0xAA8866FF, 0xAA8888FF, 0xAA88AAFF, 0xAA88CCFF, 0xAA88EEFF,
	0xAAAA00FF, 0xAAAA22FF, 0xAAAA44FF, 0xAAAA66FF, 0xAAAA88FF, 0xAAAAAAFF, 0xAAAACCFF, 0xAAAAEEFF,
	0xAACC00FF, 0xAACC22FF, 0xAACC44FF, 0xAACC66FF, 0xAACC88FF, 0xAACCAAFF, 0xAACCCCFF, 0xAACCEEFF,
	0xAAEE00FF, 0xAAEE22FF, 0xAAEE44FF, 0xAAEE66FF, 0xAAEE88FF, 0xAAEEAAFF, 0xAAEECCFF, 0xAAEEEEFF,
	0xCC0000FF, 0xCC0022FF, 0xCC0044FF, 0xCC0066FF, 0xCC0088FF, 0xCC00AAFF, 0xCC00CCFF, 0xCC00FFFF,
	0xCC2200FF, 0xCC2222FF, 0xCC2244FF, 0xCC2266FF, 0xCC2288FF, 0xCC22AAFF, 0xCC22CCFF, 0xCC22EEFF,
	0xCC4400FF, 0xCC4422FF, 0xCC4444FF, 0xCC4466FF, 0xCC4488FF, 0xCC44AAFF, 0xCC44CCFF, 0xCC44EEFF,
	0xCC6600FF, 0xCC6622FF, 0xCC6644FF, 0xCC6666FF, 0xCC6688FF, 0xCC66AAFF, 0xCC66CCFF, 0xCC66EEFF,
	0xCC8800FF, 0xCC8822FF, 0xCC8844FF, 0xCC8866FF, 0xCC8888FF, 0xCC88AAFF, 0xCC88CCFF, 0xCC88EEFF,
	0xCCAA00FF, 0xCCAA22FF, 0xCCAA44FF, 0xCCAA66FF, 0xCCAA88FF, 0xCCAAAAFF, 0xCCAACCFF, 0xCCAAEEFF,
	0xCCCC00FF, 0xCCCC22FF, 0xCCCC44FF, 0xCCCC66FF, 0xCCCC88FF, 0xCCCCAAFF, 0xCCCCCCFF, 0xCCCCEEFF,
	0xCCEE00FF, 0xCCEE22FF, 0xCCEE44FF, 0xCCEE66FF, 0xCCEE88FF, 0xCCEEAAFF, 0xCCEECCFF, 0xCCEEEEFF,
	0xEE0000FF, 0xEE0022FF, 0xEE0044FF, 0xEE0066FF, 0xEE0088FF, 0xEE00AAFF, 0xEE00CCFF, 0xEE00FFFF,
	0xEE2200FF, 0xEE2222FF, 0xEE2244FF, 0xEE2266FF, 0xEE2288FF, 0xEE22AAFF, 0xEE22CCFF, 0xEE22EEFF,
	0xEE4400FF, 0xEE4422FF, 0xEE4444FF, 0xEE4466FF, 0xEE4488FF, 0xEE44AAFF, 0xEE44CCFF, 0xEE44EEFF,
	0xEE6600FF, 0xEE6622FF, 0xEE6644FF, 0xEE6666FF, 0xEE6688FF, 0xEE66AAFF, 0xEE66CCFF, 0xEE66EEFF,
	0xEE8800FF, 0xEE8822FF, 0xEE8844FF, 0xEE8866FF, 0xEE8888FF, 0xEE88AAFF, 0xEE88CCFF, 0xEE88EEFF,
	0xEEAA00FF, 0xEEAA22FF, 0xEEAA44FF, 0xEEAA66FF, 0xEEAA88FF, 0xEEAAAAFF, 0xEEAACCFF, 0xEEAAEEFF,
	0xEECC00FF, 0xEECC22FF, 0xEECC44FF, 0xEECC66FF, 0xEECC88FF, 0xEECCAAFF, 0xEECCCCFF, 0xEECCEEFF,
	0xEEEE00FF, 0xEEEE22FF, 0xEEEE44FF, 0xEEEE66FF, 0xEEEE88FF, 0xEEEEAAFF, 0xEEEECCFF, 0xEEEEEEFF
};

static const VehicleNames[212][] =
{
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},{"Firetruck"},{"Trashmaster"},{"Stretch"},
	{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},
	{"Washington"},{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Ohdude"},{"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},{"Predator"},{"Bus"},
	{"faggot"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},
	{"Monster"},{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},
	{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
	{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},
	{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},
	{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
	{"Tanker"},{"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Jumpjet"},{"FCR-900"},{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},
	{"Fortune"},{"Cadrona"},{"FBI Truck"},{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},{"Blade"},{"Freight"},
	{"Brownstreak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
	{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},
	{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},{"Broadway"},{"Tornado"},{"AT-400"},
	{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
	{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},
	{"Alpha"},{"Phoenix"},{"Glendale"},{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},{"Utility Trailer"}
};

static const pv_spoiler[20][0] =
{
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

static const pv_nitro[3][0] =
{
    {1008},
    {1009},
    {1010}
};

static const pv_fbumper[23][0] =
{
    {1117},
    {1152},
    {1153},
    {1155},
    {1157},
    {1160},
    {1165},
    {1166},
    {1169},
    {1170},
    {1171},
    {1172},
    {1173},
    {1174},
    {1175},
    {1179},
    {1181},
    {1182},
    {1185},
    {1188},
    {1189},
    {1190},
    {1191}
};

static const pv_rbumper[22][0] =
{
    {1140},
    {1141},
    {1148},
    {1149},
    {1150},
    {1151},
    {1154},
    {1156},
    {1159},
    {1161},
    {1167},
    {1168},
    {1176},
    {1177},
    {1178},
    {1180},
    {1183},
    {1184},
    {1186},
    {1187},
    {1192},
    {1193}
};

static const pv_exhaust[29][0] =
{
    {1018},
    {1019},
    {1020},
    {1021},
    {1022},
    {1028},
    {1029},
    {1034},
    {1037},
    {1043},
    {1044},
    {1045},
    {1046},
    {1059},
    {1064},
    {1065},
    {1066},
    {1089},
    {1092},
    {1104},
    {1105},
    {1113},
    {1114},
    {1126},
    {1127},
    {1129},
    {1132},
    {1135},
    {1136}
};

static const pv_bventr[2][0] =
{
    {1142},
    {1144}
};

static const pv_bventl[2][0] =
{
    {1143},
    {1145}
};

static const pv_bscoop[4][0] =
{
	{1004},
	{1005},
	{1011},
	{1012}
};

static const pv_roof[17][0] =
{
    {1006},
    {1032},
    {1033},
    {1035},
    {1038},
    {1053},
    {1054},
    {1055},
    {1061},
    {1067},
    {1068},
    {1088},
    {1091},
    {1103},
    {1128},
    {1130},
    {1131}
};

static const pv_lskirt[21][0] =
{
    {1007},
    {1026},
    {1031},
    {1036},
    {1039},
    {1042},
    {1047},
    {1048},
    {1056},
    {1057},
    {1069},
    {1070},
    {1090},
    {1093},
    {1106},
    {1108},
    {1118},
    {1119},
    {1133},
    {1122},
    {1134}
};

static const pv_rskirt[21][0] =
{
    {1017},
    {1027},
    {1030},
    {1040},
    {1041},
    {1051},
    {1052},
    {1062},
    {1063},
    {1071},
    {1072},
    {1094},
    {1095},
    {1099},
    {1101},
    {1102},
    {1107},
    {1120},
    {1121},
    {1124},
    {1137}
};

static const pv_hydraulics[1][0] =
{
    {1087}
};

static const pv_base[1][0] =
{
    {1086}
};

static const pv_rbbars[4][0] =
{
    {1109},
    {1110},
    {1123},
    {1125}
};

static const pv_fbbars[2][0] =
{
    {1115},
    {1116}
};

static const pv_wheels[17][0] =
{
    {1025},
    {1073},
    {1074},
    {1075},
    {1076},
    {1077},
    {1078},
    {1079},
    {1080},
    {1081},
    {1082},
    {1083},
    {1084},
    {1085},
    {1096},
    {1097},
    {1098}
};

static const pv_lights[2][0] =
{
	{1013},
	{1024}
};

new Iterator:iterRaceJoins<MAX_PLAYERS>,
	Iterator:iterDerbyVoters<MAX_PLAYERS>,
	Iterator:iterPlayerIgnore[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:iterLottoNumberPool<75>,
	Iterator:iterGangWar<3000>,
	Float:g_RaceVehCoords[RACE_MAX_PLAYERS][4],
	Float:g_RaceCPs[RACE_MAX_CHECKPOINTS][3],
	g_DerbyFreezePool = DERBY_FREEZE_TIME / DERBY_FREEZE_INTERVAL,
	g_SpawnAreas[5],
	g_RaceForceMap = 0,
	g_BuildRace = INVALID_PLAYER_ID,
	g_BuildDeployTime = 0,
	g_BuildRaceType = 1,
	g_BuildVirtualWorld = 0,
	g_BuildCheckPointCount = 0,
	g_BuildVehPosCount = 0,
	g_BuildModeVMID = 0,
	bool:g_BuildTakeCheckpoints = false,
	bool:g_BuildTakeVehPos = false,
	g_BuildVehicle = -1,
	g_RaceArray[e_race_data],
	g_RaceStatus = RaceStatus_Inactive,
	g_RaceCount = 0,
	g_RaceCountDown = COUNT_DOWN_TILL_RACE_START,
	g_RacePlayerCount = 0,
	g_RaceSpawnCount = 0,
	g_tRaceCounter = -1,
	g_tRaceOpenSelection = -1,
	g_RaceTick = 0,
	g_RaceTime = MAX_RACE_TIME,
	g_NextRace,
	g_RaceFinishCount = 0,
	g_iRaceEnd = 0,
	g_rPosition = 0,
	g_CPProgress[MAX_PLAYERS],
	g_RaceVehicle[MAX_PLAYERS],
	g_RacePosition[MAX_PLAYERS],
	m_PlayerRecord,
	g_sCustomCarCategory[512],
	g_CustomCarShops[CAR_SHOPS][E_CAR_SHOP],
    g_dialogTpString[2000],
	g_cmdString[32],
	g_tickProcessTickCalls = 0,
	gTime[6],
	gint = 0,
	gstr[144],
	gstr2[255],
	g_LottoNumber,
	g_LottoJackpot,
	bool:bLottoActive = false,
	g_ServerStats[4],
	mathsAnswered = -1,
	mathsCurrent[14],
	mathsAnswer,
	mathsAward,
	bool:IsMellnikGateMoving = false,
	bool:IsMellnikRampMoving = false,
	MellnikGate,
	MellnikRamp,
	LastPlayerText[MAX_PLAYERS][144],
	StartTime,
	hVIPVehObj[MAX_PLAYERS][13],
  	FalloutData[E_FALLOUT_DATA],
  	g_FalloutStatus,
  	PlayerPVTMP[MAX_PLAYERS][2],
  	PlayerPVTMPPlate[MAX_PLAYERS][13],
 	GunGame_Player[MAX_PLAYERS][e_gungame_data],
  	DerbyMapVotes[9],
  	CurrentDerbyMap = 1,
  	BGGameTime = DEFAULT_BG_TIME,
  	FalloutGameTime = DEFAULT_FALLOUT_TIME,
  	DerbyGameTime = DEFAULT_DERBY_TIME,
  	tDerbyTimer = -1,
  	tDerbyVoting = -1,
  	tDerbyFallOver = -1,
  	DerbyPlayers = 0,
	bool:IsDerbyRunning = false,
	Reports[MAX_REPORTS][144],
  	tBGTimer = -1,
  	tBGVoting = -1,
  	BGMapVotes[6] = {0, ...},
  	BGTeam1Players = 0,
  	BGTeam2Players = 0,
	BGTeam1Kills = 0,
  	BGTeam2Kills = 0,
  	CurrentBGMap,
  	dm1pickup,
  	dm2pickup,
  	VIPLpickup,
  	VIPLpickup2,
  	gTeam[MAX_PLAYERS],
  	g_CarShopDialogPickup,
  	g_CarShopInteriorPickup,
  	pSQL,
  	mc_dive,
  	mc_tp,
  	mc_weps,
 	beach_dive,
  	beach_tp,
  	beach_weps,
  	beach_m,
	bb_mcc,
  	houseid,
  	Text3D:Label_Elevator,
  	Text3D:Label_Floors[21],
  	PlayerText:DynamicAchTD[MAX_PLAYERS][2],
  	PlayerText:TXTGunGameInfo[MAX_PLAYERS],
  	PlayerText:vTD[MAX_PLAYERS],
	PlayerText:TXTRaceInfo[MAX_PLAYERS],
	PlayerText:TXTInfoTD[MAX_PLAYERS],
	PlayerText:TXTWantedsTD[MAX_PLAYERS],
	PlayerText:TXTMoney[MAX_PLAYERS],
	PlayerText:TXTScore[MAX_PLAYERS],
	PlayerText:TXTSpeedo[MAX_PLAYERS],
	Text:TXTSpeedo_Main,
  	Text:TXTGunGameSign,
  	Text:TXTLoading,
  	Text:TXTTeleportInfo,
  	Text:TXTRaceSign,
  	Text:TXTDerbySign,
  	Text:TXTDerbyInfo,
  	Text:TXTTdmSign,
 	Text:TXTTdmInfo,
 	Text:TXTFalloutSign,
	Text:TXTFalloutData,
	Text:TXTToyBox,
	Text:TXTToyInfo,
	Text:TXTGodTD,
	Text:CheckTD,
	Text:NewMsgTD,
    Text:AchTD[6],
	Text:TXTWelcome[5],
	Text:JailTD,
	#if WINTER_EDITION == true
	Text:TXTWinterEdition,
	#endif
	Text:TXTFooter,
	Text:TXTFooterBlack,
	Text:TXTOnJoin[2],
	Text:TXTRandomInfo,
	Text:NEFLOGO[3],
	toyslist = mS_INVALID_LISTID,
	hobjslist = mS_INVALID_LISTID,
	skinlist = mS_INVALID_LISTID,
  	BankPickOut[MAX_BANKS],
  	BankPickInt[MAX_BANKS],
  	BankPickMenu[MAX_BANKS],
  	AmmunationPickOut[MAX_AMMUNATIONS],
  	AmmunationPickInt[MAX_AMMUNATIONS],
  	BurgerPickOut[MAX_BURGERSHOTS],
  	BurgerPickInt[MAX_BURGERSHOTS],
  	CluckinBellPickOut[MAX_CLUCKINBELLS],
  	CluckinBellPickInt[MAX_CLUCKINBELLS],
  	PizzaPickOut[MAX_PIZZASTACKS],
  	PizzaPickInt[MAX_PIZZASTACKS],
  	TFSPickOut[MAX_TFS],
  	TFSPickInt[MAX_TFS],
  	BankMIcon[MAX_BANKS],
  	CluckinBellMIcon[MAX_CLUCKINBELLS],
  	BurgerMIcon[MAX_BURGERSHOTS],
  	AmmunationMIcon[MAX_AMMUNATIONS],
  	PizzaMIcon[MAX_PIZZASTACKS],
  	TFSMIcon[MAX_TFS],
  	bool:ReactionOn,
  	g_AdminLCTo,
  	g_AdminLCBack,
  	gLastMap[MAX_PLAYERS],
  	PlayerData[MAX_PLAYERS][E_PLAYER_DATA],
  	PlayerAchData[MAX_PLAYERS][E_PLAYER_ACH_DATA][2],
  	PlayerToyData[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][E_TOY_DATA],
  	PlayerPVData[MAX_PLAYERS][MAX_PLAYER_PVS][E_PV_DATA],
  	HouseData[MAX_HOUSES][E_HOUSE_DATA],
  	GZoneData[MAX_GZONES][E_GZONE_DATA],
  	BusinessData[MAX_BUSINESSES][E_BUSINESS_DATA],
  	PVSelect[MAX_PLAYERS],
	PVCatSel[MAX_PLAYERS],
	PVVMenuSel[MAX_PLAYERS],
  	pick_chainsaw,
  	pick_life[14],
  	pick_armor[16],
  	Obj_Elevator,
  	Obj_ElevatorDoors[2],
  	Obj_FloorDoors[21][2],
  	ElevatorState,
  	ElevatorFloor,
  	ElevatorQueue[21],
  	FloorRequestedBy[21],
  	ElevatorBoostTimer,
  	bool:bGlobalShutdown = false,
  	xChars[16] = "",
  	tReactionTimer = -1,
	xCash,
  	xScore,
  	bool:xTestBusy,
  	tickReactionStart,
  	CurrentFalloutPlayers = 0,
  	CurrentDerbyPlayers = 0,
  	iCountdownVIP = 5,
 	bool:IsCountDownRunning = false,
 	tVIPCountdown = -1,
 	veh_cnr[101],
 	g_CNR_RobberGate[2],
 	pArrests[MAX_PLAYERS],
 	T_RacePlayers = 0,
	T_DerbyPlayers = 0,
	T_GunGamePlayers = 0,
	T_FalloutPlayers = 0,
	T_TDMPlayers = 0,
	T_WarPlayers = 0,
	T_MinigunPlayers = 0,
	T_SniperPlayers = 0,
	T_CNRPlayers = 0,
	T_JPDMPlayers = 0,
	T_RocketDMPlayers = 0,
	T_ServerPlayers = 0,
	T_SawnPlayers = 0;

main()
{

}

// Callbacks
public OnGameModeInit()
{
	Log(LOG_INIT, "NEF Server Copyright (c)2011 - 2014 "SVRNAME"");
    Log(LOG_INIT, "Version: "CURRENT_VERSION"");
	#if IS_RELEASE_BUILD == true
	Log(LOG_INIT, "Build config: Release");
	#else
	Log(LOG_INIT, "Build config: Development");
	#endif
	Log(LOG_INIT, "Operating on %s", GetOS() == OS_LINUX ? ("Linux") : ("Windows"));
	
	if(NC_Init(CORE_VERSION) == 0)
	{
	    Log(LOG_INIT, "NC_Init failed, exiting.");
	    SendRconCommand("exit");
	}
	else
	{
	    Log(LOG_INIT, "NEFMOD Core (0x%x) attached.", CORE_VERSION);
	}
	
	Log(LOG_INIT, "MySQL: Logging: LOG_ERROR | LOG_WARNING");
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_TEXT);
	
    SQL_Connect();
	SQL_CleanUp();

	//Streamer_SetTickRate(40);
	
	#if INC_ENVIRONMENT == true
    BuildServerMap();
    BuildServerMap2();
    BuildServerMap3();
    BuildServerMap4();
    #endif
    Server_MapPatches();

	server_read_config();
	server_initialize();
	server_load_visuals();
	server_load_textdraws();
	ResetElevatorQueue();
	Elevator_Initialize();
	ClearDerbyVotes();
    ExecDerbyVotingTimer();
    ExecBGVotingTimer();
    race_fetch_data();
	LoadStores();
	LoadGZones();
	LoadHouses();
	LoadBusinesses();
	SollIchDirMaEtWatSagen();

	tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
	g_tRaceOpenSelection = SetTimer("race_open", 40307, false);
	SetTimer("ProcessTick", 1000, true);
	SetTimer("LogoSwitch", 10000, true);
	SetTimer("RandomTXTInfo", 30000, true);
    SetTimer("QueueProcess", 60000, true);
	SetTimer("Maths", 980000, true);
	SetTimer("server_random_broadcast", SERVERMSGS_TIME, true);
	SetTimer("DoLotto", 100000, false);

    LoadServerVehicles();

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		SetVehicleNumberPlate(i, "{F81414}NEF");
		SetVehicleToRespawn(i);
		
		if(IsComponentIdCompatible(GetVehicleModel(i), 1010))
			AddVehicleComponent(i, 1010);
			
		ChangeVehicleColor(i, (random(128) + 127), (random(128) + 127));
	}
	
	NC_OutputTeleportInfo();
	
    Log(LOG_INIT, "Server successfully loaded");
	return 1;
}

public OnGameModeExit()
{
	Log(LOG_EXIT, "MySQL: Garbage cleanup");
    SQL_CleanUp();
    
	mysql_stat(gstr2, pSQL, sizeof(gstr2));
	Log(LOG_EXIT, "MySQL: %s", gstr2);

	Log(LOG_EXIT, "MySQL: Closing");
 	mysql_close(pSQL);
 	
	Log(LOG_EXIT, "Now exiting.");
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(bGlobalShutdown)
		return 0;

	if(classid > 300 || classid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerRequestClass(%i, %i)", playerid, classid);
	}	
	
	if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	{/*
		SCM(playerid, -1, ""er"You are bugged in class selection. Please reconnect. "SERVER_IP"");
		PlayerData[playerid][bAllowSpawn] = false;
		KickEx(playerid);*/
	    new rand = random(4);
	    SetSpawnInfoEx(playerid, NO_TEAM, PlayerData[playerid][e_skinsave] != -1 ? PlayerData[playerid][e_skinsave] : GetPlayerSkin(playerid), WorldSpawns[rand][0], WorldSpawns[rand][1], WorldSpawns[rand][2] + 3.0, WorldSpawns[rand][3]);
        SetTimerEx("server_force_spawn", 10, 0, "i", playerid);
		return 0;
	}
		
    PlayerData[playerid][bFirstSpawn] = true;

    new rand = random(4);
    SetSpawnInfoEx(playerid, NO_TEAM, PlayerData[playerid][e_skinsave] != -1 ? PlayerData[playerid][e_skinsave] : GetPlayerSkin(playerid), WorldSpawns[rand][0], WorldSpawns[rand][1], WorldSpawns[rand][2] + 3.0, WorldSpawns[rand][3]);

	TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	HidePlayerInfoTextdraws(playerid);
	TextDrawShowForPlayer(playerid, TXTFooterBlack);
	TextDrawShowForPlayer(playerid, TXTFooter);
	TextDrawShowForPlayer(playerid, NEFLOGO[0]);
	TextDrawShowForPlayer(playerid, NEFLOGO[1]);
	TextDrawShowForPlayer(playerid, NEFLOGO[2]);
	TextDrawShowForPlayer(playerid, TXTRandomInfo);
	#if WINTER_EDITION == true
	TextDrawShowForPlayer(playerid, TXTWinterEdition);
	#endif

	if(PlayerData[playerid][e_skinsave] != -1)
	{
	    SetTimerEx("server_force_spawn", 10, 0, "i", playerid);
	    SCM(playerid, -1, ""server_sign" "r_besch"Your saved skin has been set. (/deleteskin to remove)");
	    return 0;
	}
	else
	{
		Streamer_UpdateEx(playerid, 1797.5835, -1305.0114, 121.2348, -1, -1);
		SetPlayerPos(playerid, 1797.5835, -1305.0114, 121.2348);
		SetPlayerFacingAngle(playerid, 359.9696);
		SetPlayerCameraPos(playerid, 1797.3688, -1299.8156, 121.4657);
		SetPlayerCameraLookAt(playerid, 1797.3661, -1300.8164, 121.4556);

		ShowPlayerWelcomeTextdraws(playerid);

		switch(random(2))
		{
		    case 0:
		    {
		        ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
			}
			case 1:
			{
			    ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.1, 1, 1, 1, 1, 1);
			}
		}

		SetPlayerAttachedObject(playerid, 0, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000); // Flame99 - handfire left
		SetPlayerAttachedObject(playerid, 1, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000); // Flame99 - handfie right
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(!PlayerData[playerid][bAllowSpawn])
	{
	    //SCM(playerid, -1, ""er"You are not logged in!");
	    return 0;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(PlayerData[playerid][bShowToys] && !PlayerData[playerid][bFirstSpawn]) AttachPlayerToys(playerid);
    
    if(PlayerData[playerid][bFirstSpawn])
    {
        gTeam[playerid] = gFREEROAM;
        PlayerData[playerid][bFirstSpawn] = false;
		PlayerData[playerid][bAllowSpawn] = false;
		AttachPlayerToys(playerid);
		ResetPlayerWorld(playerid);
		PlayerData[playerid][ExitType] = EXIT_FIRST_SPAWNED;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetCameraBehindPlayer(playerid);
		StopAudioStreamForPlayer(playerid);
		RandomWeapons(playerid);
		HidePlayerWelcomeTextdraws(playerid);
		ShowPlayerInfoTextdraws(playerid);
		SavePos(playerid);
		SyncGangZones(playerid);
		
		if(PlayerData[playerid][e_vip] == 1)
		{
		    SetPlayerArmour(playerid, 100.0);
		}
    }
    else switch(gTeam[playerid])
    {
        case gFREEROAM:
        {
            ResetPlayerWorld(playerid);
            
            /*if(PlayerData[playerid][bHasCustomSpawn]) Moved to OPD system
            {
        		SetPlayerPos(playerid, PlayerData[playerid][CSpawnX], PlayerData[playerid][CSpawnY], PlayerData[playerid][CSpawnZ]);
			    SetPlayerFacingAngle(playerid, PlayerData[playerid][CSpawnA]);
            }
            else
            {
                RandomSpawn(playerid);
            }*/
			SetCameraBehindPlayer(playerid);

			if(PlayerData[playerid][bGod])
			{
			    SetPlayerHealth(playerid, 99999.0);
			    ResetPlayerWeapons(playerid);
			    TextDrawShowForPlayer(playerid, TXTGodTD);
			}
			else
			{
			    RandomWeapons(playerid);
			}
            SavePos(playerid);
			SyncGangZones(playerid);

			if(PlayerData[playerid][e_vip] == 1)
			{
			    SetPlayerArmour(playerid, 100.0);
			}
		}
        case JAIL:
        {
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 10);
			SetPlayerFacingAngle(playerid, 360.0);
			SetPlayerPos(playerid, 197.5662, 175.4800, 1004.0);
			ResetPlayerWeapons(playerid);
        }
	    case STORE:
	    {
			gTeam[playerid] = gFREEROAM;
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid);
   			RandomWeapons(playerid);
	    }
	    case BUYCAR:
	    {
			gTeam[playerid] = gFREEROAM;
			SetPlayerInterior(playerid, 0);
		    SetPlayerPosEx(playerid, 1798.0952, -1410.8192, floatadd(13.5458, 4.5));
			RandomWeapons(playerid);

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
	    }
        case SPEC:
        {
	    	SetPlayerPos(playerid, PlayerData[playerid][SpecX], PlayerData[playerid][SpecY], PlayerData[playerid][SpecZ]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][SpecA]);
			SetCameraBehindPlayer(playerid);
			RandomWeapons(playerid);
			player_notice(playerid, "No longer spectating", "");
			
			gTeam[playerid] = gFREEROAM;

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
        }
		case DERBY:
		{
		    SetTimerEx("SetPlayerDerbyStaticMeshes", 10, 0, "i", playerid);
		}
		case WAR:
		{
			switch(random(4))
			{
			    case 0: SetPlayerPosition(playerid, 164.9882,1922.3430,18.4712,247.7249);
			    case 1: SetPlayerPosition(playerid, 285.5063,1819.9249,24.4108,1.9556);
			    case 2: SetPlayerPosition(playerid, 291.3683,1918.2693,17.6265,275.6602);
			    case 3: SetPlayerPosition(playerid, 236.5930,1918.7386,17.6446,145.6778);
			}

            ResetPlayerWeapons(playerid);
			SCM(playerid, -1, ""war_sign" You have respawned in War");
   			GivePlayerWeapon(playerid, 3, 1);
    		GivePlayerWeapon(playerid, 24, 9999999);
    		GivePlayerWeapon(playerid, 25, 9999999);
		 	GivePlayerWeapon(playerid, 28, 9999999);
    		GivePlayerWeapon(playerid, 30, 9999999);
    		GivePlayerWeapon(playerid, 33, 9999999);
    		GivePlayerWeapon(playerid, 17, 10);
    		GivePlayerWeapon(playerid, 10, 1);

			SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
		}
		case DM:
		{
		    ResetPlayerWeapons(playerid);
		    new rand = random(2);
			switch(gLastMap[playerid])
			{
			    case DM_1:
			    {
				  	GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 26, 99999);
					SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
			    }
			    case DM_2:
			    {
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 25, 99999);
				    GivePlayerWeapon(playerid, 34, 99999);
					SetPlayerPos(playerid, DM_MAP_2[rand][0], DM_MAP_2[rand][1], DM_MAP_2[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_2[rand][3]);
			    }
				case DM_3:
			    {
				   	GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 9, 99999);
					SetPlayerPos(playerid, DM_MAP_3[rand][0], DM_MAP_3[rand][1], DM_MAP_3[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_3[rand][3]);
			    }
				case DM_4:
			    {
		    		GivePlayerWeapon(playerid, 31, 99999);
					GivePlayerWeapon(playerid, 27, 99999);
					GivePlayerWeapon(playerid, 37, 99999);
					SetPlayerPos(playerid, DM_MAP_4[rand][0], DM_MAP_4[rand][1], DM_MAP_4[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_4[rand][3]);
			    }
			}
		}
		case gSAWN:
		{
		    ResetPlayerWeapons(playerid);
		    new rand = random(2);

			GivePlayerWeapon(playerid, 26, 99999);
			SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]);
			SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
		}
		case gBG_VOTING:
		{
		    SetPlayerBGStaticMeshes(playerid);
		}
		case gBG_TEAM1:
		{
		    SetPlayerBGTeam1(playerid);

		    SetCameraBehindPlayer(playerid);
		    RandomBGSpawn(playerid, CurrentBGMap, BG_TEAM1);
		    SetPlayerHealth(playerid, 100.0);
		}
		case gBG_TEAM2:
		{
            SetPlayerBGTeam2(playerid);

		    SetCameraBehindPlayer(playerid);
		    RandomBGSpawn(playerid, CurrentBGMap, BG_TEAM2);
		    SetPlayerHealth(playerid, 100.0);
		}
		case ROCKETDM:
		{
  			ResetPlayerWeapons(playerid);
  			GivePlayerWeapon(playerid, 35, 99999);
  			
			SetPlayerVirtualWorld(playerid, ROCKETDM_WORLD);
   			SetPlayerInterior(playerid, 0);

			new rand = random(8);
			SetPlayerPos(playerid, RocketDM_Spawns[rand][0], RocketDM_Spawns[rand][1], RocketDM_Spawns[rand][2] + 2.5);
			SetPlayerFacingAngle(playerid, RocketDM_Spawns[rand][3]);
		}
		case SNIPER:
		{
  			ResetPlayerWeapons(playerid);
			SetPlayerVirtualWorld(playerid, SNIPER_WORLD);
			GivePlayerWeapon(playerid, 34, 99999);
			SetPlayerInterior(playerid, 0);

			new rand = random(14);
			SetPlayerPosEx(playerid, Sniper_Spawns[rand][0], Sniper_Spawns[rand][1], floatadd(Sniper_Spawns[rand][2], 3.5));
			SetPlayerFacingAngle(playerid, Sniper_Spawns[rand][3]);
			
            LoadMap(playerid);
		}
		case MINIGUN:
		{
	        ResetPlayerWeapons(playerid);
	        GivePlayerWeapon(playerid, 38, 99999);
	        SetPlayerVirtualWorld(playerid, MINIGUN_WORLD);
			SetPlayerInterior(playerid, 0);

			new rand = random(10);
			SetPlayerPosEx(playerid, Minigun_Spawns[rand][0], Minigun_Spawns[rand][1], floatadd(Minigun_Spawns[rand][2], 2.5));
			SetPlayerFacingAngle(playerid, Minigun_Spawns[rand][3]);
		}
		case MINIGUN2:
		{
	        ResetPlayerWeapons(playerid);
	        GivePlayerWeapon(playerid, 38, 99999);
	        SetPlayerVirtualWorld(playerid, MINIGUN2_WORLD);
			SetPlayerInterior(playerid, 0);

			new rand = random(19);
			SetPlayerPosEx(playerid, Minigun2_Spawns[rand][0], Minigun2_Spawns[rand][1], floatadd(Minigun2_Spawns[rand][2], 2.5));
			SetPlayerFacingAngle(playerid, Minigun2_Spawns[rand][3]);
		}
		case HOUSE:
		{
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid);
			RandomWeapons(playerid);
			gTeam[playerid] = gFREEROAM;
		}
		case GUNGAME:
  		{
			ResetPlayerWeapons(playerid);
            LoadMap(playerid);
            new rand = random(9);
			SetPlayerPosEx(playerid, GunGame_Spawns[rand][0], GunGame_Spawns[rand][1], floatadd(GunGame_Spawns[rand][2], 3.5));
			SetPlayerFacingAngle(playerid, GunGame_Spawns[rand][3]);
			SetCameraBehindPlayer(playerid);

			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]], 65535);

			GunGame_Player[playerid][dead] = false;
			GunGame_Player[playerid][pw] = true;
			
			if(GunGamePlayers() >= 16) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, (25 + 5 * GunGamePlayers()));
		}
        case CNR:
        {
			switch(GetPVarInt(playerid, "inCNR"))
			{
				case 1: // Cops
				{
					SetPVarInt(playerid, "Cop", 1);
					SetPVarInt(playerid, "Robber", 0);
					PreloadAnimLib(playerid, "PED");
					SCM(playerid, COLOR_GREY, ""nef" "LB_E"You have respawned as a Cop!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
					SetPlayerColor(playerid, 0x1F75FEFF);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 700); // SMG
					GivePlayerWeapon(playerid, 31, 1000); //M4
					GivePlayerWeapon(playerid, 16, 1); // 1 Nade
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					SetPlayerTeam(playerid, 1);
					switch(random(3))
					{
						case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
						case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
						case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
					}
					switch(random(4))
					{
						case 0: SetPlayerSkin(playerid, 282);
						case 1: SetPlayerSkin(playerid, 283);
						case 2: SetPlayerSkin(playerid, 286);
						case 3: SetPlayerSkin(playerid, 280);
					}
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 1);
				}
				case 2: // Robbers
				{
					SetPVarInt(playerid, "Robber", 1);
					SetPVarInt(playerid, "Cop", 0);
   					SCM(playerid, COLOR_GREY, ""nef" "RED_E"You have respawned as a Robber!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_ORANGE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 5, 500); // Bat
					GivePlayerWeapon(playerid, 29, 800); // SMG
					GivePlayerWeapon(playerid, 30, 1000); //AK
					GivePlayerWeapon(playerid, 27, 200); //Combat
					GivePlayerWeapon(playerid, 16, 1); // 1 Nade
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					SetPlayerTeam(playerid, 2);
					SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
					switch(random(5))
					{
						case 0: SetPlayerSkin(playerid, 125);
						case 1: SetPlayerSkin(playerid, 126);
						case 2: SetPlayerSkin(playerid, 111);
						case 3: SetPlayerSkin(playerid, 112);
						case 4: SetPlayerSkin(playerid, 108);
					}
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 2);
					SetPlayerWantedLevel(playerid, 1);
				}
				case 3: // Swat
				{
					SetPVarInt(playerid, "Robber", 0);
					SetPVarInt(playerid, "Cop", 2);
			    	SCM(playerid, COLOR_GREY, ""nef" "LB_E"You have respawned as a Swat!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 1200); // SMG
					GivePlayerWeapon(playerid, 24, 1000); // Deagle
					GivePlayerWeapon(playerid, 31, 2000); //M4
					GivePlayerWeapon(playerid, 27, 1000); //Combat
					GivePlayerWeapon(playerid, 35, 2); //RPG
					GivePlayerWeapon(playerid, 16, 5); // 5 Nade
					SetPlayerTeam(playerid, 1);
					SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
					SetPlayerSkin(playerid, 285);
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 3);
				}
				case 4: // Pro Robbers
				{
					SetPVarInt(playerid, "Robber", 1);
					SetPVarInt(playerid, "Cop", 0);
					PreloadAnimLib(playerid, "SHOP");
		    		SCM(playerid, COLOR_GREY, ""nef" "RED_E"You have respawned as a Pro Robber!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~r~pro Robbers team~w~!", 4000, 4);
					SetPlayerColor(playerid, 0xFF3200FF);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 5, 500); // Bat
					GivePlayerWeapon(playerid, 29, 800); // SMG
					GivePlayerWeapon(playerid, 30, 1000); //AK
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					GivePlayerWeapon(playerid, 27, 200); //Combat
					GivePlayerWeapon(playerid, 16, 2); // 1 Nade
					SetPlayerTeam(playerid, 2);
					SetPlayerWantedLevel(playerid, 1);
					SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
					SetPlayerSkin(playerid, 113);
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 4);
    			}
				case 5: // Army
    			{
    				SetPVarInt(playerid, "Robber", 0);
					SetPVarInt(playerid, "Cop", 3);
		    		SCM(playerid, COLOR_GREY, ""nef" "PURPLE_E"You have respawned as an Army Personel!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_PURPLE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 1000); // SMG
					GivePlayerWeapon(playerid, 31, 5000); //M4
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					GivePlayerWeapon(playerid, 34, 300); // Sniper
					GivePlayerWeapon(playerid, 27, 1000); //Combat
					GivePlayerWeapon(playerid, 16, 2); // 1 Nade
					SetPlayerTeam(playerid, 1);
					SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
					SetPlayerSkin(playerid, 287);
  					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 5);
				}
  			}
 			if(PlayerData[playerid][e_vip] == 1)
			{
			    SetPlayerArmour(playerid, 100.0);
			}
			SetPVarInt(playerid, "HasEscaped", 0);
        }
    }
    
	if(PlayerData[playerid][bDuty])
	{
		SetPlayerHealth(playerid, 99999.0);
	}
	
	if(gTeam[playerid] == gFREEROAM) PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
    if(!PlayerData[playerid][bTextdraws]) Command_ReProcess(playerid, "/hidef", false);

    PlayerData[playerid][bIsDead] = false;
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	new connections = 0, buffer[16];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(i == playerid || !IsPlayerConnected(i))
	        continue;
	        
	    GetPlayerIp(i, buffer, sizeof(buffer)); // Not save to use __GetIP here
	    
	    if(!strcmp(buffer, ip_address))
			connections++;
	}
	
	if(connections >= 3)
	{
		Log(LOG_NET, "%i connections detected by (%s, %i, %i), hard ipban issued for 60 seconds", connections, ip_address, port, playerid);
		Kick(playerid);
		BlockIpAddress(ip_address, 60000);
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
    ResetPlayerVars(playerid);
	ResetPlayerPV(playerid);
    ResetPlayerToy(playerid);

    GetPlayerName(playerid, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1);
    GetPlayerIp(playerid, PlayerData[playerid][e_ip], MAX_PLAYER_IP + 1);

	mysql_format(pSQL, gstr, sizeof(gstr), "DELETE FROM `online` WHERE `name` = '%e';", __GetName(playerid));
	mysql_tquery(pSQL, gstr);

	SetPlayerScoreEx(playerid, 0);
	SetPlayerTeam(playerid, NO_TEAM);
	SetPlayerColor(playerid, szPlayerColors[random(sizeof(szPlayerColors))]);

    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);

    DisablePlayerRaceCheckpoint(playerid);

	if(bGlobalShutdown)
	{
  		Kick(playerid);
	}
	else
	{
	    Log(LOG_NET, "%s(%i, %s, %s) connected.", __GetName(playerid), playerid, __GetIP(playerid), __GetSerial(playerid));
	
	    new count_r = 0;
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	            count_r++;
	    }
	    
	    if(count_r > m_PlayerRecord) {
	        m_PlayerRecord = count_r;
	        server_save_config();
	    }
	
	    InitSession(playerid);
	
		TextDrawShowForPlayer(playerid, TXTOnJoin[0]);
		TextDrawShowForPlayer(playerid, TXTOnJoin[1]);

		PreloadAnimLib(playerid, "BOMBER");
		PreloadAnimLib(playerid, "RAPPING");
		PreloadAnimLib(playerid, "SHOP");
		PreloadAnimLib(playerid, "BEACH");
		PreloadAnimLib(playerid, "SMOKING");
		PreloadAnimLib(playerid, "FOOD");
		PreloadAnimLib(playerid, "STRIP");
		PreloadAnimLib(playerid, "ON_LOOKERS");
		PreloadAnimLib(playerid, "DEALER");
		PreloadAnimLib(playerid, "CRACK");
		PreloadAnimLib(playerid, "CARRY");
		PreloadAnimLib(playerid, "COP_AMBIENT");
		PreloadAnimLib(playerid, "PARK");
		PreloadAnimLib(playerid, "INT_HOUSE");
		PreloadAnimLib(playerid, "FOOD");
		PreloadAnimLib(playerid, "PED");
        ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.0, 1, 0, 0, 0, -1);
        
		PlayAudioStreamForPlayer(playerid, "http://static.nefserver.net/NEFLogin.mp3");

		mysql_format(pSQL, gstr, sizeof(gstr), "SELECT * FROM `bans` WHERE `playername` = '%e' LIMIT 1;", __GetName(playerid));
		mysql_pquery(pSQL, gstr, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_BANNED);
 	}
 	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	mysql_format(pSQL, gstr, sizeof(gstr), "DELETE FROM `online` WHERE `name` = '%e';", __GetName(playerid));
	mysql_tquery(pSQL, gstr);

	PlayerData[playerid][bLoadMap] = false;

   	if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED && PlayerData[playerid][bLogged])
	{
	    SQL_SaveAccount(playerid);
	    
		switch(gTeam[playerid])
		{
		    case gDUEL:
		    {
				new bool:found = false;
				
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(PlayerData[i][DuelRequestRecv] == playerid && gTeam[i] == gDUEL)
		            {
		                global_broadcast("Duel canceled between %s and %s. Reason: Disconnect", __GetName(playerid), __GetName(i));

		                gTeam[i] = gFREEROAM;
		                ResetPlayerWorld(i);
		                RandomSpawn(i, true);
		                RandomWeapons(i);
		                
		                PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
		                PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;
		                
		                found = true;
		            }
		        }
		        
				if(!found)
				{
				    for(new i = 0; i < MAX_PLAYERS; i++)
				    {
				        if(PlayerData[i][DuelRequest] == playerid) // Sender won
				        {
				           	global_broadcast(">> Duel canceled between %s and %s. Reason: Disconnect", __GetName(playerid), __GetName(i));

		 		            gTeam[i] = gFREEROAM;

				            PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
				            PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;

							ResetPlayerWorld(i);
							RandomSpawn(i, true);
				            RandomWeapons(i);

				            found = true;
				            break;
				        }
				    }
				}
		    }
		    case gBUILDRACE:
		    {
			    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
				if(fexist(gstr))
				{
					fremove(gstr);
				}
				RemoveFromRaceBuilder(playerid);
		    }
		    case gRACE:
		    {
		        --g_RacePlayerCount;

				gTeam[playerid] = gFREEROAM;
				
				if(g_RaceVehicle[playerid] != -1)
				{
					DestroyVehicleEx(g_RaceVehicle[playerid]);
					g_RaceVehicle[playerid] = -1;
				}
				
				TogglePlayerControllable(playerid, true);
                SetPlayerVirtualWorld(playerid, 0);
                DisablePlayerRaceCheckpoint(playerid);

				g_CPProgress[playerid] = 0;

				HidePlayerRaceTextdraws(playerid);

			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
			    Streamer_Update(playerid);
			}
		    case gBG_TEAM1:
		    {
			    BGTeam1Players--;
		    }
		    case gBG_TEAM2:
		    {
			    BGTeam2Players--;
		    }
		    case CNR:
		    {
		        Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		        Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		        Streamer_Update(playerid);
		    }
			case FALLOUT:
			{
                PlayerData[playerid][bFalloutLost] = true;
				gTeam[playerid] = gFREEROAM;
				CurrentFalloutPlayers--;

				if(fallout_get_playercount() < 2)
				{
				    KillTimer(FalloutData[I_tCountdown]);

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(gTeam[i] == FALLOUT)
					    {
					    	TogglePlayerControllable(i, true);
						    RandomSpawn(i, true);
						    RandomWeapons(i);
						    HidePlayerFalloutTextdraws(i);
						    ResetPlayerWorld(i);
						    global_broadcast("Fallout has been canceled! Reason: %s disconnected.", __GetName(playerid));
						    
						    gTeam[i] = gFREEROAM;
					    }
					}
					
					fallout_cancel();
				}
			}
			case DERBY:
			{
			    // OnPlayerDisconnect
			    if(PlayerData[playerid][t3dDerbyVehicleLabel] != PlayerText3D:-1)
			    {
			    	DeletePlayer3DTextLabel(playerid, PlayerData[playerid][t3dDerbyVehicleLabel]);
			    	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
			    }

			    if(!PlayerData[playerid][bDerbyAFK])
				{
				    CurrentDerbyPlayers--;
                    gTeam[playerid] = gFREEROAM;
			 		if(!IsDerbyRunning)
				    {
						if(CurrentDerbyPlayers < 2)
						{
							ExecDerbyVotingTimer();
							ClearDerbyVotes();
						}
					}
					else if(IsDerbyRunning && PlayerData[playerid][bDerbyWinner])
					{
					    if(PlayerData[playerid][pDerbyVehicle] != INVALID_VEHICLE_ID)
					    {
					    	DestroyVehicleEx(PlayerData[playerid][pDerbyVehicle]);
					    	PlayerData[playerid][pDerbyVehicle] = INVALID_VEHICLE_ID;
						}
					    PlayerData[playerid][bDerbyWinner] = false;
	        			DerbyPlayers--;
					    if(DerbyPlayers == 1) Derby();
					}
			    }
			    
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
			    Streamer_Update(playerid);
			}
		}
	}
	
    if(PlayerData[playerid][bMuted]) KillTimer(PlayerData[playerid][tMute]);

	if(PlayerData[playerid][AdminDutyLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][AdminDutyLabel]);
	    PlayerData[playerid][AdminDutyLabel] = Text3D:-1;
	}
	if(PlayerData[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][GangLabel]);
		PlayerData[playerid][GangLabel] = Text3D:-1;
	}
    if(PlayerData[playerid][VIPLabel] != Text3D:-1)
    {
        DestroyDynamic3DTextLabel(PlayerData[playerid][VIPLabel]);
        PlayerData[playerid][VIPLabel] = Text3D:-1;
    }
    for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
		RemovePlayerAttachedObject(playerid, i);
	}
	if(PlayerData[playerid][bRainbow])
	{
		KillTimer(PlayerData[playerid][tRainbow]);
		PlayerData[playerid][bRainbow] = false;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
    	if(gTeam[i] == SPEC && PlayerData[i][SpecID] == playerid)
    	{
    	    Command_ReProcess(i, "/specoff", false);
    	    SCM(i, -1, ""red"Player disconnected!");
		}

  		if(Iter_Contains(iterPlayerIgnore[i], playerid))
	    {
	        Iter_Remove(iterPlayerIgnore[i], playerid);
	    }
	    
        if(PlayerData[i][DuelRequestRecv] == playerid)
        {
            if(gTeam[i] != gDUEL)
            {
	        	format(gstr, sizeof(gstr), ">> %s(%i) canceled the duel request! Reason: Disconnected", __GetName(playerid), playerid);
	        	SCM(i, NEF_RED, gstr);

	        	PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
			}
        }
	}
	
    DestroyPlayerVehicles(playerid, true);

	if(PlayerData[playerid][e_ormid] != ORM:-1) {
		orm_destroy(PlayerData[playerid][e_ormid]);
	}
	
    ResetPlayerVars(playerid);
	ResetPlayerPV(playerid);
 	ResetPlayerToy(playerid);
 	
	SetPlayerScoreEx(playerid, 0);
	SetPlayerTeam(playerid, NO_TEAM);
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PlayerData[playerid][bOpenSeason])
		return 0;

	if(PlayerData[playerid][bIsDead])
	{
	    SCM(playerid, -1, ""er"You can't use commands while being dead!");
	    return 0;
	}

	if(PlayerData[playerid][ExitType] != EXIT_FIRST_SPAWNED)
	{
	    SCM(playerid, -1, ""er"You need to spawn to use commands!");
	    return 0;
	}

	if((PlayerData[playerid][iCoolDownCommand] + COOLDOWN_CMD) >= GetTickCountEx())
	{
		player_notice(playerid, "1 command per second", "");
	    return 0;
	}

	if(PlayerData[playerid][bFrozen])
	{
	    switch(YHash(get_command_name(cmdtext), false))
	    {
			case _I(p,m), _I(r), _I(p), _I(s,t,a,t,s), _I(e,x,i,t), _I(h,e,l,p), _I(c), _I(c,m,d,s): { }
			case _I(f,s), _I(i,d), _I(t,o,p), _I(r,e,p,o,r,t), _I(a,c,h,s), _I(s,t,r,e,a,m,s), _I(r,a,d,i,o): { }
	        default:
			{
			    SCM(playerid, -1, ""er"You can't use this command while you are frozen!");
				return 0;
   			}
	    }
	}
	else
	{
		switch(YHash(get_command_name(cmdtext), false))
		{
		    case _I(b,i,k,e,c), _I(b,m,x): { }
			case _I(s,k,y,d,i,v,e), _I(s,k,y,d,i,v,e,2), _I(s,k,y,d,i,v,e,3), _I(s,k,y,d,i,v,e,4), _I(s,k,y,d,i,v,e,5), _I(s,k,y,d,i,v,e,6): { }
			case _I(p,m), _I(r), _I(p), _I(s,t,a,t,s), _I(e,x,i,t), _I(h,e,l,p), _I(c), _I(c,m,d,s): { }
			case _I(f,s), _I(i,d), _I(t,o,p), _I(r,e,p,o,r,t), _I(a,c,h,s), _I(s,t,r,e,a,m,s), _I(r,a,d,i,o): { }
			default:
			{
			    if(GetPVarInt(playerid, "doingStunt") != 0)
			    {
			        format(gstr, sizeof(gstr), ""RED_E"You can no longer win this challenge because of using %s", cmdtext);
			        SCM(playerid, -1, gstr);
			        
					SetPVarInt(playerid, "doingStunt", 0);
					PlayerData[playerid][tickJoin_bmx] = 0;
				}
			}
		}
	}
	
	if(PlayerData[playerid][bLoadMap])
	{
	    player_notice(playerid, "Please wait for the map to load", "");
	    return 0;
	}
	
	PlayerData[playerid][iCoolDownCommand] = GetTickCountEx();

	CancelEdit(playerid);
	// Closing open dialogs in order to avoid some exploits.
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	format(gstr, sizeof(gstr), "[%02d:%02d:%02d] [%i]%s req:%s success:%i\r\n", gTime[3], gTime[4], gTime[5], playerid, __GetName(playerid), cmdtext, success);
	new File:hLogCommand = fopen("/Log/cmdlog.txt", io_append);
	fwrite(hLogCommand, gstr);
	fclose(hLogCommand);

	if(!success) {
	    player_notice(playerid, "Unknown command", "Type ~y~/c ~w~for all commands");
	} else {
	    g_ServerStats[0]++;
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(GetPlayerInterior(playerid) == 0) // Crasher
    {
        Log(LOG_SUSPECT, "OnVehicleMod(%i, %i, %i) triggered by %s with world interior 0", playerid, vehicleid, componentid, __GetName(playerid));
        PlayerData[playerid][bwSuspect] |= SUSPECT_CRASHER_OVM;
        return 0;
    }

	new model = GetVehicleModel(vehicleid);
	if(!IsComponentIdCompatible(model, componentid)) // Crasher
	{
	    Log(LOG_SUSPECT, "OnVehicleMod(%i, %i, %i) triggered by %s with invalid componentid using model %i", playerid, vehicleid, componentid, __GetName(playerid), model);
	    PlayerData[playerid][bwSuspect] |= SUSPECT_CRASHER_OVM;
		return 0;
	}
	
	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] == vehicleid)
	    {
	        SaveVehComponets(playerid, componentid);
	    }
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(vehicleid >= MAX_VEHICLES || vehicleid < 0 || paintjobid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnVehiclePaintjob(%i, %i, %i)", playerid, vehicleid, paintjobid);
	}

	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] == vehicleid)
	    {
	        PlayerPVData[playerid][PVSelect[playerid]][e_paintjob] = paintjobid;
	    }
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(vehicleid >= MAX_VEHICLES || vehicleid < 0 || color1 < 0 || color2 < 0 || color1 > 255 || color2 > 255)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnVehicleRespray(%i, %i, %i, %i)", playerid, vehicleid, color1, color2);
	}

	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] == vehicleid)
	    {
	        PlayerPVData[playerid][PVSelect[playerid]][e_color1] = color1;
	        PlayerPVData[playerid][PVSelect[playerid]][e_color2] = color2;
	    }
	}
	return 1;
}

/* AUTHORITATIVE SERVER */
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid < 0 || (issuerid >= MAX_PLAYERS && issuerid != INVALID_PLAYER_ID) || weaponid < 0 || bodypart < 0 || weaponid > 201)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerTakeDamage(%i, %i, %f, %i, %i)", playerid, issuerid, amount, weaponid, bodypart);
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(damagedid < 0 || (damagedid >= MAX_PLAYERS && damagedid != INVALID_PLAYER_ID) || weaponid < 0 || bodypart < 0 || weaponid > 201)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerGiveDamage(%i, %i, %f, %i, %i)", playerid, damagedid, amount, weaponid, bodypart);
	}

	static const BodyParts[7][] =
	{
	    "Torso",
	    "Groin",
	    "Left_Arm",
	    "Right_Arm",
	    "Left_Leg",
	    "Right_Leg",
	    "Head"
	};
	
	if(gTeam[playerid] == DM)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(gTeam[i] == SPEC && PlayerData[i][SpecID] == playerid)
	   		{
				if(bodypart < 3 || bodypart > 9)
				    continue;
				    
	   		    format(gstr, sizeof(gstr), "%.02f DMG to ID:%i on %s", amount, damagedid, BodyParts[bodypart - 3]);
	   		    PushDamageBox(i, gstr);
			}
		}
	}
	return 1;
}

stock CreateDamageBox(playerid)
{
    ClearDamageBox(playerid);
}

stock ClearDamageBox(playerid)
{
	for(new i = 0; i < 10; i++)
	{
		PlayerData[playerid][DmgMsg][i][0] = '\0';
	}
	_AssembleDamageBoxText(playerid);
}

stock PushDamageBox(playerid, message[])
{
	#pragma unused message
    _AssembleDamageBoxText(playerid);
}

stock _AssembleDamageBoxText(playerid)
{
	new string[1024];
	for(new i = 0; i < 10; i++)
	{
	    strcat(string, PlayerData[playerid][DmgMsg][i]);
	    strcat(string, "\n");
	}
    PlayerTextDrawSetString(playerid, PlayerData[playerid][DmgBox][1], string);
}

stock DestoryDamageBox(playerid)
{
	if(PlayerData[playerid][DmgBox][0] != PlayerText:-1)
	{
	    PlayerTextDrawDestroy(playerid, PlayerData[playerid][DmgBox][0]);
	    PlayerTextDrawDestroy(playerid, PlayerData[playerid][DmgBox][1]);
	    PlayerData[playerid][DmgBox][0] = PlayerText:-1;
	    PlayerData[playerid][DmgBox][1] = PlayerText:-1;
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	/* Bullet Crasher http://forum.sa-mp.com/showthread.php?t=535559 */
	if(hittype != BULLET_HIT_TYPE_NONE) {
	    if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) {
	        PlayerData[playerid][bwSuspect] |= SUSPECT_CRASHER_OPWS;
		    return 0;
  		}
	}

	/* ANTI FAKE DATA */
	if(weaponid == 0) {
		Log(LOG_SUSPECT, "OPWS triggered by %i using %i, %i, %i", playerid, weaponid, hittype, hitid);
		PlayerData[playerid][bwSuspect] |= SUSPECT_CRASHER_OPWS;
	    return 0;
	}
	
	/* ANTI PROAIM.CS EXPERIMENTAL */
	if(!(PlayerData[playerid][bwSuspect] & SUSPECT_PROAIM)) {
		if(hittype == BULLET_HIT_TYPE_PLAYER) {
		    if(hitid != INVALID_PLAYER_ID) {
		        if(!IsPlayerInAnyVehicle(playerid)) {
					static Float:vect[7];
					GetPlayerLastShotVectors(playerid, vect[0], vect[1], vect[2], vect[3], vect[4], vect[5]);
		            vect[6] = GetPlayerDistanceFromPoint(hitid, vect[3], vect[4], vect[5]);

		            if(vect[6] >= 5.0 && vect[6] < 300.0) {
		                if(++PlayerData[playerid][iProAimCount] >= 4) {
		                    PlayerData[playerid][iProAimCount] = 0;

		                	PlayerData[playerid][bwSuspect] |= SUSPECT_PROAIM;
						}
					}
				}
		    }
		}
	}

	/* PLAYER QUEUED FOR KICK */
	if(hittype == BULLET_HIT_TYPE_PLAYER) {
	    if(hitid != INVALID_PLAYER_ID) {
		    if(PlayerData[playerid][bOpenSeason] || PlayerData[hitid][bOpenSeason]) {
		        return 0;
		    }
		}
	}
	
	/* GOD CONTROL */
	if(hittype == BULLET_HIT_TYPE_PLAYER) {
	    if(hitid != INVALID_PLAYER_ID) {
	        if(PlayerData[hitid][bGod]) {
	            player_notice(playerid, "Player has /god enabled", "");
	        }
	    }
	}
	
	/* ANTI DRIVEBY SPAWNZONES */
	if(hittype == BULLET_HIT_TYPE_PLAYER) {
	    if(hitid != INVALID_PLAYER_ID) {
            if(gTeam[hitid] == gFREEROAM) {
				if(GetPlayerVehicleSeat(playerid) == 0) {
					for(new i = 0; i < sizeof(g_SpawnAreas); i++) {
					    if(IsPlayerInDynamicArea(playerid, g_SpawnAreas[i])) {
							return 0;
					    }
					}
				}
			}
	    }
	}
	
	/* ANTI GBUG */
	if(hittype == BULLET_HIT_TYPE_PLAYER || hittype == BULLET_HIT_TYPE_VEHICLE) {
	    if(hitid != INVALID_PLAYER_ID || hitid != INVALID_VEHICLE_ID) {
	        if(IsPlayerInAnyVehicle(playerid)) {
				switch(GetPlayerVehicleSeat(playerid)) {
				    case 1: {
						switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
						    case 509, 510, 581, 521, 522, 523, 586, 481, 462, 448, 461, 463, 468, 471: return 0;
						}
				    }
				    case 2..4: return 0;
				}
	        }
	    }
 	}
	
	/* LAST HIT */
	if(hittype == BULLET_HIT_TYPE_PLAYER) {
	    if(hitid != INVALID_PLAYER_ID) {
	        if(gTeam[hitid] == gFREEROAM) {
	        	PlayerData[hitid][tickLastShot] = GetTickCountEx();
			}
		}
	}
	
	/* HITSOUND */
	if(hittype == BULLET_HIT_TYPE_PLAYER) {
	    if(hitid != INVALID_PLAYER_ID) {
			if(weaponid >= 22) {
			    if(gTeam[playerid] == DM || gTeam[playerid] == SNIPER || gTeam[playerid] == gDUEL) {
			        PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
			    }
			}
		}
	}

	/* TDM RPG ABUSE */
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2) {
		if(weaponid == 35) {
		    GivePlayerWeapon(playerid, 37, 1);
		    GivePlayerWeapon(playerid, 35, 0);
		
		    new p_Weapons[13][2];
			for(new i = 0; i < 13; i++) {
			    GetPlayerWeaponData(playerid, i, p_Weapons[i][0], p_Weapons[i][1]);
			}
			p_Weapons[7][0] = 0; // RPG
			
			ResetPlayerWeapons(playerid);
			
			for(new i = 0; i < 13; i++) {
			    GivePlayerWeapon(playerid, p_Weapons[i][0], p_Weapons[i][1]);
			}
		}
	}
	return 1;
}

function:OnQueryFinish(query[], resultid, extraid, connectionHandle)
{
    switch(resultid)
	{
		case THREAD_RACE_FINISH:
		{
			new maxid = cache_insert_id();

			format(gstr2, sizeof(gstr2), "SELECT `id`, `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 6;", g_NextRace); // 6 , da vllt Platz 5 belegt und somit 6 verdrÃ¤ngt // versteh ich nicht // ah warte jetzt hab ichs kapiert
			mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_RACE_LATEST, maxid, extraid);
		}
		case THREAD_RACE_LATEST:
		{
			new rows, fields;
			cache_get_data(rows, fields, pSQL);
			
			if(rows > 0)
			{
			    new name[25], time, id,
			        minute, sec, msec;
			    
				for(new i = 0; i < rows; i++)
				{
				    name[0] = '\0';
					id = cache_get_row_int(i, 0, pSQL);
					time = cache_get_row_int(i, 2, pSQL);
					cache_get_row(i, 1, name, pSQL, sizeof(name));
					
					if(extraid == id)
					{
					    ConvertTime(var0, time, minute, sec, msec);
					    
					    if(connectionHandle == 1)
					    {
					        format(gstr, sizeof(gstr), ""race_sign" %s hit a new record on %03i with %02i:%02i.%03i", name, g_NextRace, minute, sec, msec);
					        SCMToAll(-1, gstr);
					    }
					    else
					    {
					 	    format(gstr, sizeof(gstr), ""race_sign" %s reached on %03i place %i with %02i:%02i.%03i", name, g_NextRace, connectionHandle, minute, sec, msec);
							SCMToAll(-1, gstr);
					    }
					    
						if(rows > i + 1)
						{
						    new record_sec,
						        record_msec,
						        record_minute,
						        oldtime;

							name[0] = '\0';
							cache_get_row(i + 1, 1, name, pSQL, sizeof(name));
							oldtime = cache_get_row_int(i + 1, 2, pSQL);

					 	    ConvertTime(var1, oldtime, minute, sec, msec);
					 	    oldtime -= time;
					 	    ConvertTime(var2, oldtime, record_minute, record_sec, record_msec);

					 	    format(gstr, sizeof(gstr), ""race_sign" The old record by %s with %02i:%02i.%03i has been improved by %02i:%02i.%03i", name, minute, sec, msec, record_minute, record_sec, record_msec);
							SCMToAll(-1, gstr);
                        }
						break;
					}
				}
			}
		}
		case THREAD_RACE_TOPLIST:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, pSQL);

		    if(rows > 0)
		    {
			    new minute,
					sec,
					msec,
					name[25],
					time;

				for(new i = 0; i < rows; i++)
				{
					cache_get_row(i, 0, name, pSQL, sizeof(name));
					time = cache_get_row_int(i, 1, pSQL);
					ConvertTime(var, time, minute, sec, msec);
					format(gstr, sizeof(gstr), ""nef_yellow"%i. "green"%s "nef_yellow"- "white"%02i:%02i.%03i", i + 1, name, minute, sec, msec);
					SCM(extraid, -1, gstr);
				}
		    }
		    else
		    {
		        SCM(extraid, -1, ""vgreen"» No race records available");
		    }
		}
	    case THREAD_GANG_DESTROY:
	    {
     		new rows, fields;
	        cache_get_data(rows, fields, pSQL);
	        
	        if(rows == 1)
	        {
	            new gangname[21], gangid;
	            cache_get_row(0, 1, gangname, pSQL, sizeof(gangname));
	            gangid = cache_get_row_int(0, 0, pSQL);
	            
				if(Iter_Contains(iterGangWar, gangid)) return SCM(extraid, -1, ""er"You can't close your gang since there is a gang war going on.");

				format(gstr, sizeof(gstr), "UPDATE `accounts` SET `gangrank` = 0, `gangid` = 0 WHERE `gangid` = %i;", gangid);
				mysql_tquery(pSQL, gstr);

				for(new r = 0; r < MAX_GZONES; r++)
				{
				    if(GZoneData[r][e_ormid] == ORM:-1)
						continue;
				    
				    if(GZoneData[r][e_localgang] == gangid)
				    {
						GZoneData[r][e_timeleft] = 0;
						GZoneData[r][e_underattack] = false;
						GZoneData[r][e_attacker] = 0;
						GZoneData[r][e_defender] = 0;
						GZoneData[r][e_locked] = gettime();
						GZoneData[r][e_localgang] = 0;

						format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname]);
						UpdateDynamic3DTextLabelText(GZoneData[r][e_labelid], WHITE, gstr2);

						orm_update(GZoneData[r][e_ormid]);
				    }
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(PlayerData[i][e_gangid] == gangid || PlayerData[i][TmpGangID] == gangid)
				        {
					        PlayerData[i][bGangInvite] = false;
					        PlayerData[i][e_gangid] = 0;
					        PlayerData[i][TmpGangID] = 0;
					        PlayerData[i][e_gangrank] = GANG_POS_NONE;
					        PlayerData[i][GangName][0] = '\0';
							PlayerData[i][GangTag][0] = '\0';
							SQL_SaveAccount(i, false, false);
					 		if(PlayerData[i][GangLabel] != Text3D:-1)
							{
							    DestroyDynamic3DTextLabel(PlayerData[i][GangLabel]);
					 			PlayerData[i][GangLabel] = Text3D:-1;
							}
						}
						
						SyncGangZones(i);
				    }
				}

				format(gstr, sizeof(gstr), "DELETE FROM `gangs` WHERE `id` = %i LIMIT 1;", gangid);
				mysql_tquery(pSQL, gstr);

				format(gstr, sizeof(gstr), ""server_sign" "r_besch"Admin %s(%i) has destroyed gang %s", __GetName(extraid), extraid, gangname);
				SCMToAll(-1, gstr);
	        }
			else SCM(extraid, -1, ""er"This gang does not exist");
	    }
        case THREAD_FETCH_GANG_MEMBER_NAMES:
        {
            new rows, fields;
            cache_get_data(rows, fields, pSQL);

			if(rows > 0)
			{
			    new tmpstring[2048],
			        count = 0,
			        finstring[sizeof(tmpstring) + 300];

				for(new i = 0; i < rows; i++)
				{
					new result[MAX_PLAYER_NAME+1],
					    tmp[MAX_PLAYER_NAME+1 + 25],
					    rank = 1;

					cache_get_row(i, 0, result, pSQL, sizeof(result));
					rank = cache_get_row_int(i, 1, pSQL);

					format(tmp, sizeof(tmp), "\n%i. %s (%s)", count + 1, result, g_szGangRanks[rank][E_gang_pos_name]);
					strcat(tmpstring, tmp);

					if(++count >= 50) break;
				}
				
				format(finstring, sizeof(finstring), "There are "yellow"%i"white" members in this gang\n"green"Showing %i members below:"white"", rows, count);
				strcat(finstring, tmpstring);

				ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_LIST, ""nef" :: Gang Members", finstring, "OK", "");
            }
        }
		case THREAD_FETCH_GANG_INFO:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, pSQL);

		    if(rows > 0)
			{
			    new gangname[MAX_GANG_NAME+1],
	    			gangtag[5],
					score,
					udate,
					count = 0,
					color,
					gcar,
					members[1536],
					string[2048];

				cache_get_row(0, 1, gangname, pSQL, sizeof(gangname));
				cache_get_row(0, 2, gangtag, pSQL, sizeof(gangtag));
				score = cache_get_row_int(0, 3, pSQL);
				color = cache_get_row_int(0, 4, pSQL);
				gcar = cache_get_row_int(0, 5, pSQL);
				udate = cache_get_row_int(0, 7, pSQL);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(PlayerData[i][e_gangrank] == 0) continue;
				    if(PlayerData[i][e_gangid] != PlayerData[extraid][e_gangid]) continue;
				    if(count <= 20)
				    {
				        new tmp[MAX_PLAYER_NAME + 1 + 16];
				        format(tmp, sizeof(tmp), "\n{%06x}%s(%i)", GetColorEx(i) >>> 8, __GetName(i), i);
				        strcat(members, tmp);
				    }
				    count++;
				}

				if(count > 20)
				{
					format(string, sizeof(string),
					""white"Gang name:\t"nef_yellow"%s\n"white"Gang tag:\t"nef_yellow"%s\n"white"Gang created:\t"nef_yellow"%s\n"white"Gang score:\t"nef_yellow"%i\n"white"Gang color:\t{%06x}COLOR\n"white"Gang car:\t"nef_yellow"%s\n"white"Users online:\t"nef_yellow"%i\n\n"white"Online:%s\n"white"[... too many online]",
						gangname, gangtag, UTConvert(udate), score, color >>> 8, IsValidVehicleModel(gcar) ? VehicleNames[gcar - 400] : "not set", count, members);
				}
				else
				{
				    format(string, sizeof(string),
					""white"Gang name:\t"nef_yellow"%s\n"white"Gang tag:\t"nef_yellow"%s\n"white"Gang created:\t"nef_yellow"%s\n"white"Gang score:\t"nef_yellow"%i\n"white"Gang color:\t{%06x}COLOR\n"white"Gang car:\t"nef_yellow"%s\n"white"Users online:\t"nef_yellow"%i\n\n"white"Online:%s",
						gangname, gangtag, UTConvert(udate), score, color >>> 8, IsValidVehicleModel(gcar) ? VehicleNames[gcar - 400] : "not set", count, members);
				}

				ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Gang Info", string, "OK", "");
		    }
		}
		case THREAD_CREATE_GANG:
		{
			PlayerData[extraid][e_gangrank] = GANG_POS_FOUNDER;
			PlayerData[extraid][e_gangid] = cache_insert_id();

            GivePlayerMoneyEx(extraid, -500000);

			SQL_SaveAccount(extraid, false, false);

			format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) has created a new gang: '"nef_yellow"%s"white"'", __GetName(extraid), extraid, PlayerData[extraid][GangName]);
            SCMToAll(-1, gstr);

            ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"Gang created!", ""white"You have the access to use the following:\n\n/gmenu\n/gcapture\n/gzones\n/ginvite\n/gkick\n/gwar\n/gclose\n\nPut "nef_yellow"! "white" before your msg to talk in gang chat", "OK", "");

			format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerData[extraid][GangName]);

			if(PlayerData[extraid][GangLabel] != Text3D:-1)
			{
			    DestroyDynamic3DTextLabel(PlayerData[extraid][GangLabel]);
	 			PlayerData[extraid][GangLabel] = Text3D:-1;
			}

			SyncGangZones(extraid);
			PlayerData[extraid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, extraid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);
		}
		case THREAD_ASSIGN_RANK:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, pSQL);

	  		if(rows > 0)
		    {
				rows = cache_get_row_int(0, 0, pSQL);
				
				if(PlayerData[extraid][e_gangrank] == GANG_POS_LEADER || PlayerData[extraid][e_gangrank] == GANG_POS_FOUNDER || PlayerData[extraid][e_gangrank] == GANG_POS_CO_FOUNDER)
				{
					if(PlayerData[extraid][e_gangrank] == GANG_POS_LEADER && rows >= GANG_POS_LEADER)
					{
					    return SCM(extraid, -1, ""er"Cannot assign as this player has the same or a greater rank than you!");
					}
					
					if(PlayerData[extraid][e_gangrank] == GANG_POS_CO_FOUNDER && rows >= GANG_POS_CO_FOUNDER)
					{
					    return SCM(extraid, -1, ""er"Cannot assign as this player has the same or a greater rank than you!");
					}

					if(rows == PlayerData[extraid][RankSelected])
					{
					    return SCM(extraid, -1, ""er"Player is already this rank!");
					}

					SQL_FinalRankAssign(extraid);
				}
				else
				{
				     return SCM(extraid, -1, ""er"You don't have permission!");
				}
			}
			else
			{
				SCM(extraid, -1, ""er"This player is not in your gang!");
			}
		}
		case THREAD_ASSIGN_RANK_2:
		{
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s's Rank has been assigned to %s", PlayerData[extraid][GangAssignRank], g_szGangRanks[PlayerData[extraid][RankSelected]][E_gang_pos_name]);
			gang_broadcast(PlayerData[extraid][e_gangid], gstr);

			PlayerData[extraid][RankSelected] = 0;
			PlayerData[extraid][GangAssignRank][0] = '\0';
		}
		case THREAD_KICK_FROM_GANG:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, pSQL);

	  		if(rows > 0)
		    {
				if(cache_get_row_int(0, 0, pSQL) == GANG_POS_FOUNDER)
				{
				    SCM(extraid, -1, ""er"You cannot kick the founder.");
				}
				else
		        {
					SQL_FinalGangKick(extraid);
				}
			}
			else
			{
				SCM(extraid, -1, ""er"This player is not in your gang!");
				PlayerData[extraid][GangKickMem][0] = '\0';
			}
		}
		case THREAD_KICK_FROM_GANG_2:
		{
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s has kicked %s from the gang.", __GetName(extraid), PlayerData[extraid][GangKickMem]);
			gang_broadcast(PlayerData[extraid][e_gangid], gstr);

            PlayerData[extraid][GangKickMem][0] = '\0';
		}
	 	case THREAD_GANG_EXIST:
	 	{
		    new rows, fields;
		    cache_get_data(rows, fields, pSQL);

			if(rows == 0)
	 		{
				SQL_CreateGang(extraid);
			}
			else
			{
			    CancelGangCreation(extraid);
			    SCM(extraid, -1, ""er"This Gang already exist, please choose another gangname");
			}
		}
	}
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	Log(LOG_FAIL, "OnQueryError(%i, %s, %s, %s, %i)", errorid, error, callback, query, connectionHandle);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(newinteriorid < 0 || oldinteriorid < 0 || newinteriorid > 128 || oldinteriorid > 128)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerInteriorChange(%i, %i, %i)", playerid, newinteriorid, oldinteriorid);
	}
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == SPEC && PlayerData[i][SpecID] == playerid)
   		{
   		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    Log(LOG_ONLINE, "RconLoginAttempt by %s using %s, failed: %i", ip, password, !success);
    return 1;
}

public OnPlayerUpdate(playerid)
{
    PlayerData[playerid][tickPlayerUpdate] = GetTickCountEx();
    PlayerData[playerid][tickPlayerUpdateCalls]++;
    PlayerData[playerid][tickPlayerUpdateCalls2]++;

	switch(gTeam[playerid])
	{
	    case GUNGAME:
	    {
			if(!GunGame_Player[playerid][dead])
			{
				if(!GetPlayerWeapon(playerid))
				{
					if(GunGame_Player[playerid][pw])
					{
						SetPlayerArmedWeapon(playerid, 4);
						GunGame_Player[playerid][pw] = false;
					}
					else
					{
					    SetPlayerArmedWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]]);
						GunGame_Player[playerid][pw] = true;
					}
				}
				else
				{
					GunGame_Player[playerid][pw] = (GetPlayerWeapon(playerid) == 4 ? false : true);
				}
			}
	    }
	    case gFREEROAM:
	    {
	        if(PlayerData[playerid][tickPlayerUpdateCalls2] >= 4)
	        {
		        if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		        {
			        switch(GetPlayerWeapon(playerid))
			        {
			            case 38, 36, 35:
			            {
			                PlayerData[playerid][bwSuspect] |= SUSPECT_WEAPON;
				            ResetPlayerWeapons(playerid);
				            return 0;
			            }
			        }
				}
				PlayerData[playerid][tickPlayerUpdateCalls2] = 0;
			}
	    }
	    default: PlayerData[playerid][tickPlayerUpdateCalls2] = 0;
	}

	if(PlayerData[playerid][tickPlayerUpdateCalls] >= 10)
	{
	    if(PlayerData[playerid][bSpeedo])
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
		        new Float:p[3], Float:sspeed, str[12];
		        GetVehicleVelocity(GetPlayerVehicleID(playerid), p[0], p[1], p[2]);
		        sspeed = 150 * (p[0] * p[0] + p[1] * p[1]/*+p[2]*p[2]*/);
		        format(str, sizeof(str), "%.0f", sspeed);

				PlayerTextDrawSetString(playerid, TXTSpeedo[playerid], str);
			}
		}
		PlayerData[playerid][tickPlayerUpdateCalls] = 0;
	}
	return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
	if(vehicleid < 0 || (vehicleid >= MAX_VEHICLES && vehicleid != INVALID_VEHICLE_ID))
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnTrailerUpdate(%i, %i)", playerid, vehicleid);
	}

	if(playerid != INVALID_PLAYER_ID) {
	    if(PlayerData[playerid][bOpenSeason]) {
	        return 0;
	    }
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(vehicleid >= MAX_VEHICLES || vehicleid < 0 || passenger_seat < 0 || passenger_seat > 255)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnUnoccupiedVehicleUpdate(%i, %i, %i)", vehicleid, playerid, passenger_seat);
	}

	if(playerid != INVALID_PLAYER_ID) {
	    if(PlayerData[playerid][bOpenSeason]) {
	        return 0;
	    }
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid)
{
	if(vehicleid > MAX_VEHICLES || vehicleid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerEnterVehicle(%i, %i)", playerid, vehicleid);
	}	
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(vehicleid > MAX_VEHICLES || vehicleid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerExitVehicle(%i, %i)", playerid, vehicleid);
	}	

	if(gTeam[playerid] == DERBY || gTeam[playerid] == gRACE)
	{
	    if(ExitPlayer(playerid) == 0)
	    {
	        player_notice(playerid, "REMOVED", "Do not exit vehicles in derby/race");
	    }
	    else
	    {
		    new Float:POS[3];
		    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			PutPlayerInVehicle(playerid, vehicleid, 0);
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(PlayerData[playerid][bOpenSeason])
		return 0;

	if(PlayerData[playerid][ExitType] != EXIT_FIRST_SPAWNED)
	{
	    SCM(playerid, -1, ""er"You need to spawn to use the chat!");
	    return 0;
	}

	if(PlayerData[playerid][bMuted])
	{
	    SCM(playerid, RED, "You are muted! Please wait until the time is over!");
	    return 0;
	}

	if(bGlobalShutdown)
	    return 0;

	if((PlayerData[playerid][iCoolDownChat] + COOLDOWN_CHAT) >= GetTickCountEx())
	{
		player_notice(playerid, "1 message every second", "");
	    return 0;
	}

	if(strfind(text, "/q", true) != -1 || strfind(text, "/ q", true) != -1 || strfind(text, "/quit", true) != -1 || strfind(text, "/ quit", true) != -1)
  		return 0;

	if(!strcmp(text, LastPlayerText[playerid], true))
	{
	    player_notice(playerid, "Do not repeat yourself", "");
	    return 0;
	}
	strmid(LastPlayerText[playerid], text, 0, 144, 144);

	format(gstr2, sizeof(gstr2), "[%02d:%02d:%02d] [%i]%s: %s\r\n", gTime[3], gTime[4], gTime[5], playerid, __GetName(playerid), text);
	new File:hLogChat = fopen("/Log/chatlog.txt", io_append);
	fwrite(hLogChat, gstr2);
	fclose(hLogChat);

	if(IsAd(text))
	{
	  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
		admin_broadcast(RED, gstr2);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 0;
	}

	if(xTestBusy)
	{
		if(!strcmp(xChars, text, false) && ReactionOn)
		{
            ReactionOn = false;

		    new rtime = GetTickCountEx() - tickReactionStart,
		        second = rtime / 1000;

			rtime = rtime - second * 1000;

			format(gstr, sizeof(gstr), "["vlila"REACTION"white"]: {%06x}%s(%i) "white"has won the reaction test in %2i.%03i seconds!", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, second, rtime);
		    SCMToAll(WHITE, gstr);

		    format(gstr, sizeof(gstr), "» You have earned $%s + %i score.", number_format(xCash), xScore);
		    SCM(playerid, GREEN, gstr);

			format(gstr, sizeof(gstr), "Won the Reaction Test in %2i.%03i seconds!", second, rtime);
			SetPlayerChatBubble(playerid, gstr, NEF_YELLOW, 40.0, 5000);

			GivePlayerMoneyEx(playerid, xCash, true, true);

		    PlayerData[playerid][e_reaction]++;
		    
		    if(PlayerAchData[playerid][e_ach_toofast][0] == 0 && PlayerData[playerid][e_reaction] >= 10)
		    {
		        GivePlayerAchievement(playerid, e_ach_toofast, "Too Fast", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
			}
		    
			GivePlayerScoreEx(playerid, xScore, true, true);
			tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
		    xTestBusy = false;
		    return 0;
		}
	}

    g_ServerStats[1]++;

	if(PlayerData[playerid][e_level] >= 1 && PlayerData[playerid][bDuty] && text[0] == '#')
	{
	    format(gstr, sizeof(gstr), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, text[1]);
		admin_broadcast(COLOR_RED, gstr);
	    return 0;
	}
	if(text[0] == '#' && PlayerData[playerid][e_level] >= 1)
	{
		format(gstr, sizeof(gstr), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, text[1]);
		admin_broadcast(COLOR_RED, gstr);
		return 0;
	}
	if(text[0] == '@')
	{
	    new string[144 + 3];
	    format(string, sizeof(string), "/r %s", text[1]);
	    Command_ReProcess(playerid, string, false);
		return 0;
	}

	if(text[0] == '!' && PlayerData[playerid][e_gangrank] != 0)
	{
	    format(gstr, sizeof(gstr), ""gang_sign" {%06x}%s(%i)"r_besch": %s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, text[1]);
		gang_broadcast(PlayerData[playerid][e_gangid], gstr);
		
		format(gstr, sizeof(gstr), "[GC] %s(%i): %s", __GetName(playerid), playerid, text[1]);
		admin_broadcast(GREY, gstr, false, true);
		return 0;
	}

	if(!PlayerData[playerid][bCaps])
	{
	    UpperToLower(text);
	}

    PlayerData[playerid][iCoolDownChat] = GetTickCountEx();

	format(gstr, sizeof(gstr), "%s", text);
	SetPlayerChatBubble(playerid, gstr, WHITE, 50.0, 7000);

	if(PlayerData[playerid][e_gangrank] != 0)
	{
	 	if(strlen(text) > 80)
		{
			new pos = strfind(text, " ", true, 60);
			if(pos == -1 || pos > 80)
			{
				pos = 70;
			}

	        new tmp[144];
			tmp[0] = EOS;
			if(PlayerData[playerid][e_level] != 0) strcat(tmp, "{A8DBFF}");
			strcat(tmp, text[pos]);
			text[pos] = EOS;

			if(PlayerData[playerid][e_level] == 0)
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): %s", GetColorEx(playerid) >>> 8, PlayerData[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
				SCMToAll(-1, tmp);
	   		}
			else
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): {A8DBFF}%s", GetColorEx(playerid) >>> 8, PlayerData[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
				SCMToAll(-1, tmp);
			}
		}
		else
		{
			if(PlayerData[playerid][e_level] == 0)
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): %s", GetColorEx(playerid) >>> 8, PlayerData[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
	   		}
			else
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): %s%s", GetColorEx(playerid) >>> 8, PlayerData[playerid][GangTag], __GetName(playerid), playerid, PlayerData[playerid][bOnlineAdmin] ? ("{A8DBFF}") : (""), text);
				SCMToAll(-1, gstr);
			}
		}
		return 0;
	}

	if(strlen(text) > 80)
	{
		new pos = strfind(text, " ", true, 60);
		if(pos == -1 || pos > 80)
		{
			pos = 70;
		}

        new tmp[144];
		tmp[0] = EOS;
		if(PlayerData[playerid][e_level] != 0) strcat(tmp, "{A8DBFF}");
		strcat(tmp, text[pos]);
		text[pos] = EOS;
		
		if(PlayerData[playerid][e_level] == 0)
		{
			format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): %s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
			SCMToAll(-1, tmp);
		}
		else
		{
			format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): {A8DBFF}%s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
			SCMToAll(-1, tmp);
		}
	}
	else
	{
		if(PlayerData[playerid][e_level] == 0)
		{
	 		format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): %s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
  		}
		else
		{
            format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): %s%s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, PlayerData[playerid][bOnlineAdmin] ? ("{A8DBFF}") : (""), text);
			SCMToAll(-1, gstr);
		}
	}
	return 0;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	// Closing open dialogs in order to avoid some exploits.
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

    PlayerData[playerid][bIsDead] = true;

	new cstime = gettime(); // http://forum.sa-mp.com/showpost.php?p=1820351&postcount=41
	switch(cstime - PlayerData[playerid][iLastDeathTime])
	{
	    case 0..3:
	    {
		    if(++PlayerData[playerid][iDeathCountThreshold] == 4)
		    {
			    format(gstr, sizeof(gstr), "[SUSPECT] Fake deaths/kills detected, kicking (%s, %i)", __GetName(playerid), playerid);
			    admin_broadcast(RED, gstr);
			    Log(LOG_NET, gstr);
				return Kick(playerid);
		    }
	    }
	    default: PlayerData[playerid][iDeathCountThreshold] = 0;
	}
	PlayerData[playerid][iLastDeathTime] = cstime;

	if(PlayerData[playerid][bLoadMap])
	{
		KillTimer(PlayerData[playerid][tLoadMap]);
		PlayerData[playerid][tLoadMap] = -1;
		TogglePlayerControllable(playerid, 1);
		PlayerData[playerid][bLoadMap] = false;
		TextDrawHideForPlayer(playerid, TXTLoading);
	}

    SendDeathMessage(killerid, playerid, reason);
	PlayerData[playerid][e_deaths]++;
	PlayerData[playerid][tickLastShot] = 0;

	if(killerid != INVALID_PLAYER_ID)
	{
		if(reason <= 46 && gTeam[killerid] == gFREEROAM && IsPlayerConnected(killerid) && PlayerData[playerid][HitmanHit] > 0)
		{
			format(gstr, sizeof(gstr), "%s(%i) killed %s(%i) and received $%s for a completed hit!", __GetName(killerid), killerid, __GetName(playerid), playerid, number_format(PlayerData[playerid][HitmanHit]));
			SCMToAll(YELLOW, gstr);
			GivePlayerMoneyEx(killerid, PlayerData[playerid][HitmanHit]);
			PlayerData[playerid][HitmanHit] = 0;
		}
	}

	if(IsPlayerAvail(killerid))
	{
	    g_ServerStats[3]++;
		PlayerData[killerid][e_kills]++;
 		GivePlayerMoneyEx(playerid, -250);

 		player_notice(playerid, "Killed By", __GetName(killerid));
		player_notice(killerid, "You Killed", __GetName(playerid));
		
		if(PlayerAchData[killerid][e_ach_grimreaper][0] == 0 && PlayerData[killerid][e_kills] >= 300)
		{
		    GivePlayerAchievement(killerid, e_ach_grimreaper, "Grimreaper", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		}
		
	 	if(reason == 4 && PlayerAchData[killerid][e_ach_silentkiller][0] == 0)
		{
		    GivePlayerAchievement(killerid, e_ach_silentkiller, "Silent Killer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		}
	}

	if(PlayerData[playerid][e_deaths] >= 50 && PlayerAchData[playerid][e_ach_restinpeace][0] == 0)
	{
	    GivePlayerAchievement(playerid, e_ach_restinpeace, "Rest in Peace", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(gTeam[i] == SPEC && PlayerData[i][SpecID] == playerid)
	    {
	        Command_ReProcess(i, "/specoff", false);
	        player_notice(i, "Spectated player died", "");
		}
	}
	
	SetPVarInt(playerid, "doingStunt", 0);
	PlayerData[playerid][tickJoin_bmx] = 0;

    TextDrawHideForPlayer(playerid, TXTGodTD);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);

	switch(random(7))
	{
		case 0: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~C~h~L~h~U~h~C~w~K ~b~C~h~L~h~U~h~C~w~K, ~r~Y~h~O~r~U~h~'R~h~E ~r~FU~h~C~r~K~h~E~r~D", 6000, 3);
		case 1: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~I~h~C~h~E~h~D", 6000, 3);
		case 2: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~RE~h~ST ~h~IN ~h~PEA~h~CE", 6000, 3);
		case 3: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~T~h~A~h~S~h~T~h~E ~r~T~h~H~h~E ~r~CO~h~CK", 6000, 3);
		case 4: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~N~h~O ~h~C~h~A~h~K~h~E ~y~F~h~O~h~R ~h~Y~h~O~h~U", 6000, 3);
		case 5: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~C~h~L~h~U~h~C~w~KITY FU~b~~h~~h~~h~C~b~~h~~h~K~b~~h~E~b~D", 6000, 3);
		case 6: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~L~h~O~h~L ~w~U ~b~~h~~h~~h~D~b~~h~I~h~E~b~~h~D", 6000, 3);
	}

	if(PlayerData[playerid][bFrozen])
	{
    	TogglePlayerControllable(playerid, true);
		PlayerData[playerid][bFrozen] = false;
	}
	
	switch(gTeam[playerid])
	{
	    case gDUEL:
	    {
	        new bool:found = false;
	    
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(PlayerData[i][DuelRequestRecv] == playerid && gTeam[i] == gDUEL) // Sender lost
			    {
		            new Float:HP;
		            GetPlayerHealth(i, HP);
		            global_broadcast(">> DUEL: %s won the duel against %s and has %.2f HP left!", __GetName(i), __GetName(playerid), HP);
		            
 		            gTeam[i] = gFREEROAM;
		            gTeam[playerid] = gFREEROAM;
		            
		            PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
		            PlayerData[playerid][DuelRequestRecv] = INVALID_PLAYER_ID;
		            
		            PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;
		            PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID;
		            
					ResetPlayerWorld(i);
					RandomSpawn(i, true);
		            RandomWeapons(i);
		            
		            found = true;
		            break;
			    }
			}
			
			if(!found)
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(PlayerData[i][DuelRequest] == playerid) // Sender won
			        {
			            new Float:HP;
			            GetPlayerHealth(i, HP);
			            global_broadcast(">> DUEL: %s won the duel against %s and has %.2f HP left!", __GetName(i), __GetName(playerid), HP);

	 		            gTeam[i] = gFREEROAM;
			            gTeam[playerid] = gFREEROAM;

			            PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
			            PlayerData[playerid][DuelRequestRecv] = INVALID_PLAYER_ID;

			            PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;
			            PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID;

						ResetPlayerWorld(i);
						RandomSpawn(i, true);
			            RandomWeapons(i);

			            found = true;
			            break;
			        }
			    }
			}
	    }
		case gBUILDRACE:
		{
		    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
			if(fexist(gstr))
			{
				fremove(gstr);
			}
		    RemoveFromRaceBuilder(playerid);
		}
	    case gFREEROAM:
	    {
            if(PlayerData[playerid][bHasCustomSpawn] && !PlayerData[playerid][bGWarMode])
            {
                SetSpawnInfoEx(playerid, NO_TEAM, GetPlayerSkin(playerid), PlayerData[playerid][CSpawnX], PlayerData[playerid][CSpawnY], PlayerData[playerid][CSpawnZ], PlayerData[playerid][CSpawnA]);
            }
            else
            {
                new rand = random(4);
                SetSpawnInfoEx(playerid, NO_TEAM, GetPlayerSkin(playerid), WorldSpawns[rand][0], WorldSpawns[rand][1], WorldSpawns[rand][2] + 3.0, WorldSpawns[rand][3]);
            }
	    
	        if(IsPlayerAvail(killerid) && playerid != killerid && gTeam[killerid] == gFREEROAM)
     		{
			    PlayerData[killerid][e_wanteds]++;

				format(gstr2, sizeof(gstr2), "~y~[] ~w~%i", PlayerData[killerid][e_wanteds]);
				PlayerTextDrawSetString(killerid, TXTWantedsTD[killerid], gstr2);

				switch(PlayerData[killerid][e_wanteds])
				{
				    case 3:
				    {
				        player_notice(killerid, "Triple Kill", "+$2,000");
        				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"is on a kill streak with 3 kills!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 1, true, true);
						GivePlayerMoneyEx(killerid, 2000, true, true);
				    }
				    case 5:
					{
					    player_notice(killerid, "Multi Kill", "+$4,000");
        				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"is on a kill streak with 5 kills!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 2, true, true);
						GivePlayerMoneyEx(killerid, 4000, true, true);
					}
					case 10:
  					{
					    player_notice(killerid, "Ultra Kill", "+$7,000");
     					format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"is unstoppable with a 10 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 3, true, true);
						GivePlayerMoneyEx(killerid, 7000, true, true);
					}
					case 15:
  					{
					    player_notice(killerid, "~r~~h~~h~Monster Kill", "+$10,000");
   						format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"can't be stopped with a 15 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 4, true, true);
						GivePlayerMoneyEx(killerid, 10000, true, true);
					}
					case 25:
  					{
  					    player_notice(killerid, "~r~~h~~h~Incredible Kill", "+$15,000");
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"can't be stopped with a 25 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 5, true, true);
						GivePlayerMoneyEx(killerid, 15000, true, true);
					}
					case 30:
  					{
  					    player_notice(killerid, "~r~~h~~h~Fantastic Kill", "+$20,000");
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"can't be stopped with a 30 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 6, true, true);
						GivePlayerMoneyEx(killerid, 20000, true, true);
						
						if(PlayerAchData[killerid][e_ach_masskiller][0] == 0)
						{
						    GivePlayerAchievement(killerid, e_ach_masskiller, "Masskiller", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
						}
					}
					case 40:
  					{
  					    player_notice(killerid, "~r~~h~~h~Mega Kill", "+$25,000");
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"is godlike with a 40 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 7, true, true);
						GivePlayerMoneyEx(killerid, 25000, true, true);
					}
					case 50:
  					{
        				player_notice(killerid, "~r~Unbelievable!!!", "+$30,000");
                 		format(gstr, sizeof(gstr), "* {%06x}%s(%i) "red"shitting on everyone with a 50 streak kill!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScoreEx(killerid, 8, true, true);
						GivePlayerMoneyEx(killerid, 30000, true, true);
					}
				}

				if(PlayerData[playerid][e_wanteds] > 2)
				{
					new money = floatround((1400 * PlayerData[playerid][e_wanteds]) / 2.6),
						score = floatround((2 * PlayerData[playerid][e_wanteds]) / 2.5);

					GivePlayerScoreEx(killerid, score, true, true);
					GivePlayerMoneyEx(killerid, money, true, true);
				}
				else
				{
					GivePlayerScoreEx(killerid, 1, true, true);
					GivePlayerMoneyEx(killerid, 1250, true, true);
				}

				if(PlayerData[playerid][e_wanteds] >= 3)
				{
				    format(gstr, sizeof(gstr), "* {%06x}%s(%i) "x_red_l"ended %s's(%i) killstreak of %i kills!", GetColorEx(killerid) >>> 8, __GetName(killerid), killerid, __GetName(playerid), playerid, PlayerData[playerid][e_wanteds]);
				    SCMToAll(COLOR_RED, gstr);
				}

				PlayerData[playerid][e_wanteds] = 0;
				
				format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerData[playerid][e_wanteds]);
				PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);
				
			  	// Nur Kills bei gFREEROAM werten für GangScore
			 	if(PlayerData[killerid][e_gangrank] > 0 && PlayerData[playerid][e_gangid] != PlayerData[killerid][e_gangid])
				{
				  	SQL_UpdateGangScore(PlayerData[killerid][e_gangid], 1);
			 	}
	        }
	    }
	    case gRACE:
	    {
     		--g_RacePlayerCount;

	    	format(gstr, sizeof(gstr), "%s(%i) has died!", __GetName(playerid), playerid);
			race_broadcast(gstr);

			gTeam[playerid] = gFREEROAM;

			if(g_RaceVehicle[playerid] != -1)
			{
				DestroyVehicleEx(g_RaceVehicle[playerid]);
				g_RaceVehicle[playerid] = -1;
			}

			TogglePlayerControllable(playerid, true);
            ToggleSpeedo(playerid, false);

			g_CPProgress[playerid] = 0;

			HidePlayerRaceTextdraws(playerid);
            DisablePlayerRaceCheckpoint(playerid);

		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(playerid);

			ResetPlayerWorld(playerid);
	    }
		case DERBY:
		{
		    // OPDeath
		    if(PlayerData[playerid][bDerbyAFK])
			{
		        return 1;
		    }

		    if(IsDerbyRunning && PlayerData[playerid][bDerbyWinner])
		    {
		    	format(gstr, sizeof(gstr), "%s's vehicle has been destroyed!", __GetName(playerid));
				derby_broadcast(gstr);

		    	DerbyPlayers--;
		    	PlayerData[playerid][bDerbyWinner] = false;
			    if(PlayerData[playerid][pDerbyVehicle] != INVALID_VEHICLE_ID)
			    {
			    	DestroyVehicleEx(PlayerData[playerid][pDerbyVehicle]);
			    	PlayerData[playerid][pDerbyVehicle] = INVALID_VEHICLE_ID;
				}
			    if(PlayerData[playerid][t3dDerbyVehicleLabel] != PlayerText3D:-1)
			    {
			    	DeletePlayer3DTextLabel(playerid, PlayerData[playerid][t3dDerbyVehicleLabel]);
			    	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
			    }

		    	if(DerbyPlayers == 1) Derby();
			}
			else
			{
			    Command_ReProcess(playerid, "/exit", false);
			}
		}
		case FALLOUT:
		{
			format(gstr, sizeof(gstr), "%s(%i) died!", __GetName(playerid), playerid);
			fallout_broadcast(gstr);

		    TogglePlayerControllable(playerid, true);
		    HidePlayerFalloutTextdraws(playerid);
		    ResetPlayerWorld(playerid);
		    player_notice(playerid, "You lost this fallout match", "");
		    
		    CurrentFalloutPlayers--;
            PlayerData[playerid][bFalloutLost] = true;
            gTeam[playerid] = gFREEROAM;

			if(fallout_get_playercount() < 2)
			{
			    KillTimer(FalloutData[I_tCountdown]);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(gTeam[i] == FALLOUT)
				    {
				    	TogglePlayerControllable(i, true);
					    RandomSpawn(i, true);
					    RandomWeapons(i);
					    HidePlayerFalloutTextdraws(i);
					    ResetPlayerWorld(i);
					    fallout_broadcast("Fallout has been canceled!");
					    
						gTeam[i] = gFREEROAM;
				    }
				}
				
				fallout_cancel();
			}
	  	}
		case MINIGUN, MINIGUN2:
		{
		    if(IsPlayerAvail(killerid) && (gTeam[killerid] == MINIGUN || gTeam[killerid] == MINIGUN2))
		    {
				GivePlayerScoreEx(killerid, 1, true, true);
				GivePlayerMoneyEx(killerid, 2000, true, true);
		    }
		}
		case SNIPER:
		{
		    if(IsPlayerAvail(killerid) && gTeam[killerid] == SNIPER)
		    {
				GivePlayerScoreEx(killerid, 2, true, true);
				GivePlayerMoneyEx(killerid, 3000, true, true);
		    }
		    
		    /*new rand = random(14);
		    SetSpawnInfoEx(playerid, NO_TEAM, GetPlayerSkin(playerid), Sniper_Spawns[rand][0], Sniper_Spawns[rand][1], Sniper_Spawns[rand][2] + 3.5, Sniper_Spawns[rand][3]);*/
		}
		case ROCKETDM:
		{
		    if(IsPlayerAvail(killerid) && gTeam[killerid] == ROCKETDM)
		    {
				GivePlayerScoreEx(killerid, 1, true, true);
				GivePlayerMoneyEx(killerid, 2000, true, true);
		    }
		}
		case gBG_TEAM1:
		{
  		    if(IsPlayerAvail(killerid) && gTeam[killerid] == gBG_TEAM2)
		    {
		        BGTeam2Kills++;
		        GivePlayerScoreEx(killerid, 1, true, true);
				GivePlayerMoneyEx(killerid, 2500, true, true);
		    }
		}
		case gBG_TEAM2:
		{
  		    if(IsPlayerAvail(killerid) && gTeam[killerid] == gBG_TEAM1)
		    {
		        BGTeam1Kills++;
		        GivePlayerScoreEx(killerid, 1, true, true);
				GivePlayerMoneyEx(killerid, 2500, true, true);
		    }
		}
		case DM, WAR, gSAWN:
		{
  		    if(IsPlayerAvail(killerid))
		    {
				switch(gTeam[killerid])
				{
				    case DM, WAR, gSAWN:
				    {
				        GivePlayerScoreEx(killerid, 1, true, true);
						GivePlayerMoneyEx(killerid, 2500, true, true);

						new Float:health;
						GetPlayerHealth(killerid, health);

						if(health < 90)
						{
						    SetPlayerHealth(killerid, health + 5);
		                    SetPlayerChatBubble(killerid, ""green"+ 5 HP!", -1, 15.0, 2000);
						}
				    }
				}
		    }
		    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		}
		case CNR:
		{
  		    if(IsPlayerAvail(killerid))
		    {
		        if(gTeam[killerid] == CNR)
		        {
			        GivePlayerScoreEx(killerid, 2, true, true);
					GivePlayerMoneyEx(killerid, 3000, true, true);

				    if(GetPVarInt(playerid, "Robber") == 1)
				    {
				        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
				    }
				}
			}
		}
		case GUNGAME:
		{
			GunGame_Player[playerid][dead] = true;

			if(IsPlayerAvail(killerid) && gTeam[killerid] == GUNGAME)
			{
		        GivePlayerScoreEx(killerid, 1, true, true);
				GivePlayerMoneyEx(killerid, 2000, true, true);
			}

			if(killerid == INVALID_PLAYER_ID || gTeam[killerid] != GUNGAME)
			{
				SetPlayerCameraPos(playerid, 179.2239, 2097.3289, 93.4786);
				SetPlayerCameraLookAt(playerid, 178.3643, 2096.8113, 92.8986);
			}
			else
			{
				if(reason == 4)
				{
					if(GunGame_Player[playerid][level] != 0)
					{
						GunGame_Player[playerid][level]--;
     				    GameTextForPlayer(killerid, "~p~Humiliation!~n~~w~Demoted the player by one rank!", 1850, 6);
						GameTextForPlayer(playerid, "~p~Humiliated~n~~w~You got demoted!", 1850, 6);
					}
				}
			    else
				{
				    GameTextForPlayer(killerid, "~p~Player killed!~n~~w~Advanced to the next tier!", 1850, 6);
				}

				GunGame_Player[killerid][level]++;

				if(GunGame_Player[killerid][level] == 14)
				{
					new	c,
						g_WinnerName[3][MAX_PLAYER_NAME+1],
						g_Data[MAX_PLAYERS][e_GunGame];

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    g_Data[i][GG_iPlayer] = i;
						if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
						{
							g_Data[i][GG_iLevel] = GunGame_Player[i][level];
			    		}
						else
						{
						    g_Data[i][GG_iLevel] = -1;
						}
					}
					SortDeepArray(g_Data, GG_iLevel, .order = SORT_DESC);
					for(new i = 0; i < 3; i++)
					{
					    if(g_Data[i][GG_iLevel] == -1)
						{
							g_WinnerName[i] = "----";
					    }
					    else
						{
					        c++;
						    GetPlayerName(g_Data[i][GG_iPlayer], g_WinnerName[i], MAX_PLAYER_NAME+1);
					    }
					}

					new gWinners[3];
					for(new i = 0; i < 3; i++)
					{
					    gWinners[i] = __GetPlayerID(g_WinnerName[i]);
					}

					if(gWinners[0] < MAX_PLAYERS && gWinners[0] != INVALID_PLAYER_ID)
					{
					    PlayerData[gWinners[0]][e_gungamewins]++;

                       	if(PlayerAchData[gWinners[0]][e_ach_oneshot2kills][0] == 0 && PlayerData[gWinners[0]][e_gungamewins] >= 10)
						{
						    GivePlayerAchievement(gWinners[0], e_ach_oneshot2kills, "One Shot Two Kills", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
						}

						GivePlayerScoreEx(gWinners[0], 10, true, true);
						GivePlayerMoneyEx(gWinners[0], 10000, true, true);
					}
					if(gWinners[1] < MAX_PLAYERS && gWinners[1] != INVALID_PLAYER_ID)
					{
						GivePlayerScoreEx(gWinners[1], 5, true, true);
						GivePlayerMoneyEx(gWinners[1], 7000, true, true);
					}
					if(gWinners[2] < MAX_PLAYERS && gWinners[2] != INVALID_PLAYER_ID)
					{
						GivePlayerScoreEx(gWinners[2], 3, true, true);
						GivePlayerMoneyEx(gWinners[2], 5000, true, true);
					}

     				format(gstr, sizeof(gstr), "~p~~h~The match ended!~n~~g~~h~1. %02i - %s~n~~y~~h~2. %02i - %s~n~~w~3. %02i - %s",
	 					g_Data[0][GG_iLevel],
						g_WinnerName[0],
						g_Data[1][GG_iLevel],
						g_WinnerName[1],
						g_Data[2][GG_iLevel],
						g_WinnerName[2]);

					for(new i = 0; i < MAX_PLAYERS; i++)
				    {
						if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
						{
							GunGame_Player[i][level] = 0;
							ResetPlayerWeapons(i);

							if(i != playerid)
							{
								if(GunGamePlayers() >= 16) SetPlayerHealth(i, 100.0);
								else SetPlayerHealth(i, ((25) + (5 * GunGamePlayers())));
								GivePlayerWeapon(i, 4, 1);
								GivePlayerWeapon(i, GunGame_Weapons[GunGame_Player[i][level]], 65535);
								GunGame_Player[i][pw] = true;
							}

							GameTextForPlayer(i, gstr, 4500, 3);
						}
					}
	    	    }
		        else
				{
				    ResetPlayerWeapons(killerid);
				    GivePlayerWeapon(killerid, 4, 1);
					GivePlayerWeapon(killerid, GunGame_Weapons[GunGame_Player[killerid][level]], 65535);

					if(GunGame_Player[killerid][level] == 13)
					{
						format(gstr, sizeof gstr, "%s reached the last level!", __GetName(killerid));
     				    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
							if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
							{
		                		GameTextForPlayer(i, gstr, 2500, 3);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(gTeam[playerid] != gFREEROAM)
		return 1;
	
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid] && GZoneData[r][e_underattack] && areaid == GZoneData[r][e_areaid])
	    {
	        // Player entered GWAR
			player_notice(playerid, "Gang War entered", "Type ~y~/gcapture ~w~near the flag");
			SetPlayerGWarMode(playerid);
			break;
		}

		if(GZoneData[r][e_areaid] == areaid && GZoneData[r][e_underattack] && GZoneData[r][e_localgang] != PlayerData[playerid][e_gangid] && GZoneData[r][e_attacker] != PlayerData[playerid][e_gangid])
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    player_notice(playerid, "Gang War", "ongoing");
		        new Float:POS[4], vid = GetPlayerVehicleID(playerid);
		        GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
		        GetVehicleZAngle(vid, POS[3]);

		        POS[0] += (-1.1 * floatsin(-POS[3], degrees));
		        POS[1] += (-1.1 * floatcos(-POS[3], degrees));

		        SetVehicleVelocity(vid, POS[0], POS[1], POS[2] * 1.2);
		        break;
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(PlayerData[playerid][bGWarMode])
	{
		for(new r = 0; r < MAX_GZONES; r++)
		{
	 	    if(GZoneData[r][e_ormid] == ORM:-1)
		        continue;
	        
		    if(GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid] && GZoneData[r][e_underattack] && areaid == GZoneData[r][e_areaid])
		    {
		        // Player left GWAR
	            SCM(playerid, -1, ""orange"You have left the gang zone, get back fast and defend it!");
	            ResetPlayerGWarMode(playerid, false);
	            break;
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		return 1;

	switch(checkpointid)
	{
 		case 1: // BikeChallenge Prize (/bikec)
		{
			if(GetPVarInt(playerid, "doingStunt") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 522)
				  	return 1;

     			new tick = GetTickCountEx();
				if((PlayerData[playerid][tickLastBIKEC] + COOLDOWN_BIKEC) >= tick)
				{
				    return player_notice(playerid, "Stunt is on cooldown,", "please wait");
				}
				
				new vehicle = 0;
				
				if((vehicle = GetPlayerVehicleID(playerid)) != 0)
				{
					new Float:POS[3];
		   			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					SetPlayerPos(playerid, POS[0], POS[1], POS[2] + 10.0);

                    SetVehicleToRespawn(vehicle);
				}

				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the bike challenge.", 6000, 5);
				PlayerPlaySound(playerid, 1149, 0, 0, 0);
				
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /bikec.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				
				GivePlayerScoreEx(playerid, 4, true, true);
				GivePlayerMoneyEx(playerid, 7000, true, true);
				
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the bike challange~n~~r~~h~~h~4 score and $7,000!");
				if(PlayerAchData[playerid][e_ach_biker][0] == 0)
				{
  					GivePlayerAchievement(playerid, e_ach_biker, "Biker", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				}
				
				SetPVarInt(playerid, "doingStunt", 0);
				PlayerData[playerid][tickJoin_bmx] = 0;
				PlayerData[playerid][tickLastBIKEC] = tick;
	  		}
 		}
 		case 2: //Skydive Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 3, true, true);
				GivePlayerMoneyEx(playerid, 5000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the first skydive challange~n~~r~~h~~h~3 score and $5,000!");
				SetPVarInt(playerid, "CompletedSD1", 1);
				if(GetPVarInt(playerid, "CompletedSD1") == 1 && GetPVarInt(playerid, "CompletedSD2") == 1)
				{
					if(PlayerAchData[playerid][e_ach_skydiver][0] == 0)
					{
      					GivePlayerAchievement(playerid, e_ach_skydiver, "Skydiver", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}
				}
			}
	 	}
		case 3: //Skydive2 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive2 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive2.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 6, true, true);
				GivePlayerMoneyEx(playerid, 10000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the second skydive challange~n~~r~~h~~h~6 score and $10,000!");
				SetPVarInt(playerid, "CompletedSD2", 1);
				if(GetPVarInt(playerid, "CompletedSD1") == 1 && GetPVarInt(playerid, "CompletedSD2") == 1)
				{
					if(PlayerAchData[playerid][e_ach_skydiver][0] == 0)
					{
      					GivePlayerAchievement(playerid, e_ach_skydiver, "Skydiver", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}
				}
			}
	 	}
		case 4: //Skydive3 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive3 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive3.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 7, true, true);
				GivePlayerMoneyEx(playerid, 7500, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the third skydive challange~n~~r~~h~~h~7 score and $7,500!");
			}
	 	}
		case 5: //Skydive4 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive4 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive4.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 7, true, true);
				GivePlayerMoneyEx(playerid, 8000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the 4th skydive challange~n~~r~~h~~h~7 score and $8,000!");
			}
	 	}
 		case 6: //bmx Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 3 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && ((PlayerData[playerid][tickJoin_bmx] + 60000) < GetTickCountEx()))
	  		{
	  		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 481) return 1;

   				RemovePlayerFromVehicle(playerid);
				new Float:POS[3];
	   			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], 10.0));
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));

				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the BMX Parkour.", 6000, 5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /bmx.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 8, true, true);
				GivePlayerMoneyEx(playerid, 10000, true, true);
				PlayerData[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the BMX Parkour~n~~r~~h~~h~8 score and $10,000!");
				if(PlayerAchData[playerid][e_ach_bmxmaster][0] == 0)
				{
  					GivePlayerAchievement(playerid, e_ach_bmxmaster, "BMX Master", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				}
				SetPVarInt(playerid, "doingStunt", 0);
				PlayerData[playerid][tickJoin_bmx] = 0;
			}
	 	}
	 	case 7..10: //Refill Stations
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	 		{
	 			ShowPlayerDialog(playerid, REFIL_DIALOG, DIALOG_STYLE_LIST, ""ORANGE_E"Refill Station", ""GREEN_E"Repair Vehicle\t\t"LG_E"$2000\n"LB_E"Add Nitro (x10)\t\t"LG_E"$5000\n"LB_E"Repair and add Nitro\t"LG_E"$6500", "Select", "Exit");
			}
	 	}
	 	case 11: //24/7
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
	 		SetPlayerPosition(playerid, -29.3253,-89.4238,1003.5469,309.1852);
	 		SetPlayerInterior(playerid, 18);
			SetPVarInt(playerid, "InStore", 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
  			{
  				GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			}
	 	}
	 	case 12: //24/7 2
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPlayerPosition(playerid, -25.7717,-185.2310,1003.5469,357.3543);
	 		SetPlayerInterior(playerid, 17);
	 		SetPVarInt(playerid, "InStore", 2);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
	 	}
	 	case 13: //Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 3);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 14: //Ammunation
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 4);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 15: //24/7 Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2096.8403,2218.1736,10.8203,180.3828);
 		}
		case 16: //24/7 2 Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.4414,1989.8256,10.8203,89.8401);
		}
		case 17: //Casino Exit
		{
			if(GetPVarInt(playerid, "InStore") == 8)
	  		{
	  			SetPlayerPosition(playerid, 2087.2427,1518.5631,10.8203,42.2712);
	  		}
	  		else SetPlayerPosition(playerid, 2166.8091,2118.7424,10.8203,2.7188);
	  		SetPVarInt(playerid, "InStore", 0);
		}
		case 18: //Ammunation Exit
		{
			if(GetPVarInt(playerid, "InStore") == 9)
	  		{
	  			SetPlayerPosition(playerid, 2535.6519,2083.6223,10.8203,87.9963);
	  		}
	  		else SetPlayerPosition(playerid, 2152.6311,943.3882,10.8203,86.5536);
			SetPVarInt(playerid, "InStore", 0);
		}
		case 19: //Ammunation Weapons Menu
		{
			if(GetPVarInt(playerid, "inCNR") == 0)
			{
				SCM(playerid, COLOR_YELLOW, ">> "RED_E"You must be in a CNR minigame to purchase weapons from here!");
				return 1;
			}
			ShowDialog(playerid, WEAPON_DIALOG);
		}
  		case 20: //PD Refill
		{
			if(GetPVarInt(playerid, "Cop") != 0)
			{
				ShowPlayerDialog(playerid, COPS_REFILL, DIALOG_STYLE_LIST, ""BLUE_E"LVPD Refill", "Refill Health\nRefill Weapons", "Select", "Cancel");
			}
		}
		case 21: //Robber Refill
		{
			if(GetPVarInt(playerid, "Robber") == 1)
			{
				ShowPlayerDialog(playerid, ROBBER_REFILL, DIALOG_STYLE_LIST, ""ORANGE_E"Robbery Refill", "Refill Health\nRefill Weapons", "Select", "Cancel");
			}
		}
		case 22: //PD Entrance
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPlayerPosition(playerid, 238.2997,143.0537,1003.0234,0.3759, 3);
		}
		case 23: //PD Exit
		{
			SetPlayerPosition(playerid, 2286.9224,2428.6223,10.8203,175.3422);
		}
		case 24: //Roca Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 5);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

 			if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 25: //LV Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 6);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 26: // LV/Roca Bank Exit
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 5: SetPlayerPosition(playerid, 2270.9590,2288.6978,10.8203,180.1512);
				case 6: SetPlayerPosition(playerid, 2354.8496,1540.2738,10.8203,176.5952);
				case 20: SetPlayerPosition(playerid, -1553.1549,1168.3955,7.1875,90.9583);
				case 21: SetPlayerPosition(playerid, -2450.2944,503.9173,30.0857,263.3090);
				case 22: SetPlayerPosition(playerid, 1876.6860,-1741.3016,13.5056,180.8800);
				case 23: SetPlayerPosition(playerid, 1553.6498,-1790.9058,13.5469,265.9901);
				case 24: SetPlayerPosition(playerid, 1462.9047,-1015.3142,26.2472,181.1370);
				case 25: SetPlayerPosition(playerid, 1498.4811,-1584.6191,13.5469,182.4508);
				case 26: SetPlayerPosition(playerid, 369.0442,2576.0688,16.9099,181.6269);
			}
			SetPVarInt(playerid, "InStore", 0);
		}
		case 27: //4D
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 7);
			SetPlayerPosition(playerid, 2015.3188,1018.1863,996.8719,92.0147, 10);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 28: //4D Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2024.8165,1007.8154,10.8203,269.4927);
		}
		case 29: //Royal Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 8);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 30: //Ammunation 2
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 9);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 31: //Caligulas
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 10);
			SetPlayerPosition(playerid, 2235.1345,1707.5121,1010.3026,181.5232, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 32: //Caligulas Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.1687,1677.7380,11.1118,87.6053);
		}
		case 33, 34: //Robbers Gate
		{
			if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			MoveObject(g_CNR_RobberGate[0], 1397.24, 2688.04, 9.91, 2);
	  			MoveObject(g_CNR_RobberGate[1], 1397.24, 2701.15, 9.91, 2);
				
				SetTimer("CNR_RobberGateMoveBack", 3000, false);
				GameTextForPlayer(playerid, "~g~~h~~h~Gate Opening..", 2000, 5);
	  		}
	  		else SCM(playerid, COLOR_RED, ">> "ORANGE_E"Only the Robbers class can open this gate!");
		}
		case 35:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && gTeam[playerid] == gFREEROAM)
			{
				ShowDialog(playerid, CM_DIALOG);
			}
		}
		case 36:
		{
		    if(GetPVarInt(playerid, "doingStunt") == 0) return SCM(playerid, -1, ""er"You can't use this now");
		    
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				CarSpawner(playerid, 481, -1, false);
			}
		}
		case 37: //Skydive5 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive5 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive5.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 8, true, true);
				GivePlayerMoneyEx(playerid, 8000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
		  		InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the 5th skydive challange~n~~r~~h~~h~8 score and $8,000!");
			}
	 	}
		case 38: //Skydive6 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive6 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive6.", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, gstr);
				GivePlayerScoreEx(playerid, 8, true, true);
				GivePlayerMoneyEx(playerid, 8000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerData[playerid][tickJoin_bmx] = 0;
		  		InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the 6th skydive challange~n~~r~~h~~h~8 score and $8,000!");
			}
	 	}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

	if(gTeam[playerid] == gRACE)
	{
	    if(g_CPProgress[playerid] == g_RaceArray[E_rCPs] - 1)
	    {
			new TimeStamp,
			    TotalRaceTime,
				rTime[3],
				Prize[2];

			TimeStamp = GetTickCountEx();
			TotalRaceTime = TimeStamp - g_RaceTick;
			ConvertTime(var, TotalRaceTime, rTime[0], rTime[1], rTime[2]);

			switch(++g_rPosition)
			{
		        case 1:
		        {
					Prize[0] = random(10000);
					Prize[1] = 10;
					PlayerData[playerid][e_racewins]++;

					if(PlayerAchData[playerid][e_ach_eliteracer][0] == 0 && PlayerData[playerid][e_racewins] >= 10)
					{
					    GivePlayerAchievement(playerid, e_ach_eliteracer, "Elite Racer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}
		        }
			    case 2:
				{
					Prize[0] = random(9000);
					Prize[1] = 9;
				}
				case 3:
				{
					Prize[0] = random(8000);
					Prize[1] = 8;
				}
				case 4:
				{
					Prize[0] = random(7000);
					Prize[1] = 7;
				}
				case 5:
				{
					Prize[0] = random(6000);
					Prize[1] = 6;
				}
			    case 6:
				{
					Prize[0] = random(5000);
					Prize[1] = 5;
				}
			    case 7:
				{
					Prize[0] = random(4000);
					Prize[1] = 4;
				}
			    case 8:
				{
					Prize[0] = random(3000);
					Prize[1] = 3;
				}
			    case 9:
				{
					Prize[0] = random(2000);
					Prize[1] = 2;
				}
			    default:
				{
					Prize[0] = random(1000);
					Prize[1] = 1;
				}
			}

			format(gstr, sizeof(gstr), "» %s(%i) has finished the race %i. in %02i:%02i.%03i", __GetName(playerid), playerid, g_rPosition, rTime[0], rTime[1], rTime[2]);
			SCMToAll(YELLOW, gstr);
			GivePlayerMoneyEx(playerid, Prize[0], true, true);
			GivePlayerScoreEx(playerid, Prize[1], true, true);
			
			if(g_rPosition <= 5 && TotalRaceTime > 40000 && GetPlayerScoreEx(playerid) > 1000)
			{
			    // Wenn eh nicht unter den TOP 5,wird seine Zeit eh nicht relevant sein.
			    if(islogged(playerid))
			    {
				    format(gstr, sizeof(gstr), "INSERT INTO `race_records` VALUES (NULL, %i, '%s', %i);", g_NextRace, __GetName(playerid), TotalRaceTime);
				    mysql_tquery(pSQL, gstr, "OnQueryFinish", "siii", gstr, THREAD_RACE_FINISH, g_rPosition, pSQL);
				}
			}
			else if(TotalRaceTime < 40000) // Do not save cheaters time
			{
			  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspect player completed race in %i seconds | Player: %s(%i) | Race", floatround(TotalRaceTime / 1000), __GetName(playerid), playerid);
				admin_broadcast(RED, gstr2);
				print(gstr2);
			}

            DisablePlayerRaceCheckpoint(playerid);

		    ++g_RaceFinishCount;
			++g_CPProgress[playerid];
			
			if(g_RacePlayerCount == 1) // Wenn er alleine race fährt
			{
				return race_stop();
			}
			else // Mehr als 1 im race
			{
			    TogglePlayerControllable(playerid, 0);

			    if(g_rPosition == 1)
			    {
				    g_iRaceEnd = 30 + 1;
				    SetTimer("race_end", 1000, false);
				}
				else
				{
				    if(g_RaceFinishCount >= g_RacePlayerCount)
					{
						return race_stop();
					}
				}
			}
		}
		else
		{
			++g_CPProgress[playerid];
		    race_set_cp(playerid, g_CPProgress[playerid], g_CPProgress[playerid] + 1, g_RaceArray[E_rCPs], g_RaceArray[E_rType]);
		    PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(pickupid >= 4096 || pickupid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerPickUpDynamicPickup(%i, %i)", playerid, pickupid);
	}

	switch(gTeam[playerid])
	{
	    case gFREEROAM:
	    {
		    if(pickupid == mc_tp || pickupid == beach_tp)
		    {
		        Command_ReProcess(playerid, "/tele", false);
		        return 1;
		    }

		    if(pickupid == mc_dive || pickupid == beach_dive)
		    {
		        Command_ReProcess(playerid, "/dive", false);
		        PlayerPlaySound(playerid, 1039, 0.0, 0.0, 0.0);
		        return 1;
		    }

		    if(pickupid == mc_weps || pickupid == beach_weps)
		    {
	            if(PlayerData[playerid][bGod]) ResetPlayerWeapons(playerid);

		        Command_ReProcess(playerid, "/w", false);
		        return 1;
		    }

		    if(pickupid == beach_m)
		    {
		        Command_ReProcess(playerid, "/m", false);
		        return 1;
		    }

	  		if(pickupid == VIPLpickup)
	  		{
	  		    if(PlayerData[playerid][e_vip] == 1 || PlayerData[playerid][e_level] > 0)
	  		    {
	  		        LoadMap(playerid);
		    		SetPlayerPosition(playerid, -3939.1855, 1308.7438, 3.4587, 86.1611, 3);
		  		    gTeam[playerid] = VIPL;
		  		    PlayerPlaySound(playerid, 1068, 0, 0, 0);
		  		    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
				}
				else
				{
				    SCM(playerid, -1, ""er"You need to be VIP or have an invite. See /vip");
				}
				return 1;
	  		}

		    if(!PlayerData[playerid][bGod])
			{
			    for(new i = 0; i < sizeof(pick_life); i++)
			    {
					if(pickupid == pick_life[i])
					{
					    new tick = GetTickCountEx();
					        
					    if((PlayerData[playerid][tickLastPickup][0] + COOLDOWN_PICKUP_HEALTH) >= tick)
					        return 1;
					        
					    new Float:h;
					    GetPlayerHealth(playerid, h);

					    if(h + 25.0 < 100.0)
					    {
					        player_notice(playerid, "+25 Health", "");
							SetPlayerHealth(playerid, h + 25.0);
						}
						else
						{
                            player_notice(playerid, "Health refilled", "");
						    SetPlayerHealth(playerid, 100.0);
						}
						return
						    PlayerData[playerid][tickLastPickup][0] = tick,
						    1;
					}
			    }

			    for(new i = 0; i < sizeof(pick_armor); i++)
			    {
			        if(pickupid == pick_armor[i])
			        {
					    new tick = GetTickCountEx();

					    if((PlayerData[playerid][tickLastPickup][1] + COOLDOWN_PICKUP_ARMOR) >= tick)
					        return 1;
					        
			            new Float:ar;
			            GetPlayerArmour(playerid, ar);

			            if(ar + 10.0 < 100.0)
			            {
			                player_notice(playerid, "+10 Armor", "");
			            	SetPlayerArmour(playerid, ar + 10.0);
			            	PlayerData[playerid][bwSuspect] |= SUSPECT_VALID_ARMOR;
						}
						return
						    PlayerData[playerid][tickLastPickup][1] = tick,
						    1;
					}
			    }

				if(pickupid == pick_chainsaw)
				{
				    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
					GivePlayerWeapon(playerid, 9, 1);
					return 1;
		  		}
			}

			for(new i = 0; i < CAR_SHOPS; i++)
			{
			    if(pickupid == g_CustomCarShops[i][e_pickup])
			    {
			        LoadMap(playerid);
			        SetPlayerInterior(playerid, 15);
			        SetPlayerPosEx(playerid, -1405.5538, 989.1526, floatadd(1049.0078, 3.0));
			        ResetPlayerWeapons(playerid);
			        gTeam[playerid] = BUYCAR;
			        gLastMap[playerid] = g_CustomCarShops[i][e_pickup];
			        return 1;
			    }
			}
		}
		case VIPL:
		{
			if(pickupid == VIPLpickup2)
			{
			    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
			    SetPlayerPosition(playerid, -2622.6589,1406.2648,7.1016,178.5571);
			    ResetPlayerWorld(playerid);
			    PlayerPlaySound(playerid, 1069, 0, 0, 0);
			    gTeam[playerid] = gFREEROAM;
			    return 1;
			}
		}
		case BUYCAR:
		{
		    if(pickupid == g_CarShopInteriorPickup)
		    {
			    for(new i = 0; i < CAR_SHOPS; i++)
			    {
			        if(gLastMap[playerid] == g_CustomCarShops[i][e_pickup])
			        {
						SetPlayerInterior(playerid, 0);
					    SetPlayerPos(playerid, g_CarShopLocations[i][0] - 2.0, g_CarShopLocations[i][1] - 2.0, g_CarShopLocations[i][2] + 0.5);
					    RandomWeapons(playerid);
						gTeam[playerid] = gFREEROAM;
						gLastMap[playerid] = 0;
			            return 1;
			        }
			    }
			}
		}
	}
	
	if(pickupid == g_AdminLCBack)
	{
		SetPlayerPos(playerid, 1803.2450, -1303.0396, 120.2659);
		SetPlayerInterior(playerid, 0);
		return 1;
	}
	
	if(pickupid == g_AdminLCTo)
	{
	    SetPlayerPos(playerid, -791.0734, 497.6924, 1376.1953);
	    SetPlayerInterior(playerid, 1);
	    return 1;
	}
	
	if(pickupid == g_CarShopDialogPickup)
	{
	    if(!islogged(playerid)) return notlogged(playerid);
		SetPlayerVirtualWorld(playerid, playerid + 101);
		SetPlayerCameraPos(playerid,-1407.6005,1021.9415,1051.4486);
		SetPlayerCameraLookAt(playerid, -1407.9410,1022.4058,1051.1681);
		SetPlayerPos(playerid, -1409.6410, 1032.6376, 1049.0288);
		TogglePlayerControllable(playerid, false);
		ShowDialog(playerid, CARBUY_DIALOG);
	}

	if(pickupid == dm1pickup)
	{
		new veh = GetPlayerVehicleID(playerid),
			Float:angle;
			
	    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	  	SetVehiclePos(veh, -3945.3562,963.2668,36.3281);
		GetVehicleZAngle(veh, angle);
		SetVehicleZAngle(veh, angle);
		return 1;
	}
	
	if(pickupid == dm2pickup)
	{
		new veh = GetPlayerVehicleID(playerid),
			Float:angle;
			
	    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	  	SetVehiclePos(veh, -3951.6909,968.0073,65.6281);
		GetVehicleZAngle(veh, angle);
		SetVehicleZAngle(veh, angle);
		return 1;
	}

 	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
	    new file[50];
   		for(new b = 0; b < MAX_BANKS; b++)
   		{
   		    format(file, sizeof(file), "/Store/Banks/%i.ini", b);
  			if(pickupid == BankPickInt[b])
			{
				gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
 		for(new a = 0; a < MAX_AMMUNATIONS; a++)
		{
		    format(file, sizeof(file), "/Store/Ammunations/%i.ini", a);
			if(pickupid == AmmunationPickInt[a])
			{
			    gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new bs = 0; bs < MAX_BURGERSHOTS; bs++)
		{
		    format(file, sizeof(file), "/Store/BurgerShots/%i.ini", bs);
			if(pickupid == BurgerPickInt[bs])
			{
			    gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new cb = 0; cb < MAX_CLUCKINBELLS; cb++)
		{
		    format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cb);
			if(pickupid == CluckinBellPickInt[cb])
			{
			    gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new ps = 0; ps < MAX_PIZZASTACKS; ps++)
		{
		    format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", ps);
			if(pickupid == PizzaPickInt[ps])
			{
			    gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
 		for(new tfs = 0; tfs < MAX_TFS; tfs++)
		{
		    format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
			if(pickupid == TFSPickInt[tfs])
			{
			    gTeam[playerid] = gFREEROAM;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}

	    // aout
		for(new bo = 0; bo < MAX_BANKS; bo++)
		{
		    if(pickupid == BankPickOut[bo])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		        gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 2307.8840, -15.4403, 26.7496);
				SetPlayerFacingAngle(playerid, 272.2517);
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, (bo + 1000));
                return 1;
			}
		}
		for(new ao = 0; ao < MAX_AMMUNATIONS; ao++)
		{
  			if(pickupid == AmmunationPickOut[ao])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 315.4236, -140.6816, 999.6016);
				SetPlayerFacingAngle(playerid, 1.2109);
		        SetPlayerInterior(playerid, 7);
		        SetPlayerVirtualWorld(playerid, (ao + 1000));
		        return 1;
			}
		}
		for(new bso = 0; bso < MAX_BURGERSHOTS; bso++)
		{
  			if(pickupid == BurgerPickOut[bso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 365.3955, -73.8744, 1001.5078);
				SetPlayerFacingAngle(playerid, 304.0766);
		        SetPlayerInterior(playerid, 10);
		        SetPlayerVirtualWorld(playerid, (bso + 1000));
		        SetPlayerShopName(playerid, "FDBURG");
		        return 1;
			}

		}
		for(new cbo = 0; cbo < MAX_CLUCKINBELLS; cbo++)
		{
  			if(pickupid == CluckinBellPickOut[cbo])
			{
			    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
				gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 365.0724, -8.9202, 1001.8516);
				SetPlayerFacingAngle(playerid, 358.4327);
		        SetPlayerInterior(playerid, 9);
		        SetPlayerVirtualWorld(playerid, (cbo + 1000));
		        SetPlayerShopName(playerid, "FDCHICK");
		        return 1;
			}
		}
		for(new pso = 0; pso < MAX_PIZZASTACKS; pso++)
		{
  			if(pickupid == PizzaPickOut[pso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 370.6657, -129.9993, 1001.4922);
				SetPlayerFacingAngle(playerid, 358.0357);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, (pso + 1000));
		        SetPlayerShopName(playerid, "FDPIZA");
		        return 1;
			}
		}
		for(new tfso = 0; tfso < MAX_TFS; tfso++)
		{
  			if(pickupid == TFSPickOut[tfso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, -22.3658, -185.1534, 1003.5469);
				SetPlayerFacingAngle(playerid, 311.6577);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, (tfso + 1000));
		        return 1;
			}
		}
	}
	return 1;
}

public OnObjectMoved(objectid)
{
    new Float:POS[3];
    
	for(new i = 0; i < sizeof(Obj_FloorDoors); i++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], POS[0], POS[1], POS[2]);

		    if(POS[0] < X_DOOR_L_OPENED - 0.5)
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)
	{
	    KillTimer(ElevatorBoostTimer);

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, POS[0], POS[1], POS[2]);
        Label_Elevator = CreateDynamic3DTextLabel("Press '"vgreen"F"white"' to use elevator", -1, 1784.9822, -1302.0426, (POS[2] - 0.9), 5.0, .testlos = 1, .worldid = 0);
		
	    ElevatorState = ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, false);
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(source == CLICK_SOURCE_SCOREBOARD)
	{
	    if(IsPlayerAvail(playerid))
	    {
	        new string[16];
	        format(string, sizeof(string), "/stats %i", clickedplayerid);
	        Command_ReProcess(playerid, string, false);
	    }
	}
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == skinlist)
    {
        if(response)
		{
		    SetSpawnInfoEx(playerid, NO_TEAM, modelid, 0.0, 0.0, 10.0, 0.0);
  			SetPlayerSkin(playerid, modelid);
        }
	}
	else if(listid == toyslist)
	{
	    if(response)
	    {
		    if(GetPlayerMoneyEx(playerid) < 10000)
		    {
				SCM(playerid, -1, ""er"Each toy costs $10,000");
				return 1;
		    }
		    GivePlayerMoneyEx(playerid, -10000);

            PlayerToyData[playerid][PlayerData[playerid][toy_selected]][toy_model] = modelid;
			SetPlayerAttachedObject(playerid, PlayerData[playerid][toy_selected], PlayerToyData[playerid][PlayerData[playerid][toy_selected]][toy_model], 1);

			EditAttachedObject(playerid, PlayerData[playerid][toy_selected]);
		    ShowPlayerToyTextdraws(playerid);
		    SCM(playerid, GREEN, "Successfully bought the toy for $10,000!");
		    
		    if(PlayerAchData[playerid][e_ach_styler][0] == 0)
		    {
		        GivePlayerAchievement(playerid, e_ach_styler, "Styler", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		    }
	    }
	}
	else if(listid == hobjslist)
	{
	    if(response)
	    {
	        if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"You can not be in a vehicle!");
	        if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");
	        
			new h_id = GetHouseIdByPlayerSlotSel(playerid);

			if(h_id != -1)
			{
			    if(GetPlayerVirtualWorld(playerid) != (HouseData[h_id][e_id] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
			    
			    if(GetPlayerMoneyEx(playerid) < 5000)
			    {
					SCM(playerid, -1, ""er"Each house item costs $5,000");
					return 1;
			    }
			    GivePlayerMoneyEx(playerid, -5000);
		    
			    new Float:POS[4], str[128];
			    format(str, sizeof(str), "/hmenu to edit\nSlot ID: %i - Item ID: %i", PlayerData[playerid][houseobj_selected] + 1, modelid);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);
				
				POS[0] += (1.2 * floatsin(-POS[3], degrees));
				POS[1] += (1.2 * floatcos(-POS[3], degrees));
			    
			    HouseData[h_id][E_Obj_Model][PlayerData[playerid][houseobj_selected]] = modelid;
				HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]] = CreateDynamicObject(modelid, POS[0], POS[1], POS[2], 0.0, 0.0, 0.0, HouseData[h_id][e_id] + 1000, -1, -1);
				HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]] = CreateDynamic3DTextLabel(str, LIGHT_YELLOW, POS[0], POS[1], POS[2]+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[h_id][e_id] + 1000);
				
				EditDynamicObject(playerid, HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]]);

				SCM(playerid, GREEN, "Successfully bought the house item for $5,000!");
			}
			else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
	    }
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(vehicleid >= MAX_VEHICLES || vehicleid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnVehicleDamageStatusUpdate(%i, %i)", vehicleid, playerid);
	}

	if(gTeam[playerid] == gFREEROAM && !PlayerData[playerid][bGWarMode])
	{
    	SetVehicleHealth(vehicleid, 1000.0);
		RepairVehicle(vehicleid);
		return 1;
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gTeam[playerid] == DERBY)
	{
		new Float:HP,
			vehicle = GetPlayerVehicleID(playerid);

		GetVehicleHealth(vehicle, HP);

		if(HP != PlayerData[playerid][fDerbyVehicleHealth])
		{
			PlayerData[playerid][fDerbyVehicleDamage] = PlayerData[playerid][fDerbyVehicleHealth]- HP;
			PlayerData[playerid][fDerbyVehicleHealth] = HP;

			if(PlayerData[playerid][fDerbyVehicleDamage] > 0)
			{
				if(PlayerData[playerid][bDerbyHealthBarShowing])
				{
					PlayerData[playerid][fDerbyCDamage] += PlayerData[playerid][fDerbyVehicleDamage];
					format(gstr, sizeof(gstr), "{ffd800}-%.0f\n%s", PlayerData[playerid][fDerbyCDamage], derby_healthbar_format(floatround(HP)));
					KillTimer(PlayerData[playerid][tDerbyHealthBar]);
					PlayerData[playerid][tDerbyHealthBar] = SetTimerEx("derby_healthbar_reset", 2000, false, "ii", playerid, YHash(__GetName(playerid)));
				}
				else
				{
					PlayerData[playerid][bDerbyHealthBarShowing] = true;
					format(gstr, sizeof(gstr), "{ffd800}-%.0f\n%s", PlayerData[playerid][fDerbyVehicleDamage], derby_healthbar_format(floatround(HP)));
					PlayerData[playerid][tDerbyHealthBar] = SetTimerEx("derby_healthbar_reset", 2000, false, "ii", playerid, YHash(__GetName(playerid)));
				}
				UpdatePlayer3DTextLabelText(playerid, PlayerData[playerid][t3dDerbyVehicleLabel], -1, gstr);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate > 256 || oldstate > 256 || newstate < 0 || oldstate < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerStateChange(%i, %i, %i)", playerid, newstate, oldstate);
	}
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(gTeam[i] == SPEC && PlayerData[i][SpecID] == playerid)
	    {
			if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
			{
				PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			}
			else if(newstate == PLAYER_STATE_ONFOOT)
			{
				PlayerSpectatePlayer(i, playerid);
			}
			else if(newstate == PLAYER_STATE_SPECTATING)
			{
			    Command_ReProcess(i, "/specoff", false);
				player_notice(i, "Player spectating someone else", "");
			}
		}
	}
	
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    PlayerData[playerid][tickVehicleEnterTime] = GetTickCountEx();
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
	    if((GetTickCountEx() - PlayerData[playerid][tickVehicleEnterTime]) < COOLDOWN_VEHICLE)
	    {
			if((++PlayerData[playerid][VehicleSpamViolation]) >= 3 && !PlayerData[playerid][bOpenSeason])
			{
		        format(gstr, sizeof(gstr), "[SUSPECT] %i vehicle spam hack detected, kicking (%s, %i)", PlayerData[playerid][VehicleSpamViolation], __GetName(playerid), playerid);
		        admin_broadcast(RED, gstr);
		        Log(LOG_NET, gstr);
		        
			    Kick(playerid);
			}
	    }
	}
	
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vID = GetPlayerVehicleID(playerid);
	    
		if(PlayerData[playerid][bVehicleInfo])
		{
		    KillTimer(PlayerData[playerid][tTDhandle]);
		}
		
		format(gstr, sizeof(gstr), "%s", GetVehicleNameById(vID));
		PlayerTextDrawSetString(playerid, vTD[playerid], gstr);
		PlayerTextDrawShow(playerid, vTD[playerid]);
		PlayerData[playerid][tTDhandle] = SetTimerEx("player_hide_vehicle_td", 3000, false, "i", playerid);
	}
	
    if(gTeam[playerid] == DERBY)
	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
		    if(PlayerData[playerid][t3dDerbyVehicleLabel] != PlayerText3D:-1)
		    {
		    	DeletePlayer3DTextLabel(playerid, PlayerData[playerid][t3dDerbyVehicleLabel]);
		    	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
		    }
			PlayerData[playerid][t3dDerbyVehicleLabel] = CreatePlayer3DTextLabel(playerid, " ", -1, 0, 0, 0.9, 10.0, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid), 1);
			derby_healthbar_update(playerid);
		}
		else if(PlayerData[playerid][t3dDerbyVehicleLabel] != PlayerText3D:-1)
	    {
	    	DeletePlayer3DTextLabel(playerid, PlayerData[playerid][t3dDerbyVehicleLabel]);
	    	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
	    }
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(gTeam[playerid] == STORE)
	{
        if(Key(KEY_SPRINT))
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.2, 2311.63, -3.89, 26.74))
            {
			    if(!islogged(playerid)) return notlogged(playerid);
			    ShowDialog(playerid, BANK_DIALOG);
			    return 1;
            }
        }
	}
	
	if(GetPVarInt(playerid, "doingStunt") != 0) return 1;

	switch(gTeam[playerid])
	{
	    case gFREEROAM:
	    {
		    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
				if(Key(KEY_SUBMISSION))
				{
			 		new currentveh, Float:angle;
				    currentveh = GetPlayerVehicleID(playerid);
				    GetVehicleZAngle(currentveh, angle);
				    SetVehicleZAngle(currentveh, angle);
				    return 1;
				}

				if(Key(KEY_FIRE) && GetPVarInt(playerid, "Ramped") == 1)
				{
				    if(!PlayerData[playerid][bRampActive])
				    {
					    new vehIDr = GetPlayerVehicleID(playerid), Float:vPOS[4], Float:salttmp;
						GetVehiclePos(vehIDr, vPOS[0], vPOS[1], vPOS[2]);
						GetVehicleZAngle(vehIDr, vPOS[3]);
						salttmp = (floatpower(GetPlayerPing(playerid), 0.25) * 6.0 + 5.0);
						vPOS[0] += (floatsin(-vPOS[3], degrees) * salttmp);
						vPOS[1] += (floatcos(-vPOS[3], degrees) * salttmp);
						SetTimerEx("DestroyRampObject", 3000, false, "ii", CreateDynamicObject(1632, vPOS[0], vPOS[1], vPOS[2], 0, 0, vPOS[3]), playerid);
						PlayerData[playerid][bRampActive] = true;
					}
				    return 1;
				}

				if(PlayerData[playerid][bSpeedBoost])
				{
					if(Key(KEY_FIRE))
					{
						new Float:POS[3], vid = GetPlayerVehicleID(playerid);
						GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
						SetVehicleVelocity(vid, POS[0] * 1.3, POS[1] * 1.3, POS[2] * 1.3);
						if(IsComponentIdCompatible(GetVehicleModel(vid), 1010)) AddVehicleComponent(vid, 1010);
						return 1;
			   		}

					if(Key(KEY_CROUCH))
					{
						new Float:POS[3], vid = GetPlayerVehicleID(playerid);
						GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
						SetVehicleVelocity(vid, POS[0], POS[1], POS[2] + 0.20);
						SetVehicleHealth(vid, 1000.0);
						return 1;
					}

					if(Key(KEY_YES) || Key(KEY_NO))
					{
						new Float:POS[3], vid = GetPlayerVehicleID(playerid);
						GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
						SetVehicleVelocity(vid, POS[0] > 0 ? POS[0] * 0.75 : 0.0, POS[1] > 0 ? POS[1] * 0.75 : 0.0, POS[2]);
						SetVehicleHealth(vid, 1000.0);
					    return 1;
					}
				}
				else
				{
					if(Key(KEY_FIRE))
					{
						new vid = GetPlayerVehicleID(playerid);
						if(IsComponentIdCompatible(GetVehicleModel(vid), 1010)) AddVehicleComponent(vid, 1010);
						return 1;
			   		}
				}
			}

			if(Key(KEY_SECONDARY_ATTACK))
			{
				// Fast Distance Check
				
				new Float:fPOS[3];
				GetPlayerPos(playerid, fPOS[0], fPOS[1], fPOS[2]);
				
				for(new i = 0; i < houseid; i++)
				{
					if(4.0 > ((fPOS[0] - HouseData[i][e_x]) * (fPOS[0] - HouseData[i][e_x])) + ((fPOS[1] - HouseData[i][e_y]) * (fPOS[1] - HouseData[i][e_y])) + ((fPOS[2] - HouseData[i][e_z]) * (fPOS[2] - HouseData[i][e_z])))
					{
						EnterHouse(playerid, i);
						return 1;
					}
				}
				
				/*
			    if(GetNearestHouse(playerid) != -1)
			    {
			        Command_ReProcess(playerid, "/enter", false);
			        return 1;
			    }
				*/
			}

			if(PlayerData[playerid][bSuperJump] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && Key(KEY_JUMP))
			{
			    if(!PlayerData[playerid][bGWarMode])
			    {
			        new cammode = GetPlayerCameraMode(playerid);

			        if(cammode != 7 && cammode != 46 && cammode != 51 && cammode != 53)
			        {
						new Float:POS[3];
						GetPlayerVelocity(playerid, POS[0], POS[1], POS[2]);
						SetPlayerVelocity(playerid, POS[0], POS[1], floatadd(POS[2], 5.0));
					}
				}
				return 1;
			}

			if(!IsPlayerInAnyVehicle(playerid) && Key(KEY_SECONDARY_ATTACK))
			{
			    new Float:POS[3];
			    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			    if(POS[1] < -1301.4 && POS[1] > -1303.2417 && POS[0] < 1786.2131 && POS[0] > 1784.1555)
			    {
			        ShowElevatorDialog(playerid);
				}
				else
				{
				    if(POS[1] > -1301.4 && POS[1] < -1299.1447 && POS[0] < 1785.6147 && POS[0] > 1781.9902)
				    {
						new i = 20;
						while(POS[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
						{
						    --i;
						}

						if(i == 0 && POS[2] < GetDoorsZCoordForFloor(0) + 2.0)
						{
						    i = -1;
						}

						if(i <= 19)
						{
							CallElevator(playerid, i + 1);
							GameTextForPlayer(playerid, "~r~Elevator called", 3500, 4);
						}
				    }
				}
			}
		}
		case gBUILDRACE:
		{
			if(g_BuildRace == playerid)
			{
			    new Float:vPos[4],
			        rFile[32];

			    if(Key(KEY_FIRE))
			    {
				    if(g_BuildTakeVehPos)
				    {
				    	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, RED, ">> You need to be in a vehicle");
						format(rFile, sizeof(rFile), "/Race/%03i.race", g_RaceCount + 1);
						GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
				        dini_Create(rFile);
						dini_IntSet(rFile, "vModel", g_BuildModeVMID);
						dini_IntSet(rFile, "rType", g_BuildRaceType);
						dini_IntSet(rFile, "rVirtualWorld", g_BuildVirtualWorld);
				        format(gstr, sizeof(gstr), "vPosX_%i", g_BuildVehPosCount);
						dini_FloatSet(rFile, gstr, vPos[0]);
				        format(gstr, sizeof(gstr), "vPosY_%i", g_BuildVehPosCount);
						dini_FloatSet(rFile, gstr, vPos[1]);
				        format(gstr, sizeof(gstr), "vPosZ_%i", g_BuildVehPosCount);
						dini_FloatSet(rFile, gstr, vPos[2]);
				        format(gstr, sizeof(gstr), "vAngle_%i", g_BuildVehPosCount);
						dini_FloatSet(rFile, gstr, vPos[3]);
				        format(gstr, sizeof(gstr), ">> Vehicle Pos '%i' has been taken.", ++g_BuildVehPosCount);
				        SCM(playerid, YELLOW, gstr);
					}

		   			if(g_BuildVehPosCount >= RACE_MAX_PLAYERS)
				    {
				        g_BuildVehPosCount = 0;
				        g_BuildTakeVehPos = false;
				        ShowDialog(playerid, DIALOG_RACE_CHECKPOINTS);
				    }

					if(g_BuildTakeCheckpoints)
					{
					    if(g_BuildCheckPointCount > RACE_MAX_CHECKPOINTS) return SCM(playerid, RED, ">> You reached the maximum amount of checkpoints!");
					    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, RED, ">> You need to be in a vehicle");
						format(rFile, sizeof(rFile), "/Race/%03i.race", g_RaceCount + 1);
						GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
						format(gstr, sizeof(gstr), "CP_%i_PosX", g_BuildCheckPointCount);
						dini_FloatSet(rFile, gstr, vPos[0]);
						format(gstr, sizeof(gstr), "CP_%i_PosY", g_BuildCheckPointCount);
						dini_FloatSet(rFile, gstr, vPos[1]);
						format(gstr, sizeof(gstr), "CP_%i_PosZ", g_BuildCheckPointCount);
						dini_FloatSet(rFile, gstr, vPos[2]);
		    			format(gstr, sizeof(gstr), ">> Checkpoint '%i' has been set!", ++g_BuildCheckPointCount);
				        SCM(playerid, YELLOW, gstr);
					}
				}

				if(Key(KEY_SECONDARY_ATTACK))
				{
				    if(g_BuildTakeCheckpoints)
				    {
						format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
						dini_IntSet(gstr, "rTotalRaceCPs", g_BuildCheckPointCount);
						dini_IntSet(gstr, "rDeployTime", (gettime() - g_BuildDeployTime) - 1);

						format(gstr, sizeof(gstr), "/Race/Index/Index.ini");
						dini_IntSet(gstr, "TotalRaces", ++g_RaceCount);

				        ShowDialog(playerid, DIALOG_RACE_RACERDY);

						RemoveFromRaceBuilder(playerid);
				    }
				}
			}
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    CancelEdit(playerid);
	if(!IsValidDynamicObject(objectid)) return 1;

    if(response == EDIT_RESPONSE_CANCEL)
    {
        player_notice(playerid, "House item edition canceled", "");
    }
    else if(response == EDIT_RESPONSE_FINAL)
    {
        if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");
		new h_id = GetHouseIdByPlayerSlotSel(playerid);

		if(h_id != -1)
		{
		    if(GetPlayerVirtualWorld(playerid) != (HouseData[h_id][e_id] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
			if(GetDistance3D(x, y, z, g_aHouseInteriorTypes[HouseData[h_id][interior]][house_x], g_aHouseInteriorTypes[HouseData[h_id][interior]][house_y], g_aHouseInteriorTypes[HouseData[h_id][interior]][house_z]) > 200.0) return SCM(playerid, -1, ""er"You are not near your house");

	        player_notice(playerid, "House item position saved", "");
	        MoveDynamicObject(objectid, x, y, z, 5.0, rx, ry, rz);
	        
	        new str[64];
	        format(str, sizeof(str), "/hmenu to edit\nSlot ID: %i - Item ID: %i", PlayerData[playerid][houseobj_selected] + 1, HouseData[h_id][E_Obj_Model][PlayerData[playerid][houseobj_selected]]);
	        DestroyDynamic3DTextLabel(HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]]);
	        HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]] = CreateDynamic3DTextLabel(str, LIGHT_YELLOW, x, y, z+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[h_id][e_id] + 1000);
	        /* OPTIMIZATION?:
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,
                HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]],
                E_STREAMER_X,
                x);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,
                HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]],
                E_STREAMER_Y,
                y);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,
                HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]],
                E_STREAMER_Z,
                z);
		 */
			SQL_SaveHouse(h_id, true);
		}
		else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
    }
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(index < 0 || response < 0 || modelid < 0)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnPlayerEditAttachedObject(%i, %i, %i, %i, %i)", playerid, response, index, modelid, boneid);
		return 1;
	}

    HidePlayerToyTextdraws(playerid);
    
    if(response)
    {
        player_notice(playerid, "Toy position saved", "");

        PlayerToyData[playerid][index][toy_x] = fOffsetX;
        PlayerToyData[playerid][index][toy_y] = fOffsetY;
        PlayerToyData[playerid][index][toy_z] = fOffsetZ;
        PlayerToyData[playerid][index][toy_rx] = fRotX;
        PlayerToyData[playerid][index][toy_ry] = fRotY;
        PlayerToyData[playerid][index][toy_rz] = fRotZ;
        PlayerToyData[playerid][index][toy_sx] = fScaleX;
        PlayerToyData[playerid][index][toy_sy] = fScaleY;
        PlayerToyData[playerid][index][toy_sz] = fScaleZ;
        /* RE-SET THE TOY DATA FOR THE PLAYER?   RemovePlayerAttachedObject*/
    }
    else
    {
        player_notice(playerid, "Toy edition canceled", "");

        SetPlayerAttachedObject(playerid,
			index,
			modelid,
			boneid,
			PlayerToyData[playerid][index][toy_x],
			PlayerToyData[playerid][index][toy_y],
			PlayerToyData[playerid][index][toy_z],
			PlayerToyData[playerid][index][toy_rx],
			PlayerToyData[playerid][index][toy_ry],
			PlayerToyData[playerid][index][toy_rz],
			PlayerToyData[playerid][index][toy_sx],
			PlayerToyData[playerid][index][toy_sy],
			PlayerToyData[playerid][index][toy_sz]);
    }
    return 1;
}

YCMD:beach(playerid, params[], help)
{
    PortPlayerMap(playerid, 341.8535, -1852.6327, 8.2618, 90.2136, "Los Santos Beach", "beach");
    return 1;
}
YCMD:mc(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2330.8264,-1636.1765,485.6543,265.8250,-2308.2280,-1633.9672,484.8368,177.0081, "Mount Chiliad", "mc");
    return 1;
}
YCMD:sf(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1990.6650, 136.9297, 27.3110, 0.6588, -1990.6650, 136.9297, 27.3110, 0.6588, "San Fierro", "sf", true, false);
    return 1;
}
YCMD:sfa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1196.3280, -17.4523, 15.8281, 42.5799, -1205.9094, 15.8533, 13.9217, 137.6498, "San Fierro Airport", "sfa");
    return 1;
}
YCMD:lsa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2012.4763,-2448.1399,14.6396,133.3216,2000.9854,-2493.9919,13.3126,89.7651, "Los Santos Airport", "lsa");
    return 1;
}
YCMD:ls(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2494.7476, -1666.6097, 13.3438, 88.1632, 2494.7476, -1666.6097, 13.3438, 88.1632, "Los Santos", "ls", true, false);
    return 1;
}
YCMD:lspd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1542.5554, -1674.7850, 13.5547, 92.8351,1536.0787,-1671.4823,13.3828,178.0104, "Los Santos Police Department", "lspd", true, false);
    return 1;
}
YCMD:lvpd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2290.5759,2421.3708,10.8203,178.5880,2289.8555,2414.7170,10.8222,269.7221, "Las Venturas Police Department", "lvpd", true, false);
    return 1;
}
YCMD:sfpd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1624.2128,674.2734,6.9573,219.9653,-1623.9940,674.0118,7.1875,219.9653, "San Fierro Police Department", "sfpd", true, false);
    return 1;
}
YCMD:dfun(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 3638.867, 1179.233, 10.214, 0.0,  3638.867, 1179.233, 10.214, 0.0, "Dune Fun", "dfun");
    return 1;
}
YCMD:slide(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1572.9949, -1238.7869, 277.7445, 358.2480, 1572.9949, -1238.7869, 277.7445, 358.2480, "Slide", "slide");
    return 1;
}
YCMD:hp(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2848.1548,-1977.4320,10.6646,271.6942, 2848.1548,-1977.4320,10.6646,271.6942, "HalfPipe", "hp");
    return 1;
}
YCMD:tube(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1254.5294,-2285.2883,1084.8463,333.6016,1254.5294,-2285.2883,1084.8463,333.6016, "Tube", "tube");
    return 1;
}
YCMD:racemap(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2904.3860, -415.5923, 4.6274, 0.3237,-2904.3860, -415.5923, 4.6274, 0.3237, "Racemap", "racemap");
    return 1;
}
YCMD:racemap2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2741.1375,1969.4594,5269.7466,178.2995,2739.9221,1904.8870,5269.4741,180.1579, "Racemap 2", "racemap2");
    return 1;
}
YCMD:hayclimb(playerid, params[], help)
{
    PortPlayerMap(playerid, -1788.4408, 575.2750, 35.1641, 145.6224, "Hayclimb", "hayclimb", true, false);
    return 1;
}
YCMD:dfun2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 473.3654,-1883.9589,2.4099,167.1191,473.3654,-1883.9589,2.4099,167.1191, "Dune Fun 2", "dfun2");
    return 1;
}
YCMD:mi(playerid, params[], help)
{
    PortPlayerMap(playerid, -3801.8572, 498.8828, 16.5183, 121.5722, "Mellnik's Island", "mi");
    return 1;
}
YCMD:mh(playerid, params[], help)
{
	if(PortPlayerMapVeh(playerid,-182.9842, -2245.7412, 31.1492, 125.6378, -182.9842, -2245.7412, 31.1492, 125.6378, "Mellnik's House", "mh"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", -182.9842,-2245.7412,31.1492, 100.0, 1);
	}
	return 1;
}
YCMD:ch(playerid, params[], help)
{
	if(PortPlayerMapVeh(playerid,2002.9380, -3656.5505, 5.4980, 90, 2002.9380, -3656.5505, 5.4980, 90, "Chris House", "ch"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", 2002.9380, -3656.5505, 5.4980, 100.0, 1);
	}
	return 1;
}
YCMD:ah(playerid, params[], help)
{
	if(PortPlayerMap(playerid, 3133.7415, -1107.2448, 2.1289, 352.5349, "Adam's House", "ah"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", 3133.7415, -1107.2448, 2.1289, 100.0, 1);
	}
	return 1;
}
YCMD:ezh(playerid, params[], help)
{
    PortPlayerMap(playerid, -2357.8022, -3158.3811, 4.3641, 80, "Ezio's House", "ezh");
	return 1;
}
YCMD:bikec(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 1102.3887,1355.4951,10.8203,276.7901, "Bike Challange", "bikec"))
    {
        CheckPlayerGod(playerid);
        
		DestroyPlayerVehicles(playerid);
		
		SetPVarInt(playerid, "doingStunt", 1);
    }
    return 1;
}
YCMD:treehouse(playerid, params[], help)
{
    PortPlayerMap(playerid, -804.6822, -2075.3076, 45.1331, 320.1583, "Treehouse", "treehouse");
    return 1;
}
YCMD:trackmania(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1297.3998, -5626.5122, 81.7, 149.0596,1297.3998, -5626.5122, 81.7, 149.0596, "Trackmania", "tm");
    return 1;
}
YCMD:trackmania2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1929.1312, 6627.0327, 12.0, 180.0,-1929.1312, 6627.0327, 12.0, 180.0, "Trackmania 2", "tm2");
    return 1;
}
YCMD:trackmania3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -5697.0776,2790.4932,5.6020,359.4344, -5697.0776,2790.4932,5.6020,359.4344, "Trackmania 3", "tm3");
    return 1;
}
YCMD:ip(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -5051.7461, -2237.2556, 10.9, 359.8096,-5051.7461, -2237.2556, 10.9, 359.8096, "Infernus Paradise", "ip");
    return 1;
}
YCMD:ip2(playerid, params[], help)
{
   	PortPlayerMapVeh(playerid, -297.6044, 3682.8264, 24.0, 0.0, -297.6044, 3682.8264, 24.0, 0.0, "Infernus Paradise 2", "ip2");
    return 1;
}
YCMD:ip3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 4546.4175,655.6476,13.4803,0.0375,4546.4175,655.6476,13.4803,0.0375, "Infernus Paradise 3", "ip3");
    return 1;
}
YCMD:disney(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 400.2232,636.9904,16.8194,136.9245,400.2232,636.9904,16.8194,136.924, "Disney", "disney");
    return 1;
}
YCMD:gd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 551.1603,860.3625,7113.0366,268.0655,551.1603,860.3625,7113.0366,268.0655, "Going Down", "gd");
    return 1;
}
YCMD:skyroad(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2999.2258, -1433.3010, 1244.1365, 101.9770, 2954.5017, -1441.2960, 1245.5, 100.9987, "Skyroad", "skyroad");
    return 1;
}
YCMD:skyroad2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2912.3618,-792.8673,10.7623,264.6945,2912.3618,-792.8673,10.7623,264.6945, "Skyroad 2", "skyroad2");
    return 1;
}
YCMD:skyroad3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 205.0412,2481.6416,16.5166,148.2003,205.0412,2481.6416,16.5166,148.2003, "Skyroad 3", "skyroad3");
    return 1;
}
YCMD:skyroad4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 587.9016,1400.4779,1228.1453,3.2243,587.9016,1400.4779,1228.1453,3.2243, "Skyroad 4", "skyroad4");
    return 1;
}
YCMD:wj(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 341.6029,2008.7330,571.1588,174.7883,341.6029,2008.7330,571.1588,174.7883, "Water Jump", "wj");
    return 1;
}
YCMD:jj(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1683.663452, 2010.888916, 1104.387393, 65.1886, -1683.663452, 2010.888916, 1104.387393, 65.1886, "Jizzy Jump", "jj");
    return 1;
}
YCMD:snow(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -719.7679,1723.9852,7.0400,255.2436,-719.7679,1723.9852,7.0400,255.2436, "Snow Market", "snow");
    return 1;
}
YCMD:sd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -793.2972,2230.8733,45.0103,180.8382,-790.9946,2197.6873,42.4100,271.6217, "Sherman Dam", "sd");
    return 1;
}
YCMD:qjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 868.278,245.432,587.522,0.0,868.278,245.432,587.522,0.0, "Quarry Jump", "qjump");
    return 1;
}
YCMD:party(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -377.2038,2131.4634,133.1797,227.9924, "Party", "party"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", -377.2038, 2131.4634, 133.1797, 50.0, 1);
	}
    return 1;
}
YCMD:aa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 386.0204, 2541.1179, 19.0953, 181.2326, 385.7370, 2513.5242, 16.6766, 89.6337, "Abandoned Airport", "aa");
    return 1;
}
YCMD:rc(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 35.7414,-899.6901,1761.7263,178.9152,35.7414,-899.6901,1761.7263,178.9152, "Roller Coaster", "rc");
    return 1;
}
YCMD:rc2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2047.4742,-478.6809,1520.4766,90,2047.4742,-478.6809,1520.4766,90, "Roller Coaster 2", "rc2");
    return 1;
}
YCMD:a51(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 307.2482,2050.7505,17.6406,180.8353,307.2482,2050.7505,17.6406,180.8353, "Area 51", "a51", true, false);
    return 1;
}
YCMD:trans(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1034.5165,-1039.7190,31.6651,272.5891,1034.5165,-1039.7190,31.6651,272.5891, "Transfender", "trans", true, false);
    return 1;
}
YCMD:trans2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1932.7380,228.3443,34.1563,88.9975,-1932.7380,228.3443,34.1563,88.9975, "Transfender 2", "trans2", true, false);
    return 1;
}
YCMD:trans3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2386.2788,1021.7114,10.8203,356.2733,2386.2788,1021.7114,10.8203,356.2733, "Transfender 3", "trans3", true, false);
    return 1;
}
YCMD:lw(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2645.5457,-2004.5851,13.3828,173.3082,2645.5457,-2004.5851,13.3828,173.3082, "Loco Low", "lw", true, false);
    return 1;
}
YCMD:arch(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2689.1001,217.8290,3.9509,92.1955,-2689.1001,217.8290,3.9509,92.1955, "Arch Wheel Angels", "arch", true, false);
    return 1;
}
YCMD:ee(playerid, params[], help)
{
    PortPlayerMap(playerid, -2678.2119,1594.8811,217.2739,269.7218, "Easter Egg", "ee", true, false);
    return 1;
}
YCMD:eej(playerid, params[], help)
{
    PortPlayerMap(playerid, -2662.6877,1595.1354,225.7578,92.7102, "Easter Egg Jump", "eej", true, false);
    return 1;
}
YCMD:qp2(playerid, params[], help)
{
    PortPlayerMap(playerid, 2121.9146,2397.7786,51.2586,272.0792, "Quad Parkour 2", "qp2");
    return 1;
}
YCMD:qp(playerid, params[], help)
{
    PortPlayerMap(playerid, -2904.806, 880.312, 5.354, 56.0, "Quad Parkour", "qp");
    return 1;
}
YCMD:plane(playerid, params[], help)
{
    PortPlayerMap(playerid, 1841.8307,-1398.3483,117.0471,66.2874, "Plane", "plane");
    return 1;
}
YCMD:et(playerid, params[], help)
{
    PortPlayerMap(playerid, 956.2977,2441.0171,205.7626,183.3917, "Eiffel Tower", "et");
    return 1;
}
YCMD:lv(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2039.8860,1546.1112,10.4450,180.4970,2039.8860,1546.1112,10.4450,180.4970, "Las Venturas", "lv", true, false);
    return 1;
}
YCMD:lva(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1320.6082,1268.7208,13.5903,2.6780,1338.3005,1275.2460,11.8100,358.8224, "Las Venturas Airport", "lva", true, false);
    return 1;
}
YCMD:bs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1207.7231,-920.2217,43.0507,204.3588,1215.8248,-937.2825,42.4353,97.1190, "Burger Shot", "bs", true, false);
    return 1;
}
YCMD:bs2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 810.2364,-1632.6433,13.3906,247.2854,810.2364,-1632.6433,13.3906,247.2854, "Burger Shot 2", "bs2", true, false);
    return 1;
}
YCMD:bs3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2447.1104,2024.7499,10.8203,5.7265,2447.1104,2024.7499,10.8203,5.7265, "Burger Shot 3", "bs3", true, false);
    return 1;
}
YCMD:bs4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2314.1365,-143.7879,35.3203,178.6881,-2314.1365,-143.7879,35.3203,178.6881, "Burger Shot 4", "bs4", true, false);
    return 1;
}
YCMD:bs5(playerid, params[], help)
{
    PortPlayerMap(playerid, -1907.5175,834.4271,35.0156,140.9912, "Burger Shot 5", "bs5", true, false);
    return 1;
}
YCMD:film(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 909.7761,-1221.2274,16.9766,271.1224,909.7761,-1221.2274,16.9766,271.1224, "Film Studios", "film", true, false);
    return 1;
}
YCMD:bmx(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 3362.586, -1939.724, 43.027, 37.0, "BMX Parkour", "bmx"))
    {
        CheckPlayerGod(playerid);
        
		DestroyPlayerVehicles(playerid);
		
		PlayerData[playerid][tickJoin_bmx] = GetTickCountEx();
		
		SetPVarInt(playerid, "doingStunt", 3);
    }
    return 1;
}
YCMD:glen(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1892.7002,-1165.8480,24.0390,226.6521,1892.7002,-1165.8480,24.0390,226.6521, "Glen Park", "glen", true, false);
    return 1;
}
YCMD:sky(playerid, params[], help)
{
    PortPlayerMap(playerid, 1544.1896,-1352.2094,329.4762,182.8083, "Sky", "sky", true, false);
    return 1;
}
YCMD:sftj(playerid, params[], help)
{
    PortPlayerMap(playerid, -1753.6401,884.9623,295.8750,358.5666, "San Fierro Tower Jump", "sftj", true, false);
    return 1;
}
YCMD:quarry(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 833.0357,851.8098,12.0047,109.5170,833.0357,851.8098,12.0047,109.5170, "Quarry", "quarry", true, false);
    return 1;
}
YCMD:bordel(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2682.1389,1344.4447,17.0603,244.5469,-2691.2363,1353.6704,16.7702,240.1605, "Bordel", "bordel", true, false);
    return 1;
}
YCMD:airc(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-1415.2069,517.7242,18.2427,179.5160,-1407.8441,505.6808,18.0025,89.5673, "Aircraft Carrier", "airc", true, false);
    return 1;
}
YCMD:bayside(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2227.2446,2326.8723,7.5469,85.6516,-2258.7388,2326.4885,4.8125,180.9058, "Bayside", "bayside", true, false);
    return 1;
}
YCMD:vs(playerid, params[], help)
{
	new rand = random(CAR_SHOPS);

    PortPlayerMapVeh(playerid, g_CarShopTelePos[rand][0], g_CarShopTelePos[rand][1], g_CarShopTelePos[rand][2], g_CarShopTelePos[rand][3], g_CarShopTelePos[rand][0], g_CarShopTelePos[rand][1], g_CarShopTelePos[rand][2], g_CarShopTelePos[rand][3], "Car Shop", "vs");
    return 1;
}
YCMD:gc(playerid, params[], help)
{
    PortPlayerMap(playerid, 654.5861, -1867.3845, 5.5861, 90.0, "Gold Credits", "gc", true, false);
    return 1;
}
YCMD:ms(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 800.6712,-1330.6608,13.1061,226.2979,800.6712,-1330.6608,13.1061,226.2979, "Market Station", "ms", true, false);
    return 1;
}
YCMD:speed(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 680.2595, -1361.8927, 2551.2214, 90.0, 680.2595, -1361.8927, 2551.2214,90.0, "Speed Map", "speed");
    return 1;
}
YCMD:glory(playerid, params[], help)
{
    PortPlayerMap(playerid, 2354.1689, -2067.3284, 22.3832, 90.0, "Glory", "glory", true, false);
    return 1;
}
YCMD:maze(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2330.3174, 535.1375, 2.9512, 252.0903, 2330.3174, 535.1375, 2.9512, 252.0903, "Maze", "maze");
    return 1;
}
YCMD:maze2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1458.9336, 1854.9144, 54.7362, 143.3116,1458.9336, 1854.9144, 54.7362, 143.3116, "Maze 2", "maze2");
    return 1;
}
YCMD:maze3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 836.5298,-2048.2273,12.8672,181.5937,836.5298,-2048.2273,12.8672,181.5937, "Maze 3", "maze3");
    return 1;
}
YCMD:maze4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 983.0536,2691.7898,10.6925,206.9207,983.0536,2691.7898,10.6925,206.9207, "Maze 4", "maze4");
    return 1;
}
YCMD:loop(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 494.7604,4.7474,704.3844,88.7656,494.7604,4.7474,704.3844,88.7656, "Loop", "loop");
    return 1;
}
YCMD:rect(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 742.8961,533.1397,460.9956,270.0180,742.8961,533.1397,460.9956,270.0180, "RectAngle", "rect");
    return 1;
}
YCMD:nrg(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 442.4455, 816.6687, 9.6865, 90.0, 442.4455, 816.6687, 9.6865, 90.0, "NRG Parkour", "nrg");
    return 1;
}
YCMD:jujump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1387.8517,-2425.5776,525.6338,266.3386,1387.8517,-2425.5776,525.6338,266.3386, "Jubber Jump", "jujump");
    return 1;
}
YCMD:da(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 788.3009,-471.4969,20.5428,52.6863,788.3009,-471.4969,20.5428,52.6863, "Dilimore Airport", "da");
    return 1;
}
YCMD:drag(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -557.0079,-3575.5906,7.0870,30.2946,-557.0079,-3575.5906,7.0870,30.2946, "Drag", "drag");
    return 1;
}
YCMD:lvdrift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2333.8508,1405.8370,42.5904,358.0404,2333.8508,1405.8370,42.5904,358.0404, "Las Venturas Drift", "lvdrift", true, false);
    return 1;
}
YCMD:sfdrift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2410.9963, -600.7848, 132.3277, 127.1357, -2410.9963, -600.7848, 132.3277, 127.1357, "San Fierro Drift", "sfdrift", true, false);
    return 1;
}
YCMD:driftcity(playerid, params[], help)
{
	PortPlayerMapVeh(playerid, 3431.8403,485.7794,1788.2438,359.8336,3431.8403,485.7794,1788.0438,359.8336, "Drift City", "driftcity");
	return 1;
}
YCMD:driftisland(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 3075.9263,-3153.9749,49.1486,3.6277,3075.9263,-3153.9749,49.1486,3.6277, "Drift Island", "df");
    return 1;
}
YCMD:drift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -344.308, 1528.474, 75.159, 256.0,-344.308, 1528.474, 75.159, 256.0, "Drift", "drift");
    return 1;
}
YCMD:balloon(playerid, params[], help)
{
    PortPlayerMap(playerid, 295.4890,-1813.5734,52.0518,4.9753, "Balloon", "balloon");
    return 1;
}
YCMD:lsp(playerid, params[], help)
{
    PortPlayerMap(playerid, 2505.2646,-1694.4974,17.9575,182.0808, "Los Santos Parkour", "lsp", true, false);
    return 1;
}
YCMD:parkour(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2586.5618,-1346.5614,232.2472,0.0, "Parkour 1", "parkour"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour2(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -787.3710,-2766.3005,2660.3042,0.0, "Parkour 2", "parkour2"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour3(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -783.9699, -3662.0358, 137.3758,0.0, "Parkour 3", "parkour3"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour4(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -2929.4922,-1876.4229,8.3901, 344.1002, "Parkour 4", "parkour4"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour5(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 1441.3851318359, -1700.8812255859, 915.390625, 344.1002, "Parkour 5", "parkour5"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour6(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2768.4343261719,-2743.7131347656,2460.0815429688, 0.0, "Parkour 6", "parkour6"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour7(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 3018.1736,-1879.4410,599.0370,178.1489, "Parkour 7", "parkour7"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour8(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2246,-1276,942, 0.0, "Parkour 8", "parkour8"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:kk(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2521.0232, -1504.3864, 25.5929, 180.0, 2521.0232, -1504.3864, 25.5929, 180.0, "Krusty Krab", "kk", true, false);
    return 1;
}
YCMD:globe(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1954.7849,1915.3772,144.7200,268.1410,1954.7849,1915.3772,144.7200,268.1410, "Globe", "globe1");
    return 1;
}
YCMD:farm(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-1206.7996,-1056.9430,128.3646,310.2706,-1206.7996,-1056.9430,128.3646,310.2706, "Farm", "farm", true, false);
    return 1;
}
YCMD:bowl(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-576.6021,421.7149,75.2376,84.2204,-576.6021,421.7149,75.2376,84.2204, "Bowl", "bowl");
    return 1;
}
YCMD:villa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2006.7003,2434.1331,34.6573,2.1006,-2006.7003,2434.1331,34.6573,2.1006, "Villa", "villa", true, false);
    return 1;
}
YCMD:palominocreek(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2343.0247,91.6131,26.3281,179.4676,2343.0247,91.6131,26.3281,179.4676, "Palomino Creek", "palominocreek");
    return 1;
}
YCMD:glassjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2121.4280, 2560.6331, 514.7283, 0.0, 2121.4280, 2560.6331, 514.7283, 0.0, "Glass Jump", "glassjump", true, false);
    return 1;
}
YCMD:bj(playerid, params[], help)
{
    PortPlayerMap(playerid,294.3475,-1610.8379,494.6685,174.5567, "Base Jump 1", "bj");
    return 1;
}
YCMD:bikejump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,641.9279,2222.7144,940.5793,93.1221,641.9279,2222.7144,940.5793,93.1221, "Bike Jump", "bikejump");
    return 1;
}
YCMD:tunneljump(playerid, params[], help)
{
    PortPlayerMap(playerid,-494.527, 1600.167, 844.297, 271.0, "Tunnel Jump", "tunneljump");
    return 1;
}
YCMD:hugejump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,863.2654, 2490.4468, 694.3790, 296.0000, 899.6528, 2502.3611, 694.5513, 91.7515, "Huge Jump", "hugejump");
    return 1;
}
YCMD:loopjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2682.3909, 385.2379, 924.8377, 269.6873, -2682.3909, 385.2379, 924.8377, 269.6873, "Loop Jump", "loopjump");
    return 1;
}
YCMD:xslide(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1862.760, 1337.315, 55.933, 33.0,1862.760, 1337.315, 55.933, 33.0, "X-Slide", "xslide");
    return 1;
}
YCMD:drop(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,309.7934, 5461.4546, 3426.6863, 180.0,309.7934, 5461.4546, 3426.6863, 180.0, "Drop", "drop");
    return 1;
}
YCMD:tugfun(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2774.316, -1309.180, 4316.250, 0.0,2774.316, -1309.180, 4316.250, 0.0, "Tugfun", "Tugfun");
    return 1;
}
YCMD:deathjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2629.9734,-1029.7679,882.9141,240.2882,2629.9734,-1029.7679,882.9141,240.2882, "Death Jump", "deathjump");
    return 1;
}
YCMD:skydive(playerid, params[], help)
{
    if(PortPlayerMap(playerid,3887.5874,3891.2942,2017.7869,91.8075, "Skydive 1", "skydive"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive2(playerid, params[], help)
{
    if(PortPlayerMap(playerid,-1288.0760,-44.0085,4216.4507,93.1578, "Skydive 2", "skydive2"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive3(playerid, params[], help)
{
    if(PortPlayerMap(playerid,2875,-3233,3268,0, "Skydive 3", "skydive3"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive4(playerid, params[], help)
{
    if(PortPlayerMap(playerid,118.210845,3658.245859,836.183776,266.014678, "Skydive 4", "skydive4"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive5(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 239.3282, 3754.8267, 888.9833, 332.5006, "Skydive 5", "skydive5"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive6(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -1854.9218,-3813.2405,1160.8369,270.6376, "Skydive 6", "skydive6"))
    {
        LoadMap(playerid);
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:pool(playerid, params[], help)
{
    PortPlayerMap(playerid,4155.7158,2426.9578,1.4054,358.2449, "Pool", "pool");
    return 1;
}
YCMD:docks(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2714.5000,-2711.2676,2.4919,170.7375,2714.5000,-2711.2676,2.4919,170.7375, "Docks", "docks", true, false);
    return 1;
}
YCMD:sfs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-1952.5077,137.8305,26.2813,268.8237,-1952.5077,137.8305,26.2813,268.8237, "SF Station", "sfs", true, false);
    return 1;
}
YCMD:lss(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1706.4425,-1943.0046,13.5607,269.2462,1706.4425,-1943.0046,13.5607,269.2462, "LS Station", "lss", true, false);
    return 1;
}
YCMD:lvs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1433.8182,2606.3877,10.6719,90.1619,1433.8182,2606.3877,10.6719,90.1619, "LV Station", "lvs", true, false);
    return 1;
}
YCMD:lvs2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2859.3931,1290.5574,10.00,272.3561,2859.3931,1290.5574,10.00,272.3561, "LV Station 2", "lvs2", true, false);
    return 1;
}
YCMD:restaurant(playerid, params[], help)
{
    PortPlayerMap(playerid, 370.4659, -1717.2151, 15.0337, 1.9053, "Restaurant", "restaurant", true, false);
    return 1;
}
YCMD:concert(playerid, params[], help)
{
    PortPlayerMap(playerid, 1477.8225,-1714.1190,14.1400,359.7089, "Concert", "concert", true, false);
    return 1;
}
YCMD:247(playerid, params[], help)
{
	switch(random(8))
	{
	    case 0: PortPlayerMap(playerid, 1935.6107,-1774.3682,12.9179,179.1178, "_", "_", false);
	    case 1: PortPlayerMap(playerid, 2867.9910,-1439.5304,10.9656,93.5508, "_", "_", false);
	    case 2: PortPlayerMap(playerid, 1351.7595,-1750.6062,13.3601,182.3361, "_", "_", false);
	    case 3: PortPlayerMap(playerid, 1935.6107,-1774.3682,12.9179,179.1178, "_", "_", false);
	    case 4: PortPlayerMap(playerid, -102.2787,-1188.9490,1.7511,305.8828, "_", "_", false);
	    case 5: PortPlayerMap(playerid, 2273.5652,93.7596,26.3359,179.3487, "_", "_", false);
	    case 6: PortPlayerMap(playerid, 2179.1443,1991.5715,10.8203,268.9681, "_", "_", false);
	    case 7: PortPlayerMap(playerid, -850.5834,1543.7070,22.9045, 133.2283, "_", "_", false);
	}
	return 1;
}
YCMD:bank(playerid, params[], help)
{
	switch(random(3))
	{
	    case 0: PortPlayerMap(playerid, 1480.9403,-1765.3087,18.7958,178.5206, "_", "_", false);
	    case 1: PortPlayerMap(playerid, 1363.5427,215.4744,19.4063,159.8320, "_", "_", false);
	    case 2: PortPlayerMap(playerid, 2383.3401,2471.8391,10.8203,218.4656, "_", "_", false);
	}
	return 1;
}
#if WINTER_EDITION == true
YCMD:xmas(playerid, params[], help)
{
    PortPlayerMap(playerid,1069.9008,-1790.0100,13.6575,1.1382, "Christmas", "xmas", true, false);
	return 1;
}
#endif

YCMD:station(playerid, params[], help)
{
	switch(random(4))
	{
	    case 0: Command_ReProcess(playerid, "/lvs2", false);
	    case 1: Command_ReProcess(playerid, "/sfs", false);
	    case 2: Command_ReProcess(playerid, "/lvs", false);
	    case 3: Command_ReProcess(playerid, "/lss", false);
	}
	return 1;
}

YCMD:myskin(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    if(IsPlayerInAnyVehicle(playerid)) return player_notice(playerid, "Exit your vehicle", "");

	extract params -> new skin; else
	{
 		return Command_ReProcess(playerid, "/skins", false);
	}

	if(!IsValidSkin(skin)) return SCM(playerid, -1, ""er"Invaild skin ID");
	SetSpawnInfoEx(playerid, NO_TEAM, skin, 0.0, 0.0, 10.0, 0.0);
    SetPlayerSkin(playerid, skin);
	return 1;
}

YCMD:skins(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    if(IsPlayerInAnyVehicle(playerid)) return player_notice(playerid, "Exit your vehicle", "");

    ShowModelSelectionMenu(playerid, skinlist, "Select Skin", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
	return 1;
}
/*
YCMD:mynetstats(playerid, params[], help)
{
	new stats[423];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: My NetworkStats", stats, "OK", "");
	return 1;
}
*/
YCMD:netstats(playerid, params[], help)
{
	new stats[423];
    GetNetworkStats(stats, sizeof(stats));
    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Server Network Stats", stats, "OK", "");
	return 1;
}

YCMD:fallout(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == FALLOUT) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

	if(g_FalloutStatus == e_Fallout_Inactive)
	{
	    CheckPlayerGod(playerid);
	    Command_ReProcess(playerid, "/stopanims", false);
	    
	    fallout_reset_gametime();
	    fallout_buildmap();
	    fallout_startgame();
	    fallout_setplayer(playerid);
	    
		g_FalloutStatus = e_Fallout_Startup;
		CurrentFalloutPlayers++;
		gTeam[playerid] = FALLOUT;
		
        SCMToAll(BLUE, ""fallout_sign" Type /fallout to participate");
        NewMinigameJoin(playerid, "Fallout", "fallout");
        SetPlayerInterior(playerid, 0);
	}
	else if(g_FalloutStatus == e_Fallout_Startup)
	{
	    CheckPlayerGod(playerid);
	    Command_ReProcess(playerid, "/stopanims", false);
	    
	    CurrentFalloutPlayers++;
		gTeam[playerid] = FALLOUT;
		
		format(gstr, sizeof(gstr), "%s(%i) joined Fallout!", __GetName(playerid), playerid);
		fallout_broadcast(gstr);
		fallout_setplayer(playerid);
		
        NewMinigameJoin(playerid, "Fallout", "fallout");
        SetPlayerInterior(playerid, 0);
	}
	else if(g_FalloutStatus == e_Fallout_Running)
	{
	    SCM(playerid, -1, ""er"Fallout already started!");
	}
	return 1;
}

YCMD:derby(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DERBY) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");
	
	if(CurrentDerbyPlayers == MAX_DERBY_PLAYERS) return SCM(playerid, -1, ""er"Derby reached it's max Players!");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
    gTeam[playerid] = DERBY;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);

	if(IsDerbyRunning)
	{
        ShowPlayerDerbyTextdraws(playerid);
        SCM(playerid, -1, ""er"Derby already started, please wait till next round!");
	}
	else
	{
		ShowDialog(playerid, DERBY_VOTING_DIALOG);
        SCM(playerid, RED, "You joined Derby. Please vote for a map!");
	}

	SetPlayerDerbyStaticMeshes(playerid);
	ShowPlayerDerbyTextdraws(playerid);
	CurrentDerbyPlayers++;
	SetPlayerVirtualWorld(playerid, DERBY_WORLD);
	SetPlayerInterior(playerid, 0);
	
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);

	NewMinigameJoin(playerid, "Derby", "derby");
	return 1;
}

YCMD:war(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == WAR) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
	
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	
	ResetPlayerWeapons(playerid);
	switch(random(4))
	{
	    case 0: SetPlayerPosition(playerid, 164.9882, 1922.3430, 18.4712 + 1, 247.7249);
	    case 1: SetPlayerPosition(playerid, 285.5063, 1819.9249, 24.4108 + 1, 1.9556);
	    case 2: SetPlayerPosition(playerid, 291.3683, 1918.2693, 17.6265 + 1, 275.6602);
	    case 3: SetPlayerPosition(playerid, 236.5930, 1918.7386, 17.6446 + 1, 145.6778);
	}
	ShowPlayerDMTextdraws(playerid);
	
	GivePlayerWeapon(playerid, 3, 1);
	GivePlayerWeapon(playerid, 24, 9999999);
	GivePlayerWeapon(playerid, 25, 9999999);
	GivePlayerWeapon(playerid, 28, 9999999);
	GivePlayerWeapon(playerid, 30, 9999999);
	GivePlayerWeapon(playerid, 33, 9999999);
	GivePlayerWeapon(playerid, 17, 10);
	GivePlayerWeapon(playerid, 10, 1);
	
	Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = WAR;
	
	SetPlayerVirtualWorld(playerid, 5);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
	
	NewMinigameJoin(playerid, "WAR", "war");
	return 1;
}

YCMD:dm(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}

    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerVirtualWorld(playerid, DM_WORLD);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_1;

	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 26, 99999);

	SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch", "dm");
	return 1;
}

YCMD:dm2(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
	Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerVirtualWorld(playerid, DM_WORLD + 1);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_2;

	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 25, 99999);
    GivePlayerWeapon(playerid, 34, 99999);

	SetPlayerPos(playerid, DM_MAP_2[rand][0], DM_MAP_2[rand][1], DM_MAP_2[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_2[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);

	NewMinigameJoin(playerid, "Deathmatch 2", "dm2");
	return 1;
}

YCMD:dm3(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerVirtualWorld(playerid, DM_WORLD + 2);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_3;

	GivePlayerWeapon(playerid, 16, 99999);
	GivePlayerWeapon(playerid, 9, 99999);

	SetPlayerPos(playerid, DM_MAP_3[rand][0], DM_MAP_3[rand][1], DM_MAP_3[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_3[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch 3", "dm3");
	return 1;
}

YCMD:dm4(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerVirtualWorld(playerid, DM_WORLD + 3);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_4;

	GivePlayerWeapon(playerid, 31, 99999);
	GivePlayerWeapon(playerid, 27, 99999);
	GivePlayerWeapon(playerid, 37, 99999);

	SetPlayerPos(playerid, DM_MAP_4[rand][0], DM_MAP_4[rand][1], DM_MAP_4[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_4[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch 4", "dm4");
	return 1;
}

YCMD:sawn(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");

	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}

    if(gTeam[playerid] == gSAWN) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerVirtualWorld(playerid, SAWN_WORLD);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = gSAWN;

	GivePlayerWeapon(playerid, 26, 99999);

	SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);

	NewMinigameJoin(playerid, "Sawnoff DM", "sawn");
	return 1;
}

YCMD:textdraws(playerid, params[], help)
{
	if(PlayerData[playerid][bTextdraws])
	{
	    Command_ReProcess(playerid, "/hidef", false);
	}
	else Command_ReProcess(playerid, "/showf", false);
	return 1;
}

YCMD:hidef(playerid, params[], help)
{
    PlayerData[playerid][bTextdraws] = false;
	TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    TextDrawHideForPlayer(playerid, TXTFooterBlack);
	TextDrawHideForPlayer(playerid, TXTFooter);
	TextDrawHideForPlayer(playerid, NEFLOGO[0]);
	TextDrawHideForPlayer(playerid, NEFLOGO[1]);
	TextDrawHideForPlayer(playerid, NEFLOGO[2]);
    TextDrawHideForPlayer(playerid, TXTRandomInfo);
    TextDrawHideForPlayer(playerid, TXTGodTD);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
	#if WINTER_EDITION == true
	TextDrawHideForPlayer(playerid, TXTWinterEdition);
	#endif
	return 1;
}

YCMD:showf(playerid, params[], help)
{
    PlayerData[playerid][bTextdraws] = true;
	TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTFooterBlack);
	TextDrawShowForPlayer(playerid, TXTFooter);
	TextDrawShowForPlayer(playerid, NEFLOGO[0]);
	TextDrawShowForPlayer(playerid, NEFLOGO[1]);
	TextDrawShowForPlayer(playerid, NEFLOGO[2]);
    TextDrawShowForPlayer(playerid, TXTRandomInfo);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
	if(PlayerData[playerid][bGod]) TextDrawShowForPlayer(playerid, TXTGodTD);
	#if WINTER_EDITION == true
	TextDrawShowForPlayer(playerid, TXTWinterEdition);
	#endif
	return 1;
}

YCMD:flip(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, ""er"You must be a driver in a vehicle to flip it!");
	
	new veh, Float:angle;
  	veh = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(veh, angle);
	SetVehicleZAngle(veh, angle);
	SCM(playerid, NEF_YELLOW, "You can also press '2' to flip you vehicle");
	return 1;
}

YCMD:s(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't save your position now");
    
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), PlayerData[playerid][sX], PlayerData[playerid][sY], PlayerData[playerid][sZ]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), PlayerData[playerid][sA]);
	}
	else
	{
	   GetPlayerPos(playerid, PlayerData[playerid][sX], PlayerData[playerid][sY], PlayerData[playerid][sZ]);
	   GetPlayerFacingAngle(playerid, PlayerData[playerid][sA]);
	}
	PlayerData[playerid][bStateSaved] = true;
	PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
	SCM(playerid, -1, ""vgreen"Position saved! Load Position with "white"/l");
	return 1;
}

YCMD:l(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't load your position now");
	if(!PlayerData[playerid][bStateSaved])
	{
	    player_notice(playerid, "Use /s first", "");
		return 1;
	}
	
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(GZoneData[r][e_underattack] && (GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid] || GZoneData[r][e_attacker] == PlayerData[playerid][e_gangid]))
	    {
	        if(GZONE_SIZE + 100.0 > GetDistance3D(PlayerData[playerid][sX], PlayerData[playerid][sY], PlayerData[playerid][sZ], GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2]))
	        {
	            return SCM(playerid, -1, ""er"Point is next to a Gang Zone which is under attack");
	        }
		}
	}
	
	SetPlayerInterior(playerid, 0);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), PlayerData[playerid][sX], PlayerData[playerid][sY], PlayerData[playerid][sZ]+0.2);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), PlayerData[playerid][sA]);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	}
	else
	{
  		SetPlayerPos(playerid, PlayerData[playerid][sX], PlayerData[playerid][sY], PlayerData[playerid][sZ]+2);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][sA]);
	}
	
	SCM(playerid, -1, ""vgreen"Saved position loaded");
	PlayerPlaySound(playerid, 1057,0.0,0.0,0.0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

YCMD:t(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
 	ShowDialog(playerid, TELE_DIALOG);
	return 1;
}

YCMD:parch(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
 	GivePlayerWeapon(playerid, 46, 1);
	return 1;
}

YCMD:colors(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}

	new r, g, b;
	if(sscanf(params, "iii", r, g, b) || !(0 <= r <= 255) || !(0 <= g <= 255) || !(0 <= b <= 255))
	{
		SCM(playerid, -1, ""nef" You can also set your own color using RGB values. /color <0-255> <0-255> <0-255>");
		SCM(playerid, -1, ""nef" Quick color change: /blue /orange /red /yellow /grey /pink /green - /random for a random color");
		ShowPlayerDialog(playerid, COLOR_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Colors", ""RED_E"Red\n"BLUE_E"Blue\n"WHITE_E"White\n{FFFF82}Ivory\n"PINK_E"Pink\n"YELLOW_E"Yellow\n"GREEN_E"Green\n{00EBFF}Lightblue\n"GREY_E"Grey\n"ORANGE_E"Orange\n"purple"Purple\n"LG_E"Light Green\n{B0C4DE}Steelblue", "Select", "Exit");
	}
	else
	{
		if(r < 30 || g < 30 || b < 30)
		{
   			return SCM(playerid, -1, ""er"Color too dark! RGB values under 30 are not allowed!");
		}
		new col = RGBA(r, g, b, 255);
		SetPlayerColor(playerid, col);

		format(gstr, sizeof(gstr), ""nef" Your nickname color has been changed to %i-%i-%i in RGB", r, g, b);
		SCM(playerid, col, gstr);
	}
	return 1;
}

YCMD:random(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	new rand = random(sizeof(szPlayerColors));
	SetPlayerColor(playerid, szPlayerColors[rand]);
	format(gstr, sizeof(gstr), "Color set! Your new color: {%06x}Color", GetColorEx(playerid) >>> 8);
	SCM(playerid, BLUE, gstr);
	return 1;
}

YCMD:red(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, RED);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:yellow(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, YELLOW);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:grey(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, GREY);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:pink(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, PINK);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:blue(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, BLUE);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:green(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, GREEN);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:white(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, WHITE);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:orange(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, NEF_YELLOW);
	player_notice(playerid, "Color set", "");
	return 1;
}

YCMD:fs(playerid, params[], help)
{
	SCM(playerid, BLUE, "Fight Styles: /boxing /kungfu /kneehead /grabkick /elbow /normal");
	return 1;
}

YCMD:fightsytles(playerid, params[], help)
{
	SCM(playerid, BLUE, "Fight Styles: /boxing /kungfu /kneehead /grabkick /elbow /normal");
	return 1;
}

YCMD:normal(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	player_notice(playerid, "Fight style:", "normal");
	return 1;
}

YCMD:boxing(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	player_notice(playerid, "Fight style:", "boxing");
	return 1;
}

YCMD:kungfu(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	player_notice(playerid, "Fight style:", "kungfu");
	return 1;
}

YCMD:kneehead(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	player_notice(playerid, "Fight style:", "kneehead");
	return 1;
}

YCMD:grabkick(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	player_notice(playerid, "Fight style:", "grabkick");
	return 1;
}

YCMD:elbow(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	player_notice(playerid, "Fight style:", "elbow");
	return 1;
}

YCMD:sb(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerData[playerid][bSpeedBoost])
    {
     	player_notice(playerid, "Speed Boost", "~r~OFF");
	}
	else
	{
	    player_notice(playerid, "Speed Boost", "~g~ON");
	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerData[playerid][bSpeedBoost] = !PlayerData[playerid][bSpeedBoost];
	return 1;
}

YCMD:sj(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerData[playerid][bSuperJump])
    {
     	player_notice(playerid, "Super Jump", "~r~OFF");
	}
	else
	{
	    player_notice(playerid, "Super Jump", "~g~ON");
	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerData[playerid][bSuperJump] = !PlayerData[playerid][bSuperJump];
	return 1;
}

YCMD:enter(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	new i = -1;
	if((i = GetNearestHouse(playerid)) != -1)
	{
	    EnterHouse(playerid, i);
	}
	else
	{
	    SCM(playerid, -1, ""er"You aren't near if any house");
	}
	return 1;
}

YCMD:sellgc(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 0) return Command_ReProcess(playerid, "/vip", false);
    if(!islogged(playerid)) return notlogged(playerid);
	if(PlayerData[playerid][e_credits] <= 0) return SCM(playerid, -1, ""er"You don't own any GC!");

	new player, gc, money;
	if(sscanf(params, "rii", player, gc, money))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /sellgc <playerid> <gc amount> <money>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(money < 100000 || money > 50000000)
	{
	    return SCM(playerid, -1, ""er"$100,000 - $50,000,000!");
	}
	
	if(gc < 1000 || gc > 10000)
	{
	    return SCM(playerid, -1, ""er"GC: 1,000 - 10,000!");
	}
	
	if(gc > PlayerData[playerid][e_credits]) return SCM(playerid, -1, ""er"You don't have that much GC.");

	if(IsPlayerAvail(player) && player != playerid)
	{
	    if(PlayerData[player][e_credits] >= 10000000) return SCM(playerid, -1, ""er"This player reached the max gc limit of 10kk.");
        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

	    PlayerData[player][GCPlayer] = playerid;
	    PlayerData[player][GCOffer] = gc;
	    PlayerData[player][GCPrice] = money;
	    PlayerData[player][GCNameHash] = YHash(__GetName(playerid));

	    format(gstr, sizeof(gstr), ""blue"You have offered %s(%i) your %sGC for $%s", __GetName(player), player, number_format(gc), number_format(money));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) is offering you their %sGC for $%s, type /buygc to accept", __GetName(playerid), playerid, number_format(gc), number_format(money));
	    SCM(player, -1, gstr);
	    
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(player, 1057, 0.0, 0.0, 0.0);
	}
	else
	{
		SCM(playerid, -1, ""er"That player is not available or yourself");
	}
	return 1;
}

YCMD:buygc(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(PlayerData[playerid][GCPlayer] == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"No one has offered you GC yet.");
    if(PlayerData[playerid][e_credits] >= 10000000) return SCM(playerid, -1, ""er"You have reached the max gc limit of 10kk.");

	if(IsPlayerAvail(PlayerData[playerid][GCPlayer]) && PlayerData[PlayerData[playerid][GCPlayer]][e_credits] >= PlayerData[playerid][GCOffer] && PlayerData[playerid][GCNameHash] == YHash(__GetName(PlayerData[playerid][GCPlayer])))
	{
		if(GetPlayerMoneyEx(playerid) < PlayerData[playerid][GCPrice]) return SCM(playerid, -1, ""er"You do not have enough money!");

		GivePlayerMoneyEx(PlayerData[playerid][GCPlayer], PlayerData[playerid][GCPrice]);
		GivePlayerMoneyEx(playerid, -PlayerData[playerid][GCPrice]);

        AlterPlayerCredits(playerid, PlayerData[playerid][GCOffer]);
        AlterPlayerCredits(PlayerData[playerid][GCPlayer], -PlayerData[playerid][GCOffer]);

		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(PlayerData[playerid][GCPlayer], 1057, 0.0, 0.0, 0.0);

        SQL_SaveAccount(playerid, false, false);
		SQL_SaveAccount(PlayerData[playerid][GCPlayer], false, false);

	    format(gstr2, sizeof(gstr2), "INSERT INTO `sells` VALUES (NULL, 2, %i, %i, %i, %i);", PlayerData[playerid][GCOffer], PlayerData[playerid][GCPrice], PlayerData[PlayerData[playerid][GCPlayer]][e_accountid], PlayerData[playerid][e_accountid]);
	    mysql_tquery(pSQL, gstr2, "", "");

	    format(gstr, sizeof(gstr), ""blue"You have accepted %s's offer and bough %sGC for $%s", __GetName(PlayerData[playerid][GCPlayer]), number_format(PlayerData[playerid][GCOffer]), number_format(PlayerData[playerid][GCPrice]));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) has accepted your offer. You sold %sGC for $%s", __GetName(playerid), playerid, number_format(PlayerData[playerid][GCOffer]), number_format(PlayerData[playerid][GCPrice]));
	    SCM(PlayerData[playerid][GCPlayer], -1, gstr);

	    format(gstr, sizeof(gstr), ""orange"[NEF] %s(%i) has sold their %sGC to %s(%i) for $%s", __GetName(PlayerData[playerid][GCPlayer]), PlayerData[playerid][GCPlayer], number_format(PlayerData[playerid][GCOffer]), __GetName(playerid), playerid, number_format(PlayerData[playerid][GCPrice]));
	    SCMToAll(-1, gstr);

	    PlayerData[playerid][GCPlayer] = INVALID_PLAYER_ID;
	    PlayerData[playerid][GCOffer] = 0;
	    PlayerData[playerid][GCPrice] = 0;
	    PlayerData[playerid][GCNameHash] = 0;
	}
	else
	{
		SCM(playerid, -1, ""er"This player has either gone offline or does not have the offered GC anymore.");
	}
	return 1;
}

YCMD:bbuy(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);

	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastPBuy] + COOLDOWN_CMD_PBUY) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}
	}

	new bool:bFound = false;
	for(new r = 0; r < MAX_BUSINESSES; r++)
	{
	    if(BusinessData[r][e_ormid] == ORM:-1) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2])) continue;
		bFound = true;
		
		if(BusinessData[r][e_sold] != 0) {
		    player_notice(playerid, "Business not for sale", "");
		    break;
		}
		if(GetPlayerBusinessCount(__GetName(playerid)) > PlayerData[playerid][e_addbizzslots]) {
			SCM(playerid, -1, ""er"You do not have any free business slots");
			break;
		}
	    if(GetPlayerScoreEx(playerid) < 1000) {
			SCM(playerid, -1, ""er"You need at least 1000 score to start a business");
			break;
		}
		if(GetPlayerMoneyEx(playerid) < 1500000) {
			SCM(playerid, -1, ""er"You need at least $1,500,000 to start a business");
			break;
		}
		
		strmid(BusinessData[r][e_owner], __GetName(playerid), 0, MAX_PLAYER_NAME + 1, MAX_PLAYER_NAME + 1);
		BusinessData[r][e_sold] = 1;
		BusinessData[r][e_date] = gettime();
		
		DestroyDynamic3DTextLabel(BusinessData[r][e_label_id]);
		DestroyDynamicPickup(BusinessData[r][e_pickup_id]);
		DestroyDynamicMapIcon(BusinessData[r][e_icon_id]);
		BusinessData[r][e_icon_id] = -1;
		
		SetupBusiness(r);
		
		PlayerData[playerid][tickLastPBuy] = tick;
		
		player_notice(playerid, "SUCCESS!", "");
        PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
        GivePlayerMoneyEx(playerid, -1500000);
        SQL_SaveAccount(playerid, false, false);
		
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) bought the business %i!", __GetName(playerid), playerid, BusinessData[r][e_id]);
	    SCMToAll(-1, gstr);
		
		orm_update(BusinessData[r][e_ormid]);
		break;
	}
	if(!bFound) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

YCMD:bsell(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);

	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastPSell] + COOLDOWN_CMD_PSELL) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}
	}

	new bool:bFound = false;
	for(new r = 0; r < MAX_BUSINESSES; r++)
	{
	    if(BusinessData[r][e_ormid] == ORM:-1) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2])) continue;
		bFound = true;

	    if(!BusinessData[r][e_sold]) {
			SCM(playerid, -1, ""er"Business can't be sold");
			break;
		}
		if(strcmp(BusinessData[r][e_owner], __GetName(playerid), true)) {
			SCM(playerid, -1, ""er"You don't own this business");
			break;
		}
		
	    strmid(BusinessData[r][e_owner], "NoData", 0, MAX_PLAYER_NAME + 1, MAX_PLAYER_NAME + 1);
	    BusinessData[r][e_sold] = 0;
        BusinessData[r][e_level] = 1;
        BusinessData[r][e_date] = 0;

		DestroyDynamic3DTextLabel(BusinessData[r][e_label_id]);
		DestroyDynamicPickup(BusinessData[r][e_pickup_id]);

        SetupBusiness(r);

	    PlayerData[playerid][tickLastPSell] = tick;
	    
	    player_notice(playerid, "SUCCESS!", "");
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) sold the business %i!", __GetName(playerid), playerid, BusinessData[r][e_id]);
	    SCMToAll(-1, gstr);
	    
	    orm_update(BusinessData[r][e_ormid]);
	    break;
	}
	if(!bFound) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

YCMD:buy(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastBuy] + COOLDOWN_CMD_BUY) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}
	}
	
	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
        found = true;

	    if(HouseData[i][sold])
		{
			SCM(playerid, -1, ""er"House is not buyable");
			break;
		}
		if(PlayerData[playerid][e_houses] > PlayerData[playerid][e_addhouseslots])
		{
			SCM(playerid, -1, ""er"You have no free house slot!");
			break;
		}
	    if(GetPlayerScoreEx(playerid) < HouseData[i][e_score])
		{
			SCM(playerid, -1, ""er"You need more score for this House!");
			break;
		}
		if(GetPlayerMoneyEx(playerid) < HouseData[i][price])
		{
			SCM(playerid, -1, ""er"You need more money to buy this House!");
			break;
		}

		strmid(HouseData[i][Owner], __GetName(playerid), 0, 25, 25);
	    HouseData[i][sold] = 1;

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, gstr);
	    DestroyDynamicMapIcon(HouseData[i][e_iconid]);
	    DestroyDynamicPickup(HouseData[i][pickid]);
	    HouseData[i][e_iconid] = -1; //CreateDynamicMapIcon(HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], 32, 1, 0, -1, -1, 150.0);
	    HouseData[i][pickid] = CreateDynamicPickup(1272, 1, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], -1, -1, -1, 30.0);
	    GivePlayerMoneyEx(playerid, -HouseData[i][price]);
	    HouseData[i][date] = gettime();
	    PlayerData[playerid][e_houses]++;
	    player_notice(playerid, "House bought", "");
	    SQL_SaveHouse(i);
	    SQL_SaveAccount(playerid, false, false);
	    PlayerData[playerid][tickLastBuy] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) bought the house %i for $%s!", __GetName(playerid), playerid, HouseData[i][e_id], number_format(HouseData[i][price]));
	    SCMToAll(-1, gstr);
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"House bought!", ""white"You can now use these commands:\n\n/hmenu\n/hlock\n/enter\n/exit\n/sell\n\nCustomize your house's interior by using /hmenu", "OK", "");

	    if(PlayerAchData[playerid][e_ach_settled][0] == 0)
	    {
	        GivePlayerAchievement(playerid, e_ach_settled, "Settled", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		}
		break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any house");
	return 1;
}

YCMD:sell(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastSell] + COOLDOWN_CMD_SELL) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}
	}
	
    new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
	    found = true;

	    if(!HouseData[i][sold])
		{
			SCM(playerid, -1, ""er"House cannot be sold!");
			break;
		}
	    if(strcmp(HouseData[i][Owner], __GetName(playerid), true))
		{
			SCM(playerid, -1, ""er"You don't own this house!");
			break;
		}
	    strmid(HouseData[i][Owner], "ForSale", 0, 25, 25);
	    HouseData[i][sold] = 0;
	    HouseData[i][locked] = 1;

		for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
		{
			if(HouseData[i][E_Obj_Model][ii] != 0)
			{
			    DestroyDynamicObject(HouseData[i][E_Obj_ObjectID][ii]);
			    DestroyDynamic3DTextLabel(HouseData[i][E_Obj_Label][ii]);
			    HouseData[i][E_Obj_Label][ii] = Text3D:-1;
			    HouseData[i][E_Obj_ObjectID][ii] = -1;
			    HouseData[i][E_Obj_Model][ii] = 0;
			}
		}

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, gstr);
	    DestroyDynamicMapIcon(HouseData[i][e_iconid]);
	    DestroyDynamicPickup(HouseData[i][pickid]);
	    HouseData[i][e_iconid] = CreateDynamicMapIcon(HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], 31, 1, 0, -1, -1, 150.0);
	    HouseData[i][pickid] = CreateDynamicPickup(1273, 1, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], -1, -1, -1, 30.0);
	    PlayerData[playerid][e_houses]--;
	    HouseData[i][date] = 0;
	    GivePlayerMoneyEx(playerid, floatround(HouseData[i][price] / 4));
	    player_notice(playerid, "House sold", "");
	    SQL_SaveHouse(i, true);
	    SQL_SaveAccount(playerid, false, false);
	    PlayerData[playerid][tickLastSell] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) sold the house %i for $%s!", __GetName(playerid), playerid, HouseData[i][e_id], number_format(floatround(HouseData[i][price] / 4)));
	    SCMToAll(-1, gstr);
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any house");
	return 1;
}

YCMD:lock(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] == gFREEROAM)
    {
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new vehicle = -1;
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        vehicle = GetPlayerVehicleID(playerid);
			}
			else if(PVSelect[playerid] != -1)
			{
			    if(GetPlayerVehicleID(playerid) == PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])
			    {
                    vehicle = GetPlayerVehicleID(playerid);
			    }
			}
			
			if(vehicle != -1)
			{
			    new vehicle_params[7];
			    GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
			    
			    if(vehicle_params[3] == -1)
			        vehicle_params[3] = 1;
				else
					vehicle_params[3] = vehicle_params[3] == 0 ? 1 : 0;
			    
		        SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);

		        player_notice(playerid, "Vehicle:~n~", vehicle_params[3] == 0 ? ("~r~~h~Unlocked") : ("~g~~h~Locked"));
		        PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
		        return 1;
			}
		}
		else player_notice(playerid, "You have to be in a vehicle", "");
    }
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:hlock(playerid, params[], help)
{
	if(gTeam[playerid] == gFREEROAM || gTeam[playerid] == HOUSE)
	{
		new tick = GetTickCountEx();

		if((PlayerData[playerid][tickLastLocked] + COOLDOWN_CMD_LOCK) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}

	    new bool:found = false;
		for(new i = 0; i < houseid; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z]))
			{
				found = true;
				if(strcmp(HouseData[i][Owner], __GetName(playerid), true))
				{
					SCM(playerid, -1, ""er"This isn't your House!");
					break;
				}
				if(!HouseData[i][locked])
				{
				    player_notice(playerid, "House:", "~g~locked");
				}
				else player_notice(playerid, "House:", "~r~unlocked");

	   			HouseData[i][locked] = (HouseData[i][locked]) ? (0) : (1);
	            PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
	            SQL_SaveHouse(i);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 100.0, g_aHouseInteriorTypes[HouseData[i][interior]][house_x], g_aHouseInteriorTypes[HouseData[i][interior]][house_y], g_aHouseInteriorTypes[HouseData[i][interior]][house_z]) && GetPlayerInterior(playerid) == g_aHouseInteriorTypes[HouseData[i][interior]][interior] && GetPlayerVirtualWorld(playerid) == (HouseData[i][e_id] + 1000))
			{
				found = true;
				if(strcmp(HouseData[i][Owner], __GetName(playerid), true))
				{
					SCM(playerid, -1, ""er"This isn't your House!");
					break;
				}

				if(!HouseData[i][locked])
					player_notice(playerid, "House:", "~g~locked");
				else
					player_notice(playerid, "House:", "~r~unlocked");

	            HouseData[i][locked] = HouseData[i][locked] ? 0 : 1;
	            PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
	            SQL_SaveHouse(i);
			}
			else continue;
		}
		PlayerData[playerid][tickLastLocked] = tick;
		if(!found) SCM(playerid, -1, ""er"You aren't near of any house!");
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:gungame(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == GUNGAME) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1338);

	GunGame_Player[playerid][level] = 0;
	GunGame_Player[playerid][dead] = true;
	GunGame_Player[playerid][pw] = true;

	gTeam[playerid] = GUNGAME;

    ResetPlayerWeapons(playerid);
    LoadMap(playerid);
	new rand = random(9);
	SetPlayerPosEx(playerid, GunGame_Spawns[rand][0], GunGame_Spawns[rand][1], floatadd(GunGame_Spawns[rand][2], 3.5));
	SetPlayerFacingAngle(playerid, GunGame_Spawns[rand][3]);
	SetCameraBehindPlayer(playerid);

	GivePlayerWeapon(playerid, 4, 1);
	GivePlayerWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]], 65535);

	GunGame_Player[playerid][dead] = false;
	GunGame_Player[playerid][pw] = true;

	if(GunGamePlayers() >= 16) SetPlayerHealth(playerid, 100.0);
	else SetPlayerHealth(playerid, ((20) + (5 * GunGamePlayers())));

	ShowPlayerGunGameTextdraws(playerid);

	NewMinigameJoin(playerid, "Gungame", "gungame");
	return 1;
}

YCMD:cnr(playerid, params[], help)
{
/*    if(gTeam[playerid] == CNR)
		return player_notice(playerid, "You already joined CnR", "");

	if(gTeam[playerid] != gFREEROAM)
		return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");
	
	new robbers = 0, cops = 0;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[i][bwCNRFraction] & CNR_COP || PlayerData[i][bwCNRFraction] & CNR_SWAT || PlayerData[i][bwCNRFraction] & CNR_ARMY)
			cops++;
		else if(PlayerData[i][bwCNRFraction] & CNR_ROBBER || PlayerData[i][bwCNRFraction] & CNR_PRO_ROBBER)
		    robbers++;
	}

	new string[512];
	format(string, sizeof(string), ""YELLOW_E"Choose your side", ""LB_E"Cops\t\t"GREY_E"LVPD\t\t(Players: %i)\n"ORANGE_E"Robbers\t"GREY_E"LV Mafia\t\t(Players: %i)\n"RED_E"Pro Robbers\t"GREY_E"Mafia Commanders\n"PURPLE_E"Army\t\t"GREY_E"Army Task Force\n"BLUE_E"Swat\t\t"GREY_E"LVPD Commanders", cops, robbers);
	
	ShowPlayerDialog(playerid, CNR_DIALOG, DIALOG_STYLE_LIST, ""YELLOW_E"Choose your side", string, "Select", "Cancel");
*/
    if(gTeam[playerid] == CNR) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

	new robbers = 0, cops = 0;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(GetPVarInt(i, "Cop") == 1)
			cops++;
			
		if(GetPVarInt(i, "Robber") == 1)
			robbers++;
	}
	
	new string[512];
	format(string, sizeof(string), ""LB_E"Cops\t\t"GREY_E"LVPD\t\t\t(Players: %i)\n"ORANGE_E"Robbers\t"GREY_E"LV Mafia\t\t(Players: %i)\n"RED_E"Pro Robbers\t"GREY_E"Mafia Commanders\n"PURPLE_E"Army\t\t"GREY_E"Army Task Force\n"BLUE_E"Swat\t\t"GREY_E"LVPD Commanders", cops, robbers);

	ShowPlayerDialog(playerid, CNR_DIALOG, DIALOG_STYLE_LIST, ""YELLOW_E"Choose your side", string, "Select", "Close");
	return 1;
}

YCMD:cnrhelp(playerid, params[], help)
{
	new line3[600];
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		strcat(line3, ""LB2_E"You have joined the Las Venturas Police Department!\n\n"BLUE_E"Cop Help:\n"WHITE_E"Your mission is to protect the streets of Las Venturas by eliminating any crime.\nSuspects are shown as "ORANGE_E"orange"WHITE_E" on your map radar. The most wanted suspects are shown in darker orange.");
		strcat(line3, "\nType "RED_E"/ar "WHITE_E"to arrest any criminal nearby, you and the suspect must be on foot.\nYou get more score and money by arresting rather than takedowns.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\n\nType /cnrhelp to open this box up at anytime, Good luck soldiers!");
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""BLUE_E"Cop Help", line3, "OK", "");
 	}
 	else if(GetPVarInt(playerid, "Robber") == 1)
	{
		strcat(line3, ""ORANGE_E"You have joined the Las Venturas Mafia!\n\n"BLUE_E"Criminal Help:\n"WHITE_E"Your job is to cause mayham in the streets of Las Venturas\nYou must do your best to evade any cops while you're at it.\nThe cops are marked as "LB_E"blue"WHITE_E" on your map radar.\nThe elite Swat team is marked as "BLUE_E"darkblue on your map radar.\n");
		strcat(line3, "\nYou can enter some shops and "RED_E"/rob "WHITE_E"the store for cash.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\n\nType /cnrhelp to open this box up at anytime, Good luck boys!");
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""RED_E"Criminal Help", line3, "OK", "");
	}
	else SCM(playerid, COLOR_BLUE, ""nef" "YELLOW_E"You must be in a /cnr minigame to use this command!");
	return 1;
}

YCMD:duel(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join duels while being in a Gang War, type /exit");
    
    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You are already dueling!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");
    
    new player;
    if(sscanf(params, "r", player))
    {
        if(PlayerData[playerid][DuelRequestRecv] == INVALID_PLAYER_ID) // Accept duel invite
        {
			return SCM(playerid, NEF_GREEN, "Usage: /duel <playerid>");
        }
        else
        {
            if(!IsPlayerAvail(PlayerData[playerid][DuelRequestRecv])) return SCM(playerid, -1, ""er"Player is not available");
            if(gTeam[PlayerData[playerid][DuelRequestRecv]] != gFREEROAM) return SCM(playerid, -1, ""er"Player is not in freeroam world");
            if(IsPlayerOnDesktop(PlayerData[playerid][DuelRequestRecv], 1500)) return SCM(playerid, -1, ""er"Player is on desktop");
            if(PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelRequest] != playerid) return SCM(playerid, -1, ""er"Error: Players do not match");

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(PlayerData[i][DuelRequestRecv] == playerid)
			    {
		        	format(gstr, sizeof(gstr), ">> %s(%i) canceled the duel request!", __GetName(playerid), playerid);
		        	SCM(i, NEF_RED, gstr);

		        	PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
			    }
			    if(PlayerData[i][DuelRequest] == playerid && i != PlayerData[playerid][DuelRequestRecv])
			    {
		        	format(gstr, sizeof(gstr), ">> %s(%i) canceled the duel request!", __GetName(playerid), playerid);
		        	SCM(i, NEF_RED, gstr);

		        	PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;
			    }
			}
			
			CheckPlayerGod(playerid);
			CheckPlayerGod(PlayerData[playerid][DuelRequestRecv]);
            
            ResetPlayerWeapons(playerid);
            ResetPlayerWeapons(PlayerData[playerid][DuelRequestRecv]);
            
            GivePlayerWeapon(playerid, PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelWeapon], 700000);
            GivePlayerWeapon(PlayerData[playerid][DuelRequestRecv], PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelWeapon], 700000);
            
            SetPlayerVirtualWorld(playerid, playerid + 10000);
            SetPlayerVirtualWorld(PlayerData[playerid][DuelRequestRecv], playerid + 10000);
            
            SetPlayerPos(playerid, DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][0][0], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][0][1], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][0][2]);
            SetPlayerPos(PlayerData[playerid][DuelRequestRecv], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][1][0], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][1][1], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][1][2]);

            SetPlayerFacingAngle(playerid, DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][0][3]);
            SetPlayerFacingAngle(PlayerData[playerid][DuelRequestRecv], DuelMaps[PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelLocation] - 1][1][3]);
            
            SetCameraBehindPlayer(playerid);
            SetCameraBehindPlayer(PlayerData[playerid][DuelRequestRecv]);
            
            SetPlayerHealth(playerid, 99.0);
            SetPlayerArmour(playerid, 99.0);
            SetPlayerHealth(PlayerData[playerid][DuelRequestRecv], 99.0);
            SetPlayerArmour(PlayerData[playerid][DuelRequestRecv], 99.0);
            
            PlayerData[playerid][bwSuspect] |= SUSPECT_VALID_ARMOR;
            PlayerData[PlayerData[playerid][DuelRequestRecv]][bwSuspect] |= SUSPECT_VALID_ARMOR;
            
			// Closing open dialogs in order to avoid some exploits.
			ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
			ShowPlayerDialog(PlayerData[playerid][DuelRequestRecv], -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
            
            gTeam[playerid] = gDUEL;
            gTeam[PlayerData[playerid][DuelRequestRecv]] = gDUEL;
            
            PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID;
            PlayerData[PlayerData[playerid][DuelRequestRecv]][DuelRequestRecv] = INVALID_PLAYER_ID;
            
            global_broadcast(">> Duel started between %s and %s!", __GetName(PlayerData[playerid][DuelRequestRecv]), __GetName(playerid));
        }
    }
    else
    {
        // Begin duel request
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
			if(PlayerData[i][DuelRequestRecv] == playerid)
			{
	        	format(gstr, sizeof(gstr), ">> %s(%i) canceled the duel request!", __GetName(playerid), playerid);
	        	SCM(i, NEF_RED, gstr);
	        	
	        	PlayerData[i][DuelRequestRecv] = INVALID_PLAYER_ID;
			}
        }
        
		PlayerData[playerid][DuelRequest] = player;
		ShowDialog(playerid, DIALOG_DUEL);
    }
	return 1;
}

YCMD:tdm(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == gBG_VOTING || gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");
	
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	SetPlayerVirtualWorld(playerid, BG_WORLD);
	SetPlayerInterior(playerid, 0);
	ResetPlayerWeapons(playerid);

	if(CurrentBGMap == BG_VOTING)
	{
	    SetPlayerBGStaticMeshes(playerid);
		gTeam[playerid] = gBG_VOTING;
		ShowDialog(playerid, BGVOTING_DIALOG);
		ShowPlayerBGTextdraws(playerid);
	}
	else if(CurrentBGMap == BG_MAP1)
	{
		ShowPlayerBGTextdraws(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP1, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP1, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP1, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP2)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP2, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP2, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP2, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP3)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP3, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP3, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP3, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP4)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP4, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP4, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP4, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP5)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP5, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP5, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP5, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP6)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP6, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP6, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP6, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	
	NewMinigameJoin(playerid, "TDM", "tdm");
	return 1;
}

YCMD:adminhelp(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    new string[1500];

		format(gstr, sizeof(gstr), ""white"%s\n", g_szStaffLevelNames[1][e_rank]);
		strcat(string, gstr);
		strcat(string, "/suspect /asay /warn /slap /reports /spec /specoff /disarm\n/rplayers /dplayers /pweaps /getin /gotoxyza /spectators /caps\n/kick /mute /unmute /adminhq /ncrecords\n\n");

		format(gstr, sizeof(gstr), "%s\n", g_szStaffLevelNames[2][e_rank]);
		strcat(string, gstr);
		strcat(string, "/online /offline /onduty /offduty /akill /rv /day /togglegc\n/burn /move /tban /ban /cuff /uncuff /jail /unjail /unfreeze /readrules\n\n");
		
		format(gstr, sizeof(gstr), "%s\n", g_szStaffLevelNames[3][e_rank]);
		strcat(string, gstr);
		strcat(string, "/freeze /eject /go /getip /get /mkick /clearchat /iplookup /dawn\n/night /giveweapon /connectbots /raceforcemap /deleterecord /nstats\n/tplayer\n\n");
		
		format(gstr, sizeof(gstr), "%s\n", g_szStaffLevelNames[4][e_rank]);
		strcat(string, gstr);
		strcat(string, "/unban /oban /sethealth /healall /announce /armorall /cashfall\n/scorefall /announce2\n\n");
		
		format(gstr, sizeof(gstr), "%s\n", g_szStaffLevelNames[5][e_rank]);
		strcat(string, gstr);
		strcat(string, "/onlinefix /setcash /setbcash /setscore /gdestroy /addcash /addscore\n/resetrc /hreset /breset /hsetprice /hsetscore\n/setbizzlevel /hcreate /bcreate /createstore /gzonecreate");

        ShowPlayerDialog(playerid, ADMIN_CMD_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Admin Commands", string, "OK", "");
	}
  	else
	{
  		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:togglegc(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    if(!PlayerData[playerid][bHideGC])
			player_notice(playerid, "You have been detached from [GC] channel", "");
		else
		    player_notice(playerid, "You have been added to [GC] channel", "");
		    
		PlayerData[playerid][bHideGC] = !PlayerData[playerid][bHideGC];
	}
  	else
	{
  		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:minigun(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == MINIGUN) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = MINIGUN;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 38, 99999);
   	SetPlayerVirtualWorld(playerid, MINIGUN_WORLD);
	SetPlayerInterior(playerid, 0);
	HidePlayerInfoTextdraws(playerid);
	new rand = random(10);
	SetPlayerPos(playerid, Minigun_Spawns[rand][0], Minigun_Spawns[rand][1], Minigun_Spawns[rand][2] + 2.5);
	SetPlayerFacingAngle(playerid, Minigun_Spawns[rand][3]);
	
    NewMinigameJoin(playerid, "Minigun", "minigun");
    return 1;
}

YCMD:minigun2(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == MINIGUN2) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = MINIGUN2;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 38, 99999);
   	SetPlayerVirtualWorld(playerid, MINIGUN2_WORLD);
	SetPlayerInterior(playerid, 0);
	HidePlayerInfoTextdraws(playerid);
	new rand = random(19);
	SetPlayerPos(playerid, Minigun2_Spawns[rand][0], Minigun2_Spawns[rand][1], Minigun2_Spawns[rand][2] + 2.5);
	SetPlayerFacingAngle(playerid, Minigun2_Spawns[rand][3]);

    NewMinigameJoin(playerid, "Minigun 2", "minigun2");
    return 1;
}


YCMD:sniper(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == MINIGUN) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = SNIPER;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 34, 99999);
	SetPlayerVirtualWorld(playerid, SNIPER_WORLD);
	SetPlayerInterior(playerid, 0);
	HidePlayerInfoTextdraws(playerid);
    LoadMap(playerid);
	new rand = random(14);
	SetPlayerPosEx(playerid, Sniper_Spawns[rand][0], Sniper_Spawns[rand][1], Sniper_Spawns[rand][2] + 5.5);
	SetPlayerFacingAngle(playerid, Sniper_Spawns[rand][3]);

	NewMinigameJoin(playerid, "Sniper", "sniper");
   	return 1;
}

YCMD:rocketdm(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == ROCKETDM) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = ROCKETDM;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 35, 99999);
	SetPlayerVirtualWorld(playerid, ROCKETDM_WORLD);
	SetPlayerInterior(playerid, 0);
	HidePlayerInfoTextdraws(playerid);
	new rand = random(8);
	SetPlayerPosEx(playerid, RocketDM_Spawns[rand][0], RocketDM_Spawns[rand][1], RocketDM_Spawns[rand][2] + 4.5);
	SetPlayerFacingAngle(playerid, RocketDM_Spawns[rand][3]);

	NewMinigameJoin(playerid, "Rocket DM", "rocketdm");
   	return 1;
}

YCMD:bounties(playerid, params[], help)
{
	new count = 0;
	SCM(playerid, -1, "================Current bounties=================");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerAvail(i) && PlayerData[i][HitmanHit] > 0)
		{
			format(gstr, sizeof(gstr), "- Hit on %s(%i) for $%s", __GetName(i), i, number_format(PlayerData[i][HitmanHit]));
			SCM(playerid, GREY, gstr);
			count++;
		}
	}
	if(count == 0)
	{
		SCM(playerid, GREY, "No bounties at the moment");
	}
	SCM(playerid, -1, "==============================================");
	return 1;
}

YCMD:ff(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	
	new Float:height;
	if(sscanf(params, "f", height))
	{
		new Float:POS[3];
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], 500.0));
	}
	else
	{
	    if(height <= 0) return SCM(playerid, -1, ""er"Height can not be negative or 0");
		new Float:POS[3];
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], height));
	}
	return Command_ReProcess(playerid, "/parch", false);
}

YCMD:exit(playerid, params[], help)
{
	if(ExitPlayer(playerid) != 0)
	{
		SCM(playerid, -1, ""er"You can't use this command now!");
	}
	return 1;
}

YCMD:setspawn(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, GREY, NOT_AVAIL);
    if(GetPlayerInterior(playerid) != 0) return SCM(playerid, GREY, ""er"Wrong interior");
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");
    
    GetPlayerPos(playerid, PlayerData[playerid][CSpawnX], PlayerData[playerid][CSpawnY], PlayerData[playerid][CSpawnZ]);
    GetPlayerFacingAngle(playerid, PlayerData[playerid][CSpawnA]);
    PlayerData[playerid][bHasCustomSpawn] = true;

	SCM(playerid, YELLOW, "You will now spawn here!");
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

YCMD:radio(playerid, params[], help)
{
    ShowDialog(playerid, STREAM_DIALOG);
    return 1;
}

YCMD:stopradio(playerid, params[], help)
{
    StopAudioStreamForPlayer(playerid);
    return 1;
}

YCMD:hitman(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastHitman] + COOLDOWN_CMD_HITMAN) >= tick) return player_notice(playerid, "Command is on cooldown!", "");
	}
	
	new amount, player;
	if(sscanf(params, "ri", player, amount))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /hitman <playerid> <amount>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
	    if(amount < 5000 || amount > 1000000)
	    {
	        return SCM(playerid, -1, ""er"$5,000 - $1,000,000!");
	    }
	}
	else
	{
		if(amount < 5000 || amount > 250000)
		{
		    return SCM(playerid, -1, ""er"$5,000 - $250,000!");
		}
	}

	if(IsPlayerAvail(player) && player != playerid)
	{
		if(GetPlayerMoneyEx(playerid) >= amount)
		{
            PlayerData[player][HitmanHit] += amount;

			new zone[MAX_ZONE_NAME],
				zone_ret = GetPlayer2DZone(player, zone, sizeof(zone));
		    
		    if(PlayerData[player][HitmanHit] == 0)
		    {
				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has placed a bounty on %s(%i) for $%s get him!", __GetName(playerid), playerid, __GetName(player), player, number_format(amount));
				SCMToAll(-1, gstr);
		    }
		    else if(PlayerData[player][HitmanHit] != 0)
		    {
				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has placed another bounty on %s(%i) for $%s Total: "red"$%s", __GetName(playerid), playerid, __GetName(player), player, number_format(amount), number_format(PlayerData[player][HitmanHit]));
				SCMToAll(-1, gstr);
		    }

			if(zone_ret != 0)
			{
				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has been last seen in '%s'", __GetName(player), player, zone);
				SCMToAll(-1, gstr);
			}
		    
			format(gstr, sizeof(gstr), "You've placed a bounty on %s(%i) for $%s", __GetName(player), player, number_format(amount));
			SCM(playerid, YELLOW, gstr);
		    
			PlayerData[playerid][tickLastHitman] = tick;
			GivePlayerMoneyEx(playerid, -amount);
		}
		else
		{
			SCM(playerid, -1, ""er"You do not have enough money!");
		}
	}
	else
	{
		SCM(playerid, -1, ""er"That player is not available or yourself");
	}
	return 1;
}

YCMD:akill(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
	    if(sscanf(params, "r", player))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /akill <playerid>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	    if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Can't kill player because he is in a minigame");
	    
 		if(IsPlayerAvail(player))
		{
			format(gstr, sizeof(gstr), "Admin %s(%i) killed you.", __GetName(playerid), playerid);
			SCM(player, YELLOW, gstr);

			SetPlayerHealth(player, 0.0);
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) killed %s(%i)", __GetName(playerid), playerid, __GetName(player), player);
			admin_broadcast(-1, gstr);
			print(gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:sethealth(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
	    new player, Float:amount;
	    if(sscanf(params, "rf", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /sethealth <playerid> <health>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
	    if(amount > 100) return SCM(playerid, -1, ""er"Do not set it higher than 100");
	    
 		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your health to %f.", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's health to %f.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your health to %f.", amount);
				SCM(playerid, YELLOW, gstr);
			}
			SetPlayerHealth(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setbcash(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setbcash <playerid> <amount>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 50000000)
		{
			return SCM(playerid, -1, ""er"$0 - $50,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your bank cash to $%s.", __GetName(playerid), playerid, number_format(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's bank cash to $%s.", __GetName(player), number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your bank cash to $%s.", number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) bank cash was set to $%i by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
			print(gstr);
			
			PlayerData[player][e_bank] = amount;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}
/*
YCMD:grantnc(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player;
	    if(sscanf(params, "r", player))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /grantnc <playerid>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
		
		    PlayerData[player][e_lastnc] = gettime() - 7786000;

			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has reset your NC cooldown.", __GetName(playerid), playerid);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have reset %s's NC cooldown.", __GetName(player));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				SCM(playerid, YELLOW, "You have reset your NC cooldown.");
			}

			format(gstr, sizeof(gstr), ""red"Adm: %s's(%i) has reset %s's NC cooldown", __GetName(playerid), playerid, __GetName(player));
			admin_broadcast(-1, gstr);
			print(gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}*/

YCMD:suspect(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    new count = 0, tmpstring[55], finstring[1500];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(!IsPlayerAvail(i))
				continue;

		    if(PlayerData[i][e_vip] == 0) {
                /* ARMOR CHECK */
				new Float:tmp;
				GetPlayerArmour(i, tmp);

				if(tmp >= 1.0 && !(PlayerData[i][bwSuspect] & SUSPECT_VALID_ARMOR)) {
	                format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_ARMOR\n", ++count, __GetName(i), i);
	                strcat(finstring, tmpstring);
				}

                /* JETPACK CHECK */ // TODO: https://github.com/myudev/SAMPAC/blob/master/src/CAntiCheat.cpp SPECATE_DETECTION
				if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK) {
	                format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_JETPACK\n", ++count, __GetName(i), i);
	                strcat(finstring, tmpstring);
				}
			}
   			if(PlayerData[i][bwSuspect] & SUSPECT_PROAIM) {
   			    format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_PROAIM\n", ++count, __GetName(i), i);
   			    strcat(finstring, tmpstring);
   			}
   			if(PlayerData[i][bwSuspect] & SUSPECT_CRASHER_OPWS) {
   			    format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_CRASHER_OPWS\n", ++count, __GetName(i), i);
				strcat(finstring, tmpstring);
   			}
   			if(PlayerData[i][bwSuspect] & SUSPECT_CRASHER_OVM) {
   			    format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_CRASHER_OVM\n", ++count, __GetName(i), i);
				strcat(finstring, tmpstring);
   			}
   			if(PlayerData[i][bwSuspect] & SUSPECT_FAKE_PACKETS) {
   			    format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_FAKE_PACKETS\n", ++count, __GetName(i), i);
				strcat(finstring, tmpstring);
   			}
   			if(PlayerData[i][bwSuspect] & SUSPECT_WEAPON) {
   			    format(tmpstring, sizeof(tmpstring), "%i) %s(%i) - AC_WEAPON\n", ++count, __GetName(i), i);
				strcat(finstring, tmpstring);
   			}
		}
		
		if(count > 0) {
		    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Suspect AC", finstring, "OK", "");
		} else {
		    player_notice(playerid, "SUSPECT:", "NO DATA");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:onlinefix(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    mysql_query(pSQL, "TRUNCATE TABLE `online`;", false);
	    
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
				format(gstr, sizeof(gstr), "INSERT INTO `online` VALUES (NULL, '%s', '%s', UNIX_TIMESTAMP());", __GetName(i), __GetIP(i));
				mysql_pquery(pSQL, gstr);
	        }
	    }
	    
	    SCM(playerid, -1, ""er"Table has been reloaded.");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setcash(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setcash <playerid> <amount>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 50000000)
		{
			return SCM(playerid, -1, ""er"$0 - $50,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your cash to $%s.", __GetName(playerid), playerid, number_format(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's cash to $%s.", __GetName(player), number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your cash to $%s.", number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s's(%i) cash has been set to $%i by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
			print(gstr);
			
			SetPlayerMoneyEx(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:addscore(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /addscore <playerid> <amount>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

    	if(amount < 1 || amount > 100)
		{
			return SCM(playerid, -1, ""er"$1 - 100");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has given you %i score", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have given %s %i score.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have given yourself %i.", amount);
				SCM(playerid, YELLOW, gstr);
			}

			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given %i score by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
			print(gstr);

			GivePlayerScoreEx(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:addcash(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /addcash <playerid> <amount>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

    	if(amount < -100000000 || amount > 10000000)
		{
			return SCM(playerid, -1, ""er"$-10,000,000 - $10,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has given you $%s.", __GetName(playerid), playerid, number_format(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have given %s $%s.", __GetName(player), number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have given yourself $%s.", number_format(amount));
				SCM(playerid, YELLOW, gstr);
			}

			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given $%s by %s(%i)", __GetName(player), player, number_format(amount), __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
			print(gstr);

			GivePlayerMoneyEx(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setscore(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setscore <playerid> <score>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 1000000)
		{
			return SCM(playerid, -1, ""er"Score: 0 - 1,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your score to %i.", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You set %s's score to %i.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your score to %i.", amount);
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has set %s(%i) score to %i", __GetName(playerid), playerid, __GetName(player), player, amount);
			admin_broadcast(-1, gstr);
			print(gstr);
			
			SetPlayerScoreEx(player, amount);
		}
	 	else
	 	{
		 	SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:online(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    player_notice(playerid, "~w~Adminlist: ~g~Online", "");
		PlayerData[playerid][bOnlineAdmin] = true;
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:offline(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    player_notice(playerid, "~w~Adminlist: ~r~Offline", "");
		PlayerData[playerid][bOnlineAdmin] = false;
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:onduty(playerid, params[], help)
{
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerData[playerid][e_level] >= 2)
	{
		if(!PlayerData[playerid][bDuty])
		{
			PlayerData[playerid][bDuty] = true;
			PlayerData[playerid][AdminDutyLabel] = CreateDynamic3DTextLabel("Admin On Duty", ADMIN, 0.0, 0.0, 0.35, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);

	        format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) is now onduty", __GetName(playerid), playerid);
	        SCMToAll(RED, gstr);
        	SetPlayerHealth(playerid, 99999.0);
		}
		else
		{
			SCM(playerid, -1, ""er"You are already onduty");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:offduty(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
    	if(PlayerData[playerid][bDuty])
		{
		    PlayerData[playerid][bDuty] = false;

        	format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) is now offduty", __GetName(playerid), playerid);
        	SCMToAll(-1, gstr);
        	SetPlayerHealth(playerid, 100.0);
        	RemovePlayerAttachedObject(playerid, 9);
      		if(PlayerData[playerid][AdminDutyLabel] != Text3D:-1)
			{
			    DestroyDynamic3DTextLabel(PlayerData[playerid][AdminDutyLabel]);
			    PlayerData[playerid][AdminDutyLabel] = Text3D:-1;
			}
		}
		else
		{
			SCM(playerid, -1, ""er"You are not onduty");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:eject(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /eject <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerData[player][e_level] == MAX_ADMIN_LEVEL && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}

        if(IsPlayerAvail(player) && gTeam[player] == gFREEROAM)
		{
			if(IsPlayerInAnyVehicle(player))
			{
			    new	Float:POS[3];

				if(player != playerid)
				{
					format(gstr, sizeof(gstr), "Admin %s(%i) has ejected you from your vehicle", __GetName(playerid), playerid);
					SCM(player, YELLOW, gstr);
				}

				format(gstr, sizeof(gstr), "You have ejected %s(%i) from their vehicle", __GetName(player), player);
				SCM(playerid, YELLOW, gstr);
    		   	GetPlayerPos(player, POS[0], POS[1], POS[2]);
    		   	SetPlayerPos(player, POS[0], POS[1], POS[2] + 3);
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not in a vehicle");
			}
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:burn(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new otherid;
	 	if(sscanf(params, "r", otherid))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /burn <playerid>");
	  	}

	    if(otherid == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(otherid)) return SCM(playerid, -1, ""er"Player not connected!");

        if(IsPlayerAvail(otherid))
		{
			if(PlayerData[otherid][e_level] > 0)
			{
				return SCM(playerid, -1, ""er"You cannot use this command on an admin");
			}
		    switch(gTeam[otherid])
		    {
		        case DERBY, gRACE, BUYCAR, gBG_VOTING, GUNGAME, SPEC, JAIL: return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    }
			if(!PlayerData[otherid][bDerbyWinner] && gTeam[otherid] == DERBY) return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    
		    new Float:POS[3];
			GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
			CreateExplosion(POS[0] + 0.02, POS[1] + 0.3, POS[2] + 3, 1, 10.0);
			
			format(gstr, sizeof(gstr), "You have burnt %s(%i)", __GetName(otherid), otherid);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been burnt by %s(%i)", __GetName(otherid), otherid, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:getip(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /getip <playerid>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerData[player][e_level] >= PlayerData[playerid][e_level] && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
        if(IsPlayerAvail(player))
		{
			format(gstr, sizeof(gstr), "%s's ip is %s", __GetName(player), __GetIP(player));
			SCM(playerid, BLUE, gstr);
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:nstats(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /nstats <playerid>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerData[player][e_level] >= PlayerData[playerid][e_level] && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}

        if(IsPlayerAvail(player))
		{
			new string[512], ip_port[22];
			format(string, sizeof(string), ""white"Network Statistics\n\n%s(%i)\n\nConnect Time: %i\nMsgs Recv: %i\nBytes Recv: %i\nMsgs Sent: %i\nBytes Sent: %i\nMsgs Recv per second: %i\nPacketloss: %.2f%s\nConnect Stauts: %i\n",
			    __GetName(player),
			    player,
			    NetStats_GetConnectedTime(player),
			    NetStats_MessagesReceived(player),
			    NetStats_BytesReceived(player),
			    NetStats_MessagesSent(player),
			    NetStats_BytesSent(player),
			    NetStats_MessagesRecvPerSecond(player),
			    NetStats_PacketLossPercent(player),
			    "%%",
			    NetStats_ConnectionStatus(player));
			    
			NetStats_GetIpPort(player, ip_port, sizeof(ip_port));
			strcat(string, ip_port);
			
			ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Network Stats", string, "OK", "");
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:iplookup(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    if(sscanf(params, "s[143]", gstr))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /iplookup <ip>");
	    }

	    if(strlen(gstr) > 16 || strlen(gstr) < 7) return SCM(playerid, -1, ""er"This is not an IP");
	    
	    new escape[17];
	    mysql_escape_string(gstr, escape, pSQL, sizeof(escape));

		if(badsql(escape) != 0)
		{
		    return SCM(playerid, -1, ""er"You have specified invalid characters");
		}

	    format(gstr, sizeof(gstr), "SELECT `name` FROM `accounts` WHERE `ip` = '%s' AND `level` != 5;", escape);
	    mysql_tquery(pSQL, gstr, "OnIpLookUp", "is", playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:car(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    
	if(gTeam[playerid] == gFREEROAM)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	    if(IsPlayerInRangeOfPoint(playerid, 65.0, 1797.3141, -1302.0978, 120.2659) && PlayerData[playerid][e_level] < 1) return SCM(playerid, -1, ""er"Can't spawn vehicle at this place!");

		CarSpawner(playerid, 415, 120);
	}
	else
	{
   		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:locate(playerid, params[], help)
{
    new player;
 	if(sscanf(params, "r", player))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /locate <playerid>");
  	}
  	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(IsPlayerAvail(player))
	{
        if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Player is in a minigame!");

		new zone[MAX_ZONE_NAME],
		    zone_ret = GetPlayer2DZone(player, zone, sizeof(zone));
		    
		if(zone_ret == 0)
		{
			player_notice(playerid, "Location not found", "");
		}
		else
		{
			format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has been located in '%s'", __GetName(player), player, zone);
    		SCM(playerid, -1, gstr);
		}
	}
	else
	{
	    SCM(playerid, -1, ""er"Player is not connected");
	}
	return 1;
}

YCMD:id(playerid, params[], help)
{
	if(isnull(params))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /id <nick/part of nick>");
	}
	
	new found, playername[MAX_PLAYER_NAME + 1];
	format(gstr, sizeof(gstr), "Searched for: %s", params);
	SCM(playerid, GREEN, gstr);
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerAvail(i) && PlayerData[playerid][bOnlineAdmin])
		{
	  		GetPlayerName(i, playername, MAX_PLAYER_NAME+1);
			new namelen = strlen(playername), bool:searched = false;
	    	for(new pos = 0; pos < namelen; pos++)
			{
				if(!searched)
				{
					if(strfind(playername, params, true) == pos)
					{
						format(gstr, sizeof(gstr), "%i. %s (ID %i)", ++found, playername, i);
						SCM(playerid, GREEN, gstr);
						searched = true;
					}
				}
			}
		}
	}
	if(found == 0) SCM(playerid, -1, ""er"No players have this in their nick");
	return 1;
}

YCMD:asay(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /asay <message>");
	    }
	    
	    if(strlen(text) > 100 || strlen(text) < 3) return SCM(playerid, -1, ""er"Length: 3-100");

		format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i): %s", __GetName(playerid), playerid, text);
		SCMToAll(-1, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:announce(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 4 || IsPlayerAdmin(playerid))
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /announce <message>");
	    }
	    
	    if(strfind(text, "~", true) != -1) return SCM(playerid, -1, ""er"'~' is not allowed in announce.");
	    if(strfind(text, "#", true) != -1) return SCM(playerid, -1, ""er"'#' is not allowed in announce.");
	    if(strfind(text, "%", true) != -1) return SCM(playerid, -1, ""er"'%' is not allowed in announce.");
	    if(strlen(text) > 50 || strlen(text) < 1) return SCM(playerid, -1, ""er"Length 1-50");

		format(gstr, sizeof(gstr), "%s", text);
		GameTextForAll(gstr, 4000, 3);
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:announce2(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 4 || IsPlayerAdmin(playerid))
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /announce2 <message>");
	    }

	    if(strlen(text) > 144 || strlen(text) < 1) return SCM(playerid, -1, ""er"Length 1-50");

		format(gstr, sizeof(gstr), ""white"Admin %s(%i):\n\n %s", __GetName(playerid), playerid, text);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] != BUYCAR)
		    {
				ShowPlayerDialog(i, ANN2_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Admin Announcement", gstr, "OK", "");
			}
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:spectators(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 1)
	{
	    new Iterator:speccers<MAX_PLAYERS>;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == SPEC)
		    {
		        Iter_Add(speccers, i);
		    }
		}

		if(Iter_Count(speccers) == 0)
		{
			return player_notice(playerid, "There are no spectators", "");
		}

		format(gstr, sizeof(gstr), ""nef" Displaying a list of %i admin(s)/VIP(s) spectating:", Iter_Count(speccers));
		SCM(playerid, -1, gstr);

        for(new i = Iter_First(speccers), count = 0; i != Iter_End(speccers); i = Iter_Next(speccers, i), ++count)
        {
            if(PlayerData[i][SpecID] == INVALID_PLAYER_ID) continue;
            format(gstr, sizeof(gstr), " %i. %s(%i) spectating %s(%i)", count + 1, __GetName(i), i, __GetName(PlayerData[i][SpecID]), PlayerData[i][SpecID]);
            SCM(playerid, -1, gstr);
        }
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:jetpack(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 0) return Command_ReProcess(playerid, "/vip", false);
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");

	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL && PlayerData[playerid][bGWarMode])
	{
	    new Float:POS[3];
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

		for(new r = 0; r < MAX_GZONES; r++)
		{
		    if(GZoneData[r][e_ormid] == ORM:-1)
		        continue;

		    if(!GZoneData[r][e_underattack])
				continue;

		    if(IsPointInDynamicArea(GZoneData[r][e_areaid], POS[0], POS[1], POS[2]))
		        return player_notice(playerid, "Failed to spawn jetpack", "Not allowed in gang zone");
		}
	}

	player_notice(playerid, "Jetpack spawned", "");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}

YCMD:go(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	if(PlayerData[playerid][e_level] == 0)
	{
	    if(gTeam[playerid] == gFREEROAM)
	    {
		    new player;
		 	if(sscanf(params, "r", player))
			{
				return SCM(playerid, NEF_GREEN, "Usage: /go <playerid>");
		  	}
		  	
			if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
			if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
			if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not avialable");
  			if(Iter_Contains(iterPlayerIgnore[player], playerid)) return SCM(playerid, -1, ""er"This player ignores you");
			if(player == playerid) return SCM(playerid, -1, ""er"You may not teleport to yourself");
			if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Player is currently unavailable to goto");
			if(PlayerData[player][e_wanteds] != 0) return SCM(playerid, -1, ""er"This player has wanteds");
			if(PlayerData[player][e_level] != 0) return SCM(playerid, -1, ""er"You can't teleport to admins");
            if(PlayerData[player][bGWarMode]) return SCM(playerid, -1, ""er"This player is in Gang War");
            if(GetPVarInt(player, "doingStunt") != 0) return SCM(playerid, -1, ""er"Player is doing stunts");
            if(!PlayerData[player][bAllowPlayerTeleport] && PlayerData[playerid][e_level] == 0) return SCM(playerid, -1, ""er"Player disabled teleports");

			new Float:POS[3];
			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(player));
	        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
	        
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), floatadd(POS[0], 3), POS[1], POS[2]);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
			}
			else
			{
				SetPlayerPos(playerid, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			
			format(gstr, sizeof(gstr), "You have teleported to %s(%i)!", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), "%s(%i) has teleported to you!", __GetName(playerid), playerid);
			SCM(player, BLUE, gstr);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
		}
		else
		{
		    SCM(playerid, RED, "You need to be in freeroam world");
		}
	}
	else if(PlayerData[playerid][e_level] > 0 || IsPlayerAdmin(playerid))
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /go <playerid>");
	  	}

		if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not avialable");
		if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Player is currently unavailable to goto");
		if(player == playerid) return SCM(playerid, -1, ""er"You may not teleport to yourself");
		
		new Float:POS[3];
		GetPlayerPos(player, POS[0], POS[1], POS[2]);
		SetPlayerInterior(playerid, GetPlayerInterior(player));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), floatadd(POS[0], 2), POS[1], POS[2]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
		}
		else
		{
			SetPlayerPos(playerid, floatadd(POS[0], 2), POS[1], POS[2]);
		}

		format(gstr, sizeof(gstr), "You have teleported to %s(%i)!", __GetName(player), player);
		SCM(playerid, BLUE, gstr);
		format(gstr, sizeof(gstr), "%s(%i) has teleported to you!", __GetName(playerid), playerid);
		SCM(player, BLUE, gstr);
		SetPVarInt(playerid, "doingStunt", 0);
		PlayerData[playerid][tickJoin_bmx] = 0;
	}
	return 1;
}

YCMD:cuff(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /cuff <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        SetPlayerSpecialAction(player, SPECIAL_ACTION_CUFFED);

	    	format(gstr, sizeof(gstr), ""nef" "GREY_E"You have cuffed %s(%i).", __GetName(player), player);
			SCM(playerid, COLOR_STEELBLUE, gstr);
			SCM(playerid, COLOR_STEELBLUE, ">> "GREY2_E"Type /uncuff to uncuff the player.");
			format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has cuffed you.", __GetName(playerid), playerid);
			SCM(player, COLOR_STEELBLUE, gstr);
		}
		else
		{
		    SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:uncuff(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /uncuff <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);

			format(gstr, sizeof(gstr), ""nef" "GREY_E"You have uncuffed %s(%i).", __GetName(player), player);
			SCM(playerid, COLOR_STEELBLUE, gstr);
			format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has uncuffed you.", __GetName(playerid), playerid);
			SCM(player, COLOR_STEELBLUE, gstr);
		}
		else
		{
		    SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:get(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 3)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /get <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		if(gTeam[playerid] != gFREEROAM) return SCM(playerid, -1, ""er"Not useable in minigames");
		if(PlayerData[player][bIsDead]) return SCM(playerid, -1, ""er"Cannot teleport dead players");
		
		if(PlayerData[player][e_level] == MAX_ADMIN_LEVEL && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
	 	if(IsPlayerAvail(player) && player != playerid && gTeam[player] == gFREEROAM)
	 	{
	 	    if(PlayerData[player][bIsDead]) return SCM(playerid, -1, ""er"Cannot teleport dead players");
	 	    
			new Float:POS[3];

			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerInterior(player, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(player, GetPlayerVirtualWorld(playerid));
			
			if(GetPlayerState(player) == PLAYER_STATE_DRIVER)
			{
			    new VehicleID = GetPlayerVehicleID(player);
				SetVehiclePos(VehicleID, POS[0] + 2.0, POS[1], POS[2] + 0.5);
				LinkVehicleToInterior(VehicleID, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(player), GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPos(player, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			SetPVarInt(player, "doingStunt", 0);
			PlayerData[player][tickJoin_bmx] = 0;
			
			format(gstr, sizeof(gstr), "You have been teleported to Admin %s's location", __GetName(playerid));
			SCM(player, BLUE, gstr);
			format(gstr, sizeof(gstr), "You have teleported %s(%i) to your location", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected, is yourself or is in a minigame");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:tplayer(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 3)
	{
	    new fromplayer, toplayer;
	 	if(sscanf(params, "rr", fromplayer, toplayer))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /tplayer <playerid> <to playerid>");
	  	}

	    if(fromplayer == INVALID_PLAYER_ID || toplayer == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player ids");
		if(!IsPlayerConnected(fromplayer) || !IsPlayerConnected(toplayer)) return SCM(playerid, -1, ""er"One of them is not connected");
		if(gTeam[fromplayer] != gFREEROAM || gTeam[toplayer] != gFREEROAM) return SCM(playerid, -1, ""er"One of them is not in freeroam");
		if(PlayerData[fromplayer][bIsDead] || PlayerData[toplayer][bIsDead]) return SCM(playerid, -1, ""er"One of them is dead");
		if(playerid == fromplayer || playerid == toplayer) return SCM(playerid, -1, ""er"You can't use this command on yourself");

		if((PlayerData[fromplayer][e_level] == MAX_ADMIN_LEVEL || PlayerData[toplayer][e_level] == MAX_ADMIN_LEVEL) && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}

	 	if(IsPlayerAvail(fromplayer) && IsPlayerAvail(toplayer))
	 	{
			new Float:POS[3];

			GetPlayerPos(toplayer, POS[0], POS[1], POS[2]);
			SetPlayerInterior(fromplayer, GetPlayerInterior(toplayer));
			SetPlayerVirtualWorld(fromplayer, GetPlayerVirtualWorld(toplayer));

			if(GetPlayerState(fromplayer) == PLAYER_STATE_DRIVER)
			{
			    new vehicle = GetPlayerVehicleID(fromplayer);
				SetVehiclePos(vehicle, POS[0] + 2.0, POS[1], POS[2] + 0.5);
				LinkVehicleToInterior(vehicle, GetPlayerInterior(toplayer));
				SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(toplayer));
			}
			else
			{
				SetPlayerPos(fromplayer, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			
			SetPVarInt(fromplayer, "doingStunt", 0);
			PlayerData[fromplayer][tickJoin_bmx] = 0;

			format(gstr, sizeof(gstr), "Admin %s has teleported you to %s", __GetName(playerid), __GetName(toplayer));
			SCM(fromplayer, BLUE, gstr);
			format(gstr, sizeof(gstr), "You have teleported %s(%i) to your %s's location", __GetName(fromplayer), fromplayer, __GetName(toplayer));
			SCM(playerid, BLUE, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected, is yourself or is in a minigame");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ncrecords(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] != 1 && PlayerData[playerid][e_level] == 0) return Command_ReProcess(playerid, "/vip", false);

	if(sscanf(params, "s[143]", gstr))
	{
		mysql_tquery(pSQL, "SELECT * FROM `ncrecords` ORDER BY `id` DESC LIMIT 10;", "OnNCReceive", "i", playerid);
	}
	else
	{
		if(strlen(gstr) > MAX_PLAYER_NAME)
		    return SCM(playerid, -1, ""er"Invalid player name length");
	
		format(gstr2, sizeof(gstr2), "SELECT * FROM `ncrecords` WHERE `oldname` = '%s' OR `newname` = '%s';", gstr, gstr);
		mysql_tquery(pSQL, gstr2, "OnNCReceive2", "is", playerid, gstr);
	}
	return 1;
}

YCMD:warn(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 1)
	{
 		new player, reason[144];
		if(sscanf(params, "rs[143]", player, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /warn <playerid> <reason>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerData[player][e_level] == MAX_ADMIN_LEVEL)
		{
	 		return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
	 	if(IsPlayerAvail(player) && player != playerid)
	 	{
	 	    if(PlayerData[player][bOpenSeason]) return SCM(playerid, -1, ""er"Can't warn this player!");
	 	
			PlayerData[player][Warnings]++;
			if(PlayerData[player][Warnings] == MAX_WARNINGS)
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been kicked. [Reason: %s] [Warning: %i/%i] [Warn by: %s(%i)]", __GetName(player), player, reason, PlayerData[player][Warnings], MAX_WARNINGS, __GetName(playerid), playerid);
				SCMToAll(-1, gstr);
				KickEx(player);
			}
			else
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has given %s(%i) a warning. [Reason: %s] [Warning: %i/%i]", __GetName(playerid), playerid, __GetName(player), player, reason, PlayerData[player][Warnings], MAX_WARNINGS);
				SCMToAll(-1, gstr);
			}
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or invalid");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:mkick(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
		new player;
		if(sscanf(params, "r", player))
		{
	        SCM(playerid, NEF_GREEN, "Usage: /mkick <playerid>");
	        SCM(playerid, NEF_GREEN, "Kicks someone out of a minigame, spectate system, house or shop");
	        return 1;
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 	 	if(IsPlayerAvail(player) && player != playerid && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
	 	{
			if(gTeam[player] == gFREEROAM)
			{
			    return SCM(playerid, -1, ""er"Player isn't in any minigame");
			}

			if(ExitPlayer(player) == 0)
			{
				SCM(player, NEF_YELLOW, "You have been kicked out of the minigame by an admin");
		        SCM(playerid, NEF_YELLOW, "Player has been kicked out of the minigame");
			}
			else
			{
			    SCM(playerid, NEF_YELLOW, "Can't kick the player out of the minigame");
			}
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected, the highest level admin or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ping(playerid, params[], help)
{
	new player;
	if(sscanf(params, "r", player))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /ping <playerid>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
	format(gstr, sizeof(gstr), ""nef_green"%s's(%i) ping is %i", __GetName(player), player, GetPlayerPing(player));
	SCM(playerid, -1, gstr);
	return 1;
}

YCMD:avgping(playerid, params[], help)
{
	new pings, players;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			players++;
			pings += GetPlayerPing(i);
	    }
	}
	
	new avg = pings / players;
	
	format(gstr, sizeof(gstr), ""nef_green"Average ping of %i players: %i", players, avg);
	SCM(playerid, -1, gstr);
	return 1;
}

YCMD:time(playerid, params[], help)
{
	new hour, minute;
	if(sscanf(params, "ii", hour, minute))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /time <hour> <minute>");
	}
	
	SetPlayerTime(playerid, hour, minute);
	
    SCM(playerid, NEF_GREEN, "-> "PINK_E"Time set! Use /rtime to reset your time!");
	return 1;
}

YCMD:rtime(playerid, params[], help)
{
	SetPlayerTime(playerid, 12, 0);
	SetPlayerWeather(playerid, 1);
	
    SCM(playerid, NEF_GREEN, "-> "PINK_E"Time reset to day!");
	return 1;
}

YCMD:caps(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
 		new player;
		if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /caps <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 	 	if(IsPlayerAvail(player))
	 	{
			if(PlayerData[player][bCaps])
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has disabled %s's caps", __GetName(playerid), playerid, __GetName(player));
				SCMToAll(YELLOW, gstr);
				PlayerData[player][bCaps] = false;
			}
			else
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has re-enabled %s's caps", __GetName(playerid), playerid, __GetName(player));
				SCMToAll(YELLOW, gstr);
				PlayerData[player][bCaps] = true;
			}
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:day(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    SetWorldTime(12);
	    SetWeather(1);
	    format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"day time", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:dawn(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
		SetWorldTime(6);
		SetWeather(1);
		format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"Dawn", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:night(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    SetWorldTime(0);
	    SetWeather(17);
	    format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"night time", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
   	return 1;
}

YCMD:kick(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    if(PlayerData[playerid][e_level] <= 2)
	    {
		    new tick = GetTickCountEx();

			if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) >= tick))
			{
			    player_notice(playerid, "Command is on cooldown!", "");
			    return 0;
			}
			else if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) <= tick))
			{
		        PlayerData[playerid][iKickBanIssued] = 0;
		        PlayerData[playerid][tickLastBan] = tick;
			}
			else
			{
			    PlayerData[playerid][iKickBanIssued]++;
			}
	    }
	    
 		new player, reason[144];
		if(sscanf(params, "rs[143]", player, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /kick <playerid> <reason>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		if(isnull(reason)) return SCM(playerid, NEF_GREEN, "Usage: /kick <playerid> <reason>");
		if(PlayerData[player][bOpenSeason]) return SCM(playerid, -1, ""er"Can't kick this player!");
		
		if(IsPlayerAvail(player) && player != playerid && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
		{
			format(gstr, sizeof(gstr), ""SVRSC""yellow"** "red"%s(%i) has been kicked by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
			SCMToAll(YELLOW, gstr);
			print(gstr);
			
  			KickEx(player);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:mute(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
 		new player, time, reason[144];
		if(sscanf(params, "ris[143]", player, time, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /mute <playerid> <seconds> <reason>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(time < 1 || time > 10000) return SCM(playerid, -1, ""er"seconds > 0 bitch please :p");

		if(IsPlayerAvail(player) && player != playerid && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
		{
			if(PlayerData[player][bMuted])
			{
				return SCM(playerid, -1, ""er"This player is already muted");
			}

	    	format(gstr, sizeof(gstr), ""SVRSC""yellow"** "red"%s(%i) has been muted by Admin %s(%i) for %i seconds [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, time, reason);
            SCMToAll(YELLOW, gstr);
            print(gstr);
            
			PlayerData[player][tMute] = SetTimerEx("player_unmute", time * 1000, false, "ii", player, YHash(__GetName(player)));
			PlayerData[player][bMuted] = true;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:unmute(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
 		new player;
		if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /unmute <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
        
		if(IsPlayerAvail(player) && player != playerid)
		{
			if(!PlayerData[player][bMuted])
			{
				return SCM(playerid, -1, ""er"This player is not muted");
			}
			PlayerData[player][bMuted] = false;
			KillTimer(PlayerData[player][tMute]);
			SCM(player, NEF_YELLOW, "You have been unmuted!");

			format(gstr, sizeof(gstr), ""SVRSC""yellow"** "red"%s(%i) has been unmuted by Admin %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			SCMToAll(YELLOW, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:register(playerid, params[], help)
{
	if(PlayerData[playerid][bLogged])
	{
	    return SCM(playerid, -1, ""er"You are already registered and logged in!");
	}

	new newtext1[1024], newtext2[128];
    format(newtext2, sizeof(newtext2), ""nef" :: Registration - %s", __GetName(playerid));

	format(newtext1, sizeof(newtext1), ""white"Welcome to "SVRLOGO""white"\n\nDesired name: %s\n\nIt seems that you don't have an account, please enter a password below:", __GetName(playerid));
	ShowPlayerDialog(playerid, REGISTER_DIALOG + 1, DIALOG_STYLE_PASSWORD, newtext2, newtext1, "Register", "Cancel");
	return 1;
}

YCMD:grename(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You are not in any gang");
	if(PlayerData[playerid][e_gangrank] != GANG_POS_FOUNDER) return SCM(playerid, -1, ""er"You need to be the gang founder");
	if(GetPlayerMoneyEx(playerid) < 100000) return SCM(playerid, -1, ""er"You need $100,000 to rename your gang");
	
	new buff[144], buff2[144];
	
	if(sscanf(params, "s[143]s[143]", buff, buff2))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /grename <new gang name> <new gang tag>");
	}
	
	if(strlen(buff) > MAX_GANG_NAME || strlen(buff) < MIN_GANG_NAME)
	{
	    return SCM(playerid, -1, ""er"Invalid gangname length");
	}
	if(strlen(buff2) > 4 || strlen(buff2) < 1)
	{
	    return SCM(playerid, -1, ""er"Invalid gangtag length");
	}
	if(badsql(buff, false) != 0)
	{
	    return SCM(playerid, -1, ""er"You have specified invalid characters");
	}
    if(strfind(buff, "admin", false) != -1)
	{
		return SCM(playerid, -1, ""er"Not possible");
	}
	
	new gangname[21];
	mysql_escape_string(buff, gangname, pSQL, 21);

	if(badsql(buff, false) != 0)
	{
	    return SCM(playerid, -1, ""er"You have specified invalid characters");
	}
    if(strfind(buff2, "admin", false) != -1)
	{
		return SCM(playerid, -1, ""er"Not possible");
	}
	if((strfind(buff2, "[", true) != -1) || (strfind(buff2, "]", true) != -1))
	{
		return SCM(playerid, -1, ""er"Do not add [ or ]");
	}

	new gangtag[5];
	mysql_escape_string(buff2, gangtag, pSQL, 5);

	SQL_GangRename(playerid, gangname, gangtag);
	return 1;
}

YCMD:gzonecreate(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}

	new count = 0;
	for(new r = 0; r < MAX_GZONES; r++) {
	    if(GZoneData[r][e_ormid] != ORM:-1) {
			++count;
	    }
	}

	if(count >= MAX_GZONES) {
	    return SCM(playerid, -1, ""er"Max gang zones reached");
	}

	new r = -1;
	for(new i = 0; i < MAX_GZONES; i++) {
	    if(GZoneData[i][e_ormid] == ORM:-1) {
	        r = i;
	        break;
	    }
	}

	if(r == -1) return SCM(playerid, -1, ""er"No free gang zone slot");

	new tmp[41];
	if(sscanf(params, "s[40]", tmp))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /gzonecreate <zone name>");
	}
	
	new zname[40];
	mysql_escape_string(tmp, zname, pSQL, sizeof(zname));
	
	GetPlayerPos(playerid, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2]);
    strmid(GZoneData[r][e_zname], zname, 0, 40, 40);
	GZoneData[r][e_localgang] = 0;
	GZoneData[r][e_locked] = gettime();
    GZoneData[r][e_underattack] = false;
    
	new ORM:ormid = GZoneData[r][e_ormid] = orm_create("gzones");
	
    orm_addvar_int(ormid, GZoneData[r][e_id], "id");
    orm_addvar_string(ormid, GZoneData[r][e_zname], 40, "zname");
    orm_addvar_float(ormid, GZoneData[r][e_pos][0], "xpos");
    orm_addvar_float(ormid, GZoneData[r][e_pos][1], "ypos");
    orm_addvar_float(ormid, GZoneData[r][e_pos][2], "zpos");
    orm_addvar_int(ormid, GZoneData[r][e_localgang], "localgang");
    orm_addvar_int(ormid, GZoneData[r][e_locked], "locked");
	    
	orm_setkey(ormid, "id");
	orm_insert(ormid, "OnGangZoneLoadEx", "i", r);
	return 1;
}

YCMD:gzonereset(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
		new bool:bFound = false;
		for(new r = 0; r < MAX_GZONES; r++)
	    {
	  	    if(GZoneData[r][e_ormid] == ORM:-1)
		        continue;
		        
		    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2])) continue;
	        bFound = true;
	        
	        if(GZoneData[r][e_underattack])
	        {
	            return SCM(playerid, -1, ""er"Zone is currently under attack!");
	        }
	        
	        GZoneData[r][e_timeleft] = 0;
			GZoneData[r][e_localgang] = 0;
			GZoneData[r][e_attacker] = 0;
			GZoneData[r][e_defender] = 0;
	  		GZoneData[r][e_locked] = gettime();
	        
        	format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname]);
			UpdateDynamic3DTextLabelText(GZoneData[r][e_labelid], WHITE, gstr2);
	        
			orm_update(GZoneData[r][e_ormid]);
	        
	        for(new ii = 0; ii < MAX_PLAYERS; ii++)
	        {
			    if(IsPlayerConnected(ii))
			    {
					SyncGangZones(ii);
			    }
	        }
	        
	        SCM(playerid, -1, ""orange"Zone has been reset!");
	        break;
	    }
	    if(!bFound) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gdestroy(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= MAX_ADMIN_LEVEL)
	{
		new to_destroy[80];
		if(sscanf(params, "s[79]", to_destroy))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /gdestroy <exact gang name>");
		}
		if(strlen(to_destroy) > MAX_GANG_NAME || strlen(to_destroy) < MIN_GANG_NAME)
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /gdestroy <exact gang name>");
		}
		new escape[21];
		mysql_escape_string(to_destroy, escape, pSQL, 21);
		SQL_DestroyGang(playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gcreate(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastGCreate] + COOLDOWN_CMD_GCREATE) >= tick)
	{
  		return player_notice(playerid, "Command is on cooldown!", "");
	}

	if(PlayerData[playerid][e_gangid] != 0) return SCM(playerid, -1, ""er"You are already in a gang");
	if(GetPlayerMoneyEx(playerid) < 500000) return SCM(playerid, -1, ""er"You need at least "nef_green"$500,000 "nef_red"for creating a gang!");
 	if(GetPlayerScoreEx(playerid) < 500) return SCM(playerid, -1, ""er"You need at least "nef_green"500 Score "nef_red"for creating a gang!");
 	
    PlayerData[playerid][e_time] = PlayerData[playerid][e_time] + (gettime() - PlayerData[playerid][ConnectTime]);
    PlayerData[playerid][ConnectTime] = gettime();

	if(PlayerData[playerid][e_time] < 36000) return SCM(playerid, -1, ""er"You need at least "nef_green"10 hours playing time {D2D2D2}for creating a gang!");

	new ntmp[144],
	    ttmp[144];

	if(sscanf(params, "s[143]s[143]", ntmp, ttmp))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /gcreate <gang-name> <gang-tag>");
	}
	if(strlen(ntmp) > MAX_GANG_NAME || strlen(ntmp) < MIN_GANG_NAME || isnull(ntmp))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Gang name length: 4 - 20 characters");
	}
	if(strlen(ttmp) > 4 || strlen(ttmp) < 2 || isnull(ttmp))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Gang tag length: 2 - 4 characters");
	}

	if(badsql(ntmp, false) != 0)
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"You have specified invalid characters");
	}
    if(strfind(ntmp, "admin", false) != -1)
	{
	    CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Not possible");
	}
	mysql_escape_string(ntmp, PlayerData[playerid][GangName], pSQL, 21);

	if(badsql(ttmp, false) != 0)
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"You have specified invalid characters");
	}
    if(strfind(ttmp, "admin", false) != -1)
	{
	    CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Not possible");
	}
	if((strfind(ttmp, "[", true) != -1) || (strfind(ttmp, "]", true) != -1))
	{
	 	CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Do not add [ or ]");
	}
	mysql_escape_string(ttmp, PlayerData[playerid][GangTag], pSQL, 5);

    PlayerData[playerid][tickLastGCreate] = tick;
    SQL_ExistGang(playerid);
	return 1;
}

YCMD:gcapture(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang! Create a gang /gcreate or join one.");
    
	new bool:bFound = false;
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2])) continue;
        bFound = true;

		if(!GZoneData[r][e_underattack]) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone is not under attack.", "OK", "");

		if(GZoneData[r][e_defender] != PlayerData[playerid][e_gangid])
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone does not belong to your gang.", "OK", "");
		}

		//if(!PlayerData[i][bGWarMode]) return SCM(playerid, -1, ""orange"You are not participating in this gang war");

		new Float:POS[3], Iterator:Players<MAX_PLAYERS>;
		for(new ii = 0; ii < MAX_PLAYERS; ii++)
		{
		    if(!IsPlayerAvail(ii)) continue;
		    if(PlayerData[ii][e_gangid] != GZoneData[r][e_attacker]) continue;
		    if(IsPlayerOnDesktop(ii, 2500)) continue;
		    if(!PlayerData[ii][bGWarMode]) continue;
		    
			GetPlayerPos(ii, POS[0], POS[1], POS[2]);

			if(IsPointInDynamicArea(GZoneData[r][e_areaid], POS[0], POS[1], POS[2]))
			{
			    Iter_Add(Players, ii);
			}
		}
		
		if(Iter_Count(Players) != 0)
		{
		    SCM(playerid, -1, ""orange"You cannot re-capture this zone as there is still the attacking gang around");
		}
		else
		{
		    // Reset zone
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang failed to capture '%s'. %s(%i) re-captured it!", GZoneData[r][e_zname], __GetName(playerid), playerid);
			gang_broadcast(GZoneData[r][e_attacker], gstr);

			format(gstr, sizeof(gstr), ""orange"Gang %s failed to capture '%s'. Zone remains %s territory and will be locked for 30 minutes!", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_defender]));
			SCMToAll(-1, gstr);

			for(new ii = 0; ii < MAX_PLAYERS; ii++)
			{
			    if(IsPlayerAvail(ii) && PlayerData[ii][bGWarMode])
			    {
			        if(PlayerData[ii][e_gangid] == GZoneData[r][e_attacker] || PlayerData[ii][e_gangid] == GZoneData[r][e_defender])
			        {
			    		ResetPlayerGWarMode(ii, false);
					}
					
					if(PlayerData[ii][e_gangid] == GZoneData[r][e_defender])
					{
					    GivePlayerMoneyEx(ii, 20000);
					}
				}
			}

			format(gstr, sizeof(gstr), ""gang_sign" "r_besch" %s %s(%i) re-captured zone '%s' which was under attack.", g_szGangRanks[PlayerData[playerid][e_gangrank]][E_gang_pos_name], __GetName(playerid), playerid, GZoneData[r][e_zname]);
			gang_broadcast(GZoneData[r][e_defender], gstr);

			SQL_UpdateGangScore(GZoneData[r][e_localgang], 4);

			Iter_Remove(iterGangWar, GZoneData[r][e_attacker]);
			Iter_Remove(iterGangWar, GZoneData[r][e_localgang]);

			GZoneData[r][e_localgang] = GZoneData[r][e_defender];
			GZoneData[r][e_timeleft] = 0;
			GZoneData[r][e_underattack] = false;
			GZoneData[r][e_attacker] = 0;
			GZoneData[r][e_defender] = 0;
			GZoneData[r][e_locked] = gettime() + 1800;
			
			orm_update(GZoneData[r][e_ormid]);
		}
	    break;
	}
	if(!bFound) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	return 1;
}

YCMD:gzones(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang");
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    
	new str[1024], count = 0;
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(PlayerData[playerid][e_gangid] == GZoneData[r][e_localgang])
	    {
	        format(gstr, sizeof(gstr), "\n%i - %s", ++count, GZoneData[r][e_zname]);
	        strcat(str, gstr);
	    }
	}
	
	if(count > 0)
	{
	    strins(str, ""white"Occupied zones:", 0, sizeof(str));
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Ongoing Gang Wars", str, "OK", "");
	}
	else
	{
	    strmid(str, ""white"Your gang does not control any zones.", 0, 1024, 1024);
	}
	
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Gang Zones", str, "OK", "");
	return 1;
}

YCMD:gwars(playerid, params[], help)
{
	new str[512], count = 0;
	strcat(str, ""white"");
	
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(GZoneData[r][e_underattack])
	    {
	        format(gstr, sizeof(gstr), "%s is attacking zone '%s'\n", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname]);
	        strcat(str, gstr);
			++count;
	    }
	}
	if(count > 0)
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Ongoing Gang Wars", str, "OK", "");
	else
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Ongoing Gang Wars", ""white"There are no Gang Wars at the moment", "OK", "");
	return 1;
}

YCMD:gwar(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang! Create a gang /gcreate or join one.");
	if(PlayerData[playerid][e_gangrank] < GANG_POS_SENIOR_MEMBER) return SCM(playerid, -1, ""er"You you need to be at least Senior Member in your gang!");

	new bool:bFound = false;
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2])) continue;
        bFound = true;

		if(GZoneData[r][e_underattack]) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This Gang Zone is currently under attack!", "OK", "");

		if(GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid])
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone already belongs to your gang!", "OK", "");
		}

        if(GZoneData[r][e_locked] > gettime())
        {
            format(gstr, sizeof(gstr), ""white"This zone is currently locked!\n\nIt will become available for Gang War in %i minutes.", floatround((GZoneData[r][e_locked] - gettime()) / 60.0));
            ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", gstr, "OK", "");
            return 1;
		}
		
		if(GetGZonesByGang(PlayerData[playerid][e_gangid]) >= MAX_GZONES_PER_GANG) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"Your gang owns the maximum of 15 zones", "OK", "");
		
		if(Iter_Contains(iterGangWar, PlayerData[playerid][e_gangid]))
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"You can't attack this zone because your gang is already\ninvloved in another Gang War!", "OK", "");
		}
		
		if(GZoneData[r][e_localgang] != 0)
		{
			if(Iter_Contains(iterGangWar, GZoneData[r][e_localgang]))
			{
			    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"You can't attack this zone because the opposing gang\nis already invloved in another Gang War!", "OK", "");
			}
		}
		
		Iter_Add(iterGangWar, PlayerData[playerid][e_gangid]);
		
		GZoneData[r][e_underattack] = true;
		GZoneData[r][e_attacker] = PlayerData[playerid][e_gangid];
		
	    new count = 0;
	    for(new ii = 0; ii < MAX_PLAYERS; ii++)
	    {
	        if(PlayerData[ii][e_gangid] == PlayerData[playerid][e_gangid] && IsPlayerAvail(ii) && gTeam[ii] != SPEC)
	        {
	            if(IsPlayerInRangeOfPoint(ii, GZONE_SIZE, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2]))
	            {
	        		TextDrawShowForPlayer(ii, GZoneData[r][e_txtid]);
	        		SetPlayerGWarMode(ii);

	        		count++;
				}
			}
		}
	
		if(GZoneData[r][e_localgang] == 0)
		{
		    GZoneData[r][e_timeleft] = 60;
		    GZoneData[r][e_defender] = 0;
		    
		    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: 1:00", GZoneData[r][e_zname]);
		    TextDrawSetString(GZoneData[r][e_txtid], gstr);

			if(count == 1)
		    	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i member has been tied!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			else
                format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i members have been tied!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			gang_broadcast(PlayerData[playerid][e_gangid], gstr);
			
			format(gstr, sizeof(gstr), ""orange"%s(%i) has started capturing the zone '%s' with %i gang member(s)!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			SCMToAll(-1, gstr);
		}
		else
		{
		    GZoneData[r][e_timeleft] = 150;
		    GZoneData[r][e_defender] = GZoneData[r][e_localgang];

		    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: 2:30", GZoneData[r][e_zname]);
		    TextDrawSetString(GZoneData[r][e_txtid], gstr);

			if(count == 1)
		    	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i member has been tied!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			else
			    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i members have been tied!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			gang_broadcast(PlayerData[playerid][e_gangid], gstr);

		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"Gang %s started a war against your gang at %s!", GetGangNameByID(PlayerData[playerid][e_gangid]), GZoneData[r][e_zname]);
			gang_broadcast(GZoneData[r][e_localgang], gstr);

			format(gstr, sizeof(gstr), ""orange"%s(%i) has started capturing the zone '%s' with %i gang member(s)!", __GetName(playerid), playerid, GZoneData[r][e_zname], count);
			SCMToAll(-1, gstr);
		    
		    Iter_Add(iterGangWar, GZoneData[r][e_localgang]);
		}
	    break;
	}
	if(!bFound) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	return 1;
}

YCMD:ginvite(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastGInvite] + COOLDOWN_CMD_GINVITE) >= tick) return SCM(playerid, -1, ""er"Please wait a bit before inviting again!");
	}
	if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");
	if(PlayerData[playerid][e_gangrank] < GANG_POS_ADVISOR) return SCM(playerid, -1, ""er"You you need to be at least advisor");

	new player;
	if(sscanf(params, "r", player))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /ginvite <playerid>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
	new Float:pPOS[3];
	GetPlayerPos(player, pPOS[0], pPOS[1], pPOS[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 7.5, pPOS[0], pPOS[1], pPOS[2]))
	{
	    return SCM(playerid, -1, ""er"You need to be near that player!");
	}

    if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");
    if(player == playerid) return SCM(playerid, -1, ""er"You can't invite yourself");
    if(PlayerData[player][e_gangid] != 0) return SCM(playerid, -1, ""er"Player is already in a gang");
	if(GetPlayerScoreEx(player) < 100) return SCM(playerid, -1, ""er"Player needs at least 100 score");
    if(PlayerData[player][bGangInvite]) return SCM(playerid, -1, ""er"Player has been already invited by someone else!");
    if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not available!");

    PlayerData[player][TmpGangID] = PlayerData[playerid][e_gangid];
    PlayerData[player][bGangInvite] = true;
    PlayerData[player][e_gangid] = 0;
    PlayerData[player][e_gangrank] = GANG_POS_NONE;
    strmid(PlayerData[player][GangName], PlayerData[playerid][GangName], 0, 21, 21);
    strmid(PlayerData[player][GangTag], PlayerData[playerid][GangTag], 0, 5, 5);
    
	format(gstr, sizeof(gstr), ""gang_sign" "RED_E"%s(%i) "r_besch"invited you to: %s", __GetName(playerid), playerid, PlayerData[playerid][GangName]);
	SCM(player, GREY, gstr);

	format(gstr, sizeof(gstr), ""r_besch"» Invitation has been sent to "yellow"%s(%i)", __GetName(player), player);
	SCM(playerid, GREEN, gstr);

	PlayerData[playerid][tickLastGInvite] = tick;
	return 1;
}

YCMD:gdeny(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][e_gangid] != 0) return SCM(playerid, -1, ""er"You are already in a gang!");
    if(!PlayerData[playerid][bGangInvite]) return SCM(playerid, -1, ""er"You haven't been invited by any gang");
    
    PlayerData[playerid][TmpGangID] = 0;
    PlayerData[playerid][e_gangid] = 0;
    PlayerData[playerid][e_gangrank] = GANG_POS_NONE;
    PlayerData[playerid][bGangInvite] = false;
    PlayerData[playerid][GangName][0] = '\0';
    PlayerData[playerid][GangTag][0] = '\0';
    SCM(playerid, GREEN, "The invitation has been rejected");
	return 1;
}

YCMD:gclose(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");
    if(PlayerData[playerid][e_gangrank] != GANG_POS_FOUNDER) return SCM(playerid, -1, ""er"You have to be the gang's founder!");
	if(Iter_Contains(iterGangWar, PlayerData[playerid][e_gangid])) return SCM(playerid, -1, ""er"You can't close your gang since there is a gang war going on");

	ShowDialog(playerid, CLOSE_GANG_DIALOG);
	return 1;
}

YCMD:gjoin(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][e_gangid] != 0) return SCM(playerid, -1, ""er"You are already in a gang!");
    if(!PlayerData[playerid][bGangInvite]) return SCM(playerid, -1, ""er"You haven't been invited by any gang");
    
	PlayerData[playerid][bGangInvite] = false;
	PlayerData[playerid][e_gangrank] = GANG_POS_JUNIOR_MEMBER;
	PlayerData[playerid][e_gangid] = PlayerData[playerid][TmpGangID];
	PlayerData[playerid][TmpGangID] = 0;

    SQL_SaveAccount(playerid, false, false);

	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) has joined the gang!", __GetName(playerid), playerid);
	gang_broadcast(PlayerData[playerid][e_gangid], gstr);

	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"You joined the gang "yellow"%s"white"!", PlayerData[playerid][GangName]);
	SCM(playerid, -1, gstr);

	if(PlayerData[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][GangLabel]);
		PlayerData[playerid][GangLabel] = Text3D:-1;
	}
	
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Gang joined!", ""white"You can now use these commands:\n\n/gmenu\n\nPut "nef_yellow"! "white"before your text to talk in your gang chat.", "OK", "");
	
	format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerData[playerid][GangName]);
	PlayerData[playerid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);
 	return 1;
}

YCMD:gmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");

	ShowDialog(playerid, GMENU_DIALOG);
	return 1;
}

YCMD:gleave(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang");
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(PlayerData[playerid][e_gangrank] == GANG_POS_FOUNDER) return SCM(playerid, -1, ""er"You can't leave a gang as Founder");
		
	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) has left the gang", __GetName(playerid), playerid);
    gang_broadcast(PlayerData[playerid][e_gangid], gstr);
    SCM(playerid, -1, ""gang_sign" You've left your gang!");

    PlayerData[playerid][e_gangid] = 0;
    PlayerData[playerid][GangName][0] = '\0';
    PlayerData[playerid][GangTag][0] = '\0';
 	PlayerData[playerid][e_gangrank] = GANG_POS_NONE;

    SQL_SaveAccount(playerid, false, false);
    SyncGangZones(playerid);
	if(PlayerData[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][GangLabel]);
		PlayerData[playerid][GangLabel] = Text3D:-1;
	}
	return 1;
}

YCMD:gsetrank(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang");
    if(PlayerData[playerid][e_gangrank] < GANG_POS_LEADER) return SCM(playerid, -1, ""er"You have to be at least the gang leader to set ranks");
    
    ShowDialog(playerid, GANG_SET_RANK_DIALOG);
	return 1;
}

YCMD:gkick(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastGKick] + COOLDOWN_CMD_GKICK) >= tick) return SCM(playerid, -1, ""er"Please wait a bit before kicking again!");

    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang");
	if(PlayerData[playerid][e_gangrank] < GANG_POS_CO_FOUNDER) return SCM(playerid, -1, ""er"You have to be at least the Co-Founder");

	ShowDialog(playerid, GANG_KICK_DIALOG);
	
	PlayerData[playerid][tickLastGKick] = tick;
	return 1;
}

YCMD:gcolor(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");
    if(PlayerData[playerid][e_gangrank] < GANG_POS_LEADER) return SCM(playerid, -1, ""er"You have to be at least the gang leader to set colors");
    
	new r, g, b;
	if(sscanf(params, "iii", r, g, b) || !(0 <= r <= 255) || !(0 <= g <= 255) || !(0 <= b <= 255))
	{
	    SCM(playerid, NEF_GREEN, "Usage: /gcolor <R> <G> <B>");
	    SCM(playerid, NEF_GREEN, "Colors must be in RGB format, look on google for codes");
	}
	else
	{
		if(r < 30 || g < 30 || b < 30)
		{
   			return SCM(playerid, -1, ""er"Color too dark! RGB values under 30 are not allowed!");
		}
		
		new col = RGBA(r, g, b, 255);

		format(gstr, sizeof(gstr), "UPDATE `gangs` SET `gcolor` = %i WHERE `id` = %i LIMIT 1;", col, PlayerData[playerid][e_gangid]);
		mysql_tquery(pSQL, gstr);

	    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s set the gang color to {%06x}NEW COLOR", __GetName(playerid), col >>> 8);
		gang_broadcast(PlayerData[playerid][e_gangid], gstr);
	}
	return 1;
}

YCMD:gcar(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(PlayerData[playerid][e_gangid] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");

	if(gTeam[playerid] == gFREEROAM)
	{
	    if(isnull(params))
	    {
	        if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	        if(IsPlayerInRangeOfPoint(playerid, 65.0, 1797.3141, -1302.0978, 120.2659) && PlayerData[playerid][e_level] < 1) return SCM(playerid, -1, ""er"Can't spawn vehicle at this place!");
	        
	        format(gstr, sizeof(gstr), "SELECT `gcar` FROM `gangs` WHERE `id` = %i LIMIT 1;", PlayerData[playerid][e_gangid]);
			new Cache:res = mysql_query(pSQL, gstr);
			
			if(cache_get_row_count(pSQL) != 0)
			{
			    if(IsValidVehicleModel(cache_get_row_int(0, 0, pSQL)))
				{
					CarSpawner(playerid, cache_get_row_int(0, 0, pSQL), 120);
				}
				else
				{
				    SCM(playerid, -1, ""er"Gang car has not been set yet. Type /gcar <vehicle>");
				}
			}
		  	else
		  	{
		  	    SCM(playerid, -1, ""er"Gang car has not been set yet. Type /gcar <vehicle>");
		  	}

			cache_delete(res);
		}
		else
		{
		    if(strlen(params) > 29) return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");
		    if(PlayerData[playerid][e_gangrank] < GANG_POS_LEADER) return SCM(playerid, -1, ""er"You have to be at least the gang leader to set the gang car");
		    
	 	    new gcar = -1;

		    if(IsNumeric(params))
		    {
				if(!IsValidVehicleModel(strval(params)))
				{
					return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");
				}

	        	gcar = strval(params);
		    }
		    else
		    {
				if(!sscanf(params, "s[143]", gstr))
				{
					new veh = GetVehicleModelID(gstr);
					if(!IsValidVehicleModel(veh))
					{
						return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");
					}

			        gcar = veh;
				}
			}

			if(gcar != -1)
			{
				format(gstr, sizeof(gstr), "UPDATE `gangs` SET `gcar` = %i WHERE `id` = %i LIMIT 1;", gcar, PlayerData[playerid][e_gangid]);
				mysql_pquery(pSQL, gstr);

			    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s set the gang vehicle to %s", __GetName(playerid), VehicleNames[gcar - 400]);
				gang_broadcast(PlayerData[playerid][e_gangid], gstr);
			}
		}
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:unban(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
	    if(sscanf(params, "s[143]", gstr))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /unban <name>");
	    }

	    if(strlen(gstr) > 24 || strlen(gstr) < 3) return SCM(playerid, -1, ""er"Name length 3 - 24");
	    if(__GetPlayerID(gstr) != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Player seems to be online!");

	    new escape[25];
	    mysql_escape_string(gstr, escape, pSQL, sizeof(escape));

		if(badsql(escape) != 0)
		{
		    return SCM(playerid, -1, ""er"You have specified invalid characters");
		}

	    format(gstr, sizeof(gstr), "SELECT `id` FROM `bans` WHERE `playername` = '%s' LIMIT 1;", escape);
	    mysql_pquery(pSQL, gstr, "OnUnbanAttempt", "is", playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:oban(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
	    new player[144], reason[144];
	    if(sscanf(params, "s[143]s[143]", player, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /offlineban <name> <reason>");
	    }

        if(strlen(reason) > 50 || isnull(reason) || strlen(reason) < 2) return SCM(playerid, -1, ""er"Ban reason length: 2-50");
	    if(strlen(player) > 24 || strlen(player) < 3) return SCM(playerid, -1, ""er"Name length 3-24");
	    if(__GetPlayerID(player) != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Player seems to be online!");

	    new escape[25], ereason[128];
	    mysql_escape_string(player, escape, pSQL, sizeof(escape));
	    mysql_escape_string(reason, ereason, pSQL, sizeof(ereason));

		if(badsql(escape) != 0 || badsql(ereason, false) != 0)
		{
		    return SCM(playerid, -1, ""er"You have specified invalid characters");
		}

	    mysql_format(pSQL, player, sizeof(player), "SELECT `adminname` FROM `bans` WHERE `playername` = '%e' LIMIT 1;", escape);
	    mysql_pquery(pSQL, player, "OnOfflineBanAttempt", "iss", playerid, escape, ereason);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:tban(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    if(PlayerData[playerid][e_level] <= 2)
	    {
		    new tick = GetTickCountEx();

			if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) >= tick))
			{
				player_notice(playerid, "Command is on cooldown!", "");
			    return 0;
			}
			else if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) <= tick))
			{
		        PlayerData[playerid][iKickBanIssued] = 0;
		        PlayerData[playerid][tickLastBan] = tick;
			}
			else
			{
			    PlayerData[playerid][iKickBanIssued]++;
			}
	    }
	    
	    new player, reason[128], time;
	    if(sscanf(params, "ris[127]", player, time, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /tban <playerid> <time> <reason>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(strlen(reason) > 50 || isnull(reason) || strlen(reason) < 2) return SCM(playerid, -1, ""er"Ban reason length: 2-50");
	    if(player == playerid) return SCM(playerid, -1, ""er"You can not ban yourself");
        if(PlayerData[player][bOpenSeason]) return SCM(playerid, -1, ""er"This player is flagged for disconnect");
        if(time < 5 || time > 10080) return SCM(playerid, -1, ""er"5-10080 minutes");

		if(badsql(reason, false) != 0)
		{
		    return SCM(playerid, -1, ""er"You have specified invalid characters");
		}

	  	if(PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
	  	{
		 	if(IsPlayerAvail(player))
			{
			    new amsg[144];
			    if(!islogged(player)) return SCM(playerid, -1, ""er"Player is not registered");
			    
			    SQL_BanAccount(__GetName(player), __GetName(playerid), reason, gettime() + (time * 60));

				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been banned by Admin %s(%i) [Reason: %s] [Time: %i mins]", __GetName(player), player, __GetName(playerid), playerid, reason, time);
				format(amsg, sizeof(amsg), "[ADMIN CHAT] "LG_E"Account banned of %s [EXPIRES: %s, REASON: %s]", __GetName(player), UTConvert(gettime() + (time * 60)), reason);

				SCMToAll(-1, gstr);
                admin_broadcast(COLOR_RED, amsg);

	    		format(gstr2, sizeof(gstr2), ""red"You have been banned!"white"\n\nAdmin: %s\nReason: %s\nExpires: %s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"",
					__GetName(playerid),
					reason,
					UTConvert(gettime() + (time * 60)));

	    		ShowPlayerDialog(player, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Notice", gstr2, "OK", "");

                KickEx(player);
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not available");
			}
		}
		else
		{
		    format(gstr, sizeof(gstr), ""server_sign" "r_besch"%s just tried to ban you with reason: %s", __GetName(playerid), reason);
		    SCM(player, -1, gstr);
            SCM(playerid, -1, ""server_sign" "r_besch"You may not ban this player.");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ban(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    if(PlayerData[playerid][e_level] <= 2)
	    {
		    new tick = GetTickCountEx();

			if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) >= tick))
			{
				player_notice(playerid, "Command is on cooldown!", "");
			    return 0;
			}
			else if((PlayerData[playerid][iKickBanIssued] >= 3) && ((PlayerData[playerid][tickLastBan] + COOLDOWN_CMD_BAN) <= tick))
			{
		        PlayerData[playerid][iKickBanIssued] = 0;
		        PlayerData[playerid][tickLastBan] = tick;
			}
			else
			{
			    PlayerData[playerid][iKickBanIssued]++;
			}
	    }
	    
	    new player, reason[144];
	    if(sscanf(params, "rs[143]", player, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /ban <playerid> <reason>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	    
		if(strlen(reason) > 50 || isnull(reason) || strlen(reason) < 2) return SCM(playerid, -1, ""er"Ban reason length: 2-50");
	    if(player == playerid) return SCM(playerid, -1, ""er"You can not ban yourself");
        if(PlayerData[player][bOpenSeason]) return SCM(playerid, -1, ""er"This player is flagged for disconnect");
        
		if(badsql(reason, false) != 0)
		{
		    return SCM(playerid, -1, ""er"You have specified invalid characters");
		}

	  	if(PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
	  	{
		 	if(IsPlayerAvail(player))
			{
			    new amsg[144];
			    if(islogged(player)) { // Ban registered player
                	SQL_BanAccount(__GetName(player), __GetName(playerid), reason);
                    SQL_BanIP(__GetIP(player));
                    
                    format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been banned by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
                    format(amsg, sizeof(amsg), "[ADMIN CHAT] "LG_E"Account and IP banned of %s [EXPIRES: NEVER, REASON: %s]", __GetName(player), reason);
				} else {
				    SQL_BanIP(__GetIP(player));
				    
				    format(gstr, sizeof(gstr), ""SVRSC""yellow"** "red"%s(%i) has been banned by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
				    format(amsg, sizeof(amsg), "[ADMIN CHAT] "LG_E"IP banned of %s [EXPIRES: NEVER, REASON: %s]", __GetName(player), reason);
				}

				SCMToAll(-1, gstr);
                admin_broadcast(COLOR_RED, amsg);

	    		format(gstr2, sizeof(gstr2), ""red"You have been banned!"white"\n\nAdmin: %s\nReason: %s\nExpires: %s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"",
					__GetName(playerid),
					reason,
					"Permanent");
					
	    		ShowPlayerDialog(player, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Notice", gstr2, "OK", "");

                KickEx(player);
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not available");
			}
		}
		else
		{
		    format(gstr, sizeof(gstr), ""server_sign" "r_besch"%s just tried to ban you with reason: %s", __GetName(playerid), reason);
		    SCM(player, -1, gstr);
            SCM(playerid, -1, ""server_sign" "r_besch"You may not ban this player.");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:resetrc(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
	    if(!strcmp(params, "all", true))
	    {
			mysql_tquery(pSQL, "TRUNCATE TABLE `race_records`;", "", "");
			SCM(playerid, -1, ""er"All race records have been deleted!");
	    }
		else
		{
		    new map;
			if(sscanf(params, "i", map))
			{
			    return SCM(playerid, NEF_GREEN, "Usage: /resetrc <map>");
			}

			format(gstr, sizeof(gstr), "/Race/%03i.race", map);
			if(!fexist(gstr))
			{
			    return SCM(playerid, -1, ""er"Map does not exist");
			}

			format(gstr, sizeof(gstr), "DELETE FROM `race_records` WHERE `track` = %i;", map);
			mysql_tquery(pSQL, gstr, "", "");
			SCM(playerid, -1, ""er"Race records of the specific race have been deleted!");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:deleterecord(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    new map;
		if(sscanf(params, "i", map))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /deleterecord <map>");
		}
		
		format(gstr, sizeof(gstr), "/Race/%03i.race", map);
		if(!fexist(gstr))
		{
		    return SCM(playerid, -1, ""er"Map does not exist");
		}
		
		format(gstr, sizeof(gstr), "SELECT `id` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 1;", map);
		mysql_tquery(pSQL, gstr, "OnRaceRecordPurged", "ii", playerid, map);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:raceforcemap(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
	    if(g_RaceStatus == RaceStatus_StandBy) return SCM(playerid, -1, ""er"Race is currently in standby mode!");
	    
	    new map;
		if(sscanf(params, "i", map))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /raceforcemap <map>");
		}
		
		format(gstr, sizeof(gstr), "/Race/%03i.race", map);
		if(!fexist(gstr))
		{
		    return SCM(playerid, -1, ""er"Map does not exist");
		}
		
		g_RaceForceMap = map;
		
		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) forced next race map to %03i", __GetName(playerid), playerid, map);
		admin_broadcast(-1, gstr);
		print(gstr);
  	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:shutdown(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL && IsPlayerAdmin(playerid))
	{
	    bGlobalShutdown = true;

		SCMToAll(-1, "Server restart! Restart your game. IP: samp.nefserver.net:7777");
	    
	    SetTimer("server_init_shutdown", 3000, false);
 	}
	return 1;
}

YCMD:giveweapon(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 3)
    {
		new weaponID, weaponName[20], player, ammo_a;

		if(sscanf(params, "rii", player, weaponID, ammo_a))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /giveweapon <playerid> <weaponid> <ammo>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Player is in a minigame!");
	        if(PlayerData[player][bGod] && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, ""er"You can't give players weapons who enabled GOD");

			if(ammo_a < 0 || ammo_a > 10000)
			{
			    format(gstr, sizeof(gstr), ""er"Invalid ammo provided!");
			    SCM(playerid, COLOR_RED, gstr);
			    return 1;
			}

	        if(weaponID == 35 || weaponID == 36 || weaponID == 39 || weaponID == 44 || weaponID == 45|| weaponID == 40) return SCM(playerid, -1, ""er"Can't give restriced weapon");
			if(weaponID == 38 && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

			if(weaponID <= 0 && weaponID >= 47)
			{
			    if(weaponID == 20)
			    {
					SCM(playerid, -1, ""er"Invalid weapon ID provided!");
					return 1;
				}
				SCM(playerid, -1, ""er"Invalid weapon ID provided!");
				return 1;
			}

			GivePlayerWeapon(player, weaponID, ammo_a);
			GetWeaponName(weaponID, weaponName, sizeof(weaponName));

			format(gstr, sizeof(gstr), ""nef" "GREY_E"Administrator %s(%i) gave you a %s(%i) with %i ammo.", __GetName(playerid), playerid, weaponName, weaponID, ammo_a);
			SCM(player, COLOR_STEELBLUE, gstr);
			format(gstr, sizeof(gstr), ""nef" "GREY_E"You gave %s(%i) a %s(%i) with %i ammo.", __GetName(player), player, weaponName, weaponID, ammo_a);
			SCM(playerid, COLOR_STEELBLUE, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available!");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:dplayers(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
		new string[512], tmp[50];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] == DERBY)
		    {
				format(tmp, sizeof(tmp), "{%06x}(%i)%s\n", GetColorEx(i) >>> 8, i, __GetName(i));
				strcat(string, tmp);
		    }
		}
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Derby Players", string, "OK", "");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:rplayers(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
		new string[512], tmp[50], count = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] == gRACE)
		    {
				format(tmp, sizeof(tmp), "{%06x}(%i)%s\n", GetColorEx(i) >>> 8, i, __GetName(i));
				strcat(string, tmp);
				count++;
			}
		}
		gstr = ""white"No players in race.";
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Race Players", count != 0 ? (string) : (gstr), "OK", "");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:jail(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
		new player, time, reason[144];
		if(sscanf(params, "ris[143]", player, time, reason))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /jail <playerid> <seconds> <reason>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
			if(gTeam[player] == JAIL)
			{
			    format(reason, sizeof(reason), "ERROR: "GREY2_E"%s(%i) is already jailed (gets out in %d seconds)", __GetName(player), player, PlayerData[player][iJailTime]);
			    SCM(playerid, COLOR_RED, reason);
			    SCM(playerid, COLOR_WHITE, "HINT: /unjail <playerid> to unjail.");
			    return 1;
			}

			if(strlen(reason) > 50)
			{
			 	Error(playerid, "Keep the reason below 50 characters!");
			   	return 1;
			}
			if(time < 10 || time > 300)
			{
			    Error(playerid, "Jail time must be between 10 and 300 seconds");
			    return 1;
			}

			if(gTeam[player] != gFREEROAM)
			{
				if(ExitPlayer(player) != 0)
				{
				    Error(playerid, "Player is either in duel or unavailable");
				    return 1;
				}
			}

			gTeam[player] = JAIL;
			PlayerData[player][iJailTime] = time;
			SetPlayerInterior(player, 3);
			SetPlayerVirtualWorld(player, 10);
			SetPlayerFacingAngle(player, 360.0);
			SetPlayerPos(player, 197.5662, 175.4800, 1004.0);
			ResetPlayerWeapons(player);
			SetPVarInt(player, "JailedByAdmin", 1);

			TextDrawShowForPlayer(player, JailTD);
			SetTimerEx("HideJailTextdraw", 4000, false, "ii", player, YHash(__GetName(player)));

			format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been jailed by Admin %s(%i) for %i seconds [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, time, reason);
			SCMToAll(-1, gstr);
			print(gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:unjail(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /unjail <playerid>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

 		if(IsPlayerAvail(player) && player != playerid)
		{
			if(gTeam[player] != JAIL)
			{
			    return Error(playerid, "The player isn't in jail!");
			}

			if(GetPVarInt(player, "JailedByAdmin") != 1)
			{
			    return Error(playerid, "Cannot unjail CNR players");
			}

			PlayerData[player][iJailTime] = 0;
			gTeam[player] = gFREEROAM;
			ResetPlayerWorld(player);
			SpawnPlayer(player);

			format(gstr, sizeof(gstr), "Administrator %s(%i) has unjailed %s(%i)", __GetName(playerid), playerid, __GetName(player), player);
			SCMToAll(COLOR_STEELBLUE, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:slap(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /slap <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player) && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
		{
		    switch(gTeam[player])
		    {
		        case DERBY, gRACE, BUYCAR, gBG_VOTING, GUNGAME, SPEC, JAIL, HOUSE: return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    }
			if(!PlayerData[player][bDerbyWinner] && gTeam[player] == DERBY) return SCM(playerid, -1, ""er"You can't use this command on that player now");

  			new Float:Health,
			  	Float:POS[3];

  			GetPlayerHealth(player, Health);
			SetPlayerHealth(player, (Health - 25.0));
			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			SetPlayerPos(player, POS[0], POS[1], floatadd(POS[2], 10.0));
			
			format(gstr, sizeof(gstr), "You have slapped %s(%i)", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been slapped by %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
			print(gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is the highest level admin or in a minigame");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gotoxyza(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");
		new Float:POS[4];
		if(sscanf(params, "ffff", POS[0], POS[1], POS[2], POS[3]))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /gotoxyza <X> <Y> <Z> <Angle>");
		}
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            SetVehiclePos(GetPlayerVehicleID(playerid), POS[0], POS[1], POS[2]);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), POS[3]);
        }
        else
        {
			SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerFacingAngle(playerid, POS[3]);
		}
		SetCameraBehindPlayer(playerid);
		format(gstr, sizeof(gstr), ""nef" You have teleported yourself to %.3f %.3f %.3f %.3f!", POS[0], POS[1], POS[2], POS[3]);
		SCM(playerid, -1, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:rv(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new reason[80];
	    if(sscanf(params, "s[79]", reason))
	    {
	        SCM(playerid, NEF_GREEN, "Usage: /rv <reason>");
	        SCM(playerid, NEF_GREEN, "Destroys all unoccupied player vehicles");
	        return 1;
	    }
	    
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(!IsPlayerAvail(i)) continue;
	        if(!IsPlayerInAnyVehicle(i) && gTeam[i] == gFREEROAM)
	        {
	            DestroyPlayerVehicles(i);
	        }
	    }

		format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) destroyed all unoccupied player vehicles [Reason: %s]", __GetName(playerid), playerid, reason);
		SCMToAll(YELLOW, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:readrules(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
	    new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /readrules <playerid>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player) && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
		{
		    if(!IsPlayerAvail(player) || PlayerData[player][e_level] >= PlayerData[playerid][e_level]) return SCM(playerid, -1, ""er"Player is not available or is an higher level admin than you");

			Command_ReProcess(player, "/rules", false);
			player_notice(player, "READ THE RULES!", "");
			format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has forced you to read the rules. Take note.", __GetName(playerid), playerid);
			SCM(player, -1, gstr);
			print(gstr);

			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been forced to read the rules by admin %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:disarm(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /disarm <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player) && PlayerData[player][e_level] != MAX_ADMIN_LEVEL)
		{
			if(gTeam[player] == GUNGAME) return SCM(playerid, -1, ""er"Cannot disarm player in gungame");
		    if(!IsPlayerAvail(player) || PlayerData[player][e_level] >= PlayerData[playerid][e_level]) return SCM(playerid, -1, ""er"Player is not available or is an higher level admin than you");

			ResetPlayerWeapons(player);

			player_notice(player, "Admin reset your weapons", "");
			player_notice(playerid, "Player has been disarmed", "");
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:getin(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
		new seat, player;
		if(sscanf(params, "ri", player, seat))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /getin <playerid> <seat id 1-3>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		if(gTeam[playerid] != gFREEROAM) return SCM(playerid, -1, ""er"Not useable in minigames");
		
		if(IsPlayerAvail(player))
		{
			if(player == playerid || gTeam[player] != gFREEROAM)
			{
			    return SCM(playerid, -1, ""er"Cannot get in that players vehicle");
			}

			if(seat < 0 || seat > 3)
			{
				return SCM(playerid, NEF_GREEN, "Usage: /getin <playerid> <seat id 1-3>");
			}

			if(!IsPlayerInAnyVehicle(player))
			{
				format(gstr, sizeof(gstr), ""er"%s(%i) is not in any vehicle!", __GetName(player), player);
				SCM(playerid, -1, gstr);
				return 1;
			}
			
            new vID = GetPlayerVehicleID(player), vM = GetVehicleModel(vID), count = 0;
            
			if(GetVehicleModelSeats(vM) == 1)
			{
				format(gstr, sizeof(gstr), ""er"%s(%i) is currently driving a one seat vehicle!", __GetName(player), player);
				SCM(playerid, -1, gstr);
				return 1;
			}

            if(vM == 537 || vM == 538) return SCM(playerid, -1, ""er"You can't get into trains");
            
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(!IsPlayerInVehicle(i, vID)) continue;
			    count++;
			    if(GetPlayerVehicleSeat(i) == seat)
			    {
					format(gstr, sizeof(gstr), ""er"Seat %i in %s(%i)'s %s is occupied by %s(%i)", seat, __GetName(player), player, VehicleNames[vM - 400], __GetName(i), i);
					SCM(playerid, -1, gstr);
					return 1;
				}
			}

			if(count >= GetVehicleModelSeats(vM)) return SCM(playerid, -1, ""er"All vehicles seats occupied!");

			SetPlayerInterior(playerid, GetPlayerInterior(player));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
			PutPlayerInVehicle(playerid, vID, seat);

			format(gstr, sizeof(gstr), ""nef" %s(%i) teleported into your %s to seat %i", __GetName(playerid), playerid, VehicleNames[vM - 400], seat);
			SCM(player, -1, gstr);
			format(gstr, sizeof(gstr), ""nef" You teleported into %s(%i)'s %s to seat %i.", __GetName(player), player, VehicleNames[vM - 400], seat);
			SCM(playerid, -1, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:pweaps(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 1)
	{
	    new player;
	    if(sscanf(params, "r", player))
		{
	        return SCM(playerid, NEF_GREEN, "Usage: /pweaps <playerid>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
		    new bullets[12],
		 		weapons[12],
		 		weapname[12][50],
		 		string[512];

			for(new i = 0; i < 12; i++)
			{
			    GetPlayerWeaponData(player, i + 1, weapons[i], bullets[i]);
			}

			for(new i = 0; i < 11; i++)
			{
			    GetWeaponName(weapons[i], weapname[i], 50);
			}

		    format(string, sizeof(string), ""yellow"- - - - -  [ %s's Weapons ] - - - - -", __GetName(player));
		    SCM(playerid, -1, string);
		    format(string, sizeof(string), "%s(0) - %s(%i) - %s(%i) - %s(%i) - %s(%i) - %s(%i)", weapname[0], weapname[1], bullets[1], weapname[2], bullets[2], weapname[3], bullets[3], weapname[4], bullets[4], weapname[5], bullets[5]);
		    SCM(playerid, WHITE, string);
		    format(string, sizeof(string), "%s(%i) - %s(%i) - %s(%i) - %s(0) - %s(0) - %s(0)", weapname[6], bullets[6], weapname[7], bullets[7] ,weapname[8], bullets[8], weapname[9], weapname[10], weapname[11]);
		    SCM(playerid, WHITE, string);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
    return 1;
}

YCMD:admins(playerid, params[], help)
{
	if(!IsPlayerAdmin(playerid) && GetPlayerScoreEx(playerid) < 100)
	    return SCM(playerid, -1, ""er"This commands requires 100 score!");

	new finstring[2048], count = 0;
	format(finstring, sizeof(finstring), ""nef_yellow"Administrators:\n"white"");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerData[i][e_level] > 0 && PlayerData[i][bOnlineAdmin])
	    {
	        if(IsPlayerOnDesktop(i))
	        {
				format(gstr, sizeof(gstr), "* %s(%i) (%s) [AFK]\n", __GetName(i), i, g_szStaffLevelNames[PlayerData[i][e_level]][e_rank]);
			}
			else
			{
			    format(gstr, sizeof(gstr), "* %s(%i) (%s)\n", __GetName(i), i, g_szStaffLevelNames[PlayerData[i][e_level]][e_rank]);
			}
			strcat(finstring, gstr);
			count++;
	    }
	}

	strcat(finstring, "\n"nef_yellow"Very Important Players:\n"white"");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerData[i][e_vip] == 1)
	    {
	        if(IsPlayerOnDesktop(i))
	        {
				format(gstr, sizeof(gstr), "* %s(%i) | [AFK]\n", __GetName(i), i);
	        }
			else
			{
			    format(gstr, sizeof(gstr), "* %s(%i)\n", __GetName(i), i);
			}
	        strcat(finstring, gstr);
			count++;
	    }
	}
	
	if(count == 0)
	{
	    player_notice(playerid, "No Admins/VIPs online", "");
	}
	else
	{
	    format(gstr, sizeof(gstr), "\n"white"Total of "nef_yellow"%i "white"admins/VIPs online!", count);
	    strcat(finstring, gstr);
		ShowPlayerDialog(playerid, ADMINS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Admins", finstring, "OK", "");
	}
	return 1;
}

YCMD:vips(playerid, params[], help)
{
	new finstring[1024], count = 0;
	format(finstring, sizeof(finstring), ""yellow"ID:\t\tName:\n"white"");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerData[i][e_vip] == 1)
	    {
            if(IsPlayerOnDesktop(i))
            {
				format(gstr, sizeof(gstr), "%i\t\t%s | [AFK]\n", i, __GetName(i));
			}
			else
			{
			    format(gstr, sizeof(gstr), "%i\t\t%s\n", i, __GetName(i));
			}
			strcat(finstring, gstr);
			count++;
	    }
	}
	if(count == 0)
	{
	    player_notice(playerid, "No VIPs online", "");
	}
	else
	{
	    format(gstr, sizeof(gstr), "\n\n"white"Total of "nef_yellow"%i "white"VIPs online!", count);
	    strcat(finstring, gstr);
		ShowPlayerDialog(playerid, ADMINS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: VIPs", finstring, "OK", "");
	}
	return 1;
}

/*YCMD:a(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] == 0) return SCM(playerid, -1, NO_PERM);
    
	if(sscanf(params, "s[144]", gstr))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /a <text>");
	}

    format(gstr2, sizeof(gstr2), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, gstr);
	admin_broadcast(COLOR_RED, gstr2);
	return 1;
}*/

YCMD:p(playerid, params[], help)
{
	if(PlayerData[playerid][e_vip] != 1 && PlayerData[playerid][e_level] == 0) return Command_ReProcess(playerid, "/vip", false);

	if(sscanf(params, "s[143]", gstr))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /p <text>");
	}

	if(IsAd(gstr))
	{
	  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, gstr, __GetIP(playerid));
		admin_broadcast(RED, gstr2);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}

	if(!PlayerData[playerid][bCaps])
	{
	    UpperToLower(gstr);
	}

	format(gstr, sizeof(gstr), ""white"["lb_e"VIP CHAT"white"] {%06x}%s"lb_e"(%i): %s", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, gstr);
	vip_broadcast(-1, gstr);
	return 1;
}

YCMD:vipli(playerid, params[], help)
{
	if(PlayerData[playerid][e_vip] == 1)
	{
		new tick = GetTickCountEx();
	 	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			if((PlayerData[playerid][tickLastVIPLInv] + COOLDOWN_CMD_VIPLI) >= tick)
			{
			    return player_notice(playerid, "Command is on cooldown!", "");
			}
		}
		
		new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /vipli <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 		if(IsPlayerAvail(player))
		{
			if(PlayerData[player][e_vip] == 1) return SCM(playerid, -1, ""er"You cannot invite this player");
			if(PlayerData[player][e_level] > 0) return SCM(playerid, -1, ""er"You cannot invite this player");

			PlayerData[player][bVIPLInv] = true;

			format(gstr, sizeof(gstr), ""yellow_e"%s(%i) invited you to the VIP Lounge. Type /accept to join.", __GetName(playerid), playerid);
			SCM(player, -1, gstr);

			format(gstr, sizeof(gstr), ""yellow_e"Invitation sent to %s(%i)", __GetName(player), player);
			SCM(playerid, -1, gstr);

		    PlayerData[playerid][tickLastVIPLInv] = tick;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:accept(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1) return SCM(playerid, -1, ""er"You can't use this command as VIP");
    
	if(!PlayerData[playerid][bVIPLInv])
	{
	    return SCM(playerid, -1, ""er"You got no invitation");
	}
	
	if(gTeam[playerid] != gFREEROAM)
	{
	    Command_ReProcess(playerid, "/exit", false);
	}
	
	SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
	SetPlayerInterior(playerid, 3);
    gTeam[playerid] = VIPL;
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

	SCM(playerid, -1, ""yellow_e"You've used your invitation");

	PlayerData[playerid][bVIPLInv] = false;
	return 1;
}

YCMD:viplounge(playerid, params[], help)
{
    PortPlayerMap(playerid, -2622.3103,1403.3483,7.1016,12.389, "VIP Lounge", "vipl");
	return 1;
}

YCMD:vip(playerid, params[], help)
{
	new string[2048];
	
	strcat(string, ""nef_yellow"Very Important Player (VIP)\n\n"yellow_e"Features:"white"\n Access to VIP vehicles in /v\n $1,000,000 to your bank (/bank)\n");
	strcat(string, " 2 PV slots + 1 house/bizz slot\n");
	strcat(string, " VIP Chat (/p)\n 100\% armor on spawn\n Jetpack spawn (/jetpack)\n Hydra spawn (/hydra)\n");
	strcat(string, " Countdown command (/cd)\n Namechange all 14 days (/changename)\n Open/Close Mellnik's Gate (/opengate /closegate)");
	strcat(string, "\n Spectate players (/spec)\n More interest each PayDay\n Access to VIP Forums\n Access to Beta Changelogs\n Rainbow effect (/rainbow)\n Custom label (/label)\n");
	strcat(string, " Get listed in /vips and /admins\n Namechange lookup (/ncrecords)\n Play as "BLUE_E"SWAT "white"in CNR");
	strcat(string, "\n Message to all players when joining the server\n Vehicle Control System (/vcs)\n VIP Lounge (/vipl)\n VIP Lounge Invite (/vipli)\n Direct spawn in /adminhq\n Access to VIP private vehicles");
	strcat(string, "\n Attach trailers to your truck (/trailer)\n Create ramps (/ramp)\n Health and armor (/harefill)");
	strcat(string, "\n\n"nef_yellow"Get VIP today! Go to:\n");
	strcat(string, ""red"-> "yellow_e""SVRURLWWW"/vip");
    ShowPlayerDialog(playerid, VIP_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Very Important Player (VIP)", string, "OK", "");
	return 1;
}

YCMD:hydra(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    
	if(PlayerData[playerid][e_vip] == 1)
	{
	    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	    if(IsPlayerInRangeOfPoint(playerid, 65.0, 1797.3141, -1302.0978, 120.2659) && PlayerData[playerid][e_level] < 1) return SCM(playerid, -1, ""er"Can't spawn vehicle at this place!");
		
		CarSpawner(playerid, 520, 120);
	}
	else
	{
		Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:god(playerid, params[], help)
{
	if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(PlayerData[playerid][bDuty]) return SCM(playerid, -1, ""er"You can't use god command while being on duty");
	
	new mode[31], bool:silent = false;
	if(!sscanf(params, "s[30]", mode))
	{
	    if(!strcmp(mode, "silent", true))
	    {
	        silent = true;
	    }
	}
	
	if(gTeam[playerid] == gFREEROAM)
	{
		if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use god now");
	    if(PlayerData[playerid][bGod])
	    {
			PlayerData[playerid][bGod] = false;
	        SetPVarInt(playerid, "HadGod", 0);
	 		SCM(playerid, COLOR_RED, ""nef" "GREY_E"You have disabled god-mode. You can now lose health in stunt zones.");
			SCM(playerid, COLOR_RED, "> "YELLOW_E"You can now freely use weapons.");
	        TextDrawHideForPlayer(playerid, TXTGodTD);
	        SetPlayerHealth(playerid, 100.0);
	        RandomWeapons(playerid);
	    }
	    else
	    {
	        if(!silent)
	        {
				if(((PlayerData[playerid][tickLastShot] + 5000) > GetTickCountEx()))
				{
				    return player_notice(playerid, "You were shot", "in the last 5 seconds");
				}
			}
			
	        new Float:HP;
	        GetPlayerHealth(playerid, HP);
			if(HP < 30 && !silent) return player_notice(playerid, "~b~~h~Can't activate god,", "~b~~h~Health below 30");
	        SetPVarInt(playerid, "HadGod", 1);
		    SCM(playerid, COLOR_RED, ""nef" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
			SCM(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
	        TextDrawShowForPlayer(playerid, TXTGodTD);
	        ResetPlayerWeapons(playerid);
	        SetPlayerHealth(playerid, 999999.0);
			PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], "~y~[] ~w~0");
	        PlayerData[playerid][e_wanteds] = 0;
	        PlayerData[playerid][bGod] = true;
	    }
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:v70(playerid, params[], help) // Cheetah
{
	if(PlayerData[playerid][e_vip] == 0) return 1;

    CarSpawner(playerid, 415);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.450000,0.824999,-0.599999,-27.000003,-0.000000,-269.999877);

	hVIPVehObj[playerid][1] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.524999,0.824999,-0.674999,21.599998,-0.000000,-269.999877);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.000000,2.100000,0.000000,67.500007,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(19314,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, -0.000000,0.000000,0.599999,70.200004,89.099983,0.000000);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Cheetah!");
	return 1;
}

YCMD:v71(playerid, params[], help)// Infernus
{
	if(PlayerData[playerid][e_vip] == 0) return 1;
	
    CarSpawner(playerid, 411);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, 0.000000,-2.100000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.000000,-1.725000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.449999,0.000000,0.749999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, -0.000000,2.175000,0.075000,70.200004,-0.000001,-0.000001);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Infernus!");
	return 1;
}

YCMD:v72(playerid, params[], help) // Huntley
{
	if(PlayerData[playerid][e_vip] == 0) return 1;
	
    CarSpawner(playerid, 579);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.000000,1.725000,-0.225000,0.000001,0.000000,91.799980);

	hVIPVehObj[playerid][1]= CreateDynamicObject(19314,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.000000,0.225000,1.200000,91.799980,-89.099983,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -0.600000,-1.049999,1.200000,-0.000001,-0.000001,89.099983);

	hVIPVehObj[playerid][3] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 0.674999,-1.049999,1.200000,-0.000001,-0.000001,89.099983);

	hVIPVehObj[playerid][4] = CreateDynamicObject(18652,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(18652,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][6] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, -1.125000,0.899999,0.150000,-5.399999,0.000000,89.099983);

	hVIPVehObj[playerid][7] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, 1.124999,0.899999,0.150000,-5.399999,0.000000,89.099983);

    hVIPVehObj[playerid][8] = CreateDynamicObject(1318,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][8], vID, 0.000000,-0.899999,1.350000,-264.599853,-359.100280,-359.100280);

	hVIPVehObj[playerid][9] = CreateDynamicObject(954,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][9], vID, -0.000000,-2.700001,0.749999,-21.600002,-0.000000,-0.000000);

	hVIPVehObj[playerid][10] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][10], vID, 0.000000,2.400000,0.225000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][11] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][11], vID, -0.000000,-2.250000,1.125000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][12] = CreateDynamicObject(1248,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][12], vID, -0.000000,-2.775001,0.000000,0.000000,0.000000,0.000000);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Huntley!");
	return 1;
}

YCMD:v73(playerid, params[], help) // Bullet
{
	if(PlayerData[playerid][e_vip] == 0) return 1;
	
    CarSpawner(playerid, 541);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.000000,1.950000,0.075000,72.900001,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, -0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, 0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18749,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, -0.000000,-1.800000,0.375000,-78.299995,-0.000001,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.300000,0.000000,0.599999,-0.000002,0.000000,89.099960);

	hVIPVehObj[playerid][5] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 0.374999,0.000000,0.599999,-0.000002,0.000000,89.099960);

	hVIPVehObj[playerid][6] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, -0.000000,0.000000,0.674999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][7] = CreateDynamicObject(355,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, -0.149999,-2.324999,0.000000,5.399998,-16.200000,5.400000);

	ChangeVehicleColor(vID, 0, 3);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Bullet!");
	return 1;
}

YCMD:v74(playerid, params[], help) // NRG
{
	if(PlayerData[playerid][e_vip] == 0) return 1;
	
    CarSpawner(playerid, 522);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(18650,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(362,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.075000,0.600000,0.675000,5.399998,24.300001,99.899971);

	hVIPVehObj[playerid][2] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -0.150000,1.800000,0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 0.000000,-0.899999,0.599999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(19130,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.675000,0.000000,0.824999,40.500003,0.000002,-80.999992);

	hVIPVehObj[playerid][5] = CreateDynamicObject(19130,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 0.824999,0.000000,0.824999,40.500003,0.000002,-269.999877);

	hVIPVehObj[playerid][6] = CreateDynamicObject(18749,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, 0.000000,-1.125000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][7] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, -0.375000,0.000000,0.000000,0.000000,0.000000,89.099983);

	hVIPVehObj[playerid][8] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][8], vID, 0.449999,0.000000,0.000000,0.000000,0.000000,89.099983);

	ChangeVehicleColor(vID, 0, 6);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom NRG!");
	return 1;
}

YCMD:adminhq(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

	if(PlayerData[playerid][e_level] > 0)
	{
		SetPlayerPos(playerid, 1797.4270,-1300.9581,120.2656);
		format(gstr, sizeof(gstr), ""nef" Admin %s(%i) teleported to Admin's Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	 	ResetPlayerWorld(playerid);
	 	PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	else if(PlayerData[playerid][e_vip] == 1)
	{
		SetPlayerPos(playerid, 1797.4270,-1300.9581,120.2656);
		format(gstr, sizeof(gstr), ""nef" VIP %s(%i) teleported to Admin's Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	 	ResetPlayerWorld(playerid);
	 	PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	else
	{
	    SetPlayerPos(playerid, 1786.5049,-1298.0465,120.2656);
		format(gstr, sizeof(gstr), ""nef" Player %s(%i) teleported to Admin's Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	    ResetPlayerWorld(playerid);
		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	return 1;
}

YCMD:cd(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 0) return Command_ReProcess(playerid, "/vip", false);
    
   	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastCD] + COOLDOWN_CMD_CD) >= tick)
	{
	    return SCM(playerid, -1, ""nef" Please wait before sending a message again");
	}
    if(IsCountDownRunning) return SCM(playerid, -1, ""er"Countdown is already running");
    
    iCountdownVIP = 5;
    IsCountDownRunning = true;
    
    tVIPCountdown = SetTimer("server_vip_countdown", 1000, true);
    
   	format(gstr, sizeof(gstr), ""nef" VIP {%06x}%s(%i) "white"has started a countdown!", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid);
	SCMToAll(-1, gstr);
	
	PlayerData[playerid][tickLastCD] = tick;
	return 1;
}

YCMD:rainbow(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 0) return Command_ReProcess(playerid, "/vip", false);
    
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use the rainbow feature!");
	}

	if(PVSelect[playerid] != -1)
	{
	    if(GetPlayerVehicleID(playerid) == PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]) return SCM(playerid, -1, ""er"Not possible in PVs!");
	}

	if(!PlayerData[playerid][bRainbow])
	{
		PlayerData[playerid][tRainbow] = SetTimerEx("ChangeColors", 500, true, "i", playerid);
		PlayerData[playerid][bRainbow] = true;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned on");
	}
	else
	{
		KillTimer(PlayerData[playerid][tRainbow]);
		PlayerData[playerid][bRainbow] = false;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned off");
	}
	return true;
}

YCMD:setadminlevel(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL || IsPlayerAdmin(playerid))
	{
	    new player, alevel;
	 	if(sscanf(params, "ri", player, alevel))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /setadminlevel <playerid> <level>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
			if(alevel > MAX_ADMIN_LEVEL)
			{
				return SCM(playerid, -1, ""er"Incorrect Level");
			}
			if(alevel == PlayerData[player][e_level])
			{
				return SCM(playerid, -1, ""er"Player is already this level");
			}
  			new time[3];
   			gettime(time[0], time[1], time[2]);

			if(alevel > 0)
			{
				format(gstr, sizeof(gstr), "Admin %s has set you to Admin Status [level %i]", __GetName(playerid), alevel);
			}
			else
			{
				format(gstr, sizeof(gstr), "Admin %s has set you to Player Status [level %i]", __GetName(playerid), alevel);
			}
			SCM(player, BLUE, gstr);

			if(alevel > PlayerData[player][e_level])
				GameTextForPlayer(player, "Promoted", 5000, 3);
			else
				GameTextForPlayer(player, "Demoted", 5000, 3);
			
			SQL_SaveAccount(playerid, false, false);
			format(gstr, sizeof(gstr), "You have made %s Level %i at %i:%i:%i", __GetName(player), alevel, time[0], time[1], time[2]);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), "Admin %s has made %s Level %i at %i:%i:%i", __GetName(playerid), __GetName(player), alevel, time[0], time[1], time[2]);
            SCM(player, BLUE, gstr);
            print(gstr);
			PlayerData[player][e_level] = alevel;
		}
		else
		{
			SCM(playerid, -1, ""er"Cannot assign permissions");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:report(playerid, params[], help)
{
	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastReport] + COOLDOWN_CMD_REPORT) >= tick)
	{
    	return player_notice(playerid, "Command is on cooldown!", "");
	}

	new	player, reason[144];
	if(sscanf(params, "rs[143]", player, reason))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /report <playerid> <reason>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
 	if(IsPlayerAvail(player) && player != playerid && PlayerData[player][e_level] == 0)
	{
		if(strlen(reason) < 4) return SCM(playerid, -1, ""er"Please write a proper reason");

		new time[3];
		gettime(time[0], time[1], time[2]);

		format(gstr, sizeof(gstr), "[ADMIN CHAT] "YELLOW_E"Report(%02i:%02i:%02i) "RED_E"%s(%i) -> %s(%i) -> %s", time[0], time[1], time[2], __GetName(playerid), playerid, __GetName(player), player, reason);
		for(new i = 1; i < MAX_REPORTS - 1; i++)
		{
			Reports[i] = Reports[i + 1];
		}
		Reports[MAX_REPORTS - 1] = gstr;

        if(admin_broadcast(COLOR_RED, gstr, true) == 0)
        {
			format(gstr, sizeof(gstr), ""white"["lb_e"VIP CHAT"white"] "YELLOW_E"Report(%02i:%02i:%02i) "RED_E"%s(%i) -> %s(%i) -> %s", time[0], time[1], time[2], __GetName(playerid), playerid, __GetName(player), player, reason);
			vip_broadcast(-1, gstr);
        }

		SCM(playerid, YELLOW, "Your report has been sent to online Administrators");
		PlayerData[playerid][tickLastReport] = tick;
	}
	else
	{
		SCM(playerid, -1, ""er"You cannot report this player!");
	}
	return 1;
}

YCMD:reports(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 1)
	{
        new ReportCount;
		for(new i = 1; i < MAX_REPORTS; i++)
		{
			if(strcmp(Reports[i], "<none>", true) != 0)
			{
				ReportCount++;
				SCM(playerid, WHITE, Reports[i]);
			}
		}
		
		if(ReportCount == 0)
		{
			SCM(playerid, WHITE, "There have been no reports");
		}
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:race(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}

    if(gTeam[playerid] == gRACE) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != gFREEROAM) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave", "");

    switch(g_RaceStatus)
    {
        case RaceStatus_StandBy:
        {
            Iter_Clear(iterRaceJoins);
            g_RaceStatus = RaceStatus_StartUp;
            g_tRaceCounter = SetTimer("race_countdown", 1000, true);
        }
        case RaceStatus_Inactive:
        {
            player_notice(playerid, "NO ACTIVE RACE", "");
        }
        case RaceStatus_Active:
        {
            player_notice(playerid, "Race already started", "");
        }
    }
    
    if(g_RaceStatus == RaceStatus_StartUp)
    {
		if(Iter_Contains(iterRaceJoins, playerid))
		{
			SCM(playerid, -1, ""er"Please wait for the next race, you already joined this race round once!");
		}
		else
		{
		    if(g_RacePlayerCount >= RACE_MAX_PLAYERS) return SCM(playerid, -1, ""er"Race reached it's max players");
		    
		    CheckPlayerGod(playerid);

			Command_ReProcess(playerid, "/stopanims", false);
			Iter_Add(iterRaceJoins, playerid);
			race_player_setup(playerid);
			NewMinigameJoin(playerid, "Race", "race");
		}
    }
	return 1;
}

/*
YCMD:sethouseowner(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	new owner[128];
	if(sscanf(params, "s[128]", owner))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /sethouseowner <name>");
	}

	if(strlen(owner) > 21 || strlen(owner) < 3) return SCM(playerid, -1, ""er"Invalid name");
	
	mysql_escape_string(owner, owner, pSQL, sizeof(owner));
	format(gstr, sizeof(gstr), "SELECT `Houses`, `AdditionalHouseSlots` FROM `accounts` WHERE `Name` = '%s'", owner);
	mysql_query(pSQL, gstr, false);

	new houses = 0, addslots = 0;
	if(cache_get_row_count(pSQL) == 0)
	{
		return SCM(playerid, -1, ""er"Player does not exist");
	}
	else
	{
	    houses = cache_get_row_int(0, 0, pSQL);
	    slots = cache_get_row_int(0, 1, pSQL);
	}
	
	if(houses
	
 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
	    found = true;

	    if(HouseData[i][sold] == 1) return SCM(playerid, -1, ""er"House connot be sold");


		player_notice(playerid, "~g~~h~~h~House price has been set!", 2000);
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}*/

YCMD:hsetprice(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new hprice; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /hsetprice <price>");
	}

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
	    found = true;

	    if(HouseData[i][sold] == 1) return SCM(playerid, -1, ""er"House connot be sold");

	    HouseData[i][price] = hprice;

 	   	format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, gstr);
	    SQL_SaveHouse(i);

		player_notice(playerid, "House price has been set", "");
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:hsetscore(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new hscore; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /hsetscore <score>");
	}

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
	    found = true;

	    if(HouseData[i][sold] == 1) return SCM(playerid, -1, ""er"House connot be sold");

	    HouseData[i][e_score] = hscore;

 	   	format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, gstr);
	    SQL_SaveHouse(i);

		player_notice(playerid, "House score has been set", "");
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:hreset(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;
	    found = true;

		if(HouseData[i][sold] == 0) return SCM(playerid, -1, ""er"House is not sold");

		new player = __GetPlayerID(HouseData[i][Owner]);
		if(player != INVALID_PLAYER_ID)
		{
	        PlayerData[player][e_houses]--;
	        SCM(player, -1, "An admin destroyed your house!");
			SQL_SaveAccount(player, false, false);
		}
		else
		{
			format(gstr, sizeof(gstr), "UPDATE `accounts` SET `houses` = `houses` - 1 WHERE `name` = '%s' LIMIT 1;", HouseData[i][Owner]);
			mysql_tquery(pSQL, gstr, "", "");
		}
		
	    strmid(HouseData[i][Owner], "ForSale", 0, 25, 25);
	    HouseData[i][sold] = 0;
        HouseData[i][locked] = 1;
        HouseData[i][date] = 0;
		for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
		{
			if(HouseData[i][E_Obj_Model][ii] != 0)
			{
			    DestroyDynamicObject(HouseData[i][E_Obj_ObjectID][ii]);
			    DestroyDynamic3DTextLabel(HouseData[i][E_Obj_Label][ii]);
			    HouseData[i][E_Obj_Label][ii] = Text3D:-1;
			    HouseData[i][E_Obj_ObjectID][ii] = -1;
			    HouseData[i][E_Obj_Model][ii] = 0;
			}
		}
        
		SQL_SaveHouse(i, true);

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, gstr);
	    DestroyDynamicMapIcon(HouseData[i][e_iconid]);
	    DestroyDynamicPickup(HouseData[i][pickid]);
	    HouseData[i][e_iconid] = CreateDynamicMapIcon(HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], 31, 1, 0, -1, -1, 150.0);
	    HouseData[i][pickid] = CreateDynamicPickup(1273, 1, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z], -1, -1, -1, 30.0);

		player_notice(playerid, "The house has been reset", "");
  		break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:setbizzlevel(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new blevel; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /setbizzlevel <level>");
	}
	if(blevel > 20 || blevel < 1) return SCM(playerid, -1, ""er"Business level 1 - 20");
	
 	new bool:bFound = false;
 	for(new r = 0; r < MAX_BUSINESSES; r++)
 	{
	    if(BusinessData[r][e_ormid] == ORM:-1) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2])) continue;
		bFound = true;
		
		BusinessData[r][e_level] = blevel;
		
		if(BusinessData[r][e_sold]) {
	        format(gstr, sizeof(gstr), ""business_mark"\nID: %i\nOwner: %s\nType: %s\nLevel: %i", BusinessData[r][e_id], BusinessData[r][e_owner], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
		} else {
		    format(gstr, sizeof(gstr), ""business_mark"\n"nef_green"FOR SALE! Type /bbuy"white"\nID: %i\nType: %s\nLevel: %i", BusinessData[r][e_id], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
		}
		
		UpdateDynamic3DTextLabelText(BusinessData[r][e_label_id], -1, gstr);
		orm_update(BusinessData[r][e_ormid]);
		
		player_notice(playerid, "Business level set", "");
		break;
 	}
 	if(!bFound) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

YCMD:breset(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

 	new bool:bFound = false;
	for(new r = 0; r < MAX_BUSINESSES; r++)
	{
	    if(BusinessData[r][e_ormid] == ORM:-1) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2])) continue;
		bFound = true;

		if(BusinessData[r][e_sold] == 0) {
		    player_notice(playerid, "Business must be for sale", "");
		    break;
		}
		
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(!strcmp(BusinessData[r][e_owner], __GetName(i), true) && IsPlayerConnected(i))
		    {
		        SCM(i, -1, "An admin destroyed your business!");
				break;
		   	}
		}
		
		strmid(BusinessData[r][e_owner], "NoData", 0, MAX_PLAYER_NAME + 1, MAX_PLAYER_NAME + 1);
		
	    BusinessData[r][e_sold] = 0;
        BusinessData[r][e_level] = 1;
        BusinessData[r][e_date] = 0;

		DestroyDynamic3DTextLabel(BusinessData[r][e_label_id]);
		DestroyDynamicPickup(BusinessData[r][e_pickup_id]);

        SetupBusiness(r);

	    player_notice(playerid, "SUCCESS!", "");

	    orm_update(BusinessData[r][e_ormid]);
  		break;
	}
    if(!bFound) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

#if IS_RELEASE_BUILD == false
YCMD:createrace(playerid, params[], help)
{
	if(IsPlayerAdmin(playerid) && PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
		if(g_BuildRace != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"There's already someone building a race!");
		if(g_RaceStatus == RaceStatus_Active) return SCM(playerid, -1, ""er"Wait first till race ends!");
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please leave your vehicle first!");
		g_BuildRace = playerid;
		g_BuildDeployTime = gettime();
		
		ShowDialog(playerid, DIALOG_RACE_RACETYPE);
		gTeam[playerid] = gBUILDRACE;

		DestroyPlayerVehicles(playerid);
	
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 0);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}
#endif

YCMD:bcreate(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}
	
	new count = 0;
	for(new i = 0; i < MAX_BUSINESSES; i++) {
	    if(BusinessData[i][e_ormid] != ORM:-1) {
			++count;
	    }
	}
	
	if(count >= MAX_BUSINESSES) {
	    return SCM(playerid, -1, ""er"Max businesses reached");
	}
	
	new r = -1;
	for(new i = 0; i < MAX_BUSINESSES; i++) {
	    if(BusinessData[i][e_ormid] == ORM:-1) {
	        r = i;
	        break;
	    }
	}
	
	if(r == -1) return SCM(playerid, -1, ""er"No free bizz slot");
	
    ResetBusiness(r);
  	GetPlayerPos(playerid, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2]);
    strmid(BusinessData[r][e_owner], "NoData", 0, MAX_PLAYER_NAME + 1, MAX_PLAYER_NAME + 1);
    
    new ORM:ormid = BusinessData[r][e_ormid] = orm_create("businesses");

    orm_addvar_int(ormid, BusinessData[r][e_id], "id");
    orm_addvar_string(ormid, BusinessData[r][e_owner], MAX_PLAYER_NAME + 1, "owner");
    orm_addvar_float(ormid, BusinessData[r][e_pos][0], "xpos");
    orm_addvar_float(ormid, BusinessData[r][e_pos][1], "ypos");
    orm_addvar_float(ormid, BusinessData[r][e_pos][2], "zpos");
    orm_addvar_int(ormid, _:BusinessData[r][e_type], "type");
    orm_addvar_int(ormid, BusinessData[r][e_level], "level");
    orm_addvar_int(ormid, BusinessData[r][e_sold], "sold");
    orm_addvar_int(ormid, BusinessData[r][e_date], "date");

    orm_setkey(ormid, "id");
	orm_insert(ormid, "OnBusinessLoadEx", "i", r);
    return 1;
}

YCMD:hcreate(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}

	extract params -> new h_price, h_score, h_int; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /hcreate <price> <score> <interior>");
	}

	if(h_int > 13 || h_int < 0) return SCM(playerid, -1, ""er"Interior 0 - 13");
	if(h_score > 1000000 || h_score < 1) return SCM(playerid, -1, ""er"Score 1 - 1,000,000");
	if(h_price > 1000000000 || h_price < 1) return SCM(playerid, -1, ""er"Price 1 - 1,000,000,000");

	new Float:POS[3];

	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

	HouseData[houseid][e_x] = POS[0];
	HouseData[houseid][e_y] = POS[1];
	HouseData[houseid][e_z] = POS[2];
	HouseData[houseid][e_score] = h_score;
	HouseData[houseid][price] = h_price;
	HouseData[houseid][interior] = h_int;
	HouseData[houseid][locked] = 1;
	HouseData[houseid][sold] = 0;
	HouseData[houseid][date] = 0;

	strmid(HouseData[houseid][Owner], "ForSale", 0, 25, 25);

	new query[255];
	
	format(query, sizeof(query), "INSERT INTO `houses` (`ID`, `Owner`, `XPos`, `YPos`, `ZPos`, `Interior`, `Price`, `Score`, `Sold`, `Locked`, `Date`) VALUES (NULL, '%s', %.2f, %.2f, %.2f, %i, %i, %i, %i, %i, %i);",
	    HouseData[houseid][Owner],
		HouseData[houseid][e_x],
		HouseData[houseid][e_y],
		HouseData[houseid][e_z],
	    HouseData[houseid][interior],
	    HouseData[houseid][price],
	    HouseData[houseid][e_score],
	    HouseData[houseid][sold],
	    HouseData[houseid][locked],
		HouseData[houseid][date]);

    mysql_tquery(pSQL, query, "", "");
    mysql_tquery(pSQL, "SELECT * FROM `houses` ORDER BY `ID` DESC LIMIT 1;", "OnHouseLoadEx", "i", houseid);

    houseid++;
    return 1;
}

YCMD:createstore(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}

	new string[80],
		file[50],
		labeltext[50],
		Float:POS[4];

	extract params -> new string:store[144]; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}

	if(strlen(store) < 3 || strlen(store) > 11)
	{
		return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}

    if(strcmp(store, "bank", true) && strcmp(store, "ammunation", true) && strcmp(store, "burger", true) && strcmp(store, "cluckinbell", true) && strcmp(store, "pizza", true) && strcmp(store, "247", true))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}
	else
	{
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(playerid, POS[3]);
		dini_Create("/Store/Index.ini");
		dini_IntSet("/Store/Index.ini", "TotalStores", (dini_Int("/Store/Index.ini", "TotalStores") + 1));

	    if(!strcmp(store, "bank", true))
	    {
	        new bankid = dini_Int("/Store/Index.ini", "CurrentBankID");
	        if(bankid >= MAX_BANKS)
			{
				return SCM(playerid, -1, ""er"Unable to create more banks. There are already "#MAX_BANKS" created");
			}
	        else
	        {
		        format(string, sizeof(string), "Bank ID %i created.", bankid);
		        format(labeltext, sizeof(labeltext), "Bank");
		    	format(file, sizeof(file), "/Store/Banks/%i.ini", bankid);
 				if(dini_Create(file))
 				{
			    	dini_IntSet("/Store/Index.ini", "CurrentBankID", (bankid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentBankWorld", (bankid + 1000));
			    	BankPickOut[bankid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 30.0);
		   			BankPickInt[bankid] = CreateDynamicPickup(1559, 1, 2304.69, -16.19, 26.74, (bankid + 1000), -1, -1, 50.0);
					BankPickMenu[bankid] = CreateDynamicPickup(1559, 1, 2311.63, -3.89, 26.74, (bankid + 1000), -1, -1, 50.0);
				    BankMIcon[bankid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 25, -1, 0, 0, -1, 300.0);
				}
		    }
	    }
	    if(!strcmp(store, "ammunation", true))
	    {
	        new ammunationid = dini_Int("/Store/Index.ini", "CurrentAmmunationID");
	        if(ammunationid >= MAX_AMMUNATIONS)
			{
				return SCM(playerid, -1, ""er"Unable to create more banks. There are already "#MAX_AMMUNATIONS" created");
			}
			else
			{
		        format(string, sizeof(string), "Ammunation ID %i Created.", ammunationid);
		        format(labeltext, sizeof(labeltext), "Ammunation");
		    	format(file, sizeof(file), "/Store/Ammunations/%i.ini", ammunationid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentAmmunationID", (ammunationid + 1));
	    			dini_IntSet("/Store/Index.ini", "CurrentAmmunationWorld", (ammunationid + 1000));
			    	AmmunationPickOut[ammunationid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					AmmunationPickInt[ammunationid] = CreateDynamicPickup(1559, 1, 315.81, -143.65, 999.60, (ammunationid + 1000), 7, -1, 50.0);
					AmmunationMIcon[ammunationid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 6, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "burger", true))
	    {
	        new burgerid = dini_Int("/Store/Index.ini", "CurrentBurgerID");
	        if(burgerid >= MAX_BURGERSHOTS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_BURGERSHOTS" created");
			}
            else
			{
			    format(string, sizeof(string), "Burger Shot ID %i Created.", burgerid);
		        format(labeltext, sizeof(labeltext), "Burger Shot");
		    	format(file, sizeof(file), "/Store/BurgerShots/%i.ini", burgerid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentBurgerID", (burgerid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentBurgerWorld", (burgerid + 1000));
					BurgerPickOut[burgerid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					BurgerPickInt[burgerid] = CreateDynamicPickup(1559, 1, 362.87, -75.17, 1001.50, (burgerid + 1000), 10, -1, 50.0);
					BurgerMIcon[burgerid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 10, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "cluckinbell", true))
	    {
	        new cluckinbellid = dini_Int("/Store/Index.ini", "CurrentCluckinBellID");
	        if(cluckinbellid >= MAX_CLUCKINBELLS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_CLUCKINBELLS" created");
			}
            else
			{
				format(string, sizeof(string), "Cluckin Bell ID %i Created", cluckinbellid);
		        format(labeltext, sizeof(labeltext), "Cluckin' Bell");
		    	format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cluckinbellid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentCluckinBellID", (cluckinbellid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentCluckinBellWorld", (cluckinbellid + 1000));
					CluckinBellPickOut[cluckinbellid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					CluckinBellPickInt[cluckinbellid] = CreateDynamicPickup(1559, 1, 364.87, -11.74, 1001.85, (cluckinbellid + 1000), 9, -1, 50.0);
					CluckinBellMIcon[cluckinbellid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 14, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "pizza", true))
	    {
	        new pizzaid = dini_Int("/Store/Index.ini", "CurrentPizzaID");
	        if(pizzaid >= MAX_PIZZASTACKS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_PIZZASTACKS" created");
			}
			else
			{
				format(string, sizeof(string), "Well Stacked Pizza & Co. ID %i Created.", pizzaid);
		        format(labeltext, sizeof(labeltext), "Well Stacked Pizza & Co.");
		    	format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", pizzaid);
		    	if(dini_Create(file))
				{
	   		    	dini_IntSet("/Store/Index.ini", "CurrentPizzaID", (pizzaid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentPizzaWorld", (pizzaid + 1000));
					PizzaPickOut[pizzaid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					PizzaPickInt[pizzaid] = CreateDynamicPickup(1559, 1, 372.36, -133.50, 1001.49, (pizzaid + 1000), 5, -1, 50.0);
					PizzaMIcon[pizzaid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 29, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "247", true))
	    {
	        new tfs = dini_Int("/Store/Index.ini", "CurrentTFSID");
	        if(tfs >= MAX_TFS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_TFS" created");
			}
			else
			{
				format(string, sizeof(string), "24/7 ID %i Created.", tfs);
		        format(labeltext, sizeof(labeltext), "24/7");
		    	format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentTFSID", (tfs + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentTFSWorld", (tfs + 1000));
					TFSPickOut[tfs] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					TFSPickInt[tfs] = CreateDynamicPickup(1559, 1,  -25.884, -185.868, 1003.546, (tfs + 1000), 17, -1, 50.0);
					TFSMIcon[tfs] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 17, -1, 0, 0, -1, 300.0);
				}
			}
	    }

	    format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", labeltext);
		CreateDynamic3DTextLabel(gstr, YELLOW, POS[0], POS[1], floatadd(POS[2], 0.7), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		dini_Set(file, "StoreName", gstr);
		dini_FloatSet(file, "PickOutX", POS[0]);
		dini_FloatSet(file, "PickOutY", POS[1]);
		dini_FloatSet(file, "PickOutZ", POS[2]);
		GetPosInFrontOfPlayer(playerid, POS[0], POS[1], -2.5);
		dini_FloatSet(file, "SpawnOutX", POS[0]);
		dini_FloatSet(file, "SpawnOutY", POS[1]);
		dini_FloatSet(file, "SpawnOutZ", POS[2]);
		dini_FloatSet(file, "SpawnOutAngle", floatround((floatadd(180.0, POS[3])), floatround_ceil));
		dini_IntSet(file, "StoreID", dini_Int("/Store/Index.ini", "TotalStores"));
		SCM(playerid, YELLOW, string);
	}
    return 1;
}

YCMD:rules(playerid, params[], help)
{
	new rules[700];

	strcat(rules, ""white"- No cheating of any kind\n- Do not ask others to gift you money\n- No mods that affect other player's gameplay\n- No insults\n- No advertising of any kind\n- No (command)spamming\n");
	strcat(rules, "- No abusing bugs/glitches/commands\n- Do not share your account\n- No AFK in minigames\n- Do not ask for an unban ingame\n- Do not ask to be an administrator /free VIP\n- Do not use Vortex to driveby players\n- Do not driveby at Hotspots/Spawnareas");
	strcat(rules, "\n- No score/money farming\n- Do not use joypad\n- No impersonating\n\nNever tell your password to anyone!");

    ShowPlayerDialog(playerid, RULES_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Rules", rules, "OK", "");
	return 1;
}

YCMD:gungames(playerid, params[], help)
{
	new gungames[MAX_PLAYERS][e_top_gungame],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        gungames[i][E_playerid] = i;
	        gungames[i][E_gungame] = PlayerData[i][e_gungamewins];
	    }
	    else
	    {
	        gungames[i][E_playerid] = -1;
	        gungames[i][E_gungame] = -1;
	    }
	}

	SortDeepArray(gungames, E_gungame, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(gungames[i][E_gungame] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Gungame Wins: %i\n", GetColorEx(gungames[i][E_playerid]) >>> 8, i + 1, __GetName(gungames[i][E_playerid]), gungames[i][E_playerid], gungames[i][E_gungame]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);

        strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Gungame Wins", finstring, "OK", "");
	return 1;
}

YCMD:fallouts(playerid, params[], help)
{
	new fallouts[MAX_PLAYERS][e_top_fallout],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        fallouts[i][E_playerid] = i;
	        fallouts[i][E_fallout] = PlayerData[i][e_falloutwins];
	    }
	    else
	    {
	        fallouts[i][E_playerid] = -1;
	        fallouts[i][E_fallout] = -1;
	    }
	}

	SortDeepArray(fallouts, E_fallout, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(fallouts[i][E_fallout] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Fallout Wins: %i\n", GetColorEx(fallouts[i][E_playerid]) >>> 8, i + 1, __GetName(fallouts[i][E_playerid]), fallouts[i][E_playerid], fallouts[i][E_fallout]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);

		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Fallout Wins", finstring, "OK", "");
	return 1;
}

YCMD:derbys(playerid, params[], help)
{
	new derbys[MAX_PLAYERS][e_top_derby],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        derbys[i][E_playerid] = i;
	        derbys[i][E_derby] = PlayerData[i][e_derbywins];
	    }
	    else
	    {
	        derbys[i][E_playerid] = -1;
	        derbys[i][E_derby] = -1;
	    }
	}

	SortDeepArray(derbys, E_derby, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(derbys[i][E_derby] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Derby Wins: %i\n", GetColorEx(derbys[i][E_playerid]) >>> 8, i + 1, __GetName(derbys[i][E_playerid]), derbys[i][E_playerid], derbys[i][E_derby]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);

		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Derby Wins", finstring, "OK", "");
	return 1;
}

YCMD:races(playerid, params[], help)
{
	new races[MAX_PLAYERS][e_top_race],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        races[i][E_playerid] = i;
	        races[i][E_race] = PlayerData[i][e_racewins];
	    }
	    else
	    {
	        races[i][E_playerid] = -1;
	        races[i][E_race] = -1;
	    }
	}

	SortDeepArray(races, E_race, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(races[i][E_race] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Race Wins: %i\n", GetColorEx(races[i][E_playerid]) >>> 8, i + 1, __GetName(races[i][E_playerid]), races[i][E_playerid], races[i][E_race]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Race Wins", finstring, "OK", "");
	return 1;
}

YCMD:reacts(playerid, params[], help)
{
	new tests[MAX_PLAYERS][e_top_reacts],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        tests[i][E_playerid] = i;
	        tests[i][E_test] = PlayerData[i][e_reaction];
	    }
	    else
	    {
	        tests[i][E_playerid] = -1;
	        tests[i][E_test] = -1;
	    }
	}

	SortDeepArray(tests, E_test, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(tests[i][E_test] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Reaction Wins: %i\n", GetColorEx(tests[i][E_playerid]) >>> 8, i + 1, __GetName(tests[i][E_playerid]), tests[i][E_playerid], tests[i][E_test]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Reaction Wins", finstring, "OK", "");
	return 1;
}

YCMD:kills(playerid, params[], help)
{
	new kills[MAX_PLAYERS][e_top_kills],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        kills[i][E_playerid] = i;
	        kills[i][E_kills] = PlayerData[i][e_kills];
	    }
	    else
	    {
	        kills[i][E_playerid] = -1;
	        kills[i][E_kills] = -1;
	    }
	}

	SortDeepArray(kills, E_kills, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(kills[i][E_kills] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Kills: %i\n", GetColorEx(kills[i][E_playerid]) >>> 8, i + 1, __GetName(kills[i][E_playerid]), kills[i][E_playerid], kills[i][E_kills]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Kills", finstring, "OK", "");
	return 1;
}

YCMD:deaths(playerid, params[], help)
{
	new deaths[MAX_PLAYERS][e_top_deaths],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        deaths[i][E_playerid] = i;
	        deaths[i][E_deaths] = PlayerData[i][e_deaths];
	    }
	    else
	    {
	        deaths[i][E_playerid] = -1;
	        deaths[i][E_deaths] = -1;
	    }
	}

	SortDeepArray(deaths, E_deaths, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(deaths[i][E_deaths] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Deaths: %i\n", GetColorEx(deaths[i][E_playerid]) >>> 8, i + 1, __GetName(deaths[i][E_playerid]), deaths[i][E_playerid], deaths[i][E_deaths]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_DEATHS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Deaths", finstring, "OK", "");
	return 1;
}

YCMD:toptime(playerid, params[], help)
{
	new playingtime[MAX_PLAYERS][e_top_time],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        playingtime[i][E_playerid] = i;
		    PlayerData[i][e_time] = PlayerData[i][e_time] + (gettime() - PlayerData[i][ConnectTime]);
		    PlayerData[i][ConnectTime] = gettime();
	        playingtime[i][E_time] = PlayerData[i][e_time];
	    }
	    else
	    {
	        playingtime[i][E_playerid] = -1;
	        playingtime[i][E_time] = -1;
	    }
	}

	SortDeepArray(playingtime, E_time, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(playingtime[i][E_time] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Time: %s\n", GetColorEx(playingtime[i][E_playerid]) >>> 8, i + 1, __GetName(playingtime[i][E_playerid]), playingtime[i][E_playerid], GetPlayingTimeFormat(playingtime[i][E_playerid]));
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, MOST_PLAYING_TIME_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most Playing Time", finstring, "OK", "");
	return 1;
}

YCMD:richlist(playerid, params[], help)
{
	new richlist[MAX_PLAYERS][e_top_richlist],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
		{
	        richlist[i][E_playerid] = i;
	        richlist[i][E_money] = PlayerData[i][e_money] + PlayerData[i][e_bank];
	    }
	    else
	    {
	        richlist[i][E_playerid] = -1;
	        richlist[i][E_money] = -1;
	    }
	}

	SortDeepArray(richlist, E_money, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(richlist[i][E_money] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Money: $%s\n", GetColorEx(richlist[i][E_playerid]) >>> 8, i + 1, __GetName(richlist[i][E_playerid]), richlist[i][E_playerid], number_format(richlist[i][E_money]));
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}

    ShowPlayerDialog(playerid, RICHLIST_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Richlist", finstring, "OK", "");
	return 1;
}

YCMD:wanteds(playerid, params[], help)
{
	new wanteds[MAX_PLAYERS][e_top_wanteds],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        wanteds[i][E_playerid] = i;
	        wanteds[i][E_wanteds] = PlayerData[i][e_wanteds];
	    }
	    else
	    {
	        wanteds[i][E_playerid] = -1;
	        wanteds[i][E_wanteds] = -1;
	    }
	}

	SortDeepArray(wanteds, E_wanteds, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(wanteds[i][E_wanteds] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Wanteds: %i\n", GetColorEx(wanteds[i][E_playerid]) >>> 8, i + 1, __GetName(wanteds[i][E_playerid]), wanteds[i][E_playerid], wanteds[i][E_wanteds]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}
	ShowPlayerDialog(playerid, WANTEDS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Most wanteds", finstring, "OK", "");
	return 1;
}

YCMD:score(playerid, params[], help)
{
	new score[MAX_PLAYERS][e_top_score],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	    {
	        score[i][E_playerid] = i;
	        score[i][E_pscore] = GetPlayerScoreEx(i);
	    }
	    else
	    {
	        score[i][E_playerid] = -1;
	        score[i][E_pscore] = -1;
	    }
	}

	SortDeepArray(score, E_pscore, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(score[i][E_pscore] != -1)
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Score: %i\n", GetColorEx(score[i][E_playerid]) >>> 8, i + 1, __GetName(score[i][E_playerid]), score[i][E_playerid], score[i][E_pscore]);
		else
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    
		strcat(finstring, tmpstring);
	}
	ShowPlayerDialog(playerid, SCORE_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Score", finstring, "OK", "");
	return 1;
}

YCMD:gangs(playerid, params[], help)
{
	new Iterator:Gangs[2]<2000>,
		finstring[1500],
		tmpstring[35];

	Iter_Init(Gangs);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[playerid][ExitType] != EXIT_FIRST_SPAWNED) continue;
        if(PlayerData[i][e_gangid] > 0 && !Iter_Contains(Gangs[0], PlayerData[i][e_gangid]))
        {
            Iter_Add(Gangs[0], PlayerData[i][e_gangid]);
            Iter_Add(Gangs[1], i);
        }
	}

	if(Iter_Count(Gangs[1]) > 0)
	{
	    format(tmpstring, sizeof(tmpstring), ""white"%i gang(s) online:\n", Iter_Count(Gangs[1]));
	    strcat(finstring, tmpstring);

	    for(new i = Iter_First(Gangs[1]), count = 0; i != Iter_End(Gangs[1]); i = Iter_Next(Gangs[1], i), ++count)
	    {
	        if(count <= 40)
	        {
	        	format(tmpstring, sizeof(tmpstring), "\n- [%s] %s", PlayerData[i][GangTag], PlayerData[i][GangName]);
	        	strcat(finstring, tmpstring);
			}
			else
			{
			    format(tmpstring, sizeof(tmpstring), "\n[... too many online]");
			    strcat(finstring, tmpstring);
			    break;
			}
	    }
		ShowPlayerDialog(playerid, GANGS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Online Gangs", finstring, "OK", "");
	}
	else
	{
	    player_notice(playerid, "No gangs online", "");
	}
	return 1;
}

YCMD:gtop(playerid, params[], help)
{
	mysql_pquery(pSQL, "SELECT `gname`, `gtag`, `gscore`, `gcolor` FROM `gangs` ORDER BY `gscore` DESC LIMIT 30;", "OnGTopReceived", "i", playerid);
	return 1;
}

function:OnGTopReceived(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);
	
	if(rows > 0)
	{
	    new tmp[21], tmp2[5], finstring[2048];
	    strcat(finstring, ""white"");
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 0, tmp, pSQL, sizeof(tmp));
	        cache_get_row(i, 1, tmp2, pSQL, sizeof(tmp2));
	        new col = cache_get_row_int(i, 3, pSQL);
	        if(col != 0)
	        {
	        	format(gstr, sizeof(gstr), "{%06x}%i - [%s]%s [%i]\n", col >>> 8, i + 1, tmp2, tmp, cache_get_row_int(i, 2, pSQL));
			}
			else format(gstr, sizeof(gstr), ""white"%i - [%s]%s [%i]\n", i + 1, tmp2, tmp, cache_get_row_int(i, 2, pSQL));
			strcat(finstring, gstr);
	    }
	    ShowPlayerDialog(playerid, TOP_GANGS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Top Gangs", finstring, "OK", "");
	}
	return 1;
}

YCMD:top(playerid, params[], help)
{
	new string[1024];
	strcat(string, "Richlist (/richlist)\nMost Wanteds (/wanteds)\nScore (/score)\nMost Kills (/kills)\nMost Deaths (/deaths)\nMost playing time (/toptime)\nOnline Gangs (/gangs)\nTop Gangs (/gtop)");
	strcat(string, "\nMost Reaction Wins (/reacts)\nMost Race Wins (/races)\nMost Derby Wins (/derbys)\nMost Fallout Wins (/fallouts)\nMost Gungame Wins (/gungames)");
	
	ShowPlayerDialog(playerid, TOPLIST_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Toplists", string, "Select", "Close");
	return 1;
}

YCMD:vcontrol(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return player_notice(playerid, "You must be driving a vehicle", "");
		}

		ShowDialog(playerid, VCONTROL_DIALOG);
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:label(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(PlayerData[playerid][VIPLabel] == Text3D:-1)
	    {
	        ShowDialog(playerid, LABEL_DIALOG);
	    }
	    else
	    {
			player_notice(playerid, "Label already attached", "/elabel to edit");
		}
	}
	else
	{
		Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:elabel(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(PlayerData[playerid][VIPLabel] != Text3D:-1)
	    {
	        ShowDialog(playerid, LABEL_DIALOG + 1);
	    }
	    else
	    {
		    player_notice(playerid, "No label attached", "");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:dlabel(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(PlayerData[playerid][VIPLabel] != Text3D:-1)
	    {
	        DestroyDynamic3DTextLabel(PlayerData[playerid][VIPLabel]);
	        PlayerData[playerid][VIPLabel] = Text3D:-1;
	        SCM(playerid, -1, ""er"Label removed!");
	    }
	    else
	    {
			SCM(playerid, -1, ""er"No label attached");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:trailer(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	    
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to attach a trailer!");
		}
		
		new vid = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vid);
		
		if(model == 403 || model == 514 || model == 515)
		{
			if(PlayerData[playerid][pTrailerVehicle] != INVALID_VEHICLE_ID)
			{
			    DetachTrailerFromVehicle(PlayerData[playerid][pTrailerVehicle]);
				DestroyVehicleEx(PlayerData[playerid][pTrailerVehicle]);
				PlayerData[playerid][pTrailerVehicle] = INVALID_VEHICLE_ID;
			}
		
		    new Float:p[4];
		    
			GetVehiclePos(vid, p[0], p[1], p[2]);
			GetVehicleZAngle(vid, p[3]);
			
			p[0] += (floatsin(-p[3], degrees) * -9);
			p[1] += (floatcos(-p[3], degrees) * -9);
			
			PlayerData[playerid][pTrailerVehicle] = CreateVehicleEx(435, p[0], p[1], p[2], p[3], 0, 0, -1);
			
			AttachTrailerToVehicle(PlayerData[playerid][pTrailerVehicle], vid);
			
			player_notice(playerid, "Trailer attached", "");
		}
		else
		{
		    SCM(playerid, -1, ""er"You need to be in a truck!");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:ramp(playerid, params[], help)
{
    if(PlayerData[playerid][e_vip] == 1)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
		}

		if(GetPVarInt(playerid, "Ramped") == 0)
		{
			SetPVarInt(playerid, "Ramped", 1);
			SCM(playerid, GREEN, "You have turned ramp spawning ON!");
	  		SCM(playerid, YELLOW, "Press 'FIRE' (CTRL) key in a vehicle to spawn a ramp");
	    	SCM(playerid, YELLOW, "To disable ramp spawning, type /ramp again");
		}
		else
		{
			SetPVarInt(playerid, "Ramped", 0);
	 		SCM(playerid, GREEN, "You have turned ramp spawning OFF!");
		}
	}
	else
	{
        Command_ReProcess(playerid, "/vip", false);
	}
    return 1;
}

YCMD:vmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	for(new ii = 0; ii < sizeof(g_SpawnAreas); ii++)
	{
	    if(IsPlayerInDynamicArea(playerid, g_SpawnAreas[ii]))
	    {
	        return player_notice(playerid, "Don't spawn vehicles here!", "");
	    }
	}
    
   	ShowDialog(playerid, VMENU_DIALOG);
	return 1;
}

YCMD:harefill(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(PlayerData[playerid][e_vip] == 1)
	{
	    if(PlayerData[playerid][bGod]) return SCM(playerid, -1, ""er"You need to disable GodMode first. (/god)");
	    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
	    ShowDialog(playerid, HAREFILL_DIALOG);
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:spectate(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 1 || IsPlayerAdmin(playerid) || PlayerData[playerid][e_vip] == 1)
	{
	    new otherid;
	 	if(sscanf(params, "r", otherid))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /spec <playerid>");
	  	}

	    if(otherid == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(otherid)) return SCM(playerid, -1, ""er"Player not connected!");

 		if(IsPlayerAvail(otherid) && otherid != playerid)
		{
			if(PlayerData[playerid][e_level] == 0 && PlayerData[playerid][e_vip] == 1 && PlayerData[otherid][e_level] > 0) return SCM(playerid, -1, ""er"You may not spectate admins");
			if(PlayerData[otherid][e_level] == MAX_ADMIN_LEVEL && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, ""er"You cannot use this command on this admin");
			if(gTeam[otherid] == SPEC) return SCM(playerid, -1, ""er"Player is spectating someone else");
			if(PlayerData[otherid][bIsDead]) return SCM(playerid, -1, ""er"Player is not alive");
			if(GetPlayerState(otherid) == PLAYER_STATE_SPECTATING) return SCM(playerid, -1, ""er"Player is in spectating state");
			if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != SPEC) return player_notice(playerid, "~w~Type ~y~/exit ~w~to leave first", "");

			if(gTeam[playerid] != SPEC)
			{
				CheckPlayerGod(playerid);
			}
			
  			new count = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == SPEC && PlayerData[i][SpecID] == otherid && i != playerid)
			    {
			        count++;
			    }
			}

			if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && gTeam[playerid] != SPEC)
			{
				GetPlayerPos(playerid, PlayerData[playerid][SpecX], PlayerData[playerid][SpecY], PlayerData[playerid][SpecZ]);
				GetPlayerFacingAngle(playerid, PlayerData[playerid][SpecA]);
   			}

			SetPlayerInterior(playerid, GetPlayerInterior(otherid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));

			gTeam[playerid] = SPEC;
            PlayerData[playerid][SpecID] = otherid;
   			
			TogglePlayerSpectating(playerid, true);

			if(IsPlayerInAnyVehicle(otherid))
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherid));
			else
				PlayerSpectatePlayer(playerid, otherid);

			if(count == 1)
			{
				format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) is also being spectated by another admin/VIP (/spectators)", __GetName(otherid), otherid);
                SCM(playerid, -1, gstr);
			}
			else if(count > 1)
			{
			    format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) is also spectated by %i other admins/VIPs (/spectators)", __GetName(otherid), otherid, count);
                SCM(playerid, -1, gstr);
			}

			player_notice(playerid, "Now spectating", "");
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:specoff(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] >= 1 || IsPlayerAdmin(playerid) || PlayerData[playerid][e_vip] == 1)
	{
        if(gTeam[playerid] == SPEC)
		{
		    ResetPlayerWorld(playerid);
		    PlayerData[playerid][SpecID] = INVALID_PLAYER_ID;
			TogglePlayerSpectating(playerid, false);
			DestoryDamageBox(playerid);
		}
		else
		{
			player_notice(playerid, "You're not spectating", "");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:freeze(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
		new player;
		if(sscanf(params, "r", player))
		{
			SCM(playerid, NEF_GREEN, "Usage: /freeze <playerid>");
			return 1;
	 	}
	 	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	 	
        if(IsPlayerAvail(player) && player != playerid)
		{
			if(PlayerData[player][e_level] > 0)
			{
				return SCM(playerid, -1, ""er"You cannot use this command on an admin");
			}
			if(gTeam[player] != gFREEROAM) return SCM(playerid, -1, ""er"Player is a minigame");

			SCM(player, RED, "You have been frozen by an admin");
			SCM(playerid, RED, "Player has been frozen");
			TogglePlayerControllable(player, false);
			PlayerData[player][bFrozen] = true;
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been frozen by %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			admin_broadcast(-1, gstr);
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:unfreeze(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 2)
	{
		new player;
		if(sscanf(params, "r", player))
		{
			SCM(playerid, NEF_GREEN, "Usage: /unfreeze <playerid>");
			return 1;
	 	}
	 	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	 	
   		if(IsPlayerAvail(player))
		{
		 	if(PlayerData[player][bFrozen])
	 		{
				TogglePlayerControllable(player, true);
				PlayerData[player][bFrozen] = false;
				SCM(player, GREEN, "You have been unfrozen by an admin");
				SCM(playerid, RED, "Player has been unfrozen");
			}
			else
			{
			    SCM(playerid, -1, ""er"Not possible to unfreeze him now");
			}
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:clearchat(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 3)
	{
		for(new i = 0; i < 22; i++)
		{
			SCMToAll(GREEN, " ");
		}
 	}
 	else
 	{
	 	SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:move(playerid, params[], help)
{
	if(gTeam[playerid] == gFREEROAM)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You cant use this command now!");
		if(PlayerData[playerid][e_level] >= 2)
		{
		    if(isnull(params))
			{
				SCM(playerid, NEF_GREEN, "Usage: /move <up / down / +x / -x / +y / -y / off>");
				return 1;
			}
			new Float:POS[3];
			if(strcmp(params, "up", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]+5);
				SetCameraBehindPlayer(playerid);
			}
			else if(strcmp(params, "down", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]-5);
				SetCameraBehindPlayer(playerid);
				}
			else if(strcmp(params, "+x", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0]+5, POS[1], POS[2]);
			}
			else if(strcmp(params, "-x", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0]-5, POS[1], POS[2]);
			}
			else if(strcmp(params, "+y", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1]+5, POS[2]);
			}
			else if(strcmp(params, "-y", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1]-5, POS[2]);
			}
		    else if(!strcmp(params, "off", true))
			{
				TogglePlayerControllable(playerid, true);
			}
			else
			{
				SCM(playerid, NEF_GREEN, "Usage: /move <up / down / +x / -x / +y / -y / off>");
			}
		}
		else
		{
			SCM(playerid, -1, NO_PERM);
		}
	}
	else
	{
 		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:cc(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, ""er"You have to be in a vehicle");

    new color1, color2;
    if(sscanf(params, "ii", color1, color2))
    {
        return SCM(playerid, NEF_GREEN, "Usage: /cc <color1 id> <color2 id>");
    }

	if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0)
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /cc <color1 id> <color2 id>");
	}

	if(PVSelect[playerid] != -1)
	{
	    if(GetPlayerVehicleID(playerid) == PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])
	    {
	        PlayerPVData[playerid][PVSelect[playerid]][e_color1] = color1;
	        PlayerPVData[playerid][PVSelect[playerid]][e_color2] = color2;
	        GivePlayerMoneyEx(playerid, -500);
		}
	}

	ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	player_notice(playerid, "Vehicle color changed", "");
	return 1;
}

YCMD:changename(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    ShowDialog(playerid, NAME_CHANGE_DIALOG);
	return 1;
}

YCMD:changepass(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);
	
    new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastPW] + COOLDOWN_CMD_CHANGEPASS) >= tick)
	{
    	return player_notice(playerid, "Command is on cooldown!", "");
	}

	if(sscanf(params, "s[143]", gstr))
	{
		SCM(playerid, NEF_GREEN, "Usage: /changepass <new pass>");
	    return 1;
	}
	if(strlen(gstr) < 4 || strlen(gstr) > 32)
	{
		SCM(playerid, -1, ""er"Incorrect password length. (4 - 32)");
		return 1;
	}

    SQL_UpdatePlayerPass(playerid, gstr);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You have successfully changed your password to %s", gstr);
	SCM(playerid, -1, gstr2);
	PlayerData[playerid][tickLastPW] = tick;
	return 1;
}

YCMD:serverstats(playerid, params[], help)
{
	ShowDialog(playerid, SERVERSTATS_DIALOG);
	return 1;
}

YCMD:mk(playerid, params[], help)
{
	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastMedkit] + COOLDOWN_CMD_MEDKIT) >= tick)
	{
    	return player_notice(playerid, "Command is on cooldown!", "");
	}
	if(PlayerData[playerid][e_medkits] <= 0)
	{
	    return player_notice(playerid, "You don't own any medkits", "");
	}
	if(PlayerData[playerid][bGod]) return SCM(playerid, -1, ""er"You can't use medkits with godmode!");
	
	new Float:Health;
	GetPlayerHealth(playerid, Health);
	if(Health >= 100.0)
	{
	    return SCM(playerid, -1, ""er"You are already at full health");
	}
	
	PlayerData[playerid][iMedkitTime] = 50;
	PlayerData[playerid][e_medkits]--;
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	
	PlayerData[playerid][tMedkit] = SetTimerEx("player_medkit_charge", 200, true, "i", playerid);
	
	InfoTD_MSG(playerid, 2500, "~y~~h~Medkit used!");
	PlayerData[playerid][tickLastMedkit] = tick;
	return 1;
}

YCMD:credits(playerid, params[], help)
{
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Gold Credits information", ""white"GC is a virtual currency used throughout all "SVRNAME" gameservers.\nGC can be used to buy in-game items and to add new features. It's a great way to enhance\nyour gaming experience.\n\n"nef_green"Go to "SVRURLWWW"/credits", "OK", "");
	return 1;
}

YCMD:info(playerid, params[], help)
{
	new string[512];
	strcat(string, ""white"Foundation\t"grey"Mellnik\n\t\tEpixel\n\n"white"Scripting\t"grey"Mellnik");
	strcat(string, "\n\n"white"Mapping\t"grey"Tuoppi\n\t\tMellnik\n\t\tAventator\n\t\tMicka\n\t\tLuggi\n\t\tImpulse");
	strcat(string, "\n\n"white"Web Dev.\t"grey"Epixel\n\t\tMellnik");
	strcat(string, "\n\n"white"Special Thanks\t"grey"Goldkiller\n\t\tChris"); // Yeah nigga ^^
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Credits/Info", string, "OK", "");
	return 1;
}

YCMD:stats(playerid, params[], help)
{
	new player1,
		player;

	if(sscanf(params, "r", player))
	{
		player1 = playerid;
	}
	else
	{
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		player1 = player;
	}

	if(IsPlayerAvail(player1))
	{
		new gangnam[21],
			string1[500],
			string2[355],
			string3[400],
			vip[5],
			pDeaths,
			finstring[sizeof(string1) + sizeof(string2) + sizeof(string3) + sizeof(vip) + 35];

 		if(PlayerData[player1][e_deaths] == 0)
	 	{
	 		pDeaths = 1;
	 	}
	 	else
	 	{
	 		pDeaths = PlayerData[player1][e_deaths];
	 	}

		if(PlayerData[player1][e_gangrank] == 0)
		{
			strcat(gangnam, "- None -");
		}
		else strcat(gangnam, PlayerData[player1][GangName]);

		if(PlayerData[player1][e_vip] != 0)
		{
		    strmid(vip, "Yes", 0, 5, 5);
		}
		else strmid(vip, "No", 0, 5, 5);

 		format(string1, sizeof(string1), ""ngs_blue"Statistics of player "white"%s (%i)\n\n\
	 	Kills:\t\t\t%i\nDeaths:\t\t\t%i\nK/D:\t\t\t%0.2f\nScore:\t\t\t%i\nMoney:\t\t\t$%s\nBank:\t\t\t$%s\nGold Credits:\t\t%sGC\n",
   			__GetName(player1),
   			PlayerData[player1][e_accountid],
	 		PlayerData[player1][e_kills],
        	PlayerData[player1][e_deaths],
        	Float:PlayerData[player1][e_kills] / Float:pDeaths,
        	GetPlayerScoreEx(player1),
        	number_format(GetPlayerMoneyEx(player1)),
        	number_format(PlayerData[player1][e_bank]),
			number_format(PlayerData[player1][e_credits]));

		format(string2, sizeof(string2), "Race wins:\t\t%i\nDerby wins:\t\t%i\nReaction wins:\t\t%i\nMath wins:\t\t%i\nTDM wins:\t\t%i\nFallout wins:\t\t%i\nGungame wins:\t\t%i\nEvent wins:\t\t%i\nTime until PayDay:\t%i minutes\n",
	   		PlayerData[player1][e_racewins],
	   		PlayerData[player1][e_derbywins],
	   		PlayerData[player1][e_reaction],
	   		PlayerData[player1][e_mathwins],
	   		PlayerData[player1][e_tdmwins],
	   		PlayerData[player1][e_falloutwins],
	   		PlayerData[player1][e_gungamewins],
	   		PlayerData[player1][e_eventwins],
	   		PlayerData[player1][e_payday]);

        format(string3, sizeof(string3), "Playing Time:\t\t%s\nGang:\t\t\t%s\nVIP:\t\t\t%s\nMedkits:\t\t%i\nHouses:\t\t%i\nBusinesses:\t\t%i\nWanteds:\t\t%i\nLast log in:\t\t%s",
            GetPlayingTimeFormat(player1),
			gangnam,
			vip,
			PlayerData[player1][e_medkits],
			PlayerData[player1][e_houses],
			GetPlayerBusinessCount(__GetName(player1)),
			PlayerData[player1][e_wanteds],
			UTConvert(PlayerData[player1][e_lastlogin]));
			
		if(islogged(player1))
		{
			strcat(string3, "\nRegister Date:\t\t");
			strcat(string3, UTConvert(PlayerData[player1][e_regdate]));
		}
			
		if(PlayerData[player1][BoostDeplete] != 0)
		{
		    strcat(string3, "\nBoost will end on:\t\t");
		    strcat(string3, UTConvert(PlayerData[player1][BoostDeplete]));
		}
			
		strcat(finstring, string1);
		strcat(finstring, string2);
		strcat(finstring, string3);

		if(!islogged(playerid))
		{
		    strcat(finstring, "\n\n"nef_yellow"You are not registered!\nType /register to create an account.");
		}

		ShowPlayerDialog(playerid, STATS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Player Statistics", finstring, "OK", "");
	}
	else
	{
		SCM(playerid, -1, ""er"Player is not available!");
	}
	return 1;
}

YCMD:healall(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
	   	for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsPlayerAvail(i) && i != MAX_ADMIN_LEVEL && gTeam[i] == gFREEROAM)
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				SetPlayerHealth(i, 100.0);
				
				player_notice(i, "Health for all!", "");
			}
		}

		format(gstr, sizeof(gstr), "Admin %s(%i) healed all players", __GetName(playerid), playerid);
		SCMToAll(BLUE, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:armourall(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
	   	for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsPlayerAvail(i) && i != MAX_ADMIN_LEVEL && gTeam[i] == gFREEROAM)
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				SetPlayerArmour(i, 100.0);
				PlayerData[i][bwSuspect] |= SUSPECT_VALID_ARMOR;
				
				player_notice(i, "Armor for all!", "");
			}
		}

		format(gstr, sizeof(gstr), "Admin %s(%i) restored all players armour", __GetName(playerid), playerid);
		SCMToAll(BLUE, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:pornos(playerid, params[], help)
{
    SCM(playerid, RED, "Du kannst mir mal fett ein kauen, kein Godfather.");
	return 1;
}

YCMD:hmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE) return SCM(playerid, RED, NOT_AVAIL);
    new string[512], tmp[64];
    
    for(new i = 0; i < MAX_PLAYER_HOUSES; i++)
    {
        if(i > PlayerData[playerid][e_addhouseslots])
        {
            format(tmp, sizeof(tmp), "House Slot %i "red"(Locked)\n", i + 1);
        }
        else
		{
		    if(i < PlayerData[playerid][e_houses])
		    {
			    format(tmp, sizeof(tmp), "House Slot %i "green2"(Used)\n", i + 1);
		    }
		    else
		    {
			    format(tmp, sizeof(tmp), "House Slot %i\n", i + 1);
		    }
		}
		strcat(string, tmp);
    }

    ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG, DIALOG_STYLE_LIST, ""nef" :: House Menu", string, "Select", "Cancel");
	return 1;
}

YCMD:bmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE) return SCM(playerid, RED, NOT_AVAIL);
    new string[512], tmp[64];

    for(new i = 0; i < MAX_PLAYER_BUSINESSES; i++)
    {
        if(i > PlayerData[playerid][e_addbizzslots])
        {
            format(tmp, sizeof(tmp), "Business Slot %i "red"(Locked)\n", i + 1);
        }
        else
		{
		    if(i < GetPlayerBusinessCount(__GetName(playerid)))
		    {
			    format(tmp, sizeof(tmp), "Business Slot %i "green2"(Used)\n", i + 1);
		    }
		    else
		    {
			    format(tmp, sizeof(tmp), "Business Slot %i\n", i + 1);
		    }
		}
		strcat(string, tmp);
    }

    ShowPlayerDialog(playerid, DIALOG_BUSINESS, DIALOG_STYLE_LIST, ""nef" :: Business Menu", string, "Select", "Cancel");
	return 1;
}

YCMD:settings(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(gTeam[playerid] != gFREEROAM) return SCM(playerid, RED, NOT_AVAIL);
    ShowDialog(playerid, SETTINGS_DIALOG);
	return 1;
}

YCMD:advsave(playerid, params[], help)
{
    if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL && IsPlayerAdmin(playerid))
    {
	    new File:hFile = fopen("/Other/advsave.txt", io_append),
	        Float:POS[4];

		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), POS[3]);

	    format(gstr2, sizeof(gstr2), "{%.4f, %.4f, %.4f, %.4f, false},\r\n", POS[0], POS[1], POS[2], POS[3]);
	    fwrite(hFile, gstr2);
	    fclose(hFile);
	}
	return 1;
}

YCMD:m(playerid, params[], help)
{
	new string[1024];
	format(string, sizeof(string), "Derby (/derby) "green"[%i/20]\n"white"CNR (/cnr) "green"[%i]\n"white"Race (/race) "green"[%i/12]\n"white"Rocket DM (/rocket) "green"[%i]",
	    T_DerbyPlayers,
	    T_CNRPlayers,
	    T_RacePlayers,
        T_RocketDMPlayers);

	format(gstr2, sizeof(gstr2), "\n"white"Fallout (/fallout) "green"[%i]\n"white"Gungame (/gungame) "green"[%i]\nMinigun (/minigun) "green"[%i]",
        T_FalloutPlayers,
        T_GunGamePlayers,
        T_MinigunPlayers);
        
	strcat(string, gstr2);

	format(gstr2, sizeof(gstr2), "\n"white"Sniper (/sniper) "green"[%i]\n"white"Death Match (/dm1-4)\n"white"Team Death Match (/tdm) "green"[%i]\n"white"WAR (/war) "green"[%i]",
	    T_SniperPlayers,
	    T_TDMPlayers,
	    T_WarPlayers);
	    
	strcat(string, gstr2);
	
	format(gstr2, sizeof(gstr2), "\n"white"Sawn DM (/sawn) "green"[%i]",
	    T_SawnPlayers);
	    
	strcat(string, gstr2);
	
	ShowPlayerDialog(playerid, HELP_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" :: Minigames", string, "Select", "Close");
	return 1;
}

YCMD:opengate(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL || PlayerData[playerid][e_vip] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, -205.68774, -2285.10693, 30.65776)) return SCM(playerid, -1, ""er"You need to be closer");
		if(IsMellnikGateMoving) return SCM(playerid, -1, ""er"Gate is currently working");
		IsMellnikGateMoving = true;
		MoveDynamicObject(MellnikGate, -211.60184, -2275.91821, 30.65776, 1.50);
  	}
	else
	{
        Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:closegate(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL || PlayerData[playerid][e_vip] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, -205.68774, -2285.10693, 30.65776)) return SCM(playerid, -1, ""er"You need to be closer");
		if(IsMellnikGateMoving) return SCM(playerid, -1, ""er"Gate is currently working");
		IsMellnikGateMoving = true;
		MoveDynamicObject(MellnikGate, -205.68774, -2285.10693, 30.65776, 1.50);
  	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:rampup(playerid, params[], help)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, -153.74190, -2210.68457, 2.17288)) return SCM(playerid, -1, ""er"You need to be closer");
    if(IsMellnikRampMoving) return SCM(playerid, -1, ""er"Ramp is currently working");
    IsMellnikRampMoving = true;
    MoveDynamicObject(MellnikRamp, -153.74190, -2210.68457, 27.16690, 2.50);
	return 1;
}

YCMD:rampdown(playerid, params[], help)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, -153.74190, -2210.68457, 27.16690)) return SCM(playerid, -1, ""er"You need to be closer");
    if(IsMellnikRampMoving) return SCM(playerid, -1, ""er"Ramp is currently working");
    IsMellnikRampMoving = true;
    MoveDynamicObject(MellnikRamp, -153.74190, -2210.68457, 2.17288, 2.50);
	return 1;
}

YCMD:mellnik(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
		switch(YHash(__GetName(playerid), false))
		{
		    case _I(m,e,l,l,n,i,k):
		    {
				SetPlayerSkin(playerid, 295);
			    SetSpawnInfoEx(playerid, NO_TEAM, 295, 0.0, 0.0, 10.0, 0.0);
			    SCM(playerid, -1, "{FFE600}Yes, Sir!");
		    }
		    default: SCM(playerid, -1, NO_PERM);
		}
  	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:chris(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL)
	{
		switch(YHash(__GetName(playerid), false))
		{
		    case _I(c,h,r,i,s):
		    {
				SetPlayerSkin(playerid, 5);
			    SetSpawnInfoEx(playerid, NO_TEAM, 5, 0.0, 0.0, 10.0, 0.0);
			    SCM(playerid, -1, "fucking jesus you like fried fucking chicken! LOL");
		    }
		    default: SCM(playerid, -1, NO_PERM);
		}
  	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:saveskin(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerData[playerid][e_skinsave] == -1)
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Skin saved! Skipping class selection next login. Use /deleteskin to remove it");
	}
	else
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Saved skin overwritten! Skipping class selection next login. Use /deleteskin to remove it");
	}
	new skin = GetPlayerSkin(playerid);
	
	if(IsValidSkin(skin)) {
    	PlayerData[playerid][e_skinsave] = skin;
	} else {
		player_notice(playerid, "Invalid skin id", "");
	}
	return 1;
}

YCMD:deleteskin(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerData[playerid][e_skinsave] == -1)
	{
	    player_notice(playerid, "You have no saved skin", "");
	}
	else
	{
	    player_notice(playerid, "Saved skin has been deleted", "");
	}
    PlayerData[playerid][e_skinsave] = -1;
	return 1;
}

YCMD:savecolor(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerData[playerid][e_color] == 0)
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Color saved! It will be loaded on next login. Use /deletecolor to remove it");
	}
	else
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Saved color overwritten! It will be loaded on next login. Use /deletecolor to remove it");
	}
    PlayerData[playerid][e_color] = GetPlayerColor(playerid);
	return 1;
}

YCMD:deletecolor(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerData[playerid][e_color] == 0)
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"You have no saved color yet!");
	}
	else
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Color has been deleted!");
	}
    PlayerData[playerid][e_color] = 0;
	return 1;
}

YCMD:new(playerid, params[], help)
{
	HTTP(playerid, HTTP_GET, "www.nefserver.net/gateway/api.php?a=news", "", "OnNewsReceive");
	return 1;
}

YCMD:lotto(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(!bLottoActive) return SCM(playerid, -1, ""er"No lottery active!");
	if(GetPlayerInterior(playerid) != 17) return SCM(playerid, -1, ""er"You need to be in a 24/7 shop!");
	if(PlayerData[playerid][DrawnNumber] != -1) return SCM(playerid, -1, ""er"You already got a lotto!");
	if(GetPlayerMoneyEx(playerid) < 500) return SCM(playerid, -1, ""er"A lotto costs $500!");
	
	new lotto;
	if(sscanf(params, "i", lotto))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /lotto <1-75>");
	}
	
	if(lotto < 1 || lotto > 75) return SCM(playerid, -1, ""er"Invalid lotto number");
	if(Iter_Contains(iterLottoNumberPool, lotto)) return SCM(playerid, -1, ""er"This lotto number is already in use!");
	
	PlayerData[playerid][DrawnNumber] = lotto;
	Iter_Add(iterLottoNumberPool, PlayerData[playerid][DrawnNumber]);
	
	GivePlayerMoneyEx(playerid, -500);
	
	format(gstr, sizeof(gstr), "~y~%i", PlayerData[playerid][DrawnNumber]);
	player_notice(playerid, "Your lotto number:", gstr, 5000);
	return 1;
}

YCMD:answer(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new answer;
	if(sscanf(params, "i", answer))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /answer <answer>");
	}
	
	if(mathsAnswered == -1)
	{
	    SCM(playerid, -1, ""RED_E"[MATHS] "white"Sorry, no maths is in progress!");
	    return true;
	}

	if(mathsAnswered == 1 && answer == mathsAnswer)
	{
	    if(answer == mathsAnswer)
	    {
	    	format(gstr, sizeof(gstr), ""RED_E"[MATHS] "white"Sorry, you're too late, although your answer(%i) would have been right!", answer);
		}
		else
		{
		    format(gstr, sizeof(gstr), ""RED_E"[MATHS] "white"Sorry, you're too late, even though your answer(%i) would have been wrong!", answer);
		}
		SCM(playerid, -1, gstr);
	    return true;
	}

	if(answer > mathsAnswer || answer < mathsAnswer)
	{
	    format(gstr, sizeof(gstr), ""RED_E"[MATHS] "white"Sorry, your answer(%i) to %s is wrong!", answer, mathsCurrent);
	    SCM(playerid, -1, gstr);
		return true;
	}

	format(gstr, sizeof(gstr), ""SVRSC" "RED_E"[MATHS] :: {%06x}%s(%i) "white"has correctly answered %s (answer: %i) winning 4 score and $%s!", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, mathsCurrent, answer, number_format(mathsAward));
	SCMToAll(-1, gstr);

	GivePlayerScoreEx(playerid, 4, true, true);
	GivePlayerMoneyEx(playerid, mathsAward, true, true);
	PlayerData[playerid][e_mathwins]++;
	
    if(PlayerAchData[playerid][e_ach_biocalc][0] == 0 && PlayerData[playerid][e_mathwins] >= 40)
    {
        GivePlayerAchievement(playerid, e_ach_biocalc, "Biocalc", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	}

	mathsAnswered = 1;
	player_notice(playerid, "~p~Congratulations!", "You have answered the maths question correctly!", 4000);

	format(gstr, sizeof(gstr), "Won a math challenge.\n%s", mathsCurrent, answer);
	SetPlayerChatBubble(playerid, gstr, NEF_GREEN, 40.0, 12000);
	return true;
}

YCMD:weather(playerid, params[], help)
{
	extract params -> new weather; else
	{
		return SCM(playerid, NEF_GREEN, "Usage: /weather <weather id>");
	}

	SetPlayerWeather(playerid, weather);

	format(gstr, sizeof(gstr), "You've set your weather to '%i'", weather);
	SCM(playerid, BLUE, gstr);
    SCM(playerid, NEF_GREEN, "-> "PINK_E"Weather set! Use /rtime to reset your time and or weather!");
	return 1;
}

YCMD:cashfall(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
		extract params -> new money; else
		{
			return SCM(playerid, NEF_GREEN, "Usage: /cashfall <cash>");
		}

		if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL) {
			if(money > 50000 || money < 1) return SCM(playerid, -1, ""er"Cash: $1 - $50,000"); // Needs to be increased for eventful requirements. 
		} else {
		    if(money > 10000 || money < 1) return SCM(playerid, -1, ""er"Cash: $1 - $10,000");
		}

        format(gstr, sizeof(gstr), "~g~+$%i USD", money);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerAvail(i))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GivePlayerMoneyEx(i, money, false, true);
				player_notice(i, "CASHFALL", gstr, 4000);
			}
		}

		format(gstr, sizeof(gstr), "Admin %s(%i) has given all players $%s", __GetName(playerid), playerid, number_format(money));
		SCMToAll(YELLOW, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:scorefall(playerid, params[], help)
{
	if(PlayerData[playerid][e_level] >= 4)
	{
		extract params -> new score; else
		{
			return SCM(playerid, NEF_GREEN, "Usage: /scorefall <score>");
		}

		if(PlayerData[playerid][e_level] == MAX_ADMIN_LEVEL) {
			if(score > 100 || score < 1) return SCM(playerid, -1, ""er"Score: 1 - 100");
		} else {
		    if(score > 100 || score < 1) return SCM(playerid, -1, ""er"Score: 1 - 25");
		}

        format(gstr, sizeof(gstr), "~y~+%i score", score);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerAvail(i))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GivePlayerScoreEx(i, score, true, true);
				player_notice(i, "SCOREFALL", gstr, 4000);
			}
		}
		
		format(gstr, sizeof(gstr), "Admin %s(%i) has given all players %i Score", __GetName(playerid), playerid, score);
		SCMToAll(YELLOW, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ignore(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    new player;
	if(sscanf(params, "r", player))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /ignore <playerid>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
	if(player == playerid) return SCM(playerid, -1, ""er"You cannot ignore yourself!");
	if(PlayerData[player][e_level] > 0) return SCM(playerid, -1, ""er"You cannot ignore Admins!");

	if(Iter_Contains(iterPlayerIgnore[playerid], player))
	{
		format(gstr, sizeof(gstr), ""er"You are already ignoring %s(%i)! Use /unignore to unignore.", __GetName(player), player);
		SCM(playerid, -1, gstr);
		return 1;
	}

	Iter_Add(iterPlayerIgnore[playerid], player);

	format(gstr, sizeof(gstr), "[IGNORE] %s(%i) is now ignored by you.", __GetName(player), player);
	SCM(playerid, YELLOW, gstr);
	SCM(playerid, -1, ""er"Type /unignore to recieve PMs from this player.");
	return 1;
}

YCMD:unignore(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new player;
   	if(sscanf(params, "r", player))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /unignore <playerid>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(!Iter_Contains(iterPlayerIgnore[playerid], player))
	{
		format(gstr, sizeof(gstr), ""er"You aren't ignoring %s(%i)! Use /ignore to ignore.", __GetName(player), player);
		SCM(playerid, -1, gstr);
		return 1;
	}

	Iter_Remove(iterPlayerIgnore[playerid], player);

	format(gstr, sizeof(gstr), "[IGNORE] %s(%i) is not ignored by you anymore.", __GetName(player), player);
	SCM(playerid, YELLOW, gstr);
	return true;
}

YCMD:tpm(playerid, params[], help)
{
	if(GetPVarInt(playerid, "inCNR") == 0)
	{
		SCM(playerid, COLOR_YELLOW, "ERROR: "GREY2_E"You must be in a CNR minigame to use this command!");
		return true;
	}

	if(isnull(params))
    {
	    SCM(playerid, NEF_GREEN, "Usage: /tpm <message>");
	    return true;
	}
	
	if(IsAd(params))
	{
	  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, params, __GetIP(playerid));
		admin_broadcast(RED, gstr);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}
	
	if(GetPVarInt(playerid, "Cop") != 0)
	{
	    format(gstr, sizeof(gstr), "[TPM] "LB_E"%s(%d): "YELLOW_E"%s", __GetName(playerid), playerid, params);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPVarInt(i, "Cop") != 0)
			{
				SCM(i, COLOR_BLUE, gstr);
			}
		}
 	}
 	else if(GetPVarInt(playerid, "Robber") != 0)
 	{
 	    format(gstr, sizeof(gstr), "[TPM] "ORANGE_E"%s(%d): "YELLOW_E"%s", __GetName(playerid), playerid, params);
 		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPVarInt(i, "Robber") != 0)
			{
				SCM(i, COLOR_BLUE, gstr);
			}
		}
 	}
 	return true;
}

YCMD:givecash(playerid, params[], help)
{
	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastGiveCash] + COOLDOWN_CMD_GIVECASH) >= tick)
		{
	    	return player_notice(playerid, "Command is on cooldown!", "");
		}
	}
	
	if(GetPlayerScore(playerid) < 500) return player_notice(playerid, "Command requires 500 score!", "");
	
	new player, cash, reason[100];
	if(sscanf(params, "ris[99]", player, cash, reason))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /givecash <playerid> <money> <reason>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(IsPlayerAvail(player))
	{
    	if(GetPlayerMoneyEx(playerid) < cash)
		{
			return SCM(playerid, RED, "You don't have that much!");
		}
    	if(cash < 100 || cash > 250000)
		{
			return SCM(playerid, YELLOW, "Info: $100 - $250,000");
		}
    	if(player == playerid)
		{
			return SCM(playerid, RED, "You can't pay yourself");
		}
		if(!strcmp(__GetIP(playerid), __GetIP(player), true))
		{
		    return SCM(playerid, RED, "The player has the same ip as you.");
		}
		if(GetPlayerScore(player) < 500) return SCM(playerid, -1, ""er"The player must have > 500 score.");

      	GivePlayerMoneyEx(playerid, -cash);
      	GivePlayerMoneyEx(player, cash);
        format(gstr, sizeof(gstr), "Info: %s(%i) paid you $%s reason: %s", __GetName(playerid), playerid, number_format(cash), reason);
        SCM(player, YELLOW, gstr);
        SCM(playerid, YELLOW, "Successfully paid the money!");
		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) paid $%s to %s reason: %s", __GetName(playerid), playerid, number_format(cash), __GetName(player), reason);
		admin_broadcast(-1, gstr);
		print(gstr);
    }
    else
    {
        SCM(playerid, -1, ""er"Player is not connected");
    }
    
    PlayerData[playerid][tickLastGiveCash] = tick;
	return 1;
}

YCMD:pm(playerid, params[], help)
{
	if(PlayerData[playerid][bMuted])
	{
	    SCM(playerid, RED, "You are muted! Please wait until the time is over!");
	    return 0;
	}

	new player, msg[144];
	if(sscanf(params, "rs[143]", player, msg))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /pm <playerid> <message>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
	new tick = GetTickCountEx();
	if((PlayerData[playerid][tickLastPM] + COOLDOWN_CMD_PM) >= tick)
	{
	    return SCM(playerid, -1, ""nef" Please wait before sending a message again");
	}
    PlayerData[playerid][tickLastPM] = tick;

	if(IsAd(msg))
	{
	  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, msg, __GetIP(playerid));
		admin_broadcast(RED, gstr);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}

	if(!IsPlayerAvail(player))
	{
		return SCM(playerid, -1, ""er"Player is not connected!");
	}
	if(player == playerid)
	{
	    return SCM(playerid, -1, ""er"You can't pm yourself");
	}
	if(Iter_Contains(iterPlayerIgnore[player], playerid))
	{
	    return SCM(playerid, -1, ""er"This player has blocked you from PMing him");
	}
	
	TextDrawShowForPlayer(playerid, CheckTD);
	TextDrawShowForPlayer(player, NewMsgTD);
	SetTimerEx("hideMsgTD", 3000, false, "i", player);
	SetTimerEx("hideCheck", 3000, false, "i", playerid);
	
	if(!PlayerData[playerid][bCaps])
	{
	    UpperToLower(msg);
	}
	
	format(gstr, sizeof(gstr), "{26FF00}***[PM] from %s(%i): %s", __GetName(playerid), playerid, msg);
    SCM(player, YELLOW, gstr);
	format(gstr, sizeof(gstr), "{26FF00}>>>[PM] to %s(%i): %s", __GetName(player), player, msg);
	SCM(playerid, YELLOW, gstr);
	SetPVarInt(player, "LastID", playerid);

   	format(gstr, sizeof(gstr), "~g~~h~~h~PM from ~y~~h~%s(%i)", __GetName(playerid), playerid);
	InfoTD_MSG(player, 3500, gstr);
	format(gstr, sizeof(gstr), "~g~~h~~h~PM sent to ~b~~h~~h~%s(%i)!", __GetName(player), player);
	InfoTD_MSG(playerid, 3500, gstr);

	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);

	if(IsPlayerOnDesktop(player))
	    SCM(playerid, -1, ""er"This player is on desktop and may not receive your message");
	else
	    PlayerPlaySound(player, 1057, 0.0, 0.0, 0.0);

	format(gstr, sizeof(gstr), "[PM] from %s(%i) to %s(%i): %s", __GetName(playerid), playerid, __GetName(player), player, msg);
	admin_broadcast(GREY, gstr);
	return 1;
}

YCMD:r(playerid, params[], help)
{
    if(GetPVarInt(playerid, "LastID") == INVALID_PLAYER_ID)
	{
		return SCM(playerid, -1, ""er"Noone has send you a message yet");
	}

	extract params -> new string:msg[128]; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /r <message>");
	}

	if(IsAd(msg))
	{
	  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, msg, __GetIP(playerid));
		admin_broadcast(RED, gstr);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}
	
	new lID = GetPVarInt(playerid, "LastID");
	if(lID == INVALID_PLAYER_ID || !IsPlayerAvail(lID))
	{
		return SCM(playerid, -1, ""er"Player is not connected!");
	}
	if(Iter_Contains(iterPlayerIgnore[lID], playerid))
	{
	    return SCM(playerid, -1, ""er"This player has blocked you from PMing him");
	}
	
	if(!PlayerData[playerid][bCaps])
	{
	    UpperToLower(msg);
	}
	
	format(gstr, sizeof(gstr), "{26FF00}***[PM] from %s(%i): %s", __GetName(playerid), playerid, msg);
    SCM(lID, YELLOW, gstr);
	format(gstr, sizeof(gstr), "{26FF00}>>>[PM] to %s(%i): %s", __GetName(lID), lID, msg);
	SCM(playerid, YELLOW, gstr);
	SetPVarInt(lID, "LastID", playerid);

	TextDrawShowForPlayer(playerid, CheckTD);
	TextDrawShowForPlayer(lID, NewMsgTD);
	SetTimerEx("hideMsgTD", 3000, false, "i", lID);
	SetTimerEx("hideCheck", 3000, false, "i", playerid);

   	format(gstr, sizeof(gstr), "~g~~h~~h~PM from ~y~~h~%s(%i)", __GetName(playerid), playerid);
	InfoTD_MSG(lID, 3500, gstr);
	format(gstr, sizeof(gstr), "~g~~h~~h~PM sent to ~b~~h~~h~%s(%i)!", __GetName(lID), lID);
	InfoTD_MSG(playerid, 3500, gstr);

	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);

	if(IsPlayerOnDesktop(lID))
	    SCM(playerid, -1, ""er"This player is on desktop and may not receive your message");
	else
	    PlayerPlaySound(lID, 1057, 0.0, 0.0, 0.0);

	format(gstr, sizeof(gstr), ""grey"[PM] from %s(%i) to %s(%i): %s", __GetName(playerid), playerid, __GetName(lID), lID, msg);
	admin_broadcast(GREY, gstr);
	return 1;
}

YCMD:toggletoys(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);
	
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);

	if(PlayerData[playerid][bShowToys])
	{
	    RemovePlayerToys(playerid);
	    player_notice(playerid, "Toys:", "~r~OFF");
	}
	else if(!PlayerData[playerid][bShowToys])
	{
	    AttachPlayerToys(playerid);
	    player_notice(playerid, "Toys:", "~g~ON");
	}

	PlayerData[playerid][bShowToys] = !PlayerData[playerid][bShowToys];
	return 1;
}

YCMD:toggletp(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);

	if(PlayerData[playerid][bAllowPlayerTeleport])
	{
	    player_notice(playerid, "Teleport:", "~r~OFF");
	}
	else if(!PlayerData[playerid][bAllowPlayerTeleport])
	{
	    player_notice(playerid, "Teleport:", "~g~ON");
	}

	PlayerData[playerid][bAllowPlayerTeleport] = !PlayerData[playerid][bAllowPlayerTeleport];
	return 1;
}

YCMD:toys(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please exit your vehicle first.");

	new string[512], tmp[64];

	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(i > PlayerData[playerid][e_addtoyslots] + 4)
	    {
		    format(tmp, sizeof(tmp), "Slot %i "red"(Locked)\n", i + 1);
	    }
	    else
	    {
		    if(PlayerToyData[playerid][i][toy_model] == 0)
			{
			    format(tmp, sizeof(tmp), "Slot %i\n", i + 1);
			}
			else
			{
			    format(tmp, sizeof(tmp), "Slot %i "green2"(Used)\n", i + 1);
			}
		}
		strcat(string, tmp);
	}

	ShowPlayerDialog(playerid, TOY_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Player Toys", string, "Select", "Cancel");
	return 1;
}

YCMD:achs(playerid, params[], help)
{
	new otherplayer, player;
	
	if(sscanf(params, "r", otherplayer)) {
	    player = playerid;
	} else {
	    if(otherplayer == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(otherplayer)) return SCM(playerid, -1, ""er"Player not connected!");
	
		player = otherplayer;
	}

	if(IsPlayerAvail(player))
	{
		new tmp[E_PLAYER_ACH_DATA][10],
			finstring[2048];
			
		for(new i = 0; E_PLAYER_ACH_DATA:i < E_PLAYER_ACH_DATA; i++)
		{
		    if(PlayerAchData[player][E_PLAYER_ACH_DATA:i][0] == 1)
		    {
		        tmp[E_PLAYER_ACH_DATA:i] = ""nef_green"X";
		        
		        switch(E_PLAYER_ACH_DATA:i)
		        {
		            case 0: format(gstr, sizeof(gstr), ""white"[%s"white"] Styler -> %s\n", tmp[e_ach_styler], UTConvert(PlayerAchData[player][e_ach_styler][1]));
		            case 1: format(gstr, sizeof(gstr), ""white"[%s"white"] Grim Reaper -> %s\n", tmp[e_ach_grimreaper], UTConvert(PlayerAchData[player][e_ach_grimreaper][1]));
		            case 2: format(gstr, sizeof(gstr), ""white"[%s"white"] Mass Killer -> %s\n", tmp[e_ach_masskiller], UTConvert(PlayerAchData[player][e_ach_masskiller][1]));
		            case 3: format(gstr, sizeof(gstr), ""white"[%s"white"] Elite Racer -> %s\n", tmp[e_ach_eliteracer], UTConvert(PlayerAchData[player][e_ach_eliteracer][1]));
		            case 4: format(gstr, sizeof(gstr), ""white"[%s"white"] Too Fast -> %s\n", tmp[e_ach_toofast], UTConvert(PlayerAchData[player][e_ach_toofast][1]));
		            case 5: format(gstr, sizeof(gstr), ""white"[%s"white"] Score Whore -> %s\n", tmp[e_ach_scorewhore], UTConvert(PlayerAchData[player][e_ach_scorewhore][1]));
		            case 6: format(gstr, sizeof(gstr), ""white"[%s"white"] Destroyer -> %s\n", tmp[e_ach_destroyer], UTConvert(PlayerAchData[player][e_ach_destroyer][1]));
		            case 7: format(gstr, sizeof(gstr), ""white"[%s"white"] Rest in Peace -> %s\n", tmp[e_ach_restinpeace], UTConvert(PlayerAchData[player][e_ach_restinpeace][1]));
		            case 8: format(gstr, sizeof(gstr), ""white"[%s"white"] Silent Killer -> %s\n", tmp[e_ach_silentkiller], UTConvert(PlayerAchData[player][e_ach_silentkiller][1]));
		            case 9: format(gstr, sizeof(gstr), ""white"[%s"white"] One Shot Two Kills -> %s\n", tmp[e_ach_oneshot2kills], UTConvert(PlayerAchData[player][e_ach_oneshot2kills][1]));
		            case 10: format(gstr, sizeof(gstr), ""white"[%s"white"] Deep Impact -> %s\n", tmp[e_ach_deepimpact], UTConvert(PlayerAchData[player][e_ach_deepimpact][1]));
		            case 11: format(gstr, sizeof(gstr), ""white"[%s"white"] Skydiver -> %s\n", tmp[e_ach_skydiver], UTConvert(PlayerAchData[player][e_ach_skydiver][1]));
		            case 12: format(gstr, sizeof(gstr), ""white"[%s"white"] Biker -> %s\n", tmp[e_ach_biker], UTConvert(PlayerAchData[player][e_ach_biker][1]));
		            case 13: format(gstr, sizeof(gstr), ""white"[%s"white"] BMX Master -> %s\n", tmp[e_ach_bmxmaster], UTConvert(PlayerAchData[player][e_ach_bmxmaster][1]));
		            case 14: format(gstr, sizeof(gstr), ""white"[%s"white"] Settled -> %s\n", tmp[e_ach_settled], UTConvert(PlayerAchData[player][e_ach_settled][1]));
		            case 15: format(gstr, sizeof(gstr), ""white"[%s"white"] Biocalc -> %s\n", tmp[e_ach_biocalc], UTConvert(PlayerAchData[player][e_ach_biocalc][1]));
		            case 16: format(gstr, sizeof(gstr), ""white"[%s"white"] Made Man -> %s\n", tmp[e_ach_mademan], UTConvert(PlayerAchData[player][e_ach_mademan][1]));
				}
		    }
		    else
		    {
		        tmp[E_PLAYER_ACH_DATA:i] = ""x_red_l"X";
		        
		        switch(E_PLAYER_ACH_DATA:i)
		        {
		            case 0: format(gstr, sizeof(gstr), ""white"[%s"white"] Styler -> Buy a toy\n", tmp[e_ach_styler]);
		            case 1: format(gstr, sizeof(gstr), ""white"[%s"white"] Grim Reaper -> Make 300 kills\n", tmp[e_ach_grimreaper]);
		            case 2: format(gstr, sizeof(gstr), ""white"[%s"white"] Mass Killer -> Do a 30 Kill Streak\n", tmp[e_ach_masskiller]);
		            case 3: format(gstr, sizeof(gstr), ""white"[%s"white"] Elite Racer -> Win 10 races\n", tmp[e_ach_eliteracer]);
		            case 4: format(gstr, sizeof(gstr), ""white"[%s"white"] Too Fast -> Win 10 Reaction Test\n", tmp[e_ach_toofast]);
		            case 5: format(gstr, sizeof(gstr), ""white"[%s"white"] Score Whore -> Get 2000 score\n", tmp[e_ach_scorewhore]);
		            case 6: format(gstr, sizeof(gstr), ""white"[%s"white"] Destroyer -> Win 20 derbys\n", tmp[e_ach_destroyer]);
		            case 7: format(gstr, sizeof(gstr), ""white"[%s"white"] Rest in Peace -> Die 50 times\n", tmp[e_ach_restinpeace]);
		            case 8: format(gstr, sizeof(gstr), ""white"[%s"white"] Silent Killer -> Kill someone with a knife\n", tmp[e_ach_silentkiller]);
		            case 9: format(gstr, sizeof(gstr), ""white"[%s"white"] One Shot Two Kills -> Win 10 gungames\n", tmp[e_ach_oneshot2kills]);
		            case 10: format(gstr, sizeof(gstr), ""white"[%s"white"] Deep Impact -> Win 10 Fallout games\n", tmp[e_ach_deepimpact]);
		            case 11: format(gstr, sizeof(gstr), ""white"[%s"white"] Skydiver -> Win /skydive and /skydive2 in a row\n", tmp[e_ach_skydiver]);
		            case 12: format(gstr, sizeof(gstr), ""white"[%s"white"] Biker -> Win /bikec\n", tmp[e_ach_biker]);
		            case 13: format(gstr, sizeof(gstr), ""white"[%s"white"] BMX Master -> Win /bmx\n", tmp[e_ach_bmxmaster]);
		            case 14: format(gstr, sizeof(gstr), ""white"[%s"white"] Settled -> Purchase a house\n", tmp[e_ach_settled]);
		            case 15: format(gstr, sizeof(gstr), ""white"[%s"white"] Biocalc -> Solve 40 math questions\n", tmp[e_ach_biocalc]);
		            case 16: format(gstr, sizeof(gstr), ""white"[%s"white"] Made Man -> Rise a business to level 20\n", tmp[e_ach_mademan]);
				}
		    }
		    
		    strcat(finstring, gstr);
		}

		if(player == playerid) strcat(finstring, "\n"white"Use /achs <playerid> to see someone else's achievements");

		ShowPlayerDialog(playerid, ACHS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Achievements", finstring, "OK", "");
	}
	else
	{
		SCM(playerid, -1, ""er"Player is not available");
	}
	return 1;
}

YCMD:c(playerid, params[], help)
{
    ShowDialog(playerid, CMDS_DIALOG);
	return 1;
}

YCMD:help(playerid, params[], help)
{
	ShowDialog(playerid, HELP_DIALOG);
    return 1;
}

YCMD:anims(playerid, params[], help)
{
    new cstring[1024];
    strcat(cstring, ""nef_yellow"All animations are listed below:\n");
    strcat(cstring, ""white"/piss - /wank - /dance - /vomit\n/drunk - /sit - /wave - /lay - /smoke - /crossarms\n/rob - /cigar - /laugh - /handsup - /fucku - /carry\n\n");
	strcat(cstring, ""nef_yellow"To stop an animation:");
	strcat(cstring, "\n"white"Type: /stopanim or press: [SHIFT], [ENTER], [LMB]");

	ShowPlayerDialog(playerid, ANIMS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Animations", cstring, "OK", "");
	return 1;
}

YCMD:stopanims(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    ClearAnimations(playerid);
	return 1;
}

YCMD:handsup(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

YCMD:cigar(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

YCMD:carry(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

YCMD:piss(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "PAULNMAC", "Piss_loop", 4.1, 1, 0, 0, 0, 0);
    SetPlayerSpecialAction(playerid, 68);
	return 1;
}

YCMD:wank(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:crossarms(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);

	extract params -> new crossarms; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /crossarms <1-2>");
	}

    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");

	switch(crossarms)
	{
		case 1: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		default: SCM(playerid, NEF_GREEN, "Usage: /crossarms <1-2>");
 	}
	return 1;
}

YCMD:sit(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);

    extract params -> new sit; else
    {
        return SCM(playerid, NEF_GREEN, "Usage: /sit <1-6>");
    }

    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");

	switch(sit)
	{
  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
  		default: SCM(playerid, NEF_GREEN, "Usage: /sit <1-6>");
 	}
	return 1;
}

YCMD:dance(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);

    extract params -> new dance; else
    {
        return SCM(playerid, NEF_GREEN, "Usage: /dance <1-5>");
    }

    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
  	if(dance == 1)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
  	}
  	else if(dance == 2)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
  	}
  	else if(dance == 3)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
  	}
  	else if(dance == 4)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
  	}
  	else if(dance == 5)
  	{
		ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 0, 0, 0, 0);
  	}
  	else
  	{
  	    SCM(playerid, NEF_GREEN, "Usage: /dance <1-5>");
  	}
	return 1;
}

YCMD:vomit(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:drunk(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");

    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:wave(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:lay(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:smoke(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
    
    ApplyAnimation(playerid, "SHOP", "Smoke_RYD", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:laugh(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");

    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:fucku(playerid, params[], help)
{
    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");

    ApplyAnimation(playerid, "PED", "fucku", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:rob(playerid, params[], help)
{
	if(gTeam[playerid] == CNR)
	{
		new tick = GetTickCountEx();
		if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
		{
			if((PlayerData[playerid][tickLastRob] + COOLDOWN_CMD_ROB) >= tick)
			{
		    	return player_notice(playerid, "Command is on cooldown!", "");
			}
		}
		
		if(GetPVarInt(playerid, "Robber") == 1)
		{
			if(GetPVarInt(playerid, "InStore") != 0)
			{
				if(GetPVarInt(playerid, "HasRobbed") == 0)
				{
                    if(GetCNRCops() < GetCNRRobbers() - 1)
                    {
                        return SCM(playerid, -1, ""er"There aren't enough cops in CNR to attempt a robbery!");
                    }
				    SetPVarInt(playerid, "HasRobbed", 1);
				    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
				    if(GetPlayerWantedLevel(playerid) >= 4)
					{
						SetPlayerColor(playerid, COLOR_ORANGE2);
					}
				    SetTimerEx("cnr_reset_robbery", 250000, false, "ii", playerid, YHash(__GetName(playerid)));
				    PlayerData[playerid][iRobberyCount] = 20;
				    PlayerData[playerid][tRobbery] = SetTimerEx("StartRobbery", 1000, true, "ii", playerid, YHash(__GetName(playerid)));
					SCM(playerid, COLOR_BLUE, ">> "ORANGE_E"You have started a robbery, the cops have been notified!");
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);

                    PlayerData[playerid][tickLastRob] = tick;

                    format(gstr, sizeof(gstr), "COP RADIO: "LB_E"Suspect %s(%i) has started a robbery at the %s!", __GetName(playerid), playerid, GetStoreName(playerid));
					for(new i = 0; i < MAX_PLAYERS; i++)
				   	{
			     		if(GetPVarInt(i, "Cop") != 0)
						{
							SCM(i, COLOR_BLUE, gstr);
		  				}
	  				}
				}
				else
				{
					SCM(playerid, COLOR_BLUE, ">> "RED_E"You have recently robbed a shop, you can only rob a store once every 3 minutes.");
				}
			}
	  		else // Robing players.
	  		{
				new Float:POS[3], rangepass;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
		    		if(i == playerid) continue;
		    		if(IsPlayerInAnyVehicle(i)) continue;
		    		if(gTeam[i] != CNR) continue;
		    		if(IsPlayerOnDesktop(i)) {
						SCM(playerid, COLOR_RED, "Server: "GREY2_E"Player is AFK.");
						continue;
		    		}
		    		
					GetPlayerPos(i, POS[0], POS[1], POS[2]);
	   		 		if(IsPlayerInRangeOfPoint(playerid, 3.2, POS[0], POS[1], POS[2]) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	    			{
	    				rangepass++;

						GameTextForPlayer(i, "~w~Someone has robbed you!~r~-$5,000~w~!", 4000, 5);
						GivePlayerMoneyEx(i, -5000);
						GivePlayerMoneyEx(playerid, 5000);
				    	GameTextForPlayer(playerid, "~w~Robbed him~n~~g~+$5,000", 4000, 5);
					}
				}
				
				if(rangepass == 0)
				{
					SCM(playerid, COLOR_RED, "Server: "GREY2_E"No players to rob near you.");
				}
				else
				{
					PlayerData[playerid][tickLastRob] = tick;
				}
			}
		}
		else
		{
			Error(playerid, "You can't rob as a enforcement");
		}
	}
	else
	{
	    if(gTeam[playerid] != gFREEROAM && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL && gTeam[playerid] != STORE) return SCM(playerid, RED, NOT_AVAIL);
		Command_ReProcess(playerid, "/stopanims", false);
		player_notice(playerid, "~w~Type ~y~/stopanim ~w~to quit", "");
	    
	    ApplyAnimation(playerid, "SHOP", "ROB_Loop", 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

YCMD:ar(playerid, params[], help)
{
	new tick = GetTickCountEx();
	if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerData[playerid][tickLastAr] + COOLDOWN_CMD_AR) >= tick)
		{
	    	return player_notice(playerid, "Command cooldown in progress", "");
		}
	}
	
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		if(IsPlayerInAnyVehicle(playerid)) return 1;
		if(IsPlayerInRangeOfPoint(playerid, 75.0, 1312.5220, 2672.7532, 11.2392) || IsPlayerInRangeOfPoint(playerid, 75.0, 1276.4218, 2670.2009, 10.8203))
		{
			return SCM(playerid, COLOR_RED, "Server: "GREY2_E"You can't make arrests near the criminal spawn zone!");
		}

		new Float:POS[3], rangepass;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(i == playerid) continue;
      		if(IsPlayerInAnyVehicle(i)) continue;
      		if(gTeam[i] != CNR) continue;
			GetPlayerPos(i, POS[0], POS[1], POS[2]);
			
   		 	if(IsPlayerInRangeOfPoint(playerid, 3.8, POS[0], POS[1], POS[2]) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    		{
    			if(GetPVarInt(i, "Robber") == 1 && GetPVarInt(i, "Cop") == 0)
				{
					if(PlayerData[i][bIsDead]) 
					{ 
						SCM(playerid, -1, ""er"The selected criminal is not alive."); 
						continue; 
					}
					rangepass++;
					pArrests[playerid]++;
    				SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
    				SetPVarInt(i, "InStore", 0);
				    ApplyAnimation(playerid, "PED", "ARRESTgun", 4.0, 0, 0, 0, 0, 0);
				    format(gstr2, sizeof(gstr2), "Server: "GREY2_E"Suspect %s(%d) has been arrested by Officer %s(%d).", __GetName(i), i, __GetName(playerid), playerid);
					SCMToAll(COLOR_RED, gstr2);
					gTeam[i] = JAIL;
				    PlayerData[i][iJailTime] = 30;
				    SetPVarInt(i, "JailedByAdmin", 0);
				    SetTimerEx("JailPlayer", 1200, false, "ii", i, YHash(__GetName(i)));
				    KillTimer(PlayerData[i][tRobbery]);
				    SCM(i, COLOR_BLUE, ""nef" "RED_E"You have been cuffed and arrested!");
				    SCM(i, COLOR_BLUE, ""nef" "RED_E"You will serve 30 seconds in jail.");
				    GameTextForPlayer(i, "~r~arrested~w~!", 4000, 5);
				    GameTextForPlayer(playerid, "~w~Suspect ~g~Arrested.", 4000, 5);
				    GivePlayerMoneyEx(playerid, 10000, true, true);
					GivePlayerScoreEx(playerid, 5, true, true);
				    SCM(playerid, COLOR_BLUE, ""nef" "RED_E"You have received 5 score and $10,000 for catching a criminal!");
				    
				 	if(PlayerData[i][e_gangrank] > 0 && PlayerData[i][e_gangid] != PlayerData[playerid][e_gangid])
					{
					  	SQL_UpdateGangScore(PlayerData[playerid][e_gangid], 1);
				 	}
	    		}
    		}
  		}
  		
  		if(rangepass == 0)
			SCM(playerid, COLOR_RED, "Server: "GREY2_E"No criminals nearby.");
		else
			PlayerData[playerid][tickLastAr] = tick;
	}
	else
	{
		Error(playerid, "You must be a cop while in a /CNR minigame to use this command!");
	}
	return 1;
}

YCMD:escape(playerid, params[], help)
{
	if(GetPVarInt(playerid, "HasEscaped") == 1)
 		return Error(playerid, "You have already attempted to escape!");

	if(GetPVarInt(playerid, "JailedByAdmin") == 1)
 		return Error(playerid, "You can't attempt to escape as you've been jailed by an admin.");

	if(PlayerData[playerid][iJailTime] == 0 || gTeam[playerid] != JAIL)
		return Error(playerid, "You are not in jail");

	SetPVarInt(playerid, "HasEscaped", 1);

	switch(random(5))
	{
	    case 0, 1:
		{
			PlayerData[playerid][iJailTime] = 0;
			GameTextForPlayer(playerid, "~b~escaped", 5000, 3);
			SCM(playerid, COLOR_ORANGE, "*** "RED_E"You have escaped from jail, the cops have been notified!");
			SetPlayerPosition(playerid, 2290.6777,2423.7139,10.8203,181.2573);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 20);

            format(gstr2, sizeof(gstr2), "COP RADIO: "LB_E"Suspect %s(%d) has escaped from prision, units respond!", __GetName(playerid), playerid);
			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
    			if(GetPVarInt(i, "Cop") != 0)
				{
					SCM(i, COLOR_BLUE, gstr2);
				}
			}

			SetPVarInt(playerid, "Robber", 1);
			SetPVarInt(playerid, "HasEscaped", 0);
			GivePlayerWeapon(playerid, 5, 500); // Bat
			GivePlayerWeapon(playerid, 29, 800); // SMG
			GivePlayerWeapon(playerid, 30, 1000); //AK
			GivePlayerWeapon(playerid, 24, 300); // Deagle
			GivePlayerWeapon(playerid, 27, 200); //Combat
			GivePlayerWeapon(playerid, 16, 1); // 1 Nade
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		case 2..4:
		{
			PlayerData[playerid][iJailTime] += 20;
			GameTextForPlayer(playerid, "~r~escaped failed", 5000, 3);
			SCM(playerid, COLOR_WHITE, "*** "RED_E"Your escape has failed, 20 seconds added to your jail sentence!");

            format(gstr2, sizeof(gstr2), "COP RADIO: "GREY_E"Suspect %s(%d) has failed an attempt escape from jail.", __GetName(playerid), playerid);
            for(new i = 0; i < MAX_PLAYERS; i++)
   			{
    			if(GetPVarInt(i, "Cop") != 0)
				{
					SCM(i, COLOR_BLUE, gstr2);
				}
			}
		}
	}
	return 1;
}

YCMD:w(playerid, params[], help)
{
	if(PlayerData[playerid][bGod]) return SCM(playerid, -1, ""er"You need to disable GodMode first. (/god)");
	if(gTeam[playerid] == gFREEROAM)
	{
		ShowDialog(playerid, WEAPON_DIALOG);
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:nos(playerid, params[], help)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gTeam[playerid] == gFREEROAM)
    {
		if(PVSelect[playerid] != -1)
		{
		    if(GetPlayerVehicleID(playerid) == PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]) return SCM(playerid, -1, ""er"Not useable in private cars");
		}

        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		if(IsComponentIdCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)), 1010)) AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	}
	else
	{
		SCM(playerid, GREY, NOT_AVAIL);
	}
	return 1;
}

YCMD:v(playerid, params[], help)
{
    if(PlayerData[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	if(IsPlayerInRangeOfPoint(playerid, 70.0, 1786.5049, -1298.0465, 120.2656) && PlayerData[playerid][e_level] < 2) return SCM(playerid, -1, ""er"Can't spawn vehicle at this place!");
	if(IsPlayerInRangeOfPoint(playerid, 50.0, -377.2038, 2131.4634, 133.1797) && PlayerData[playerid][e_level] < 2) return SCM(playerid, -1, ""er"Can't spawn vehicle at this place!");
	if(strlen(params) > 29) return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");

	if(gTeam[playerid] == gFREEROAM)
	{
	    if(IsNumeric(params))
	    {
			if(!IsValidVehicleModel(strval(params)))
			{
				return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");
			}

	        CarSpawner(playerid, strval(params), 120);
	    }
	    else
	    {
			if(!sscanf(params, "s[143]", gstr))
			{
				new veh = GetVehicleModelID(gstr);
				if(!IsValidVehicleModel(veh))
				{
					return SCM(playerid, NEF_YELLOW, "I don't know that vehicle...");
				}
				
		        CarSpawner(playerid, veh, 120);
			}
			else
			{
				ShowDialog(playerid, VEHICLE_DIALOG);
			}
		}
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && PVSelect[i] != -1)
		{
		    if(PlayerPVData[i][PVSelect[i]][e_vehicleid] == vehicleid)
			{
				ModVehicleColor(i);
				ModVehiclePaintJob(i);
				ModVehicleComponents(i);
				break;
		    }
		}
	}
	return 1;
}

function:OnPlayerNameChangeRequest(playerid, newname[])
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);
	
	if(rows > 0)
	{
	    SCM(playerid, -1, ""er"Your name is already in use or contains invalid characters");
	}
	else
	{
	    new oldname[MAX_PLAYER_NAME+1], query[255];
	    strmid(oldname, __GetName(playerid), 0, sizeof(oldname), sizeof(oldname));
	    
		if(SetPlayerName(playerid, newname) == 1) // If successfull
        {
            GetPlayerName(playerid, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1);

            if(PlayerData[playerid][e_houses] > 0)
            {
				for(new i = 0; i < houseid; i++)
				{
    				if(strcmp(HouseData[i][Owner], oldname, true)) continue;

                    strmid(HouseData[i][Owner], newname, 0, 25, 25);

				    format(query, sizeof(query), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseData[i][e_id], number_format(HouseData[i][price]), HouseData[i][e_score], g_aHouseInteriorTypes[HouseData[i][interior]][intname]);
				    UpdateDynamic3DTextLabelText(HouseData[i][e_labelid], -1, query);
				    SQL_SaveHouse(i);
				}
            }

			for(new r = 0; r < MAX_BUSINESSES; r++)
			{
				if(strcmp(BusinessData[r][e_owner], oldname, true)) continue;

                strmid(BusinessData[r][e_owner], newname, 0, 25, 25);

                format(gstr, sizeof(gstr), ""business_mark"\nID: %i\nOwner: %s\nType: %s\nLevel: %i", BusinessData[r][e_id], BusinessData[r][e_owner], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
			    UpdateDynamic3DTextLabelText(BusinessData[r][e_label_id], -1, gstr);
			    orm_update(BusinessData[r][e_ormid]);
			}
            
            format(query, sizeof(query), "UPDATE `accounts` SET `name` = '%s' WHERE `name` = '%s' LIMIT 1;", newname, oldname);
            mysql_tquery(pSQL, query, "", "");
            
            format(query, sizeof(query), "UPDATE `race_records` SET `name` = '%s' WHERE `name` = '%s';", newname, oldname);
            mysql_tquery(pSQL, query, "", "");
            
            format(query, sizeof(query), "INSERT INTO `ncrecords` VALUES (NULL, '%s', '%s', UNIX_TIMESTAMP());", oldname, newname);
            mysql_tquery(pSQL, query, "", "");
            
            format(query, sizeof(query), "UPDATE `queue` SET `Extra` = '%s' WHERE `Extra` = '%s';", newname, oldname);
            mysql_tquery(pSQL, query, "", "");

            format(query, sizeof(query), "UPDATE `online` SET `name` = '%s' WHERE `name` = '%s';", newname, oldname);
            mysql_tquery(pSQL, query, "", "");
            
            format(query, sizeof(query), "UPDATE `creditsorder` SET `receiver` = '%s' WHERE `receiver` = '%s';", newname, oldname);
            mysql_tquery(pSQL, query, "", "");

            format(query, sizeof(query), "UPDATE `viporder` SET `receiver` = '%s' WHERE `receiver` = '%s';", newname, oldname);
            mysql_tquery(pSQL, query, "", "");

			PlayerData[playerid][e_lastnc] = gettime();
			
			DestroyPlayerVehicles(playerid);
			
			new nextnc = (PlayerData[playerid][e_lastnc] + ((PlayerData[playerid][e_vip] == 1) ? (2592000) : (7776000)));
			
			format(query, sizeof(query), ""white"You have successfully changed your name.\n\nNew name: %s\nOld name: %s\nNext namechange available: %s", newname, oldname, UTConvert(nextnc));
			ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Namechange", query, "OK", "");
			
			format(query, sizeof(query), ""nef" %s(%i) has changed their name to %s", oldname, playerid, newname);
			SCMToAll(-1, query);
			
			SQL_SaveAccount(playerid);
        }
        else
        {
            SCM(playerid, -1, ""er"Your name is already in use or contains invalid characters");
        }
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(listitem < -1 || dialogid >= 32000 || dialogid < -32000)
	{
		PlayerData[playerid][bwSuspect] |= SUSPECT_FAKE_PACKETS;
		Log(LOG_NET, "Invalid data in OnDialogResponse(%i, %i, %i, %i)", playerid, dialogid, response, listitem);
	}
	
	// Fixing dialog exploit
	for(new i = 0, l = strlen(inputtext); i < l; i++)
	{
		if(inputtext[i] == '%')
		{
			inputtext[i] = '#';
		}
	}
	
	if(response)
	{
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0); //1054

	    switch(dialogid)
	    {
	        case DIALOG_RECOVERY_EMAIL:
	        {
	            if(strlen(inputtext) > 25 || strlen(inputtext) < 6) return SCM(playerid, -1, ""er"Input length: 6-25 characters");

	            new email[26];
	            sscanf(inputtext, "s[25]", email);
	            
	            strmid(PlayerData[playerid][e_email], email, 0, 26, 26);
	            
	            player_notice(playerid, "New email set", "");
	            return true;
	        }
	        case DIALOG_DUEL:
	        {
                PlayerData[playerid][DuelWeapon] = DuelWeapons[listitem];
                
	            ShowDialog(playerid, DIALOG_DUEL + 1);
	            return true;
	        }
	        case DIALOG_DUEL + 1:
	        {
	            PlayerData[playerid][DuelLocation] = listitem + 1;
	            
	            if(!IsPlayerAvail(PlayerData[playerid][DuelRequest])) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, SCM(playerid, -1, ""er"Player is not available");
	            if(gTeam[PlayerData[playerid][DuelRequest]] != gFREEROAM) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, SCM(playerid, -1, ""er"Player is not in freeroam mode");
	            if(gTeam[playerid] != gFREEROAM) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, player_notice(playerid, "You must be in Freeroam", "");
	            if(IsPlayerOnDesktop(PlayerData[playerid][DuelRequest])) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, SCM(playerid, -1, ""er"Player is on desktop");
	            if(playerid == PlayerData[playerid][DuelRequest]) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, SCM(playerid, -1, ""er"You can't duel yourself");
	            if(!islogged(PlayerData[playerid][DuelRequest])) return PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID, SCM(playerid, -1, ""er"Player does not have an account");
	            
	            PlayerData[PlayerData[playerid][DuelRequest]][DuelRequestRecv] = playerid;
	            
	            for(new i = 0; i < MAX_PLAYERS; i++)
	            {
	                if(PlayerData[i][DuelRequest] == playerid)
	                {
			        	format(gstr, sizeof(gstr), ">> Duel request cancelled by %s(%i)", __GetName(playerid), playerid);
			        	SCM(i, NEF_RED, gstr);
			        	
	                    PlayerData[i][DuelRequest] = INVALID_PLAYER_ID;
	                }
	            }
	            PlayerData[playerid][DuelRequestRecv] = INVALID_PLAYER_ID;
	            
	            new tmp[50];
	            GetWeaponName(PlayerData[playerid][DuelWeapon], tmp, sizeof(tmp));
	            
	            format(gstr, sizeof(gstr), ">> %s(%i) requests a duel with you! Type /duel to accept (Weapon: %s)", __GetName(playerid), playerid, tmp);
	            SCM(PlayerData[playerid][DuelRequest], NEF_RED, gstr);
	            
	            player_notice(playerid, "DUEL REQUESTED", "Wait for accept");
	            return true;
	        }
	 	    case DIALOG_RACE_RACETYPE:
		    {
                g_BuildRaceType = listitem + 1;
                
				ShowDialog(playerid, DIALOG_RACE_RACEVW);
				return true;
		    }
    	    case DIALOG_RACE_RACEVW:
		    {
		        if(!strlen(inputtext)) return ShowDialog(playerid, DIALOG_RACE_RACEVW);
		        if(strval(inputtext) <= 0) return ShowDialog(playerid, DIALOG_RACE_RACEVW);
		        g_BuildVirtualWorld = strval(inputtext);
		        ShowDialog(playerid, DIALOG_RACE_RACEVEH);
				return true;
		    }
	 	    case DIALOG_RACE_RACEVEH:
		    {
		        if(!strlen(inputtext)) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
		        if(IsNumeric(inputtext))
		        {
		            if(!IsValidVehicleModel(strval(inputtext))) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
					new Float:POS[4];
					GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					GetPlayerFacingAngle(playerid, POS[3]);
					g_BuildModeVMID = strval(inputtext);
					if(g_BuildVehicle != -1)
					{
					    DestroyVehicleEx(g_BuildVehicle);
					    g_BuildVehicle = -1;
					}
		            g_BuildVehicle = CreateVehicleEx(g_BuildModeVMID, POS[0], POS[1], POS[2], POS[3], (random(128) + 127), (random(128) + 127), -1);
		            PutPlayerInVehicle(playerid, g_BuildVehicle, 0);
					ShowDialog(playerid, DIALOG_RACE_RACESTARTPOS);
				}
		        else
		        {
		            if(!IsValidVehicleModel(GetVehicleModelID(inputtext))) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
					new Float:POS[4];
					GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					GetPlayerFacingAngle(playerid, POS[3]);
					g_BuildModeVMID = GetVehicleModelID(inputtext);
					if(g_BuildVehicle != -1)
					{
					    DestroyVehicleEx(g_BuildVehicle);
					    g_BuildVehicle = -1;
					}
		            g_BuildVehicle = CreateVehicleEx(g_BuildModeVMID, POS[0], POS[1], POS[2], POS[3], (random(128) + 127), (random(128) + 127), -1);
		            PutPlayerInVehicle(playerid, g_BuildVehicle, 0);
					ShowDialog(playerid, DIALOG_RACE_RACESTARTPOS);
		        }
		        return true;
		    }
		    case DIALOG_RACE_RACESTARTPOS:
		    {
				SCM(playerid, GREEN, ">> Go to the start line on the left road and press 'KEY_FIRE' and do the same with the right road block.");
				SCM(playerid, GREEN, ">> When this is done, you will see a dialog to continue.");
				g_BuildVehPosCount = 0;
		        g_BuildTakeVehPos = true;
		        return true;
		    }
    	    case DIALOG_RACE_CHECKPOINTS:
		    {
		        SCM(playerid, GREEN, ">> Start taking checkpoints now by clicking 'KEY_FIRE'.");
		        SCM(playerid, GREEN, ">> IMPORTANT: Press 'ENTER' when you're done with the checkpoints! If it doesn't react press again and again.");
		        g_BuildCheckPointCount = 0;
		        g_BuildTakeCheckpoints = true;
				return true;
		    }
	        case DIALOG_BUSINESS:
	        {
				format(gstr2, sizeof(gstr2), ""nef" :: Business Menu > Slot: %i", listitem + 1);

	            PlayerData[playerid][BusinessIdSelected] = listitem;

		        if(listitem > PlayerData[playerid][e_addbizzslots])
		        {
		            ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr2, ""nef_green"This business slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
		        }
		        else
				{
				    if(listitem >= GetPlayerBusinessCount(__GetName(playerid)))
				    {
				        player_notice(playerid, "Business slot not in use", "");
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, DIALOG_BUSINESS + 1, DIALOG_STYLE_LIST, gstr2, "Goto This Business\nSet Business Type\nUpgrade Business Level", "Select", "Cancel");
				    }
				}
	            return true;
	        }
	        case DIALOG_BUSINESS + 1:
	        {
		        if(gTeam[playerid] != gFREEROAM)
				{
					player_notice(playerid, "You can't upgrade it now", "Type ~y~/exit ~w~to leave");
					return 1;
				}
						
				switch(listitem)
				{
				    case 0:
				    {
						new r = GetBusinessSlotBySelection(playerid);

						if(r != -1) {
				   			SetPlayerPos(playerid, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2]);
				   			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				   			SetPVarInt(playerid, "doingStunt", 0);
				   			PlayerData[playerid][tickJoin_bmx] = 0;
						} else {
							player_notice(playerid, "Couldn't find the business in that slot", "Report on forums", 5000);
						}
					}
				    case 1:
				    {
						ShowDialog(playerid, DIALOG_SET_BUSINESS_TYPE);
				    }
				    case 2:
				    {
				        ShowDialog(playerid, DIALOG_UPGRADE_BUSINESS);
				    }
				}
	            return true;
	        }
	        case DIALOG_SET_BUSINESS_TYPE:
	        {
	            new r = GetBusinessSlotBySelection(playerid);
	            
				if(r != -1) {
				    player_notice(playerid, "Business type set", "");
					BusinessData[r][e_type] = E_BUSINESS_TYPES:listitem;
					format(gstr, sizeof(gstr), ""business_mark"\nID: %i\nOwner: %s\nType: %s\nLevel: %i", BusinessData[r][e_id], BusinessData[r][e_owner], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
					UpdateDynamic3DTextLabelText(BusinessData[r][e_label_id], -1, gstr);
					orm_update(BusinessData[r][e_ormid]);
				} else {
					return player_notice(playerid, "Couldn't find the business in that slot", "Report on forums", 5000);
				}
				return true;
	        }
	        case DIALOG_UPGRADE_BUSINESS:
	        {
	            new r = GetBusinessSlotBySelection(playerid);
			    
				if(r != -1) {
		            if(BusinessData[r][e_level] >= MAX_BUSINESS_LEVEL)
		            {
						Command_ReProcess(playerid, "/bmenu", false);
						return 1;
		            }
                
		            if(GetPlayerMoneyEx(playerid) < g_aBusinessLevelMatrix[BusinessData[r][e_level]][E_bupgradeprice])
		            {
		                return SCM(playerid, -1, ""er"You don't have enough money!");
		            }

                    GivePlayerMoneyEx(playerid, -g_aBusinessLevelMatrix[BusinessData[r][e_level]][E_bupgradeprice]);
                    BusinessData[r][e_level]++;
                    
                    if(PlayerAchData[playerid][e_ach_mademan][0] == 0 && BusinessData[r][e_level] == 20)
				    {
				        GivePlayerAchievement(playerid, e_ach_mademan, "Made Man", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}

					gstr2[0] = '\0';
					strcat(gstr2, ""white"You have successfully upgraded your business's level!\n\nCurrent Business Level: ");
                 	format(gstr, sizeof(gstr), "%i\nCurrent Business Earnings: $%s", BusinessData[r][e_level], number_format(GetBusinessEarnings(r)));
                 	strcat(gstr2, gstr);
	                format(gstr, sizeof(gstr), ""nef" :: Business Level Upgrade > Slot: %i", PlayerData[playerid][BusinessIdSelected] + 1);
					ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, gstr2, "OK", "");
                 	
					format(gstr, sizeof(gstr), ""business_mark"\nID: %i\nOwner: %s\nType: %s\nLevel: %i", BusinessData[r][e_id], BusinessData[r][e_owner], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
					UpdateDynamic3DTextLabelText(BusinessData[r][e_label_id], -1, gstr);
				    
					orm_update(BusinessData[r][e_ormid]);
				} else {
					player_notice(playerid, "Couldn't find the business in that slot", "Report on forums", 5000);
				}
	            return true;
	        }
	        case CM_DIALOG:
	        {
				// How to get credits, Toy slots, pvs slots, house slots, house obj slots, business slot, instant namechange, medkit x20, medkit x100, money boost x2, money boost x3, scoreboost x2, scoreboost x3, master boost
				new string[1024];
	            switch(listitem)
	            {
	                case 0:
	                {
	                    strcat(string, ""white"Gold Credits is a virtual currency which can be used to buy \nin-game items and add new features.");
	                    strcat(string, "\n\nGoto "SVRURLWWW"/credits to learn more about Gold Credits");
	                    ShowPlayerDialog(playerid, CM_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" Gold Credits", string, "Back", "");
	                }
	                case 1..14:
	                {
	                    ShowPlayerDialog(playerid, CM_DIALOG + 1 + listitem, DIALOG_STYLE_MSGBOX, ""nef" Gold Credits", GetItem(listitem - 1), "Buy", "Back");
	                }
	            }
	            return true;
	        }
	        case CM_DIALOG + 1:
	        {
	            ShowDialog(playerid, CM_DIALOG);
	            return true;
	        }
	        case CM_DIALOG + 2: // toy slot
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[0][E_item_credits])
	            {
        			SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }
	        
				if(PlayerData[playerid][e_addtoyslots] >= 5)
				{
				    SCM(playerid, -1, ""er"You already have 5 additional toy slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}
				
				PlayerData[playerid][e_addtoyslots]++;
				
				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[0][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
				
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[0][E_item_credits]);
				return true;
	        }
	        case CM_DIALOG + 3: // pv slot
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[1][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][e_addpvslots] >= 7)
				{
				    SCM(playerid, -1, ""er"You already have 7 additional car slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][e_addpvslots]++;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[1][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[1][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 4: // house slot
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[2][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][e_addhouseslots] >= 4)
				{
				    SCM(playerid, -1, ""er"You already have 4 additional house slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][e_addhouseslots]++;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[2][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[2][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 5: // house obj slot
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[3][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][e_addhouseitemslots] >= 7)
				{
				    SCM(playerid, -1, ""er"You already have 7 additional house item slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][e_addhouseitemslots]++;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[3][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[3][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 6: // business slot
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[4][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][e_addbizzslots] >= 4)
				{
				    SCM(playerid, -1, ""er"You already have 4 additional business slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][e_addbizzslots]++;
				
				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[4][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[4][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 7: // instant nc
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[5][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(((PlayerData[playerid][e_vip] == 1) ? (PlayerData[playerid][e_lastnc] + 2592000) : (PlayerData[playerid][e_lastnc] + 7776000)) < gettime())
				{
				    SCM(playerid, -1, ""er"You can already change your name!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][e_lastnc] = 0;
                
				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[5][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);

				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[5][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 8: // 20 medkit
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[6][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				PlayerData[playerid][e_medkits] += 20;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[6][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[6][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 9: // 100 medkits
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[7][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				PlayerData[playerid][e_medkits] += 100;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[7][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[7][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 10: // mb x2
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[8][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][Boost] & BOOST_MONEY_x2 || PlayerData[playerid][Boost] & BOOST_MONEY_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][Boost] |= BOOST_MONEY_x2;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[8][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 2, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(pSQL, gstr, "", "");
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[8][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 11: // mb x3
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[9][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][Boost] & BOOST_MONEY_x2 || PlayerData[playerid][Boost] & BOOST_MONEY_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][Boost] |= BOOST_MONEY_x3;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[9][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
				
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 3, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(pSQL, gstr, "", "");
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[9][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 12: // sb x2
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[10][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][Boost] & BOOST_SCORE_x2 || PlayerData[playerid][Boost] & BOOST_SCORE_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][Boost] |= BOOST_SCORE_x2;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[10][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 4, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(pSQL, gstr, "", "");
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[10][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 13: // sb x3
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[11][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][Boost] & BOOST_SCORE_x2 || PlayerData[playerid][Boost] & BOOST_SCORE_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][Boost] |= BOOST_SCORE_x3;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[11][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 5, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(pSQL, gstr, "", "");
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[11][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 14: // masterb
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[12][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerData[playerid][Boost] & BOOST_SCORE_x2 || PlayerData[playerid][Boost] & BOOST_SCORE_x3 || PlayerData[playerid][Boost] & BOOST_MONEY_x2 || PlayerData[playerid][Boost] & BOOST_MONEY_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerData[playerid][Boost] |= BOOST_MASTER;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[12][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
                
                format(gstr2, sizeof(gstr2), "INSERT INTO `queue` VALUES (NULL, 6, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(pSQL, gstr2, "", "");
                
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[12][E_item_credits]);
	            return true;
	        }
	        case CM_DIALOG + 15: // kills/deaths reset
	        {
	            if(GetCredits(playerid) < g_aCreditsProductMatrix[13][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				PlayerData[playerid][e_deaths] = 0;
				PlayerData[playerid][e_kills] = 0;

				format(gstr, sizeof(gstr), "Gold Credits: ~y~-%sGC", number_format(g_aCreditsProductMatrix[13][E_item_credits]));
				player_notice(playerid, "Item purchased", gstr, 5000);
				SCM(playerid, NEF_YELLOW, "Your K/D has been reset!");
				
				AlterPlayerCredits(playerid, -g_aCreditsProductMatrix[13][E_item_credits]);
	            return true;
	        }
	        case COPS_REFILL:
	        {
 				switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    			    SetPlayerHealth(playerid, 100);
  	    				SCM(playerid, COLOR_RED, ">> "LB2_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 700); // SMG
						GivePlayerWeapon(playerid, 31, 1000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
  	    				SCM(playerid, COLOR_RED, ">> "LB2_E"You have refilled your weapons!");
  	    			}
   				}
	            return true;
	        }
	        case ROBBER_REFILL:
	        {
       			switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    				SetPlayerHealth(playerid, 100);
  	    				SCM(playerid, COLOR_RED, ">> "ORANGE_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);
  	    				GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
  	    				SCM(playerid, COLOR_RED, ">> "ORANGE_E"You have refilled your weapons!");
  	    			}
   				}
	        }
	        case CNR_DIALOG:
	        {
	            SetPVarInt(playerid, "dSkin", GetPlayerSkin(playerid));
	            new string[255];
	            SetPVarInt(playerid, "oldColor", GetColorEx(playerid));
				switch(listitem)
  				{
  					case 0: // Cops
  	    			{
  	    			    gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 1);

  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "LB_E"Cops "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the LVPD!");
			    		SCM(playerid, -1, ""nef" Your mission is to arrests any robbers and keep the streets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_CNR_COP);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 700); // SMG
						GivePlayerWeapon(playerid, 31, 1000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 1);
						switch(random(3))
	  					{
	  						case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
							case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
							case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
						}
						switch(random(4))
	  					{
	  						case 0: SetPlayerSkin(playerid, 282);
	  						case 1: SetPlayerSkin(playerid, 283);
	  						case 2: SetPlayerSkin(playerid, 286);
	  						case 3: SetPlayerSkin(playerid, 280);
	  					}
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						Command_ReProcess(playerid, "/cnrhelp", false);
						SetPVarInt(playerid, "inCNR", 1);
					}
    				case 1: //ROBBERS
  	    			{
                        if(GetCNRCops() < GetCNRRobbers() - 1)
                        {
                            return SCM(playerid, -1, ""er"There aren't enough cops in CNR!");
                        }
                        
   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);

  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "LB_E"Robbers "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
						PreloadAnimLib(playerid, "SHOP");
			    		SCM(playerid, COLOR_GREY, ""nef" You have joined the Robbers!");
			    		SCM(playerid, COLOR_GREY, ""nef" Your mission is create mayham in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_ORANGE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 1);
						SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
						switch(random(5))
						{
							case 0: SetPlayerSkin(playerid, 125);
							case 1: SetPlayerSkin(playerid, 126);
							case 2: SetPlayerSkin(playerid, 111);
							case 3: SetPlayerSkin(playerid, 112);
							case 4: SetPlayerSkin(playerid, 108);
						}
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						Command_ReProcess(playerid, "/cnrhelp", false);
						SetPVarInt(playerid, "inCNR", 2);
					}
					case 2: // Professional Robbers
  	    			{
  	    				if(GetPlayerScoreEx(playerid) < 500)
						{
							SCM(playerid, COLOR_GREY, "Server: "RED_E"You need at least 500 score to choose this class!");
							Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

                        if(GetCNRCops() < GetCNRRobbers() - 1)
                        {
                            return SCM(playerid, -1, ""er"There aren't enough cops in CNR!");
                        }

   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);

  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "RED_E"Pro Robbers "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
						PreloadAnimLib(playerid, "SHOP");
			    		SCM(playerid, -1, ""nef" You have joined the MOB!");
			    		SCM(playerid, -1, ""nef" This is the elite version of the robbers, Your mission is create mayham in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~pro Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_CNR_PRO_ROBBER);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 2); // 2 Nade
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 1);
						SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
						SetPlayerSkin(playerid, 113);
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 4);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
 					case 3: // Army
  	    			{
           				if(GetPlayerScoreEx(playerid) < 500)
						{
							SCM(playerid, COLOR_GREY, "Server: "PURPLE_E"You need at least 500 score to choose this class!");
							Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 3);

						format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "PURPLE_E"Army "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the Army Task Force!");
			    		SCM(playerid, -1, ""nef" Your mission is to arrests any robbers and keep the streets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_PURPLE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1000); // SMG
						GivePlayerWeapon(playerid, 31, 5000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 34, 300); // Sniper
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 16, 2); // 2 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 287);
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 5);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
					case 4: // Swat
  	    			{
  	    				if(PlayerData[playerid][e_vip] == 0)
						{
							SCM(playerid, COLOR_GREY, "Server: "RED_E"You must be VIP to use the swat feature! Check /vip for more info.");
                            Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

    					gTeam[playerid] = CNR;

  	    				SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 2);

						format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "BLUE_E"Swat "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the SWAT TEAM!");
			    		SCM(playerid, -1, ""nef" This is an elite team higher ranked than cops, do your job well!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_BLUE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1200); // SMG
						GivePlayerWeapon(playerid, 24, 1000); // Deagle
						GivePlayerWeapon(playerid, 31, 2000); //M4
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 35, 2); //RPG
						GivePlayerWeapon(playerid, 16, 5); // 5 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 285);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 3);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
				}
				CheckPlayerGod(playerid);
                ShowPlayerCNRTextdraws(playerid);
                
                Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
                Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
				Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
				Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
				
				SetPlayerHealth(playerid, 100);
				SetPlayerWorldBounds(playerid, 20000.0, -20000.0, 20000.0, -20000.0);
	            return true;
	        }
	        case REFIL_DIALOG:
	        {
     			new vID = GetPlayerVehicleID(playerid);
				switch(listitem)
  				{
   					case 0: //Repair Car
  	    			{
  	    			    if(GetPlayerMoneyEx(playerid) < 2000)
							return Error(playerid, "You don't have enough money to purchase this item.");

						GivePlayerMoneyEx(playerid, -2000);
						PlayerPlaySound(playerid, 1057, 0, 0, 0);
						RepairVehicle(vID);
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have repaired your vehicle!");
  	    			}
  	    			case 1: //Add Nos
  	    			{
  	    				if(GetPlayerMoneyEx(playerid) < 5000)
							return Error(playerid, "You don't have enough money to purchase this item.");
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have added nitro to your vehicle!");
						if(IsComponentIdCompatible(GetVehicleModel(vID), 1010)) AddVehicleComponent(vID, 1010);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						GivePlayerMoneyEx(playerid, -5000);
  	    			}
  	    			case 2: //Repair and Add nos
  	    			{
  	    				if(GetPlayerMoneyEx(playerid) < 6500)
							return Error(playerid, "You don't have enough money to purchase this item.");
						GivePlayerMoneyEx(playerid, -6500);
						if(IsComponentIdCompatible(GetVehicleModel(vID), 1010)) AddVehicleComponent(vID, 1010);
						RepairVehicle(vID);
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have repaired and added nitro to your vehicle!");
						PlayerPlaySound(playerid, 1057, 0, 0, 0);
  	    			}
   				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG:
	        {
				format(gstr, sizeof(gstr), ""nef" :: House Menu > Slot: %i", listitem + 1);
				
	            PlayerData[playerid][HouseSlotSelected] = listitem;
	            
		        if(listitem > PlayerData[playerid][e_addhouseslots])
		        {
		            ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This house slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
		        }
		        else
				{
				    if(listitem >= PlayerData[playerid][e_houses])
				    {
				        player_notice(playerid, "House slot is not in use", "");
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, "Goto This House\nUpgrade Interior\nManage House Items", "Select", "Cancel");
				    }
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 1:
	        {
				switch(listitem)
				{
				    case 0:
				    {
				        if(gTeam[playerid] != gFREEROAM)
						{
							player_notice(playerid, "You can't do this now", "Type ~y~/exit ~w~to leave");
							return 1;
						}
						
						new h_id = GetHouseIdByPlayerSlotSel(playerid);
						
						if(h_id != -1)
						{
				   			SetPlayerPos(playerid, HouseData[h_id][e_x], HouseData[h_id][e_y], HouseData[h_id][e_z]);
				   			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				   			SetPVarInt(playerid, "doingStunt", 0);
				   			PlayerData[playerid][tickJoin_bmx] = 0;
						}
						else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
				    }
				    case 1:
				    {
				        if(gTeam[playerid] != gFREEROAM)
						{
							player_notice(playerid, "Get out to upgrade the house", "");
							return 1;
						}
						
				        ShowDialog(playerid, HOUSE_UPGRADE_DIALOG);
				    }
				    case 2:
				    {
				        if(gTeam[playerid] != HOUSE) return player_notice(playerid, "You are not in your house", "");

						new h_id = GetHouseIdByPlayerSlotSel(playerid);

						if(h_id != -1)
						{
                            if(GetPlayerVirtualWorld(playerid) != (HouseData[h_id][e_id] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
                            
							new string[1024];
							format(gstr2, sizeof(gstr2), ""nef" :: House Menu > Slot: %i > House Items", PlayerData[playerid][HouseSlotSelected] + 1);

							for(new i = 0; i < MAX_HOUSE_OBJECTS; i++)
							{
								if(i > PlayerData[playerid][e_addhouseitemslots] + 2)
								{
								    format(gstr, sizeof(gstr), "House Item Slot %i "red"(Locked)\n", i + 1);
								}
							    else
							    {
								    if(HouseData[h_id][E_Obj_Model][i] == 0)
									{
									    format(gstr, sizeof(gstr), "House Item Slot %i\n", i + 1);
									}
									else
									{
									    format(gstr, sizeof(gstr), "House Item Slot %i "green2"(Used)\n", i + 1);
									}
								}
								strcat(string, gstr);
							}

							ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 2, DIALOG_STYLE_LIST, gstr2, string, "Select", "Cancel");
						}
						else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
				    }
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 2:
	        {
	            if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");

				format(gstr, sizeof(gstr), ""nef" :: House Menu > Slot: %i > Item Slot %i", PlayerData[playerid][HouseSlotSelected] + 1, listitem + 1);

				if(listitem > PlayerData[playerid][e_addhouseitemslots] + 2)
				{
				    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This house item slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
				}
				else
				{
		        	PlayerData[playerid][houseobj_selected] = listitem;

	                new h_id = GetHouseIdByPlayerSlotSel(playerid);

					if(h_id != -1)
					{
					    if(GetPlayerVirtualWorld(playerid) != (HouseData[h_id][e_id] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
					    
	                    if(HouseData[h_id][E_Obj_Model][listitem] == 0)
	                    {
	                        ShowModelSelectionMenu(playerid, hobjslist, "Select House Item", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
	                    }
	                    else
	                    {
	                        ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 3, DIALOG_STYLE_LIST, gstr, "Edit House Item Position\n"grey"Remove House Item", "Select", "Cancel");
	                    }
					}
					else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 3:
	        {
	            if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");

                new h_id = GetHouseIdByPlayerSlotSel(playerid);

				if(h_id != -1)
				{
				    if(GetPlayerVirtualWorld(playerid) != (HouseData[h_id][e_id] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
				    
		            switch(listitem)
		            {
		                case 0:
		                {
		                    new Float:POS[3];
		                    GetDynamicObjectPos(HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]], POS[0], POS[1], POS[2]);
		                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, POS[0], POS[1], POS[2]))
		                    {
		                        return SCM(playerid, -1, ""er"You need to be closer to the object!");
		                    }
		                    EditDynamicObject(playerid, HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]]);
		                }
		                case 1:
		                {
		                    HouseData[h_id][E_Obj_Model][PlayerData[playerid][houseobj_selected]] = 0;
		                    DestroyDynamicObject(HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]]);
		                    DestroyDynamic3DTextLabel(HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]]);
		                    HouseData[h_id][E_Obj_Label][PlayerData[playerid][houseobj_selected]] = Text3D:-1;
		                    HouseData[h_id][E_Obj_ObjectID][PlayerData[playerid][houseobj_selected]] = -1;
		                    player_notice(playerid, "House item has been removed", "");
		                }
		            }
				}
				else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
	            return true;
	        }
	        case PV_SLOT_SELECT_DIALOG:
	        {
				if(listitem == 0) return PVSlotSelect(playerid);

                listitem--;
			    
	            CreateFinalCar(playerid, listitem);
	            return true;
	        }
	        case COLOR_DIALOG:
	        {
    			switch(listitem)
	    		{
	    			case 0:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_RED);
	    	    		SCM(playerid, COLOR_RED, ">> Your nick color has been changed to RED.");
	    	    	}
    	    		case 1:
	    	    	{
						SetPlayerColor(playerid, COLOR_BLUE);
						SCM(playerid, COLOR_BLUE, ">> Your nick color has been changed to BLUE.");
	    	    	}
    	    		case 2:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_WHITE);
	    	    		SCM(playerid, COLOR_WHITE, ">> Your nick color has been changed to WHITE.");
					}
					case 3:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_IVORY);
	    	    		SCM(playerid, COLOR_IVORY, ">> Your nick color has been changed to IVORY.");
					}
					case 4:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PINK);
	    	    		SCM(playerid, COLOR_PINK, ">> Your nick color has been changed to PINK.");
					}
					case 5:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_YELLOW);
	    	    		SCM(playerid, COLOR_YELLOW, ">> Your nick color has been changed to YELLOW.");
					}
					case 6:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREEN);
	    	    		SCM(playerid, COLOR_GREEN, ">> Your nick color has been changed to GREEN.");
					}
					case 7:
	    	    	{
	    	    		SetPlayerColor(playerid, 0x00EBFFFF);
	    	    		SCM(playerid, 0x00EBFFFF, ">> Your nick color has been changed to LIGHTBLUE.");
					}
					case 8:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREY);
	    	    		SCM(playerid, COLOR_GREY, ">> Your nick color has been changed to GREY.");
					}
					case 9:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_ORANGE);
	    	    		SCM(playerid, COLOR_ORANGE, ">> Your nick color has been changed to ORANGE.");
					}
					case 10:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PURPLE);
	    	    		SCM(playerid, PURPLE, ">> Your nick color has been changed to PURPLE.");
					}
					case 11:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_LIGHTGREEN);
	    	    		SCM(playerid, COLOR_LIGHTGREEN, ">> Your nick color has been changed to LIGHTGREEN.");
					}
					case 12:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_STEELBLUE);
	    	    		SCM(playerid, COLOR_STEELBLUE, ">> Your nick color has been changed to STEELBLUE.");
					}
				}
				return true;
			}
	        case LABEL_DIALOG:
	        {
	            if(strlen(inputtext) > 35 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Inputlength: 3-35");
	            
	            new text[36];
	            sscanf(inputtext, "s[35]", text);

				if(IsAd(text))
				{
				  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
					admin_broadcast(RED, gstr);

			        SCM(playerid, RED, "Advertising is not allowed!");
			        return 1;
				}

	            if(strfind(text, "admin", true) != -1 || strfind(text, "staff", true) != -1 || strfind(text, "mod", true) != -1 || strfind(text, "administrator", true) != -1)
	            {
	                return SCM(playerid, -1, ""er"Don't enter following words: admin, staff, mod");
	            }
	            
	            PlayerData[playerid][VIPLabel] = CreateDynamic3DTextLabel(text, -1, 0.0, 0.0, 0.65, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);

                SCM(playerid, -1, ""er"Label attached! Note: You can't see the label yourself");
				return true;
	        }
	        case LABEL_DIALOG + 1:
	        {
	            if(strlen(inputtext) > 35 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Inputlength: 3-35");

	            new text[36];
	            sscanf(inputtext, "s[35]", text);

				if(IsAd(text))
				{
				  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
					admin_broadcast(RED, gstr);

			        SCM(playerid, RED, "Advertising is not allowed!");
			        return 1;
				}
				
	            if(!strcmp("admin", text, true) || !strcmp("staff", text, true) || !strcmp("mod", text, true))
	            {
	                return SCM(playerid, -1, ""er"Don't enter following words: admin, staff, mod");
	            }
				
				UpdateDynamic3DTextLabelText(PlayerData[playerid][VIPLabel], -1, text);
	            SCM(playerid, -1, ""er"Label text changed!");
	            return true;
	        }
	        case VCONTROL_DIALOG:
	        {
	            switch(listitem) // "Engine control\nLight control\nAlarm\nBonnet\nBoot"
	            {
					case 0: ShowPlayerDialog(playerid, VCONTROL_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle engine", ""white"Do you want to start or stop your engine?", "Start", "Stop");
                    case 1: ShowPlayerDialog(playerid, VCONTROL_DIALOG + 2, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle lights", ""white"Do you want to enable or disable your lights?\n\nNOTE: Lights are only visible at night.", "Enable", "Disable");
                    case 2: ShowPlayerDialog(playerid, VCONTROL_DIALOG + 3, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle alarm", ""white"Do you want to enable or disable your alarm?\n\nNOTE: The alarm will not reset itself when it's over,\nyou'll need to reset it by yourself.", "Enable", "Disable");
                    case 3: ShowPlayerDialog(playerid, VCONTROL_DIALOG + 4, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle bonnet", ""white"Do you want to open or close your bonnet?", "Open", "Close");
                    case 4: ShowPlayerDialog(playerid, VCONTROL_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle boot", ""white"Do you want to open or close your boot?", "Open", "Close");
	            }
	            return true;
	        }
	        case VCONTROL_DIALOG + 1:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
            	SetVehicleParamsEx(vehicle, 1, vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
	        }
	        case VCONTROL_DIALOG + 2:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], 1, vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
	        }
	        case VCONTROL_DIALOG + 3:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], 1, vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
	        }
	        case VCONTROL_DIALOG + 4:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], 1, vehicle_params[5], vehicle_params[6]);
	        }
	        case VCONTROL_DIALOG + 5:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], 1, vehicle_params[6]);
	        }
	        case NAME_CHANGE_DIALOG:
	        {
	            if(strlen(inputtext) > 20 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Name length: 3-20");
                if(!strcmp(inputtext, __GetName(playerid), false)) return SCM(playerid, -1, ""er"You are already using that name");
	            if(!strcmp(inputtext, __GetName(playerid), true)) return SCM(playerid, -1, ""er"The name only differs in case. Just relog with that.");

				new newname[MAX_PLAYER_NAME + 1];
				mysql_escape_string(inputtext, newname, pSQL, MAX_PLAYER_NAME + 1);
				
                mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `id` FROM `accounts` WHERE `name` = '%e';", inputtext);
                mysql_tquery(pSQL, gstr, "OnPlayerNameChangeRequest", "is", playerid, newname);
	            return true;
	        }
	        case HAREFILL_DIALOG:
	        {
	            if(listitem == 0)
	            {
	                SetPlayerHealth(playerid, 100.0);
	                SetPlayerChatBubble(playerid, "Refilled "red"Health "white"using VIP rights", -1, 40.0, 5000);
	                player_notice(playerid, "Health refilled", "");
             	    GivePlayerMoneyEx(playerid, -5000);
	            }
	            else
	            {
	                SetPlayerArmour(playerid, 100.0);
	                SetPlayerChatBubble(playerid, "Refilled "nef_yellow"Armor "white"using VIP rights", -1, 40.0, 5000);
					player_notice(playerid, "Armor refilled", "");
	    			GivePlayerMoneyEx(playerid, -2500);
	            }
				PlayerData[playerid][tickLastRefill] = GetTickCountEx();
	            return 1;
	        }
	        case GANG_SET_RANK_DIALOG:
	        {
				if(listitem == 0) return ShowDialog(playerid, GANG_SET_RANK_DIALOG);
				
				PlayerData[playerid][RankSelected] = listitem;
				
				format(gstr, sizeof(gstr), ""white"Now enter the name of the player who should get the rank:\n\nSelected Rank: %s", g_szGangRanks[listitem][E_gang_pos_name]);
				
				ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG + 1, DIALOG_STYLE_INPUT, ""nef" :: Gang Rank Menu", gstr, "Next", "Cancel");
	            return true;
	        }
	        case GANG_SET_RANK_DIALOG + 1:
	        {
			    if(!strcmp(__GetName(playerid), inputtext, true))
			    {
			        return SCM(playerid, -1, ""er"You can't assign your own rank");
			    }
			    
	            if(strlen(inputtext) > MAX_PLAYER_NAME+1 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Player doesn't exist");
	            if(sscanf(inputtext, "s[26]", PlayerData[playerid][GangAssignRank])) return SCM(playerid, -1, ""er"Player doesn't exist");
	            mysql_escape_string(PlayerData[playerid][GangAssignRank], PlayerData[playerid][GangAssignRank], pSQL, MAX_PLAYER_NAME+1);

				new ID = __GetPlayerID(PlayerData[playerid][GangAssignRank]);
				
		  		if(ID != INVALID_PLAYER_ID)
		  		{
					if(!IsPlayerAvail(ID)) return SCM(playerid, -1, ""er"Player ist not available");
		        	if(PlayerData[ID][e_gangid] != PlayerData[playerid][e_gangid]) return SCM(playerid, -1, ""er"This player is not in your gang!");
		        	if(PlayerData[ID][e_gangrank] == PlayerData[playerid][RankSelected]) return SCM(playerid, -1, ""er"Player is already this rank!");
		        	if(PlayerData[ID][e_gangrank] >= PlayerData[playerid][e_gangrank]) return SCM(playerid, -1, ""er"You can't assign this rank to this player!");

			  		PlayerData[ID][e_gangrank] = PlayerData[playerid][RankSelected];

		  			SQL_SaveAccount(ID, false, false);

				    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s set %s's rank to %s", __GetName(playerid), __GetName(ID), g_szGangRanks[PlayerData[playerid][RankSelected]][E_gang_pos_name]);
					gang_broadcast(PlayerData[playerid][e_gangid], gstr);
					
					PlayerData[playerid][RankSelected] = 0;
				}
				else
				{
				    SQL_AssignRankIfExist(playerid);
	            }
	            return true;
	        }
	        case CLOSE_GANG_DIALOG:
	        {
				format(gstr, sizeof(gstr), "UPDATE `accounts` SET `gangrank` = 0, `gangid` = 0 WHERE `gangid` = %i;", PlayerData[playerid][e_gangid]);
				mysql_tquery(pSQL, gstr);

				gang_broadcast(PlayerData[playerid][e_gangid], ""gang_sign" "r_besch"The gang has been closed by it's Leader");

				for(new r = 0; r < MAX_GZONES; r++)
				{
				    if(GZoneData[r][e_ormid] == ORM:-1)
				        continue;
	        
				    if(GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid])
				    {
						GZoneData[r][e_timeleft] = 0;
						GZoneData[r][e_underattack] = false;
						GZoneData[r][e_attacker] = 0;
						GZoneData[r][e_defender] = 0;
						GZoneData[r][e_locked] = gettime();
						GZoneData[r][e_localgang] = 0;

						format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname]);
						UpdateDynamic3DTextLabelText(GZoneData[r][e_labelid], WHITE, gstr2);

						orm_update(GZoneData[r][e_ormid]);
				    }
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(i != playerid)
				    {
				        if(PlayerData[i][e_gangid] == PlayerData[playerid][e_gangid] || PlayerData[i][TmpGangID] == PlayerData[playerid][e_gangid])
				        {
					        PlayerData[i][bGangInvite] = false;
					        PlayerData[i][e_gangid] = 0;
					        PlayerData[i][TmpGangID] = 0;
					        PlayerData[i][e_gangrank] = GANG_POS_NONE;
					        PlayerData[i][GangName][0] = '\0';
							PlayerData[i][GangTag][0] = '\0';
							SQL_SaveAccount(i, false, false);
					 		if(PlayerData[i][GangLabel] != Text3D:-1)
							{
							    DestroyDynamic3DTextLabel(PlayerData[i][GangLabel]);
					 			PlayerData[i][GangLabel] = Text3D:-1;
							}
						}
						
						SyncGangZones(i);
				    }
				}

				format(gstr, sizeof(gstr), "DELETE FROM `gangs` WHERE `id` = %i LIMIT 1;", PlayerData[playerid][e_gangid]);
				mysql_tquery(pSQL, gstr);

			    PlayerData[playerid][bGangInvite] = false;
			    PlayerData[playerid][e_gangid] = 0;
			    PlayerData[playerid][TmpGangID] = 0;
			    PlayerData[playerid][e_gangrank] = GANG_POS_NONE;
			    PlayerData[playerid][GangName][0] = '\0';
				PlayerData[playerid][GangTag][0] = '\0';
                SQL_SaveAccount(playerid, false, false);

                SyncGangZones(playerid);

				if(PlayerData[playerid][GangLabel] != Text3D:-1)
				{
				    DestroyDynamic3DTextLabel(PlayerData[playerid][GangLabel]);
					PlayerData[playerid][GangLabel] = Text3D:-1;
				}
				SCM(playerid, -1, ""gang_sign" The gang has been closed!");
	            return true;
	        }
	        case GANG_KICK_DIALOG:
	        {
	            if(strlen(inputtext) > MAX_PLAYER_NAME+1 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Player doesn't exist");
	            if(sscanf(inputtext, "s[26]", PlayerData[playerid][GangKickMem])) return SCM(playerid, -1, ""er"Player doesn't exist");

			    if(!strcmp(__GetName(playerid), inputtext, true))
			    {
			        return SCM(playerid, -1, ""er"You can't kick yourself");
			    }

	            mysql_escape_string(PlayerData[playerid][GangKickMem], PlayerData[playerid][GangKickMem], pSQL, MAX_PLAYER_NAME+1);

		  		new ID = INVALID_PLAYER_ID;
		  		if((ID = __GetPlayerID(PlayerData[playerid][GangKickMem])) != INVALID_PLAYER_ID)
		  		{
					if(!IsPlayerAvail(ID)) return SCM(playerid, -1, ""er"Player is not available");
		        	if(PlayerData[ID][e_gangid] != PlayerData[playerid][e_gangid]) return SCM(playerid, -1, ""er"This player is not in your gang!");
		        	if(PlayerData[ID][e_gangrank] == GANG_POS_FOUNDER) return SCM(playerid, -1, ""er"You cannot kick other leaders!");

                    PlayerData[ID][GangName][0] = '\0';
                    PlayerData[ID][GangTag][0] = '\0';
					PlayerData[ID][e_gangid] = 0;
			  		PlayerData[ID][e_gangrank] = 0;

		  			SQL_SaveAccount(ID, false, false);

					if(PlayerData[ID][GangLabel] != Text3D:-1)
					{
					    DestroyDynamic3DTextLabel(PlayerData[ID][GangLabel]);
						PlayerData[ID][GangLabel] = Text3D:-1;
					}
					
				    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s kicked %s out of the gang", __GetName(playerid), PlayerData[playerid][GangKickMem]);
					gang_broadcast(PlayerData[playerid][e_gangid], gstr);

			        SCM(ID, -1, ""gang_sign" You have been kicked out of your gang!");
			        
			        PlayerData[playerid][GangKickMem][0] = '\0';
			  	}
			  	else
			  	{
					SQL_KickFromGangIfExist(playerid);
				}
				return true;
	        }
	        case SETTINGS_DIALOG:
	        {
	            switch(listitem)
	            {
					case 0:
					{
					    Command_ReProcess(playerid, "/sb", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 1:
					{
					    Command_ReProcess(playerid, "/sj", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 2:
					{
					    if(PlayerData[playerid][bTextdraws]) Command_ReProcess(playerid, "/hidef", false);
					    else Command_ReProcess(playerid, "/showf", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 3:
					{
					    Command_ReProcess(playerid, "/random", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 4:
					{
					    if(PlayerData[playerid][bHasCustomSpawn])
					    {
					        PlayerData[playerid][bHasCustomSpawn] = false;
					    }
					    else
					    {
					    	Command_ReProcess(playerid, "/setspawn", false);
						}
						ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 5:
					{
					    if(PlayerData[playerid][e_color] == 0)
					    {
					        Command_ReProcess(playerid, "/savecolor", false);
					    }
					    else
					    {
					    	Command_ReProcess(playerid, "/deletecolor", false);
						}
						ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 6:
					{
					    if(PlayerData[playerid][e_skinsave] == -1)
					    {
					        Command_ReProcess(playerid, "/saveskin", false);
					    }
					    else
					    {
					    	Command_ReProcess(playerid, "/deleteskin", false);
						}
						ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 7:
					{
						ToggleSpeedo(playerid, !PlayerData[playerid][bSpeedo]);
					}
					case 8:
					{
					    Command_ReProcess(playerid, "/changepass", false);
					}
					case 9:
					{
					    ShowPlayerDialog(playerid, DIALOG_RECOVERY_EMAIL, DIALOG_STYLE_INPUT, ""nef" :: Recovery E-mail", ""white"This email can be used to recover your password in case\nyou lose access to your account. No staff/player is able\nto view your email.", "Set", "Cancel");
					}
					case 10:
					{
					    Command_ReProcess(playerid, "/stats", false);
					}
					case 11:
					{
					    Command_ReProcess(playerid, "/help", false);
					}
	            }
	            return true;
	        }
	        case HELP_DIALOG:
	        {
	            switch(listitem)
	            {
	                case 0: // General Help
	                {
						new cstring[1024];

						strcat(cstring, ""red"» "nef_yellow"Commands:\n");
						strcat(cstring, ""white"There are many commands, to get an overview use "yellow"/cmds\n\n");

						strcat(cstring, ""red"» "nef_yellow"Minigames\n");
						strcat(cstring, ""white"Available minigames:\n");
						strcat(cstring, ""yellow"Type /m to get an overview\n\n");

						strcat(cstring, ""red"» "nef_yellow"Admins\n");
						strcat(cstring, ""white"Admins are here to help, use "yellow"/report "white"if you want to report a player or if you have a question\n\n");

						strcat(cstring, ""red"» "nef_yellow"Gangs\n");
						strcat(cstring, ""white"Gangs are groups which have been created by players\n\n");

						strcat(cstring, ""red"» "nef_yellow"Houses/Business\n");
						strcat(cstring, ""white"Houses and business are for sale around San Andreas. Use "yellow"/cmds "white"for more infos");

						ShowPlayerDialog(playerid, HELP_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" :: General Help", cstring, "OK", "Back");
	                }
	                case 1: // Commands
	                {
                        Command_ReProcess(playerid, "/cmds", false);
	                }
	                case 2: // shortcuts
	                {
						new cstring[512];

						strcat(cstring, ""red"» "nef_yellow"LMB (Left Mouse Button)\n");
						strcat(cstring, ""white"Speedboost for vehicles\n\n");

						strcat(cstring, ""red"» "nef_yellow"2\n");
						strcat(cstring, ""white"Flip your vehicle\n\n");

						strcat(cstring, ""red"» "nef_yellow"H\n");
						strcat(cstring, ""white"Jump with your vehicle\n\n");

						ShowPlayerDialog(playerid, HELP_DIALOG + 2, DIALOG_STYLE_MSGBOX, ""nef" :: Shortcuts", cstring, "OK", "Back");
	                }
	                case 3: // Minigames
	                {
	                    Command_ReProcess(playerid, "/minigames", false);
	                }
	                case 4: // Maps
	                {
	                    Command_ReProcess(playerid, "/tele", false);
	                }
	                case 5: // settings
	                {
						Command_ReProcess(playerid, "/settings", false);
	                }
	                case 6: // how to earn score
	                {
						strcat(gstr, ""white"To earn score and money you can join various minigames (/m). For each kill or objective\nyou will receive a certain amount of money and score.\nCheck /minigames for a list of all minigames.\n\nYou can also freeroam and kill people for money and score.");

						ShowPlayerDialog(playerid, HELP_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""nef" :: How to earn score and money", gstr, "OK", "Back");
	                }
	                case 7: // what to do here
	                {
						strcat(gstr, ""white"On "SVRNAME" you will never be bored. If you like to play with and\nagainst others join a minigame (/minigames).\nExplore our map and teleports (/t)\nYou can design your character with our toy system (/toy).");

						ShowPlayerDialog(playerid, HELP_DIALOG + 6, DIALOG_STYLE_MSGBOX, ""nef" :: What to do here", gstr, "OK", "Back");
	                }
	                case 8: Command_ReProcess(playerid, "/credits", false);
	                case 9: Command_ReProcess(playerid, "/vip", false);
	            }
	            return true;
	        }
	        case HELP_DIALOG + 3:
	        {
	            switch(listitem)
	            {
	                case 0: Command_ReProcess(playerid, "/derby", false);
	                case 1: Command_ReProcess(playerid, "/cnr", false);
	                case 2: Command_ReProcess(playerid, "/race", false);
	                case 3: Command_ReProcess(playerid, "/rocket", false);
	                case 4: Command_ReProcess(playerid, "/fallout", false);
	                case 5: Command_ReProcess(playerid, "/gungame", false);
	                case 6: Command_ReProcess(playerid, "/minigun", false);
	                case 7: Command_ReProcess(playerid, "/sniper", false);
	                case 8: ShowPlayerDialog(playerid, HELP_DIALOG + 4, DIALOG_STYLE_MSGBOX, ""nef" :: Minigames", ""white"Death Match (/dm1-4)", "OK", "Back");
	                case 9: Command_ReProcess(playerid, "/tdm", false);
	                case 10: Command_ReProcess(playerid, "/war", false);
	                case 11: Command_ReProcess(playerid, "/sawn", false);
	            }
	            return true;
	        }
		    case CMDS_DIALOG:
		    {
		        new cstring[2048];
		        
		        switch(listitem)
		        {
		            case 0: // General
		            {
		                strcat(cstring, ""yellow"/toys "white"- player toys\n");
		                strcat(cstring, ""yellow"/help "white"- small useful explanations\n");
		                strcat(cstring, ""yellow"/god "white"- infinite health\n");
						strcat(cstring, ""yellow"/pm "white"- write a personal message to a player\n");
						strcat(cstring, ""yellow"/r "white"- reply to your last pm\n");
						strcat(cstring, ""yellow"/t "white"- list of all teleport\n");
						strcat(cstring, ""yellow"/w "white"- free weapons\n");
						strcat(cstring, ""yellow"/v "white"- list of all vehicles also /v <vehicle name>\n");
						strcat(cstring, ""yellow"/id "white"- get the id of a player\n");
						strcat(cstring, ""yellow"/go "white"- goto a desired player\n");
						strcat(cstring, ""yellow"/time "white"- set your time\n");
						strcat(cstring, ""yellow"/rtime "white"- reset your time\n");
						strcat(cstring, ""yellow"/admins "white"- a list of all online admins\n");
						strcat(cstring, ""yellow"/car "white"- quick spawn a car\n");
						strcat(cstring, ""yellow"/top "white"- top list selection\n");
						strcat(cstring, ""yellow"/report "white"- report a player to admins\n");
				        strcat(cstring, ""yellow"/streams "white"- listen to audio streams\n");
						strcat(cstring, ""yellow"/sb "white"- toggle speedboost\n");
						strcat(cstring, ""yellow"/sj "white"- toggle superjump\n");
		                strcat(cstring, ""yellow"/fs "white"- fightstyles\n");
		            }
		            case 1: // Account
		            {
		                strcat(cstring, ""yellow"/settings "white"- player control panel\n");
		                strcat(cstring, ""yellow"/achs "white"- achievements\n");
		                strcat(cstring, ""yellow"/changename "white"- change your account's nickname\n");
		                strcat(cstring, ""yellow"/changepass "white"- change your account's password\n");
		                strcat(cstring, ""yellow"/sellgc "white"- sell gold credits\n");
		                strcat(cstring, ""yellow"/stats "white"- stats of a player also /stats <playerid>\n");
		                strcat(cstring, ""yellow"/savecolor "white"- save a color for you next visit\n");
		                strcat(cstring, ""yellow"/deletecolor "white"- delete a saved color\n");
		                strcat(cstring, ""yellow"/saveskin "white"- save a skin for you next visit\n");
		                strcat(cstring, ""yellow"/deleteskin "white"- delete a saved skin\n");
		            }
		            case 2: // Gang
		            {
						strcat(cstring, ""yellow"/gcreate "white"- create a gang\n");
						strcat(cstring, ""yellow"/gwar "white"- start a war against another gang\n");
						strcat(cstring, ""yellow"/gzones "white"- view your zones\n");
						strcat(cstring, ""yellow"/gcapture "white"- recapture a zone while it is begin attacked\n");
						strcat(cstring, ""yellow"/gmenu "white"- gang menu\n");
						strcat(cstring, ""yellow"/gcolor "white"- set the gang color\n");
						strcat(cstring, ""yellow"/gcar "white"- set the gang vehicle\n");
						strcat(cstring, ""yellow"/gsetrank "white"- set a players rank\n");
						strcat(cstring, ""yellow"/ginvite "white"- invite someone to your gang\n");
						strcat(cstring, ""yellow"/gkick "white"- kick someone off your gang\n");
						strcat(cstring, ""yellow"/gjoin "white"- join a gang\n");
						strcat(cstring, ""yellow"/gleave "white"- leave the gang you are in\n");
						strcat(cstring, ""yellow"/gclose "white"- destroy your gang\n");
						strcat(cstring, ""yellow"/gdeny "white"- deny an invitation\n");
						strcat(cstring, ""yellow"/gangs "white"- online gangs\n");
						strcat(cstring, ""yellow"/gwars "white"- view ongoing gwars\n");
		            }
		            case 3: // House/Business
		            {
		                strcat(cstring, ""yellow"/upgrade "white"- upgrade your house interior\n");
						strcat(cstring, ""yellow"/enter "white"- enter a unlocked house\n");
						strcat(cstring, ""yellow"/buy "white"- buy a house\n");
						strcat(cstring, ""yellow"/exit "white"- exit your house\n");
						strcat(cstring, ""yellow"/sell "white"- sell your house\n");
						strcat(cstring, ""yellow"/hlock "white"- lock or unlock your house\n");
						strcat(cstring, ""yellow"/gotomyhouse "white"- goto your house\n");
						strcat(cstring, ""yellow"/gotomybizz "white"- goto your business\n");
						strcat(cstring, ""yellow"/bbuy "white"- buy a business\n");
						strcat(cstring, ""yellow"/bsell "white"- sell your business\n");
		            }
		            case 4: // Private Vehicle
		            {
                        strcat(cstring, ""yellow"/pv "white"- vehicle control\n");
                        strcat(cstring, ""yellow"/lock "white"- (un)lock your vehicle\n");
                        strcat(cstring, ""yellow"/vcolor "white"- set your vehicles color\n");
		            }
		            case 5: // Other
		            {
		                strcat(cstring, ""yellow"/color "white"- change your color\n");
		   				strcat(cstring, ""yellow"/uptime "white"- see the uptime of the server\n");
						strcat(cstring, ""yellow"/hidef "white"- hide the footer\n");
						strcat(cstring, ""yellow"/showf "white"- show the footer\n");
						strcat(cstring, ""yellow"/hitman "white"- set a bounty on someones head\n");
						strcat(cstring, ""yellow"/bounties "white"- see current bounties\n");
						strcat(cstring, ""yellow"/para "white"- gives you a parachute\n");
						strcat(cstring, ""yellow"/info "white"- Credits\n");
						strcat(cstring, ""yellow"/s "white"- save your current position\n");
						strcat(cstring, ""yellow"/l "white"- lave your saved position\n");
						strcat(cstring, ""yellow"/weather "white"- change your weather\n");
						strcat(cstring, ""yellow"/anims "white"- a lsit of all animations\n");
						strcat(cstring, ""yellow"/stopanims "white"- stop animation\n");
						strcat(cstring, ""yellow"/247 "white"- random teleport to a 24/7 shop\n");
						strcat(cstring, ""yellow"/bank "white"- random teleport to a bank\n");
						strcat(cstring, ""yellow"/skin "white"- change your current skin\n");
						strcat(cstring, ""yellow"/netstats "white"- servers network stats\n");
						//strcat(cstring, ""yellow"/mynetstats "white"- your network stats\n");
						strcat(cstring, ""yellow"/ping "white"- check somebody's ping\n");
						strcat(cstring, ""yellow"/toggletoys "white"- hide/show your toys\n");
					}
					case 6: return Command_ReProcess(playerid, "/vip", false);
					case 7: return Command_ReProcess(playerid, "/credits", false);
		        }

				ShowPlayerDialog(playerid, CMDS_DIALOG + 1, DIALOG_STYLE_LIST, ""nef" :: Commands", cstring, "OK", "Back");
				return true;
		    }
		    case CMDS_DIALOG + 1:
		    {
		        new command[32], bool:s = false;
		        for(new i = 0, c = 0; i < strlen(inputtext); i++)
		        {
		            if(!s && inputtext[i] != '/')
					{
					    continue;
					}
					else
					{
						s = true;
					}
					
					if(inputtext[i] != ' ')
					{
						command[c++] = inputtext[i];
					}
					else
					{
					    break;
					}
				}
				Command_ReProcess(playerid, command, false);
		        return true;
		    }
	        case HOUSE_UPGRADE_DIALOG:
	        {
				PlayerData[playerid][HouseIntSelected] = listitem;

				format(gstr2, sizeof(gstr2), ""white"House Upgrade\n\n- Interior: %s\n- Price: $%s\n\nClick \"Upgrade\" in order to apply the new interior.\n"green"* "white"All House Items will be removed in this slot!", g_aHouseInteriorTypes[listitem][intname], number_format(g_aHouseInteriorTypes[listitem][price]));
				ShowPlayerDialog(playerid, HOUSE_UPGRADE_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" :: House Upgrade", gstr2, "Upgrade", "Cancel");
				return true;
	        }
	        case HOUSE_UPGRADE_DIALOG + 1:
	        {
		        if(gTeam[playerid] != gFREEROAM)
				{
					player_notice(playerid, "Get out to upgrade the house", "");
					return 1;
				}
	            if(GetPlayerMoneyEx(playerid) < g_aHouseInteriorTypes[PlayerData[playerid][HouseIntSelected]][price])
	            {
	                return SCM(playerid, -1, ""er"You can't afford that interior");
	            }

				new h_id = GetHouseIdByPlayerSlotSel(playerid);
				
				if(h_id != -1)
				{
	  	            if(PlayerData[playerid][HouseIntSelected] == HouseData[h_id][interior])
		            {
	         			return SCM(playerid, -1, ""er"This house already got the interior");
		            }

                    HouseData[h_id][locked] = 1;

		            for(new pid = 0; pid < MAX_PLAYERS; pid++)
		            {
		                if(gTeam[pid] == HOUSE && GetPlayerInterior(pid) == g_aHouseInteriorTypes[HouseData[h_id][interior]][interior] && GetPlayerVirtualWorld(pid) == (HouseData[h_id][e_id] + 1000))
		                {
		                    gTeam[pid] = gFREEROAM;
		                    SetPlayerPos(pid, HouseData[h_id][e_x], HouseData[h_id][e_y], HouseData[h_id][e_z]);
							ResetPlayerWorld(pid);
		                }
		            }

					for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
					{
						if(HouseData[h_id][E_Obj_Model][ii] != 0)
						{
						    DestroyDynamicObject(HouseData[h_id][E_Obj_ObjectID][ii]);
						    DestroyDynamic3DTextLabel(HouseData[h_id][E_Obj_Label][ii]);
						    HouseData[h_id][E_Obj_Label][ii] = Text3D:-1;
						    HouseData[h_id][E_Obj_ObjectID][ii] = -1;
						    HouseData[h_id][E_Obj_Model][ii] = 0;
						}
					}
					
	                GivePlayerMoneyEx(playerid, -g_aHouseInteriorTypes[PlayerData[playerid][HouseIntSelected]][price]);
	                HouseData[h_id][interior] = PlayerData[playerid][HouseIntSelected];
	       			SetPlayerPos(playerid, HouseData[h_id][e_x], HouseData[h_id][e_y], HouseData[h_id][e_z]);
					ResetPlayerWorld(playerid);
					gTeam[playerid] = gFREEROAM;
	      		    format(gstr, sizeof(gstr), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseData[h_id][e_id], number_format(HouseData[h_id][price]), HouseData[h_id][e_score], g_aHouseInteriorTypes[PlayerData[playerid][HouseIntSelected]][intname]);
	    			UpdateDynamic3DTextLabelText(HouseData[h_id][e_labelid], -1, gstr);
	                SQL_SaveHouse(h_id, true);
	                SQL_SaveAccount(playerid, false, false);
	                SCM(playerid, GREEN, "Successfully upgraded the interior!");
                }
                else player_notice(playerid, "Couldn't find the house in that slot", "Report on forums", 5000);
	            return true;
	        }
	        case TOPLIST_DIALOG:
	        {
	            switch(listitem)
	            {
	                case 0: Command_ReProcess(playerid, "/richlist", false);
	                case 1: Command_ReProcess(playerid, "/wanteds", false);
	                case 2: Command_ReProcess(playerid, "/score", false);
	                case 3: Command_ReProcess(playerid, "/kills", false);
	                case 4: Command_ReProcess(playerid, "/deaths", false);
	                case 5: Command_ReProcess(playerid, "/toptime", false);
	                case 6: Command_ReProcess(playerid, "/gangs", false);
	                case 7: Command_ReProcess(playerid, "/gtop", false);
	                case 8: Command_ReProcess(playerid, "/reacts", false);
	                case 9: Command_ReProcess(playerid, "/races", false);
	                case 10: Command_ReProcess(playerid, "/derbys", false);
	                case 11: Command_ReProcess(playerid, "/fallouts", false);
					case 12: Command_ReProcess(playerid, "/gungames", false);
	            }
	            return true;
	        }
		    case TELE_DIALOG:
		    {
				if(listitem < 0 || listitem > 8)
					return true;

				GetTeleportDialogString(listitem);
					
		        switch(listitem)
		        {
		            case 0: // Stunt Zones
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 1, DIALOG_STYLE_LIST, ""nef" :: Teleports > Stunt Zones", g_dialogTpString, "Select", "Back");
		            }
		            case 1: // Jumps
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 2, DIALOG_STYLE_LIST, ""nef" :: Teleports > Jumps", g_dialogTpString, "Select", "Back");
					}
		            case 2: // Fun Maps
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" :: Teleports > Fun Maps", g_dialogTpString, "Select", "Back");
					}
		            case 3: // Challenges/Parkours
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 4, DIALOG_STYLE_LIST, ""nef" :: Teleports > Challenges/Parkours", g_dialogTpString, "Select", "Back");
					}
		            case 4: // Specials
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 5, DIALOG_STYLE_LIST, ""nef" :: Teleports > Specials", g_dialogTpString, "Select", "Back");
					}
		            case 5: // Hotspots
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 6, DIALOG_STYLE_LIST, ""nef" :: Teleports > Hotspots", g_dialogTpString, "Select", "Back");
					}
					case 6: // Drifts
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 7, DIALOG_STYLE_LIST, ""nef" :: Teleports > Drifts", g_dialogTpString, "Select", "Back");
					}
					case 7: // Tune Shops
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 8, DIALOG_STYLE_LIST, ""nef" :: Teleports > Tune Shops", g_dialogTpString, "Select", "Back");
					}
					case 8: // Cities
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 9, DIALOG_STYLE_LIST, ""nef" :: Teleports > Cities", g_dialogTpString, "Select", "Back");
					}
		        }
				return true;
		    }
		    case TELE_DIALOG + 1: // Stunt Zones
		    {
		        PushTeleportInput(playerid, 0, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 2: // Jumps
		    {
		        PushTeleportInput(playerid, 1, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 3: // Fun Maps
		    {
		        PushTeleportInput(playerid, 2, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 4: // Challenges/Parkours
		    {
		        PushTeleportInput(playerid, 3, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 5: // Specials
		    {
		        PushTeleportInput(playerid, 4, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 6: // Hotspots
		    {
		        PushTeleportInput(playerid, 5, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 7: // Drifts
		    {
		        PushTeleportInput(playerid, 6, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 8: // Tune Shops
		    {
		        PushTeleportInput(playerid, 7, listitem);
				return 1;
		    }
		    case TELE_DIALOG + 9: // Cities
		    {
		        PushTeleportInput(playerid, 8, listitem);
				return 1;
		    }
	        case GMENU_DIALOG:
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
						SQL_FetchGangInfo(playerid, PlayerData[playerid][e_gangid]);
		            }
		            case 1:
		            {
		                SQL_FetchGangMemberNames(playerid, PlayerData[playerid][e_gangid]);
		            }
		            case 2:
		            {
						new cstring[900];
						
						strcat(cstring, ""yellow"/gmenu "white"- gang menu\n");
						strcat(cstring, ""yellow"/gcolor "white"- set the gang color\n");
						strcat(cstring, ""yellow"/gcar "white"- set the gang vehicle\n");
						strcat(cstring, ""yellow"/gsetrank "white"- set a players rank\n");
						strcat(cstring, ""yellow"/ginvite "white"- invite someone to your gang\n");
						strcat(cstring, ""yellow"/gkick "white"- kick someone off your gang\n");
						strcat(cstring, ""yellow"/gjoin "white"- join a gang\n");
						strcat(cstring, ""yellow"/gleave "white"- leave the gang you are in\n");
						strcat(cstring, ""yellow"/gclose "white"- destroy your gang\n");
						strcat(cstring, ""yellow"/gdeny "white"- deny an invitation\n");
						strcat(cstring, ""yellow"/gangs "white"- online gangs\n");
						strcat(cstring, ""yellow"/gzones "white"- view your zones\n");
						strcat(cstring, ""yellow"/gcapture "white"- recapture a zone while it is begin attacked\n");
						strcat(cstring, ""yellow"/gwar "white"- start a war against another gang\n");
						strcat(cstring, ""yellow"/gwars "white"- view ongoing gwars\n");
		            
		                ShowPlayerDialog(playerid, GMENU_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" :: Gang commands", cstring, "OK", "Back");
		            }
		            case 3: // view gang zones
		            {
                        Command_ReProcess(playerid, "/gzones", false);
		            }
		            case 4: // edit rank
		            {
		                Command_ReProcess(playerid, "/gsetrank", false);
		            }
		            case 5: // kick player
					{
						Command_ReProcess(playerid, "/gkick", false);
					}
		        }
		        return true;
	        }
	        case DERBY_VOTING_DIALOG:
	        {
				if(!IsDerbyRunning)
				{
				    if(Iter_Contains(iterDerbyVoters, playerid)) return SCM(playerid, -1, ""er"You already voted this round");
				    
				    Iter_Add(iterDerbyVoters, playerid);
				
				    switch(listitem)
				    {
						case 0:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'SilverGround'", __GetName(playerid), playerid);
							DerbyMapVotes[6]++;
							derby_broadcast(gstr);
						}
						case 1:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Anubis'", __GetName(playerid), playerid);
							DerbyMapVotes[7]++;
							derby_broadcast(gstr);
						}
						case 2:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Confusing'", __GetName(playerid), playerid);
							DerbyMapVotes[8]++;
							derby_broadcast(gstr);
						}
				        case 3:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Lighthouse'", __GetName(playerid), playerid);
							DerbyMapVotes[0]++;
							derby_broadcast(gstr);
						}
						case 4:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Truncat'", __GetName(playerid), playerid);
							DerbyMapVotes[1]++;
							derby_broadcast(gstr);
						}
						case 5:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Sky Skiing'", __GetName(playerid), playerid);
							DerbyMapVotes[2]++;
							derby_broadcast(gstr);
						}
						case 6:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Townhall'", __GetName(playerid), playerid);
							DerbyMapVotes[3]++;
							derby_broadcast(gstr);
						}
						case 7:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Glazz'", __GetName(playerid), playerid);
							DerbyMapVotes[4]++;
							derby_broadcast(gstr);
						}
						case 8:
						{
						    format(gstr, sizeof(gstr), "%s(%i) has voted for Map 'Rambo'", __GetName(playerid), playerid);
							DerbyMapVotes[5]++;
							derby_broadcast(gstr);
						}
					}
				}
				else
				{
					SCM(playerid, BLUE, "No voting time now!");
				}
				return true;
			}
			case BANK_DIALOG:
			{
			    switch(listitem)
			    {
				    case 0: // Deposit
				    {
				        format(gstr, sizeof(gstr), ""white"» You got "yellow"$%s"white" in your bank account.\n\nType in the amount you want to deposit below:", number_format(PlayerData[playerid][e_bank]));
				        ShowPlayerDialog(playerid, BANK_DIALOG+1, DIALOG_STYLE_INPUT, ""nef" :: Bank > Deposit", gstr, "Deposit", "Cancel");
				    }
				    case 1: // Withdraw
				    {
				        format(gstr, sizeof(gstr), ""white"» You got "yellow"$%s"white" in your bank account.\n\nType in the amount you want to withdraw below:", number_format(PlayerData[playerid][e_bank]));
				        ShowPlayerDialog(playerid, BANK_DIALOG+2, DIALOG_STYLE_INPUT, ""nef" :: Bank > Withdraw", gstr, "Withdraw", "Cancel");
				    }
				    case 2: // Show Credit
				    {
				        format(gstr, sizeof(gstr), ""white"» You got "yellow"$%s"white" in your bank account.", number_format(PlayerData[playerid][e_bank]));
				        ShowPlayerDialog(playerid, 11231, DIALOG_STYLE_MSGBOX, ""nef" :: Bank > Balance", gstr, "OK", "");
				    }
			    }
			    return true;
			}
			case BANK_DIALOG + 1:
			{
				extract inputtext -> new inamount; else
				{
				    return SCM(playerid, WHITE, ""er"Invalid amount");
				}

				if(inamount > GetPlayerMoneyEx(playerid))
				{
					SCM(playerid, WHITE, ""er"You don't have that much money!");
				}
				else if(inamount < 1)
				{
					SCM(playerid, WHITE, ""er"Invalid amount");
				}
				else
				{
					GivePlayerMoneyEx(playerid, -inamount);
					PlayerData[playerid][e_bank] += inamount;
					format(gstr, sizeof(gstr), "» You have deposited {FF7800}$%s"white" into your bank account", number_format(inamount));
					SCM(playerid, WHITE, gstr);
				}
				return true;
			}
			case BANK_DIALOG+2:
			{
				extract inputtext -> new outamount; else
				{
				    return SCM(playerid, WHITE, ""er"Invalid amount");
				}

				if(outamount > PlayerData[playerid][e_bank])
				{
					SCM(playerid, WHITE, ""er"You do not have that much money in your bank account!");
				}
				else if(outamount < 1)
				{
					SCM(playerid, WHITE, ""er"Invalid amount!");
				}
				else
				{
					GivePlayerMoneyEx(playerid, outamount);
					PlayerData[playerid][e_bank] -= outamount;
					format(gstr, sizeof(gstr), "» You have withdrawn {FF7800}$%s"white" from your bank account", number_format(outamount));
					SCM(playerid, WHITE, gstr);
				}
				return true;
			}
			case LIFT_DIALOG:
			{
		        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
		        {
		            GameTextForPlayer(playerid, "~r~The floor is already in queue", 3500, 4);
				}
				else if(DidPlayerRequestElevator(playerid))
				{
				    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
				}
				else
				{
			        CallElevator(playerid, listitem);
				}
				return true;
			}
			case LOGIN_DIALOG: // player entered a password
			{
				if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
					return SkipLogin(playerid);
				}
				if(isnull(inputtext)) return SkipLogin(playerid);
				extract inputtext -> new string:password[33]; else
				{
					return SkipLogin(playerid);
				}
				mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT `id` FROM `accounts` WHERE `name` = '%e' AND (`hash` = MD5('%e') OR `hash` = SHA1('%e')) LIMIT 1;", __GetName(playerid), password, password);
				mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_LOGIN);
			    return true;
			}
			case REGISTER_DIALOG:
			{
			    if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
				    return SkipRegistration(playerid);
				}
				if(isnull(inputtext)) return SkipRegistration(playerid);
				extract inputtext -> new string:password[33]; else
				{
					return SkipRegistration(playerid);
				}
			    SQL_RegisterAccount(playerid, REGISTER_CONNECT, password);
			    return true;
			}
			case REGISTER_DIALOG + 1:
			{
			    if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
				    return SCM(playerid, -1, ""er"Wrong input");
				}
				if(isnull(inputtext)) return SCM(playerid, -1, ""er"Wrong input");
				extract inputtext -> new string:password[33]; else
				{
					return SCM(playerid, -1, ""er"Wrong input");
				}
			    SQL_RegisterAccount(playerid, REGISTER_ONLINE, password);
			    return true;
			}
			case STREAM_DIALOG:
			{
				switch(listitem)
		    	{
	      			case 0: ShowPlayerDialog(playerid, STREAM_DIALOG+1, DIALOG_STYLE_LIST, ""nef" :: Streams > Streams > Electro", "#MUSIK.TRANCE - WWW.RAUTEMUSIK.FM\n:: Electro Radio :: all about electromusic", "Select", "Back");
					case 1: ShowPlayerDialog(playerid, STREAM_DIALOG+2, DIALOG_STYLE_LIST, ""nef" :: Streams > Metal", "RockRadio1.Com - Classic Hard Rock and Heavy\nidobi Howl", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, STREAM_DIALOG+3, DIALOG_STYLE_LIST, ""nef" :: Streams > Pop", "idobi Radio: New. Music.\nChartHits.FM - Top 40 Radio", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, STREAM_DIALOG+4, DIALOG_STYLE_LIST, ""nef" :: Streams > Hip Hop", "HOT 108 JAMZ - #1 FOR HIP HOP\nOne love Hip Hop Radio", "Select", "Back");
					case 4: ShowPlayerDialog(playerid, STREAM_DIALOG+5, DIALOG_STYLE_LIST, ""nef" :: Streams > Rap", "POWERHITZ.COM - #1 FOR HITZ\nRADIOUP.COM - THE HITLIST", "Select", "Back");
					case 5: ShowPlayerDialog(playerid, STREAM_DIALOG+6, DIALOG_STYLE_LIST, ""nef" :: Streams > Mainstream/Rock", "#MUSIK.MAIN - WWW.RAUTEMUSIK.FM - 24H\n181.FM - Kickin' Country", "Select", "Back");
					case 6: ShowPlayerDialog(playerid, STREAM_DIALOG+7, DIALOG_STYLE_LIST, ""nef" :: Streams > Oldies", "181.FM - Good Time Oldies\n#MUSIK.GOLDIES - WWW.RAUTEMUSIK.FM", "Select", "Back");
					case 7: ShowPlayerDialog(playerid, STREAM_DIALOG+8, DIALOG_STYLE_LIST, ""nef" :: Streams > Dubstep", "#MUSIK.DRUMSTEP - WWW.RAUTEMUSIK.FM\nSinister Souls Dubstep, Dub and Deep Bass", "Select", "Back");
					case 8: ShowPlayerDialog(playerid, STREAM_DIALOG+9, DIALOG_STYLE_INPUT, ""nef" :: Streams > Your own stream", ""white"Please enter the audio stream you want to listen to", "Play", "Back");
				}
				return true;
			}
			case STREAM_DIALOG+1:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99195090");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=215139");
    			}
				return true;
			}
			case STREAM_DIALOG+2:
			{
				switch(listitem)
		    	{
		       		case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=558051");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=15810");
				}
				return true;
			}
			case STREAM_DIALOG+3:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=914897");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645");
				}
				return true;
			}
			case STREAM_DIALOG+4:
			{
	  			switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=288144");
				}
				return true;
			}
			case STREAM_DIALOG+5:
			{
				switch(listitem)
			    {
			        case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=107949");
			        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=70545");
				}
				return true;
			}
			case STREAM_DIALOG+6:
			{
				switch(listitem)
			    {
			        case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=12337");
			        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=221956");
				}
				return true;
			}
			case STREAM_DIALOG+7:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=19821");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99195102");
				}
				return true;
			}
			case STREAM_DIALOG+8:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=39428");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=50909");
				}
				return true;
			}
			case STREAM_DIALOG+9:
			{
			    extract inputtext -> new string:link[144]; else
			    {
					return ShowPlayerDialog(playerid, STREAM_DIALOG+9, DIALOG_STYLE_INPUT, ""nef" :: Streams > Your own stream", ""white"Please enter the audio stream you want to listen to", "Play", "Back");
			    }
				PlayAudioStreamForPlayer(playerid, link);
				return true;
			}
			case TOY_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" :: Player Toys > Slot: %i", listitem + 1);
					
			    if(listitem > PlayerData[playerid][e_addtoyslots] + 4)
			    {
			        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This toy slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
			    }
			    else
			    {
			        PlayerData[playerid][toy_selected] = listitem;
			        
					if(PlayerToyData[playerid][listitem][toy_model] == 0)
					{
					    ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
					}
					else
					{
		            	ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, gstr, "Edit Toy Position\nChange Bone\n"grey"Remove Toy", "Select", "Close");
					}
			    }
				return true;
			}
			case TOY_DIALOG + 1:
			{
				switch(listitem)
				{
				    case 0: // edit
				    {
				        EditAttachedObject(playerid, PlayerData[playerid][toy_selected]);
				        ShowPlayerToyTextdraws(playerid);
				        player_notice(playerid, "You are now editing the toy", "");
				    }
				    case 1: // change bone
					{
					    new finstring[750];
							
						format(gstr, sizeof(gstr), ""nef" :: Player Toys > Slot %i > Change Bone", PlayerData[playerid][toy_selected] + 1);

					    strcat(finstring, "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot");
					    strcat(finstring, "\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw");

					    ShowPlayerDialog(playerid, TOY_DIALOG + 2, DIALOG_STYLE_LIST, gstr, finstring, "Select", "Cancel");
					}
					case 2: // remove toy
					{
					    if(IsPlayerAttachedObjectSlotUsed(playerid, PlayerData[playerid][toy_selected]))
						{
							RemovePlayerAttachedObject(playerid, PlayerData[playerid][toy_selected]);
						}
						PlayerToyData[playerid][PlayerData[playerid][toy_selected]][toy_model] = 0;
						player_notice(playerid, "Toy removed", "");
					}
				}
			    return true;
			}
			case TOY_DIALOG + 2: //change bone
			{
			    listitem++;
			    PlayerToyData[playerid][PlayerData[playerid][toy_selected]][toy_bone] = listitem;

			    if(IsPlayerAttachedObjectSlotUsed(playerid, PlayerData[playerid][toy_selected]))
				{
					RemovePlayerAttachedObject(playerid, PlayerData[playerid][toy_selected]);
				}

			    listitem = PlayerData[playerid][toy_selected];

	            SetPlayerAttachedObject(playerid,
	                listitem,
	                PlayerToyData[playerid][listitem][toy_model],
	                PlayerToyData[playerid][listitem][toy_bone],
	                PlayerToyData[playerid][listitem][toy_x],
	                PlayerToyData[playerid][listitem][toy_y],
	                PlayerToyData[playerid][listitem][toy_z],
	                PlayerToyData[playerid][listitem][toy_rx],
	                PlayerToyData[playerid][listitem][toy_ry],
	                PlayerToyData[playerid][listitem][toy_rz],
	                PlayerToyData[playerid][listitem][toy_sx],
	                PlayerToyData[playerid][listitem][toy_sy],
	                PlayerToyData[playerid][listitem][toy_sz]);

			    player_notice(playerid, "Bone changed", "");
			    return true;
			}
			case VEHICLE_DIALOG:
			{
			   	switch(listitem)
				{
				    case 0:
   					{
    					if(PlayerData[playerid][e_vip] == 0)
						{
							return SCM(playerid, -1, ""er"You need to be VIP to access this section");
						}
						ShowPlayerDialog(playerid, VEHICLE_DIALOG+16, DIALOG_STYLE_LIST, ""nef" :: Vehicles > VIP Vehicles", ""RED_E"Custom Cheetah\n"LB_E"Police Infernus\n"YELLOW_E"Custom NRG\n"GREEN_E"Custom Bullet\n"WHITE_E"Custom Huntley", "Select", "Back");
					}
					case 1: ShowPlayerDialog(playerid, VEHICLE_DIALOG+1, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Airplanes", "Andromada\nAT-400\nBeagle\nCropduster\nDodo\nNevada\nRustler\nShamal\nSkimmer\nStuntplane", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, VEHICLE_DIALOG+2, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Helicopters", "Cargobob\nLeviathan\nMaverick\nNews Maverick\nPolice Maverick\nRaindance\nSeasparrow\nSparrow", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, VEHICLE_DIALOG+3, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Bikes", "BF-400\nBike\nBMX\nFaggio\nFCR-900\nFreeway\nMountain Bike\nNRG-500\nPCJ-600\nPizzaboy\nQuad\nSanchez\nWayfarer", "Select", "Back");
					case 4: ShowPlayerDialog(playerid, VEHICLE_DIALOG+4, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Convertibles", "Comet\nFeltzer\nStallion\nWindsor", "Select", "Back");
					case 5: ShowPlayerDialog(playerid, VEHICLE_DIALOG+5, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Industrial", "Benson\nBobcat\nBurrito\nBoxville\nBoxburg\nCement Truck\nDFT-30\nFlatbed\nLinerunner\nMule\nNewsvan\nPacker\nPetrol Tanker\nPony\nRoadtrain\nRumpo\nSadler\nSadler Shit\nTopfun\nTractor\nTrashmaster\nUtility Van\nWalton\nYankee\nYosemite", "Select", "Back");
					case 6: ShowPlayerDialog(playerid, VEHICLE_DIALOG+6, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Lowriders", "Blade\nBroadway\nRemington\nSavanna\nSlamvan\nTahoma\nTornado\nVoodoo", "Select", "Back");
					case 7: ShowPlayerDialog(playerid, VEHICLE_DIALOG+7, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Off Road", "BF Injection\nDune\nHuntley\nLandstalker\nMesa\nMonster\nMonster A\nMonster B\nPatriot\nRancher A\nRancher B\nSandking", "Select", "Back");
					case 8: ShowPlayerDialog(playerid, VEHICLE_DIALOG+8, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Public Service Vehicles", "Ambulance\nBarracks\nBus\nCabbie\nCoach\nCop Bike (HPV-1000)\nEnforcer\nFBI Rancher\nFBI Truck\nFiretruck\nFiretruck LA\nPolice Car (LSPD)\nPolice Car (LVPD)\nPolice Car (SFPD)\nRanger\nRhino\nS.W.A.T\nTaxi", "Select", "Back");
					case 9: ShowPlayerDialog(playerid, VEHICLE_DIALOG+9, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Saloons", "Admiral\nBloodring Banger\nBravura\nBuccaneer\nCadrona\nClover\nElegant\nElegy\nEmperor\nEsperanto\nFortune\nGlendale Shit\nGlendale\nGreenwood\nHermes\nIntruder\nMajestic\nManana\nMerit\nNebula\nOceanic\nPicador\nPremier\nPrevion\nPrimo\nSentinel\nStafford\nSultan\nSunrise\nTampa\nVincent\nVirgo\nWillard\nWashington", "Select", "Back");
					case 10: ShowPlayerDialog(playerid, VEHICLE_DIALOG+10, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Sport Vehicles", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350", "Select", "Back");
					case 11: ShowPlayerDialog(playerid, VEHICLE_DIALOG+11, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Station Wagons", "Moonbeam\nPerenniel\nRegina\nSolair\nStratum", "Select", "Back");
					case 12: ShowPlayerDialog(playerid, VEHICLE_DIALOG+12, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Boats", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSquallo\nTropic", "Select", "Back");
					case 13: ShowPlayerDialog(playerid, VEHICLE_DIALOG+13, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Trailers", "Article Trailer\nArticle Trailer 2\nArticle Trailer 3\nBaggage Trailer A\nBaggage Trailer B\nFarm Trailer\nPetrol Trailer\nStairs Trailer\nUtility Trailer", "Select", "Back");
					case 14: ShowPlayerDialog(playerid, VEHICLE_DIALOG+14, DIALOG_STYLE_LIST, ""nef" :: Vehicles > Unique Vehicles", "Baggage\nCaddy\nCamper A\nCamper B\nCombine Harvester\nDozer\nDumper\nForklift\nHotknife\nHotdog\nMower\nMr Whoopee\nRomero\nSecuricar\nStretch\nSweeper\nTram\nTowtruck\nTug", "Select", "Back");
					case 15: ShowPlayerDialog(playerid, VEHICLE_DIALOG+15, DIALOG_STYLE_LIST, ""nef" :: Vehicles > RC Vehicles", "RC Bandit\nRC Raider\nRC Goblin\nRC Tiger\nRC Cam", "Select", "Back");
				}
				return true;
			}
			case VEHICLE_DIALOG+1:
			{
	   			new model_array[] = {592, 577, 511, 512, 593, 553, 476, 519, 460, 513};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+2:
			{
			    new model_array[] = {548, 417, 487, 488, 497, 563, 447, 469};
	            CarSpawner(playerid, model_array[listitem], 120);
			    return true;
			}
			case VEHICLE_DIALOG+3:
			{
				new	model_array[] = {581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 471, 468, 586};
    			CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+4:
			{
	   			new	model_array[] = {480, 533, 439, 555};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+5:
			{
				new model_array[] = {499, 422, 482, 498, 609, 524, 578, 455, 403, 414, 582, 443, 514, 413, 515, 440, 543, 605, 459, 531, 408, 552, 478, 456, 554};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+6:
			{
			    new model_array[] = { 536, 575, 534, 567, 535, 566, 576, 412 };
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+7:
			{
	    		new model_array[] = {424, 573, 579, 400, 500, 444, 556, 557, 470, 489, 505, 495};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+8:
			{
				new model_array[] = {416, 433, 431, 438, 437, 523, 427, 490, 528, 407, 544, 596, 598, 597, 599, 432, 601, 420};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+9:
			{
			    new model_array[] = {445, 504, 401, 518, 527, 542, 507, 562, 585, 419, 526, 604, 466, 492, 474, 546, 517, 410, 551, 516, 467, 600, 426, 436, 547, 405, 580, 560, 550, 549, 540, 491, 529, 421};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
   			}
			case VEHICLE_DIALOG+10:
			{
	    		new model_array[] = {602, 429, 496, 402, 541, 415, 589, 587, 565, 494, 502, 503, 411, 559, 603, 475, 506, 451, 558, 477};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+11:
			{
				new model_array[] = {418, 404, 479, 458, 561};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+12:
			{
		        new model_array[] = {472, 473, 493, 595, 484, 430, 453, 452, 446, 454};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+13:
			{
			    new model_array[] = {435, 450, 591, 606, 607, 610, 584, 608, 611};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+14:
			{
		        new model_array[] = {485, 457, 483, 508, 532, 486, 406, 530, 434, 588, 572, 423, 442, 428, 409, 574, 449, 525, 583};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+15:
			{
		        new model_array[] = {441, 465, 501, 564, 594};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+16:
			{
			    switch(listitem)
			    {
					case 0: Command_ReProcess(playerid, "/v70", false);
					case 1: Command_ReProcess(playerid, "/v71", false);
					case 2: Command_ReProcess(playerid, "/v74", false);
					case 3: Command_ReProcess(playerid, "/v73", false);
					case 4: Command_ReProcess(playerid, "/v72", false);
			    }
			    return true;
			}
			case WEAPON_DIALOG:
			{
	  			switch(listitem)
		    	{
					case 0: ShowPlayerDialog(playerid, WEAPON_DIALOG+1, DIALOG_STYLE_LIST, ""nef" :: Weapons > Rifles", "AK-47\nM4\nCountry Rifle\nSniper Rifle", "Select", "Back");
					case 1: ShowPlayerDialog(playerid, WEAPON_DIALOG+2, DIALOG_STYLE_LIST, ""nef" :: Weapons > Submachine Guns", "MP 5\nUZI\nTEC-9", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, WEAPON_DIALOG+3, DIALOG_STYLE_LIST, ""nef" :: Weapons > Shot Guns", "Pump Gun\nSawn-Off\nCombat Shotgun", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, WEAPON_DIALOG+4, DIALOG_STYLE_LIST, ""nef" :: Weapons > Hand Guns", "9mm\nSilenced 9mm\nDesert Eagle", "Select", "Back");
	   				case 4: ShowPlayerDialog(playerid, WEAPON_DIALOG+5, DIALOG_STYLE_LIST, ""nef" :: Weapons > Melee Weapons", "Golf Club\nNightstick\nKnife\nShovel\nKatana\nChainsaw\nDouble-ended Dildo\nSilver Vibrator\nFlowers", "Select", "Back");
	   				case 5: ShowPlayerDialog(playerid, WEAPON_DIALOG+6, DIALOG_STYLE_LIST, ""nef" :: Weapons > Special Weapons", "Tear Gas\nMolotov Cocktail\nFlamethrower\nSpraycan\nFire Extinguisher", "Select", "Back");
				}
				return true;
			}
			case WEAPON_DIALOG+1:
			{
			    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
				switch(listitem)
				{
			    	case 0: GivePlayerWeapon(playerid,30,99999);
			 		case 1: GivePlayerWeapon(playerid,31,99999);
					case 2: GivePlayerWeapon(playerid,33,99999);
					case 3: GivePlayerWeapon(playerid,34,99999);
				}
				return true;
			}
			case WEAPON_DIALOG+2:
			{
			    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
				switch(listitem)
				{
			    	case 0: GivePlayerWeapon(playerid,29,99999);
					case 1: GivePlayerWeapon(playerid,28,99999);
					case 2: GivePlayerWeapon(playerid,32,99999);
				}
				return true;
			}
			case WEAPON_DIALOG+3:
			{
			    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
	  			switch(listitem)
				{
			    	case 0: GivePlayerWeapon(playerid,25,99999);
            		case 1: GivePlayerWeapon(playerid,26,99999);
					case 2: GivePlayerWeapon(playerid,27,99999);
				}
			    return true;
			}
			case WEAPON_DIALOG+4:
			{
			    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
				switch(listitem)
				{
			    	case 0: GivePlayerWeapon(playerid,22,99999);
					case 1: GivePlayerWeapon(playerid,23,99999);
			    	case 2: GivePlayerWeapon(playerid,24,99999);
				}
			    return true;
			}
			case WEAPON_DIALOG+5:
			{
			    if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
	  			switch(listitem)
				{
					case 0: GivePlayerWeapon(playerid,2,1);
            		case 1: GivePlayerWeapon(playerid,3,1);
					case 2: GivePlayerWeapon(playerid,4,1);
					case 3: GivePlayerWeapon(playerid,6,1);
					case 4: GivePlayerWeapon(playerid,8,1);
					case 5: GivePlayerWeapon(playerid,9,1);
					case 6: GivePlayerWeapon(playerid,10,1);
					case 7: GivePlayerWeapon(playerid,13,1);
					case 8: GivePlayerWeapon(playerid,14,1);
				}
			    return true;
			}
			case WEAPON_DIALOG+6:
			{
                if(gTeam[playerid] == gDUEL) return SCM(playerid, -1, ""er"You tryin' to abuse? ;)");
				switch(listitem)
				{
			    	case 0: GivePlayerWeapon(playerid,17,99999);
					case 1: GivePlayerWeapon(playerid,18,5);
			    	case 2: GivePlayerWeapon(playerid,37,25);
					case 3: GivePlayerWeapon(playerid,41,25);
			    	case 4: GivePlayerWeapon(playerid,42,25);
				}
				return true;
			}
			case VMENU_DIALOG:
			{
                if(listitem > PlayerData[playerid][e_addpvslots])
			    {
					format(gstr, sizeof(gstr), ""nef" :: Private vehicle menu > Slot: %i", listitem + 1);
			        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This vehicle slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
			    }
			    else
			    {
			        PVVMenuSel[playerid] = listitem;
			        
				   	if(PlayerPVData[playerid][PVVMenuSel[playerid]][e_model] == 0)
					{
					    player_notice(playerid, "PV slot is not in use", "");
					    return 1;
					}

					format(gstr, sizeof(gstr), ""nef" :: Private vehicle menu > Slot: %i", listitem + 1);
				    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, "Spawn Vehicle\nAttach Neon\nChange Number Plate\nChange Vehicle Color\n"grey"Sell vehicle", "Select", "Back");
			    }
				return true;
			}
			case VMENU_DIALOG + 1:
			{
   				switch(listitem)
			    {
			        case 0:
			        {
						DestroyPlayerVehicles(playerid);

                        PVSelect[playerid] = PVVMenuSel[playerid];

						new Float:POS[4];

                        format(gstr, sizeof(gstr), ""nef_yellow"%s's\n"white"custom car", __GetName(playerid));

						GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
						GetPlayerFacingAngle(playerid, POS[3]);

						PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] = CreateVehicleEx(PlayerPVData[playerid][PVSelect[playerid]][e_model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
						PlayerPVData[playerid][PVSelect[playerid]][e_labelid] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 1, -1, -1, -1, 30.0);

						SetVehicleVirtualWorld(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerVirtualWorld(playerid));
						LinkVehicleToInterior(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerInterior(playerid));
						SetVehicleNumberPlate(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_plate]);
						SetVehicleToRespawn(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]);

						PutPlayerInVehicle(playerid, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);

						player_notice(playerid, "Custom car spawned", "");
					}
					case 1:
					{
						ShowDialog(playerid, NEON_DIALOG);
					}
					case 2:
					{
						ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					}
					case 3:
					{
					    Command_ReProcess(playerid, "/cc", false);
					}
					case 4:
					{
						if(PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon1] != -1)
						{
							DestroyDynamicObject(PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon1]);
							PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon1] = -1;
						}
						if(PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon2] != -1)
						{
							DestroyDynamicObject(PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon2]);
							PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon2] = -1;
						}
					    if(PlayerPVData[playerid][PVVMenuSel[playerid]][e_labelid] != Text3D:-1)
					    {
					        DestroyDynamic3DTextLabel(PlayerPVData[playerid][PVVMenuSel[playerid]][e_labelid]);
					        PlayerPVData[playerid][PVVMenuSel[playerid]][e_labelid] = Text3D:-1;
					    }
						if(PlayerPVData[playerid][PVVMenuSel[playerid]][e_vehicleid] != -1)
						{
							DestroyVehicleEx(PlayerPVData[playerid][PVVMenuSel[playerid]][e_vehicleid]);
							PlayerPVData[playerid][PVVMenuSel[playerid]][e_vehicleid] = -1;
						}

                        GivePlayerMoneyEx(playerid, floatround(GetPVPriceByModelId(PlayerPVData[playerid][PVVMenuSel[playerid]][e_model]) / 2));

						PlayerPVData[playerid][PVVMenuSel[playerid]][e_vehicleid] = -1;
						PlayerPVData[playerid][PVVMenuSel[playerid]][e_labelid] = Text3D:-1;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_model] = 0;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_paintjob] = -1;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_color1] = 0;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_color2] = 0;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon1] = -1;
					    PlayerPVData[playerid][PVVMenuSel[playerid]][e_neon2] = -1;
					    for(new i = 0; i < 17; i++)
					    {
					        PlayerPVData[playerid][PVVMenuSel[playerid]][e_mods][i] = 0;
					    }

                        strmid(PlayerPVData[playerid][PVVMenuSel[playerid]][e_plate], "Plate", 0, 13, 13);
                        
                        SQL_SaveAccount(playerid, false, true);
                        
                        player_notice(playerid, "Vehicle sold", "");
					}
				}
				return true;
			}
			case CARBUY_DIALOG:
			{
                if(PlayerData[playerid][e_vip] == 0 && listitem == 8)
                {
					SCM(playerid, -1, ""er"You need to be VIP");
					ShowDialog(playerid, CARBUY_DIALOG);
					return 1;
                }
			
			    new string[2048];
			    
        	    for(new i = 0; i < sizeof(g_aPVMatrix); i++)
        	    {
        	        if(g_aPVMatrix[i][pv_category] == listitem)
        	        {
        	            format(gstr, sizeof(gstr), "%s "green"$%s\n", g_aPVMatrix[i][pv_modelname], number_format(g_aPVMatrix[i][pv_price]));
        	            strcat(string, gstr);
        	        }
        	    }
			    
			    PVCatSel[playerid] = listitem;
			    
			    format(gstr, sizeof(gstr), ""nef" :: Custom cars > %s", g_szCustomCarCategories[listitem]);
			    ShowPlayerDialog(playerid, CARBUY_DIALOG + 1, DIALOG_STYLE_LIST, gstr, string, "Select", "Back");
			    return true;
			}
			case CARBUY_DIALOG + 1:
			{
				new idx = 0;
				for(new i = 0; i < sizeof(g_aPVMatrix); i++)
				{
				    if(g_aPVMatrix[i][pv_category] == PVCatSel[playerid])
				    {
				        if(idx == listitem)
				        {
							PlayerPVTMP[playerid][0] = g_aPVMatrix[i][pv_modelid];
							PlayerPVTMP[playerid][1] = g_aPVMatrix[i][pv_price];
							break;
				        }
				        idx++;
				    }
				}

				if(GetPlayerMoneyEx(playerid) < PlayerPVTMP[playerid][1])
				{
					SCM(playerid, -1, ""er"You can't afford that vehicle");
					ShowDialog(playerid, CARBUY_DIALOG);
					return 1;
				}

				ShowDialog(playerid, VEHICLE_PLATE_DIALOG);

				PlayerData[playerid][pPreviewVehicle] = CreateVehicleEx(PlayerPVTMP[playerid][0], -1412.1841, 1027.2224, 1049.1060, 231.6696, 0, 0, -1);
				LinkVehicleToInterior(PlayerData[playerid][pPreviewVehicle], GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(PlayerData[playerid][pPreviewVehicle], GetPlayerVirtualWorld(playerid));
			    return true;
			}
			case NEON_DIALOG:
			{
				DestroyPlayerVehicles(playerid);
				
				PVSelect[playerid] = PVVMenuSel[playerid];
				
				new Float:POS[4],
				    vlabel[128];

                format(vlabel, sizeof(vlabel), ""nef_yellow"%s's\n"white"custom car", __GetName(playerid));

				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);

				PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] = CreateVehicleEx(PlayerPVData[playerid][PVSelect[playerid]][e_model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
				PlayerPVData[playerid][PVSelect[playerid]][e_labelid] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 1, -1, -1, -1, 30.0);

				SetVehicleVirtualWorld(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerInterior(playerid));
				SetVehicleNumberPlate(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_plate]);
				SetVehicleToRespawn(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]);

				PutPlayerInVehicle(playerid, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);

			    //Red\nGreen\nBlue\nYellow\nWhite\nPink\nRemove Neon
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
							PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
				        player_notice(playerid, "Neon attached", "");
	     			}
				    case 1:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
				        player_notice(playerid, "Neon attached", "");
					}
	    			case 2:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        }
				        player_notice(playerid, "Neon attached", "");
				    }
				    case 3:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        }
				        player_notice(playerid, "Neon attached", "");
					}
	    			case 4:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				        }
				        player_notice(playerid, "Neon attached", "");
	       			}
	    			case 5:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid])))
			            {
			                PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon1], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPVData[playerid][PVSelect[playerid]][e_neon2], PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				        }
				        player_notice(playerid, "Neon attached", "");
	       			}
				    case 6:
				    {
						player_notice(playerid, "Neon removed", "");
				   	}
				}
			    return true;
			}
			case VEHICLE_PLATE_DIALOG:
			{
   				if(strlen(inputtext) < 2 || strlen(inputtext) > 12 || isnull(inputtext))
		    	{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
				if(badsql(inputtext, false) != 0)
				{
				    ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
				    SCM(playerid, -1, ""er"You have specified invalid characters");
				    return 1;
				}
				if(sscanf(inputtext, "s[13]", PlayerPVTMPPlate[playerid]))
				{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
				mysql_escape_string(PlayerPVTMPPlate[playerid], PlayerPVTMPPlate[playerid], pSQL, 13);
				
				PVSlotSelect(playerid);
				return true;
			}
			case CUSTOM_PLATE_DIALOG:
			{
   				if(strlen(inputtext) < 2 || strlen(inputtext) > 12 || isnull(inputtext))
		    	{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
				 	return 1;
				}
				if(badsql(inputtext, false) != 0)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
				if(sscanf(inputtext, "s[13]", PlayerPVData[playerid][PVVMenuSel[playerid]][e_plate]))
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
				 	return 1;
				}

                mysql_escape_string(PlayerPVData[playerid][PVVMenuSel[playerid]][e_plate], PlayerPVData[playerid][PVVMenuSel[playerid]][e_plate], pSQL, 13);

				DestroyPlayerVehicles(playerid);
				
				PVSelect[playerid] = PVVMenuSel[playerid];

				new Float:POS[4],
				    vlabel[128];

                format(vlabel, sizeof(vlabel), ""nef_yellow"%s's\n"white"custom car", __GetName(playerid));

				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);

				PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] = CreateVehicleEx(PlayerPVData[playerid][PVSelect[playerid]][e_model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
				PlayerPVData[playerid][PVSelect[playerid]][e_labelid] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 1, -1, -1, -1, 30.0);

				SetVehicleVirtualWorld(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], GetPlayerInterior(playerid));
				SetVehicleNumberPlate(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_plate]);
				SetVehicleToRespawn(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]);

				PutPlayerInVehicle(playerid, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);

				player_notice(playerid, "Plate changed", "");
			    return true;
			}
			case BGVOTING_DIALOG:
			{
   				if(CurrentBGMap == BG_VOTING)
				{
	 				switch(listitem)
					{
						case 0:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Forest'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
							BGMapVotes[0]++;
						}
						case 1:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Quarters'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
						   	BGMapVotes[1]++;
						}
						case 2:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Rust'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
						   	BGMapVotes[2]++;
						}
						case 3:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Italy'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
						   	BGMapVotes[3]++;
						}
						case 4:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Medieval'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
						   	BGMapVotes[4]++;
						}
						case 5:
						{
						   	format(gstr, sizeof(gstr), "%s(%i) voted for map 'Hangar War'", __GetName(playerid), playerid);
							tdm_broadcast(gstr);
						   	BGMapVotes[5]++;
						}
					}
				}
				else
				{
				    SCM(playerid, RED, ""derby_sign" No voting time at the momment!");
				}
			    return true;
			}
		}
	}
	else if(!response)
	{
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0); //1055

 		switch(dialogid)
 		{
 		    case DIALOG_DUEL + 1:
 		    {
 		        ShowDialog(playerid, DIALOG_DUEL);
 		        return true;
 		    }
			case DIALOG_RACE_RACETYPE, DIALOG_RACE_RACEVW, DIALOG_RACE_RACEVEH, DIALOG_RACE_RACESTARTPOS, DIALOG_RACE_CHECKPOINTS:
			{
			    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
				if(fexist(gstr))
				{
					fremove(gstr);
				}
			    RemoveFromRaceBuilder(playerid);
			    return true;
			}
 		    case CM_DIALOG + 1 .. CM_DIALOG + 15:
 		    {
 		        ShowDialog(playerid, CM_DIALOG);
				return 1;
 		    }
	        case VCONTROL_DIALOG + 1:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
            	SetVehicleParamsEx(vehicle, 0, vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				return 1;
	        }
	        case VCONTROL_DIALOG + 2:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], 0, vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				return 1;
	        }
	        case VCONTROL_DIALOG + 3:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], 0, vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				return 1;
	        }
	        case VCONTROL_DIALOG + 4:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], 0, vehicle_params[5], vehicle_params[6]);
				return 1;
	        }
	        case VCONTROL_DIALOG + 5:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				new vehicle_params[7],
				    vehicle = GetPlayerVehicleID(playerid);
     			GetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], vehicle_params[5], vehicle_params[6]);
				SetVehicleParamsEx(vehicle, vehicle_params[0], vehicle_params[1], vehicle_params[2], vehicle_params[3], vehicle_params[4], 0, vehicle_params[6]);
				return 1;
	        }
 		    case GMENU_DIALOG + 1:
 		    {
 		        ShowDialog(playerid, GMENU_DIALOG);
 		        return true;
 		    }
 		    case HELP_DIALOG + 4:
 		    {
 		        ShowPlayerDialog(playerid, HELP_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" :: Minigames", "Race (/race)\nDerby (/derby)\nFallout (/fallout)\nGungame (/gungame)\nMinigun (/minigun)\nSniper (/sniper)\nDeath Match (/dm1-4)\nTeam Death Match (/tdm)\nWAR (/war)", "Select", "");
 		        return true;
 		    }
 		    case HELP_DIALOG + 1, HELP_DIALOG + 2, HELP_DIALOG + 5, HELP_DIALOG + 6:
 		    {
 		        Command_ReProcess(playerid, "/help", false);
 		        return true;
 		    }
 		    case TELE_DIALOG + 1..TELE_DIALOG + 9:
 		    {
 		        ShowDialog(playerid, TELE_DIALOG);
 		        return true;
 		    }
			case PV_SLOT_SELECT_DIALOG:
			{
			    ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
			    return true;
			}
			case NEON_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" :: Custom car menu > Slot: %i", PVVMenuSel[playerid] + 1);
			    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, "Spawn Vehicle\nAttach Neon\nChange Number Plate\nChange Vehicle Color\n"grey"Sell vehicle", "Select", "Back");
			    return true;
			}
			case CUSTOM_PLATE_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" :: Custom car menu > Slot: %i", PVVMenuSel[playerid] + 1);
			    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, "Spawn Vehicle\nAttach Neon\nChange Number Plate\nChange Vehicle Color\n"grey"Sell vehicle", "Select", "Back");
				return true;
			}
			case VMENU_DIALOG + 1:
			{
			    ShowDialog(playerid, VMENU_DIALOG);
			    return true;
			}
 		    case DERBY_VOTING_DIALOG:
 		    {
 		        ShowDialog(playerid, DERBY_VOTING_DIALOG);
 		        return true;
 		    }
 		    case LOGIN_DIALOG:
 		    {
 		        // Skip Login
 		        SkipLogin(playerid);
 		        return true;
 		    }
 		    case REGISTER_DIALOG:
 		    {
 		        SkipRegistration(playerid);
 		        return true;
 		    }
		    case CMDS_DIALOG + 1:
		    {
		        ShowDialog(playerid, CMDS_DIALOG);
		        return true;
		    }
 		    case STREAM_DIALOG:
 		    {
 		        StopAudioStreamForPlayer(playerid);
 		        return true;
			}
			case STREAM_DIALOG+1..STREAM_DIALOG+9:
			{
				ShowDialog(playerid, STREAM_DIALOG);
				return true;
			}
			case VEHICLE_DIALOG+1..VEHICLE_DIALOG+16:
			{
				ShowDialog(playerid, VEHICLE_DIALOG);
				return true;
			}
			case WEAPON_DIALOG+1..WEAPON_DIALOG+6:
			{
				ShowDialog(playerid, WEAPON_DIALOG);
				return true;
			}
			case VEHICLE_PLATE_DIALOG:
			{
			    if(PlayerData[playerid][pPreviewVehicle] != INVALID_VEHICLE_ID)
			    {
		    		DestroyVehicleEx(PlayerData[playerid][pPreviewVehicle]);
		    		PlayerData[playerid][pPreviewVehicle] = INVALID_VEHICLE_ID;
				}
				ShowDialog(playerid, CARBUY_DIALOG);
				return true;
			}
			case CARBUY_DIALOG:
			{
   				SetCameraBehindPlayer(playerid);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	TogglePlayerControllable(playerid, true);
		    	return true;
			}
			case CARBUY_DIALOG+1..CARBUY_DIALOG+9:
			{
				ShowDialog(playerid, CARBUY_DIALOG);
				return true;
			}
			case BGVOTING_DIALOG:
			{
		 		ShowDialog(playerid, BGVOTING_DIALOG);
		 		return true;
			}
		}
	}
	return 0;
}

public OnDynamicObjectMoved(objectid)
{
	if(objectid == MellnikGate)
	{
	    IsMellnikGateMoving = false;
	}
	else if(objectid == MellnikRamp)
	{
	    IsMellnikRampMoving = false;
	}
	return 1;
}

function:OnHouseLoadEx(index)
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);
	
	if(rows > 0)
	{
		new	line[144], buffer[100];

	    HouseData[index][e_id] = cache_get_row_int(0, 0, pSQL);
		cache_get_row(0, 1, buffer, pSQL, sizeof(buffer));
		strmid(HouseData[index][Owner], buffer, 0, 25, 25);

        HouseData[index][e_x] = cache_get_row_float(0, 2, pSQL);
        HouseData[index][e_y] = cache_get_row_float(0, 3, pSQL);
        HouseData[index][e_z] = cache_get_row_float(0, 4, pSQL);
		HouseData[index][interior] = cache_get_row_int(0, 5, pSQL);
		HouseData[index][price] = cache_get_row_int(0, 6, pSQL);
		HouseData[index][e_score] = cache_get_row_int(0, 7, pSQL);
		HouseData[index][sold] = cache_get_row_int(0, 8, pSQL);
		HouseData[index][locked] = cache_get_row_int(0, 9, pSQL);

		format(line, sizeof(line), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[index][e_id], number_format(HouseData[index][price]), HouseData[index][e_score], g_aHouseInteriorTypes[HouseData[index][interior]][intname]);

		HouseData[index][e_labelid] = CreateDynamic3DTextLabel(line, (HouseData[index][sold]) ? (0xFF0000FF) : (0x00FF00FF), HouseData[index][e_x], HouseData[index][e_y], floatadd(HouseData[index][e_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
		HouseData[index][pickid] = CreateDynamicPickup((HouseData[index][sold]) ? (1272) : (1273), 1, HouseData[index][e_x], HouseData[index][e_y], HouseData[index][e_z], -1, -1, -1, 30.0);
		HouseData[index][e_iconid] = CreateDynamicMapIcon(HouseData[index][e_x], HouseData[index][e_y], HouseData[index][e_z], 31, 1, 0, -1, -1, 150.0);

		index++;
	}
	return 1;
}

function:OnHouseLoad()
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
		new	Float:postal[6];

		for(new i = 0; i < rows; i++)
		{
		    HouseData[houseid][e_id] = cache_get_row_int(i, 0, pSQL);
			cache_get_row(i, 1, gstr, pSQL, sizeof(gstr));
			strmid(HouseData[houseid][Owner], gstr, 0, 25, 25);

	        HouseData[houseid][e_x] = cache_get_row_float(i, 2, pSQL);
	        HouseData[houseid][e_y] = cache_get_row_float(i, 3, pSQL);
	        HouseData[houseid][e_z] = cache_get_row_float(i, 4, pSQL);
			HouseData[houseid][interior] = cache_get_row_int(i, 5, pSQL);
			HouseData[houseid][price] = cache_get_row_int(i, 6, pSQL);
			HouseData[houseid][e_score] = cache_get_row_int(i, 7, pSQL);
			HouseData[houseid][sold] = cache_get_row_int(i, 8, pSQL);
			HouseData[houseid][locked] = cache_get_row_int(i, 9, pSQL);

			if(!HouseData[houseid][sold])
			{
			    format(gstr2, sizeof(gstr2), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[houseid][e_id], number_format(HouseData[houseid][price]), HouseData[houseid][e_score], g_aHouseInteriorTypes[HouseData[houseid][interior]][intname]);
			}
			else
			{
			    format(gstr2, sizeof(gstr2), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseData[houseid][Owner], HouseData[houseid][e_id], number_format(HouseData[houseid][price]), HouseData[houseid][e_score], g_aHouseInteriorTypes[HouseData[houseid][interior]][intname]);

				for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
				{
				    cache_get_row(i, ii + 10, gstr, pSQL, sizeof(gstr));
				    sscanf(gstr, "p<,>iffffff", HouseData[houseid][E_Obj_Model][ii], postal[0], postal[1], postal[2], postal[3], postal[4], postal[5]);
					if(HouseData[houseid][E_Obj_Model][ii] != 0)
					{
					    format(gstr, sizeof(gstr), "/hmenu to edit\nSlot ID: %i - Item ID: %i", ii + 1, HouseData[houseid][E_Obj_Model][ii]);
						HouseData[houseid][E_Obj_ObjectID][ii] = CreateDynamicObject(HouseData[houseid][E_Obj_Model][ii], postal[0], postal[1], postal[2], postal[3], postal[4], postal[5], HouseData[houseid][e_id] + 1000, -1, -1);
                        HouseData[houseid][E_Obj_Label][ii] = CreateDynamic3DTextLabel(gstr, LIGHT_YELLOW, postal[0], postal[1], postal[2]+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][e_id] + 1000);
					}
				}
			}

            HouseData[houseid][date] = cache_get_row_int(i, 20, pSQL);

			HouseData[houseid][e_labelid] = CreateDynamic3DTextLabel(gstr2, HouseData[houseid][sold] ? 0xFF0000FF : 0x00FF00FF, HouseData[houseid][e_x], HouseData[houseid][e_y], floatadd(HouseData[houseid][e_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
			HouseData[houseid][pickid] = CreateDynamicPickup(HouseData[houseid][sold] ? 1272 : 1273, 1, HouseData[houseid][e_x], HouseData[houseid][e_y], HouseData[houseid][e_z], -1, -1, -1, 30.0);
			if(!HouseData[houseid][sold]) HouseData[houseid][e_iconid] = CreateDynamicMapIcon(HouseData[houseid][e_x], HouseData[houseid][e_y], HouseData[houseid][e_z], 31, 1, 0, -1, -1, 150.0);
			
			houseid++;
		}
	}
	Log(LOG_INIT, "%i houses loaded in %i microseconds", houseid, cache_get_query_exec_time(UNIT_MICROSECONDS));
	return 1;
}

function:OnBusinessLoad()
{
	new rows = cache_get_row_count();

	for(new r = 0; r < rows && r < MAX_BUSINESSES; r++)
	{
	    new ORM:ormid = BusinessData[r][e_ormid] = orm_create("businesses");
	    
	    orm_addvar_int(ormid, BusinessData[r][e_id], "id");
	    orm_addvar_string(ormid, BusinessData[r][e_owner], MAX_PLAYER_NAME + 1, "owner");
	    orm_addvar_float(ormid, BusinessData[r][e_pos][0], "xpos");
	    orm_addvar_float(ormid, BusinessData[r][e_pos][1], "ypos");
	    orm_addvar_float(ormid, BusinessData[r][e_pos][2], "zpos");
	    orm_addvar_int(ormid, _:BusinessData[r][e_type], "type");
	    orm_addvar_int(ormid, BusinessData[r][e_level], "level");
	    orm_addvar_int(ormid, BusinessData[r][e_sold], "sold");
	    orm_addvar_int(ormid, BusinessData[r][e_date], "date");
	    
	    orm_setkey(ormid, "id");
		orm_apply_cache(ormid, r);
		
		SetupBusiness(r);
	}
	
	Log(LOG_INIT, "%i businesses loaded in %i microseconds", rows, cache_get_query_exec_time(UNIT_MICROSECONDS));
	return 1;
}

function:OnBusinessLoadEx(slot)
{
	SetupBusiness(slot);
	return 1;
}

SetupBusiness(slot)
{
	if(slot < 0 || slot > MAX_BUSINESSES) return 0;
	new r = slot;

	if(BusinessData[r][e_sold]) {
        format(gstr2, sizeof(gstr2), ""business_mark"\nID: %i\nOwner: %s\nType: %s\nLevel: %i", BusinessData[r][e_id], BusinessData[r][e_owner], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
	} else {
	    format(gstr2, sizeof(gstr2), ""business_mark"\n"nef_green"FOR SALE! Type /bbuy"white"\nID: %i\nType: %s\nLevel: %i", BusinessData[r][e_id], g_szBusinessTypes[_:BusinessData[r][e_type]], BusinessData[r][e_level]);
	}
	
	BusinessData[r][e_label_id] = CreateDynamic3DTextLabel(gstr2, WHITE, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2], 30.0, .worldid = 0);
    BusinessData[r][e_pickup_id] = CreateDynamicPickup(1274, 1, BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2], .worldid = 0, .streamdistance = 50.0);
    
	if(!BusinessData[r][e_sold]) {
	    BusinessData[r][e_icon_id] = CreateDynamicMapIcon(BusinessData[r][e_pos][0], BusinessData[r][e_pos][1], BusinessData[r][e_pos][2], 52, 1, .worldid = 0, .streamdistance = 150.0);
	}
	return 1;
}

function:OnGangZoneLoad()
{
	new rows = cache_get_row_count(),
	    r,
	    Cache:data = cache_save(pSQL);
	
	for(r = 0; r < rows && r < MAX_GZONES; r++)
	{
		cache_set_active(data, pSQL);
		
	    new ORM:ormid = GZoneData[r][e_ormid] = orm_create("gzones");
	    
	    orm_addvar_int(ormid, GZoneData[r][e_id], "id");
	    orm_addvar_string(ormid, GZoneData[r][e_zname], 40, "zname");
	    orm_addvar_float(ormid, GZoneData[r][e_pos][0], "xpos");
	    orm_addvar_float(ormid, GZoneData[r][e_pos][1], "ypos");
	    orm_addvar_float(ormid, GZoneData[r][e_pos][2], "zpos");
	    orm_addvar_int(ormid, GZoneData[r][e_localgang], "localgang");
	    orm_addvar_int(ormid, GZoneData[r][e_locked], "locked");
	    
	    orm_setkey(ormid, "id");
	    orm_apply_cache(ormid, r);
	    
		cache_set_active(Cache:0, pSQL);
		
		if(GZoneData[r][e_localgang] != 0)
	    	format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: %s\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_localgang]));
      	else
	  		format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname]);
	  		
        GZoneData[r][e_labelid] = CreateDynamic3DTextLabel(gstr2, WHITE, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2] + 0.3, 30.0, .worldid = 0, .streamdistance = 30.0);
        GZoneData[r][e_iconid] = CreateDynamicMapIcon(GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2], 19, 1, .worldid = 0, .streamdistance = 240.0);
		GZoneData[r][e_zoneid] = GangZoneCreate(GZoneData[r][e_pos][0] - GZONE_SIZE, GZoneData[r][e_pos][1] - GZONE_SIZE, GZoneData[r][e_pos][0] + GZONE_SIZE, GZoneData[r][e_pos][1] + GZONE_SIZE);
        GZoneData[r][e_checkid] = CreateDynamicCP(GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2], 7.0, .worldid = 0, .streamdistance = 50.0);
		GZoneData[r][e_areaid] = CreateDynamicSphere(GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2], GZONE_SIZE, .worldid = 0);
        //GZoneData[r][e_areaid] = CreateDynamicCuboid(
								/* minx */ //GZoneData[r][e_pos][0] - GZONE_SIZE,
								/* miny */ //GZoneData[r][e_pos][1] - GZONE_SIZE,
								/* minz */ //GZoneData[r][e_pos][2],
								/* maxx */ //GZoneData[r][e_pos][0] + GZONE_SIZE,
								/* maxy */ //GZoneData[r][e_pos][1] + GZONE_SIZE,
								/* maxz */ //GZoneData[r][e_pos][2] + GZONE_SIZE,
								//.worldid = 0);
	}
	
	cache_set_active(data, pSQL);
	Log(LOG_INIT, "%i gang zones loaded in %i microseconds", r, cache_get_query_exec_time(UNIT_MICROSECONDS));
	cache_delete(data);
	return 1;
}

function:OnGangZoneLoadEx(slot)
{
    format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneData[slot][e_id], GZoneData[slot][e_zname]);

    GZoneData[slot][e_labelid] = CreateDynamic3DTextLabel(gstr2, WHITE, GZoneData[slot][e_pos][0], GZoneData[slot][e_pos][1], GZoneData[slot][e_pos][2] + 0.3, 30.0, .worldid = 0, .streamdistance = 30.0);
    GZoneData[slot][e_iconid] = CreateDynamicMapIcon(GZoneData[slot][e_pos][0], GZoneData[slot][e_pos][1], GZoneData[slot][e_pos][2], 19, 1, .worldid = 0, .streamdistance = 240.0);
	GZoneData[slot][e_zoneid] = GangZoneCreate(GZoneData[slot][e_pos][0] - GZONE_SIZE, GZoneData[slot][e_pos][1] - GZONE_SIZE, GZoneData[slot][e_pos][0] + GZONE_SIZE, GZoneData[slot][e_pos][1] + GZONE_SIZE);
    GZoneData[slot][e_checkid] = CreateDynamicCP(GZoneData[slot][e_pos][0], GZoneData[slot][e_pos][1], GZoneData[slot][e_pos][2], 7.0, .worldid = 0, .streamdistance = 50.0);
	GZoneData[slot][e_areaid] = CreateDynamicSphere(GZoneData[slot][e_pos][0], GZoneData[slot][e_pos][1], GZoneData[slot][e_pos][2], GZONE_SIZE, .worldid = 0);
	//GZoneData[slot][e_areaid] = GZoneData[slot][e_areaid] = CreateDynamicCuboid(GZoneData[slot][e_pos][0] - GZONE_SIZE, GZoneData[slot][e_pos][1] - GZONE_SIZE, GZoneData[slot][e_pos][2], GZoneData[slot][e_pos][0] + GZONE_SIZE, GZoneData[slot][e_pos][1] + GZONE_SIZE, GZoneData[slot][e_pos][2] + GZONE_SIZE, .worldid = 0);

	GangZoneShowForAll(GZoneData[slot][e_zoneid], COLOR_NONE);
	return 1;
}

SyncGangZones(playerid)
{
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	
	    if(GZoneData[r][e_localgang] == 0)
	    {
	        GangZoneShowForPlayer(playerid, GZoneData[r][e_zoneid], COLOR_NONE);
	    }
	    else
	    {
			if(PlayerData[playerid][e_gangid] == GZoneData[r][e_localgang])
			{
				GangZoneShowForPlayer(playerid, GZoneData[r][e_zoneid], COLOR_FRIENDLY);
			}
			else
			{
                GangZoneShowForPlayer(playerid, GZoneData[r][e_zoneid], COLOR_HOSTILE);
			}
		}
	}
}

GetGangNameByID(id)
{
	format(gstr, sizeof(gstr), "SELECT `gname` FROM `gangs` WHERE `id` = %i LIMIT 1;", id);
	new Cache:res = mysql_query(pSQL, gstr), name[21];
	if(cache_get_row_count(pSQL) != 0)
	{
		cache_get_row(0, 0, name, pSQL, sizeof(name));
  	}
  	else
  	{
  	    strmid(name, "UNKNOWN GANG", 0, 20, 20);
  	}
	cache_delete(res);
	return name;
}

GetGZonesByGang(id)
{
	new count = 0;
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;
	        
	    if(GZoneData[r][e_localgang] == id)
	    {
	        ++count;
	    }
	}
	return count;
}

ResetGZones()
{
	for(new r = 0; r < MAX_GZONES; r++)
	{
	    GZoneData[r][e_ormid] = ORM:-1;
        GZoneData[r][e_id] = 0;
        GZoneData[r][e_zname] = '\0';
        GZoneData[r][e_localgang] = 0;
        GZoneData[r][e_locked] = 0;
        GZoneData[r][e_underattack] = false;
        GZoneData[r][e_attacker] = 0;
        GZoneData[r][e_defender] = 0;
		GZoneData[r][e_pickupid] = -1;
	}
}

ResetBusiness(slot = -1)
{
	if(slot == -1)
	{
		for(new r = 0; r < MAX_BUSINESSES; r++)
		{
		    BusinessData[r][e_ormid] = ORM:-1;
		    BusinessData[r][e_id] = 0;
		    BusinessData[r][e_owner][0] = '\0';
			strcat(BusinessData[r][e_owner], "NoData", MAX_PLAYER_NAME + 1);
			BusinessData[r][e_type] = E_BUSINESS_TYPES:0;
		    BusinessData[r][e_level] = 1;
		    BusinessData[r][e_sold] = 0;
		    BusinessData[r][e_date] = 0;
		    BusinessData[r][e_label_id] = Text3D:-1;
		    BusinessData[r][e_icon_id] = -1;
		    BusinessData[r][e_pickup_id] = -1;
		}
	}
	else
	{
	    if(slot < 0 || slot > MAX_BUSINESSES) return 0;
	    new r = slot;
	    
	    BusinessData[r][e_ormid] = ORM:-1;
	    BusinessData[r][e_id] = 0;
	    BusinessData[r][e_owner][0] = '\0';
		strcat(BusinessData[r][e_owner], "NoData", MAX_PLAYER_NAME + 1);
		BusinessData[r][e_type] = E_BUSINESS_TYPES:0;
	    BusinessData[r][e_level] = 1;
	    BusinessData[r][e_sold] = 0;
	    BusinessData[r][e_date] = 0;
	    BusinessData[r][e_label_id] = Text3D:-1;
	    BusinessData[r][e_icon_id] = -1;
	    BusinessData[r][e_pickup_id] = -1;
	}
	return 1;
}

LoadGZones()
{
    ResetGZones();
	mysql_tquery(pSQL, "SELECT * FROM `gzones`;", "OnGangZoneLoad");
	return 1;
}

LoadHouses()
{
	mysql_tquery(pSQL, "SELECT * FROM `houses`;", "OnHouseLoad");
	return 1;
}

LoadBusinesses()
{
	ResetBusiness();
	mysql_tquery(pSQL, "SELECT * FROM `businesses`;", "OnBusinessLoad");
	return 1;
}

IsPlayerOnDesktop(playerid, afktimems = 5000)
{
	if((PlayerData[playerid][tickPlayerUpdate] + afktimems) < GetTickCountEx()) return 1;
	return 0;
}

function:BGVoting()
{
	new iTotalVotes = 0;
	for(new i = 0; i < sizeof(BGMapVotes); i++)
	{
		iTotalVotes += BGMapVotes[i];
	}

	if(iTotalVotes == 0)
	{
	    tdm_broadcast("There were no votes! New Voting starting");
	    ExecBGVotingTimer();
		ClearBGVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == gBG_VOTING)
   			{
				ShowDialog(i, BGVOTING_DIALOG);
			}
		}
		return 1;
	}

	new highestmapvotes = -1;
	new draw = 0;

	for(new i = 0; i < sizeof(BGMapVotes); i++)
	{
 		if(BGMapVotes[i] > highestmapvotes && draw == 0)
		{
  			highestmapvotes = BGMapVotes[i];
		}
		else if(BGMapVotes[i] > highestmapvotes && draw != 0)
		{
		    highestmapvotes = BGMapVotes[i];
		    draw = 0;
		}
		else if(BGMapVotes[i] == highestmapvotes)
		{
			draw++;
		}
	}

	if(draw >= 1)
	{
	    tdm_broadcast("Voting was not clear! New Voting starting!");
	    ExecBGVotingTimer();
		ClearBGVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == gBG_VOTING)
   			{
				ShowDialog(i, BGVOTING_DIALOG);
			}
		}
		return 1;
	}

	if(highestmapvotes == BGMapVotes[0])
	{
	    tdm_broadcast("Map 'Forest' won! Let's start!");
		CurrentBGMap = BG_MAP1;
		ClearBGVotes();
		ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP1, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP1, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP1, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP1, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[1])
	{
	    tdm_broadcast("Map 'Quaters' won! Let's start!");
	    CurrentBGMap = BG_MAP2;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP2, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP2, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP2, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP2, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[2])
	{
	    tdm_broadcast("Map 'Rust' won! Let's start!");
	    CurrentBGMap = BG_MAP3;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP3, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP3, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP3, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP3, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[3])
	{
	    tdm_broadcast("Map 'Italy' won! Let's start!");
	    CurrentBGMap = BG_MAP4;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP4, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP4, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP4, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP4, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[4])
	{
	    tdm_broadcast("Map 'Medieval' won! Let's start!");
	    CurrentBGMap = BG_MAP5;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP5, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP5, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP5, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP5, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[5])
	{
	    tdm_broadcast("Map 'Hangar War' won! Let's start!");
	    CurrentBGMap = BG_MAP6;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP6, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP6, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP6, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP6, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	return 1;
}

function:BattleGround()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
	        SetPlayerBGStaticMeshes(i);
	    }
	}

	CurrentBGMap = BG_VOTING;
	ExecBGVotingTimer();

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
			ShowDialog(i, BGVOTING_DIALOG);
	    }
	}

	ResetBGGameTime();

    BGTeam1Players = 0;
    BGTeam2Players = 0;

	new money;

	if(BGTeam1Kills == BGTeam2Kills)
	{
	    format(gstr, sizeof(gstr), "Standoff! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		tdm_broadcast(gstr);
		tdm_broadcast("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;
	}
	else if(BGTeam1Kills > BGTeam2Kills)
	{
	    format(gstr, sizeof(gstr), "Rangers won! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		tdm_broadcast(gstr);
		tdm_broadcast("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;

		money = (1500 * BGTeam1Players) + (250 * BGTeam2Players);
		
	 	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_TEAM1)
		    {
		        GivePlayerMoneyEx(i, money, true, true);
		        GivePlayerScoreEx(i, 10, true, true);
		        PlayerData[i][e_tdmwins]++;
		    }
		}
	}
	else if(BGTeam1Kills < BGTeam2Kills)
	{
	    format(gstr, sizeof(gstr), "Spetsnaz won! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		tdm_broadcast(gstr);
		tdm_broadcast("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;

		money = (1500 * BGTeam1Players) + (250 * BGTeam2Players);

	 	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_TEAM2)
		    {
		        GivePlayerMoneyEx(i, money, true, true);
		        GivePlayerScoreEx(i, 10, true, true);
		        PlayerData[i][e_tdmwins]++;
		    }
		}
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
			gTeam[i] = gBG_VOTING;
	    }
	}
	return 1;
}

ExecBGTimer()
{
	KillTimer(tBGTimer);
	tBGTimer = SetTimer("BattleGround", BG_TIME, false);
	return 1;
}

ExecBGVotingTimer()
{
	KillTimer(tBGVoting);
	tBGVoting = SetTimer("BGVoting", BG_VOTING_TIME, false);
	return 1;
}

ClearBGVotes()
{
	for(new i = 0; i < sizeof(BGMapVotes); i++)
	{
	    BGMapVotes[i] = 0;
	}
	return 1;
}

AutoLogin(playerid)
{
    PlayerData[playerid][bAllowSpawn] = true;
    PlayerData[playerid][bLogged] = true;
    PlayerData[playerid][ExitType] = EXIT_LOGGED;
    
    SQL_UpdateAccount(playerid);
    SQL_LoadAccount(playerid);
	return 1;
}

RequestRegistration(playerid)
{
	new string[1024];
	
    format(gstr, sizeof(gstr), ""nef" :: Registration - %s", __GetName(playerid));
	format(string, sizeof(string), ""white"Welcome to "SVRLOGO""white"\n\nYour name: %s\n\nLet's create an account, enter a password below:", __GetName(playerid));
	ShowPlayerDialog(playerid, REGISTER_DIALOG, DIALOG_STYLE_PASSWORD, gstr, string, "Register", "Skip");
	return 1;
}

RequestLogin(playerid)
{
	new string[1024];
	
    format(gstr, sizeof(gstr), ""nef_yellow"Login "white"- %s", __GetName(playerid));
    format(string, sizeof(string), ""white"Welcome to "SVRLOGO""white"\nHow are you, %s?\n\nAccount: %s\n\nThe name that you are using is registered! Please enter the password:", __GetName(playerid), __GetName(playerid));
	ShowPlayerDialog(playerid, LOGIN_DIALOG, DIALOG_STYLE_PASSWORD, gstr, string, "Login", "Skip");
    return 1;
}

SkipRegistration(playerid)
{
    PlayerData[playerid][bAllowSpawn] = true;
	
    PlayerData[playerid][e_regdate] = gettime();
	PlayerData[playerid][e_payday] = 60;
	PlayerData[playerid][ConnectTime] = gettime();
    PlayerData[playerid][e_wanteds] = 0;
	PlayerData[playerid][e_lastlogin] = gettime();
	PlayerData[playerid][e_lastnc] = 0;
	
	format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerData[playerid][e_wanteds]);
	PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);
	
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef"", ""white"You have chosen not to register.\n\n"red"Please note:\n"white"Your statistics won't be saved.\nYou will be limited to some features.\nYou can register at any time using /register.\n\nEnjoy playing here at "nef"!", "OK", "");
	
    GameTextForPlayer(playerid, "Welcome", 3000, 4);
	GivePlayerMoneyEx(playerid, 20000, false);
	GameTextForPlayer(playerid, "~n~+$20,000~n~Startcash", 3000, 1);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

SkipLogin(playerid)
{
	if((strlen(__GetName(playerid)) + 4) > 20)
	{
	    Log(LOG_NET, "Name error, cannot set new name, kicking (%s, %i)", __GetName(playerid), playerid);
		return Kick(playerid);
	}
	
	new number = random(998) + 1,
	    newname[26],
	    oldname[26];
	    
	format(newname, sizeof(newname), "%s_%i", __GetName(playerid), number);
	format(oldname, sizeof(oldname), "%s", __GetName(playerid));
	    
    PlayerData[playerid][bAllowSpawn] = true;
	    
	if(SetPlayerName(playerid, newname) == 1)
	{
	    GetPlayerName(playerid, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1);
			
		format(gstr, sizeof(gstr), ""white"Your name has been changed to %s because you failed to log in.\n\n"nef_yellow"Please restart the game if this is incorrect.", newname);
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef"", gstr, "OK", "");
		
	    PlayerData[playerid][e_regdate] = gettime();
		PlayerData[playerid][e_payday] = 60;
		PlayerData[playerid][ConnectTime] = gettime();
	    PlayerData[playerid][e_wanteds] = 0;
		PlayerData[playerid][e_lastlogin] = gettime();
		PlayerData[playerid][e_lastnc] = 0;

		format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerData[playerid][e_wanteds]);
		PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);

		g_ServerStats[2]++;

        mysql_format(pSQL, gstr, sizeof(gstr), "UPDATE `online` SET `name` = '%e' WHERE `name` = '%e';", newname, oldname);
        mysql_tquery(pSQL, gstr);

	    GameTextForPlayer(playerid, "Welcome", 3000, 4);
  		GivePlayerMoneyEx(playerid, 20000, false);
    	GameTextForPlayer(playerid, "~n~+$20,000~n~Startcash", 3000, 1);
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else
	{
	    Log(LOG_NET, "Name error, kicking (%s, %i)", __GetName(playerid), playerid);
	    Kick(playerid);
	}
	return 1;
}

GetPlayingTimeFormat(playerid)
{
    PlayerData[playerid][e_time] = PlayerData[playerid][e_time] + (gettime() - PlayerData[playerid][ConnectTime]);
    PlayerData[playerid][ConnectTime] = gettime();

    new ptime[32],
        time[3];

    time[0] = floatround(PlayerData[playerid][e_time] / 3600, floatround_floor);
    time[1] = floatround(PlayerData[playerid][e_time] / 60, floatround_floor) % 60;
    time[2] = floatround(PlayerData[playerid][e_time] % 60, floatround_floor);

	format(ptime, sizeof(ptime), "%ih %02im %02is", time[0], time[1], time[2]);
	return ptime;
}

CarSpawner(playerid, model, respawn_delay = -1, bool:spawnzone_check = true)
{
	if(gTeam[playerid] == gDUEL)
	{
	    return 0;
	}
	
	if(model == 432 || model == 425 || model == 447 || model == 571 || model == 568 || model == 539 || model == 545 || model == 464)
	{
	    if(PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	    {
	        SCM(playerid, -1, ""er"Only founders can spawn this");
            return 0;
		}
	}
	
	if(model == 520 && PlayerData[playerid][e_vip] == 0 && PlayerData[playerid][e_level] == 0)
	{
	    SCM(playerid, -1, ""er"Only admins can spawn this");
		return 0;
	}
	
	if(model == 520 && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL && PlayerData[playerid][bGWarMode])
	{
	    new Float:POS[3];
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	    
		for(new r = 0; r < MAX_GZONES; r++)
		{
	 	    if(GZoneData[r][e_ormid] == ORM:-1)
		        continue;
	        
		    if(!GZoneData[r][e_underattack])
				continue;
		    
		    if(IsPointInDynamicArea(GZoneData[r][e_areaid], POS[0], POS[1], POS[2]))
		    {
		        player_notice(playerid, "Failed to spawn hydra", "Not allowed in a gang zone");
		        return 0;
		    }
		}
	}
	
	if(model == 538 || model == 537 || model == 449)
	{
	    player_notice(playerid, "Failed to spawn vehicle", "not allowed");
		return 0;
	}
	
	if(spawnzone_check)
	{
		for(new ii = 0; ii < sizeof(g_SpawnAreas); ii++)
		{
		    if(IsPlayerInDynamicArea(playerid, g_SpawnAreas[ii]))
		    {
		        player_notice(playerid, "Don't spawn vehicles here!", "");
		        return 0;
		    }
		}
	}
	
	DestroyPlayerVehicles(playerid);
		
	new Float:POS[4],
		color1 = (random(128) + 127),
		color2 = (random(128) + 127);

	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	GetPlayerFacingAngle(playerid, POS[3]);

	PlayerData[playerid][pVehicle] = CreateVehicleEx(model, POS[0], POS[1], POS[2], POS[3], color1, color2, respawn_delay);

	SetVehicleZAngle(PlayerData[playerid][pVehicle], POS[3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetVehicleVirtualWorld(PlayerData[playerid][pVehicle], GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(PlayerData[playerid][pVehicle], GetPlayerInterior(playerid));
	SetVehicleNumberPlate(PlayerData[playerid][pVehicle], "{F81414}NEF");
	SetVehicleToRespawn(PlayerData[playerid][pVehicle]);
	if(IsComponentIdCompatible(GetVehicleModel(PlayerData[playerid][pVehicle]), 1010)) AddVehicleComponent(PlayerData[playerid][pVehicle], 1010);
	PutPlayerInVehicle(playerid, PlayerData[playerid][pVehicle], 0);
	player_notice(playerid, "Vehicle spawned", "");
	
	if(PlayerData[playerid][bGod])
	{
	    ResetPlayerWeapons(playerid);
	}
	return 1;
}

// --
// -- Channel broadcasts
// --

fallout_broadcast(const string[])
{
	format(gstr, sizeof(gstr), ""fallout_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == FALLOUT)
		{
			SCM(i, GREY, gstr);
		}
	}
}

derby_broadcast(const string[])
{
	format(gstr, sizeof(gstr), ""derby_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY)
		{
			SCM(i, -1, gstr);
		}
	}
}

tdm_broadcast(const string[])
{
	format(gstr, sizeof(gstr), ""tdm_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_VOTING || gTeam[i] == gBG_TEAM2)
		{
  			SCM(i, -1, gstr);
		}
	}
}

race_broadcast(const string[])
{
	format(gstr, sizeof(gstr), ""race_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == gRACE)
		{
			SCM(i, -1, gstr);
		}
	}
}

gang_broadcast(gangid, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerData[i][e_gangid] == gangid && PlayerData[i][e_gangrank] != GANG_POS_NONE)
		{
			SCM(i, RED, string);
		}
	}
}

admin_broadcast(color, const string[], bool:beep = false, bool:gc = false)
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerData[i][e_level] >= 1)
		{
		    if(gc && PlayerData[i][bHideGC]) continue;
		    
			SCM(i, color, string);
			if(beep) PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
			count++;
		}
	}
	return count;
}

vip_broadcast(color, const msg[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerData[i][e_vip] == 1 || PlayerData[i][e_level] > 0)
		{
			SCM(i, color, msg);
		}
	}
}

SQL_FetchGangInfo(playerid, gangid)
{
	format(gstr, sizeof(gstr), "SELECT * FROM `gangs` WHERE `id` = %i LIMIT 1;", gangid);
	mysql_tquery(pSQL, gstr, "OnQueryFinish", "siii", gstr, THREAD_FETCH_GANG_INFO, playerid, pSQL);
}

SQL_UpdateGangScore(gangid, value)
{
	format(gstr2, sizeof(gstr2), "UPDATE `gangs` SET `gscore` = `gscore` + %i, `gtop` = `gtop` + %i WHERE `id` = %i LIMIT 1;", value, value, gangid);
	mysql_pquery(pSQL, gstr2);
}

SQL_LoadAccount(playerid)
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT * FROM `accounts` WHERE `name` = '%e' LIMIT 1;", __GetName(playerid));
	mysql_tquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_LOAD);
}

SQL_LoadPlayerAchs(playerid)
{
	mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `type`, `unlockdate` FROM `achievements` WHERE `id` = %i;", PlayerData[playerid][e_accountid]);
	mysql_pquery(pSQL, gstr, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_ACHS_LOAD);
}

SQL_LoadPlayerToys(playerid)
{
	mysql_format(pSQL, gstr, sizeof(gstr), "SELECT * FROM `toys` WHERE `id` = %i LIMIT 10;", PlayerData[playerid][e_accountid]);
	mysql_pquery(pSQL, gstr, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_TOYS_LOAD);
}

SQL_LoadPlayerPVs(playerid)
{
	mysql_format(pSQL, gstr, sizeof(gstr), "SELECT * FROM `vehicles` WHERE `id` = %i;", PlayerData[playerid][e_accountid]);
	mysql_pquery(pSQL, gstr, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_PVS_LOAD);
}

SQL_LoadPlayerGang(playerid)
{
	format(gstr2, sizeof(gstr2), "SELECT `gname`, `gtag` FROM `gangs` WHERE `id` = %i LIMIT 1;", PlayerData[playerid][e_gangid]);
	mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_GANG_LOAD);
}

SQL_AssignRankIfExist(playerid)
{
  	mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT `gangrank` FROM `accounts` WHERE `gangid` = %i AND `name` = '%e';", PlayerData[playerid][e_gangid], PlayerData[playerid][GangAssignRank]);
  	mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_ASSIGN_RANK, playerid, pSQL);
}

SQL_KickFromGangIfExist(playerid)
{
  	mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT `gangrank` FROM `accounts` WHERE `gangid` = %i AND `name` = '%e';", PlayerData[playerid][e_gangid], PlayerData[playerid][GangKickMem]);
  	mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_KICK_FROM_GANG, playerid, pSQL);
}

SQL_SaveAccount(playerid, bool:toys = true, bool:pv = true)
{
    if(!islogged(playerid)) return 1;
    
    PlayerData[playerid][e_time] = PlayerData[playerid][e_time] + (gettime() - PlayerData[playerid][ConnectTime]);
    PlayerData[playerid][ConnectTime] = gettime();
    
    if(PlayerData[playerid][e_ormid] == ORM:-1) {
    	Log(LOG_PLAYER, "Crit: ORM -1 in SaveAccount %s, %i", __GetName(playerid), playerid);
	} else {
	    orm_update(PlayerData[playerid][e_ormid]);
	}

    if(toys)
	{
        mysql_format(pSQL, gstr, sizeof(gstr), "DELETE FROM `toys` WHERE `id` = %i;", PlayerData[playerid][e_accountid]);
		mysql_tquery(pSQL, gstr);
		
		new buff[512];
		for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
		    if(PlayerToyData[playerid][i][toy_model] != 0)
		    {
				mysql_format(pSQL, buff, sizeof(buff), "INSERT INTO `toys` VALUES (%i, %i, %i, %i, %f, %f, %f, %f, %f, %f, %f, %f, %f);",
				    PlayerData[playerid][e_accountid],
				    i,
				    PlayerToyData[playerid][i][toy_model],
				    PlayerToyData[playerid][i][toy_bone],
				    PlayerToyData[playerid][i][toy_x],
				    PlayerToyData[playerid][i][toy_y],
				    PlayerToyData[playerid][i][toy_z],
				    PlayerToyData[playerid][i][toy_rx],
				    PlayerToyData[playerid][i][toy_ry],
				    PlayerToyData[playerid][i][toy_rz],
				    PlayerToyData[playerid][i][toy_sx],
				    PlayerToyData[playerid][i][toy_sy],
				    PlayerToyData[playerid][i][toy_sz]);
				mysql_tquery(pSQL, buff);
		    }
		}
    }

    if(pv)
	{
        mysql_format(pSQL, gstr, sizeof(gstr), "DELETE FROM `vehicles` WHERE `id` = %i;", PlayerData[playerid][e_accountid]);
		mysql_tquery(pSQL, gstr);
		
		new buff[512];
		for(new i = 0; i < MAX_PLAYER_PVS; i++)
		{
		    if(PlayerPVData[playerid][i][e_model] != 0)
		    {
		        mysql_format(pSQL, buff, sizeof(buff), "INSERT INTO `vehicles` VALUES (%i, %i, %i, '%e', %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i);",
				    PlayerData[playerid][e_accountid],
				    i,
				    PlayerPVData[playerid][i][e_model],
				    PlayerPVData[playerid][i][e_plate],
				    PlayerPVData[playerid][i][e_paintjob],
				    PlayerPVData[playerid][i][e_color1],
				    PlayerPVData[playerid][i][e_color2],
				    PlayerPVData[playerid][i][e_mods][0],
				    PlayerPVData[playerid][i][e_mods][1],
				    PlayerPVData[playerid][i][e_mods][2],
				    PlayerPVData[playerid][i][e_mods][3],
				    PlayerPVData[playerid][i][e_mods][4],
				    PlayerPVData[playerid][i][e_mods][5],
				    PlayerPVData[playerid][i][e_mods][6],
				    PlayerPVData[playerid][i][e_mods][7],
				    PlayerPVData[playerid][i][e_mods][8],
				    PlayerPVData[playerid][i][e_mods][9],
				    PlayerPVData[playerid][i][e_mods][10],
				    PlayerPVData[playerid][i][e_mods][11],
				    PlayerPVData[playerid][i][e_mods][12],
				    PlayerPVData[playerid][i][e_mods][13],
				    PlayerPVData[playerid][i][e_mods][14],
				    PlayerPVData[playerid][i][e_mods][15],
				    PlayerPVData[playerid][i][e_mods][16]);
				mysql_tquery(pSQL, buff);
		    }
		}
    }
    return 1;
}

SQL_UpdatePlayerPass(playerid, const hash[])
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `hash` = SHA1('%e') WHERE `name` = '%e' LIMIT 1;", hash, __GetName(playerid));
 	mysql_pquery(pSQL, gstr2);
}

SQL_FetchGangMemberNames(playerid, gangid)
{
	format(gstr, sizeof(gstr), "SELECT `name`, `gangrank` FROM `accounts` WHERE `gangid` = %i ORDER BY `gangrank` DESC;", gangid);
	mysql_tquery(pSQL, gstr, "OnQueryFinish", "siii", gstr, THREAD_FETCH_GANG_MEMBER_NAMES, playerid, pSQL);
}

SQL_BanIP(const ip[])
{
 	mysql_format(pSQL, gstr, sizeof(gstr), "INSERT INTO `blacklist` VALUES (NULL, '%e');", ip);
 	mysql_pquery(pSQL, gstr);
}

SQL_ExistGang(playerid)
{
	format(gstr, sizeof(gstr), "SELECT `id` FROM `gangs` WHERE `gname` = '%s' LIMIT 1;", PlayerData[playerid][GangName]);
	mysql_tquery(pSQL, gstr, "OnQueryFinish", "siii", gstr, THREAD_GANG_EXIST, playerid, pSQL);
}

SQL_CreateGang(playerid)
{
    format(gstr2, sizeof(gstr2), "INSERT INTO `gangs` VALUES (NULL, '%s', '%s', 0, -84215197, 0, 0, UNIX_TIMESTAMP());", PlayerData[playerid][GangName], PlayerData[playerid][GangTag]);
    mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_CREATE_GANG, playerid, pSQL);
}

SQL_DestroyGang(playerid, gangname[])
{
	format(gstr2, sizeof(gstr2), "SELECT `id`, `gname` FROM `gangs` WHERE `gname` = '%s';", gangname);
	mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_GANG_DESTROY, playerid, pSQL);
}

SQL_GangRename(playerid, newgangname[], newgangtag[])
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT `id` FROM `gangs` WHERE `gname` = '%e';", newgangname);
	mysql_pquery(pSQL, gstr2, "OnGangRenameAttempt", "issi", playerid, newgangname, newgangtag, YHash(__GetName(playerid)));
}

SQL_RegisterAccount(playerid, register, password[])
{
	PlayerData[playerid][e_lastlogin] = gettime();
	PlayerData[playerid][e_lastnc] = 0;
    PlayerData[playerid][e_regdate] = gettime();
    PlayerData[playerid][e_payday] = 60;
    PlayerData[playerid][e_wanteds] = 0;
    
    new ORM:ormid = PlayerData[playerid][e_ormid] = orm_create("accounts");
    
 	orm_addvar_int(ormid, PlayerData[playerid][e_accountid], "id");
	orm_addvar_string(ormid, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1, "name");
	orm_addvar_string(ormid, PlayerData[playerid][e_email], 26, "email");
	orm_addvar_int(ormid, PlayerData[playerid][e_level], "level");
	orm_addvar_int(ormid, PlayerData[playerid][e_score], "score");
	orm_addvar_int(ormid, PlayerData[playerid][e_money], "money");
	orm_addvar_int(ormid, PlayerData[playerid][e_bank], "bank");
	orm_addvar_int(ormid, PlayerData[playerid][e_color], "color");
	orm_addvar_int(ormid, PlayerData[playerid][e_kills], "kills");
	orm_addvar_int(ormid, PlayerData[playerid][e_deaths], "deaths");
	orm_addvar_int(ormid, PlayerData[playerid][e_time], "time");
	orm_addvar_int(ormid, PlayerData[playerid][e_skin], "skin");
	orm_addvar_int(ormid, PlayerData[playerid][e_payday], "payday");
	orm_addvar_int(ormid, PlayerData[playerid][e_reaction], "reaction");
	orm_addvar_int(ormid, PlayerData[playerid][e_mathwins], "mathwins");
	orm_addvar_int(ormid, PlayerData[playerid][e_houses], "houses");
	orm_addvar_int(ormid, PlayerData[playerid][e_gangid], "gangid");
	orm_addvar_int(ormid, PlayerData[playerid][e_gangrank], "gangrank");
	orm_addvar_int(ormid, PlayerData[playerid][e_addpvslots], "addpvslots");
	orm_addvar_int(ormid, PlayerData[playerid][e_addtoyslots], "addtoyslots");
	orm_addvar_int(ormid, PlayerData[playerid][e_addhouseslots], "addhouseslots");
	orm_addvar_int(ormid, PlayerData[playerid][e_addbizzslots], "addbizzslots");
	orm_addvar_int(ormid, PlayerData[playerid][e_addhouseitemslots], "addhouseitemslots");
	orm_addvar_int(ormid, PlayerData[playerid][e_derbywins], "derbywins");
	orm_addvar_int(ormid, PlayerData[playerid][e_racewins], "racewins");
	orm_addvar_int(ormid, PlayerData[playerid][e_tdmwins], "tdmwins");
	orm_addvar_int(ormid, PlayerData[playerid][e_falloutwins], "falloutwins");
	orm_addvar_int(ormid, PlayerData[playerid][e_gungamewins], "gungamewins");
	orm_addvar_int(ormid, PlayerData[playerid][e_eventwins], "eventwins");
	orm_addvar_int(ormid, PlayerData[playerid][e_wanteds], "wanteds");
	orm_addvar_int(ormid, PlayerData[playerid][e_vip], "vip");
	orm_addvar_int(ormid, PlayerData[playerid][e_credits], "credits");
	orm_addvar_int(ormid, PlayerData[playerid][e_medkits], "medkits");
	orm_addvar_int(ormid, PlayerData[playerid][e_regdate], "regdate");
	orm_addvar_int(ormid, PlayerData[playerid][e_lastlogin], "lastlogin");
	orm_addvar_int(ormid, PlayerData[playerid][e_lastnc], "lastnc");
	orm_addvar_int(ormid, PlayerData[playerid][e_skinsave], "skinsave");
	
	orm_setkey(ormid, "id");
	orm_insert(ormid, "OnPlayerRegister", "iiisss", playerid, YHash(__GetName(playerid)), register, password, __GetName(playerid), __GetIP(playerid));
}

function:OnPlayerRegister(playerid, namehash, register, password[], playername[], ip_address[])
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `hash` = SHA1('%e'), `ip` = '%s' WHERE `name` = '%s';", password, ip_address, playername);
	mysql_tquery(pSQL, gstr2);
	
	if(namehash == YHash(__GetName(playerid)))
	{
		if(register == REGISTER_CONNECT)
		{
			PlayerData[playerid][ExitType] = EXIT_LOGGED;
			PlayerData[playerid][ConnectTime] = gettime();
		    PlayerData[playerid][bAllowSpawn] = true;
		    PlayerData[playerid][bLogged] = true;
            g_ServerStats[2]++;

			format(gstr, sizeof gstr, "["SVRSC"] %s(%i) "GREEN_E"has registered, making the server have a total of "LB2_E"%i "GREEN_E"players registered.", __GetName(playerid), playerid, cache_insert_id());
			SCMToAll(COLOR_PINK, gstr);

			format(gstr, sizeof(gstr), "~b~~h~~h~Welcome to "SVRSC", ~r~~h~~h~%s~b~~h~~h~!~n~~b~~h~~h~You have successfully registered and logged in!", __GetName(playerid));
			InfoTD_MSG(playerid, 5000, gstr);

			format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerData[playerid][e_wanteds]);
			PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);

		    GameTextForPlayer(playerid, "Welcome", 3000, 4);
	  		GivePlayerMoneyEx(playerid, 20000, false);
	    	GameTextForPlayer(playerid, "~n~+$20,000~n~Startcash", 3000, 1);
			SCM(playerid, -1, ""server_sign" "r_besch"You are now registered, and have been logged in!");

			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);

			SQL_SaveAccount(playerid, false, false);
			SQL_UpdateAccount(playerid);
		}
		else if(register == REGISTER_ONLINE)
		{
		    PlayerData[playerid][bLogged] = true;
            g_ServerStats[2]++;

			format(gstr, sizeof gstr, "["SVRSC"] %s(%i) "GREEN_E"has registered, making the server have a total of "LB2_E"%i "GREEN_E"players registered.", __GetName(playerid), playerid, cache_insert_id());
			SCMToAll(COLOR_PINK, gstr);

			format(gstr, sizeof(gstr), "~b~~h~~h~Welcome to "SVRSC", ~r~~h~~h~%s~b~~h~~h~!~n~~b~~h~~h~You have successfully registered and logged in!", __GetName(playerid));
			InfoTD_MSG(playerid, 5000, gstr);

            SQL_SaveAccount(playerid, false, false);
			SQL_UpdateAccount(playerid);
		}
	}
	return 1;
}

SQL_UpdateAccount(playerid)
{
    if(PlayerData[playerid][bLogged])
    {
	    mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `ip` = '%e', `serial` = '%e', `lastlogin` = %i WHERE `name` = '%e' LIMIT 1;", __GetIP(playerid), __GetSerial(playerid), gettime(), __GetName(playerid));
	    mysql_tquery(pSQL, gstr2);
	}
}

SQL_BanAccount(account[], admin[], reason[], lift = 0)
{
    mysql_format(pSQL, gstr2, sizeof(gstr2), "INSERT INTO `bans` VALUES (NULL, '%e', '%e', '%e', %i, UNIX_TIMESTAMP());", account, admin, reason, lift);
    mysql_pquery(pSQL, gstr2);
}

SQL_SaveHouse(house, bool:save_items = false)
{
    new query[1024];
    
    format(query, sizeof(query), "UPDATE `houses` SET `Owner` = '%s', `XPos` = %.2f, `YPos` = %.2f, `ZPos` = %.2f, `Interior` = %i, `Price` = %i, `Score` = %i, `Sold` = %i, `Locked` = %i, `Date` = %i WHERE `ID` = %i LIMIT 1;",
		HouseData[house][Owner],
		HouseData[house][e_x],
		HouseData[house][e_y],
		HouseData[house][e_z],
		HouseData[house][interior],
		HouseData[house][price],
		HouseData[house][e_score],
		HouseData[house][sold],
		HouseData[house][locked],
		HouseData[house][date],
		HouseData[house][e_id]);

    mysql_tquery(pSQL, "START TRANSACTION;");
    mysql_tquery(pSQL, query);
		
	if(save_items)
	{
		new Float:POS[6];
		for(new i = 0; i < MAX_HOUSE_OBJECTS; i++)
		{
			if(HouseData[house][E_Obj_Model][i] != 0) {
			    GetDynamicObjectPos(HouseData[house][E_Obj_ObjectID][i], POS[0], POS[1], POS[2]);
			    GetDynamicObjectRot(HouseData[house][E_Obj_ObjectID][i], POS[3], POS[4], POS[5]);

			    format(query, sizeof(query), "UPDATE `houses` SET `ObjSlot%i` = '%i,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f' WHERE `ID` = %i LIMIT 1;",
				    i,
				    HouseData[house][E_Obj_Model][i],
				    POS[0],
				    POS[1],
				    POS[2],
				    POS[3],
				    POS[4],
				    POS[5],
				    HouseData[house][e_id]);
			} else {
			    format(query, sizeof(query), "UPDATE `houses` SET `ObjSlot%i` = '0,0.0,0.0,0.0,0.0,0.0,0.0' WHERE `ID` = %i LIMIT 1;", i, HouseData[house][e_id]);
			}
			mysql_tquery(pSQL, query);
		}
	}
	
	mysql_tquery(pSQL, "COMMIT;");
}

SQL_FinalGangKick(playerid)
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `gangid` = 0, `gangrank` = 0 WHERE `name` = '%e' LIMIT 1;", PlayerData[playerid][GangKickMem]);
	mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_KICK_FROM_GANG_2, playerid, pSQL);
}

SQL_FinalRankAssign(playerid)
{
	mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `gangrank` = %i WHERE `name` = '%e' LIMIT 1;", PlayerData[playerid][RankSelected], PlayerData[playerid][GangAssignRank]);
	mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_ASSIGN_RANK_2, playerid, pSQL);
}

SQL_CleanUp()
{
	mysql_tquery(pSQL, "TRUNCATE TABLE `online`;");
}

SQL_Connect()
{
    pSQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS, SQL_PORT, true);

    if(mysql_errno(pSQL) == 0)
    {
		Log(LOG_INIT, "MySQL: Connected @ ["SQL_HOST"]:%i", SQL_PORT);
    }
    else
    {
        Log(LOG_INIT, "MySQL: Failed to connect. Error: ", mysql_errno(pSQL));

        SendRconCommand("exit");
    }
}

LoadStores()
{
	new file[50],
		count = GetTickCountEx();

	for(new b = 0; b < MAX_BANKS; b++)
	{
	    format(file, sizeof(file), "/Store/Banks/%i.ini", b);
		if(fexist(file))
		{
			BankPickOut[b] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		BankPickInt[b] = CreateDynamicPickup(1559, 1, 2304.69, -16.19, 26.74, (b + 1000), -1, -1, 50.0);
	  		BankPickMenu[b] = CreateDynamicPickup(1559, 1, 2311.63, -3.89, 26.74, (b + 1000), -1, -1, 50.0);
	  		BankMIcon[b] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 25, -1, 0, 0, -1, 300.0);
	  		format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
    for(new a = 0; a < MAX_AMMUNATIONS; a++)
	{
	    format(file, sizeof(file), "/Store/Ammunations/%i.ini", a);
		if(fexist(file))
		{
			AmmunationPickOut[a] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		AmmunationPickInt[a] = CreateDynamicPickup(1559, 1, 315.81, -143.65, 999.60, (a + 1000), 7, -1, 50.0);
			AmmunationMIcon[a] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 6, -1, 0, 0, -1, 300.0);
			format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
			CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new bs = 0; bs < MAX_BURGERSHOTS; bs++)
	{
	    format(file, sizeof(file), "/Store/BurgerShots/%i.ini", bs);
		if(fexist(file))
		{
			BurgerPickOut[bs] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		BurgerPickInt[bs] = CreateDynamicPickup(1559, 1, 362.87, -75.17, 1001.50, (bs + 1000), 10, -1, 50.0);
		   	BurgerMIcon[bs] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 10, -1, 0, 0, -1, 300.0);
		   	format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new cb = 0; cb < MAX_CLUCKINBELLS; cb++)
	{
	    format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cb);
		if(fexist(file))
		{
			CluckinBellPickOut[cb] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		CluckinBellPickInt[cb] = CreateDynamicPickup(1559, 1, 364.87, -11.74, 1001.85, (cb + 1000), 9, -1, 50.0);
			CluckinBellMIcon[cb] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 14, -1, 0, 0, -1, 300.0);
			format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new ps = 0; ps < MAX_PIZZASTACKS; ps++)
	{
	    format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", ps);
		if(fexist(file))
		{
			PizzaPickOut[ps] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		PizzaPickInt[ps] = CreateDynamicPickup(1559, 1, 372.36, -133.50, 1001.49, (ps + 1000), 5, -1, 50.0);
			PizzaMIcon[ps] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 29, -1, 0, 0, -1, 300.0);
			format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new tfs = 0; tfs < MAX_TFS; tfs++)
	{
	    format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
		if(fexist(file))
		{
			TFSPickOut[tfs] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		TFSPickInt[tfs] = CreateDynamicPickup(1559, 1, -25.884, -185.868, 1003.546, (tfs + 1000), 17, -1, 50.0);
			TFSMIcon[tfs] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 17, -1, 0, 0, -1, 300.0);
			format(gstr, sizeof(gstr), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(gstr, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}

 	Log(LOG_INIT, "Stores loaded in %i ms", GetTickCountEx() - count);
 	return 1;
}

RemoveFirstQueueFloor()
{
	for(new i = 0; i < sizeof(ElevatorQueue) - 1; i++)
	{
	    ElevatorQueue[i] = ElevatorQueue[i + 1];
	}
	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;
	return 1;
}

AddFloorToQueue(floorid)
{
	new slot = -1;
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	    {
	        ReadNextFloorInQueue();
		}
	    return 1;
	}
	return 0;
}

ResetElevatorQueue()
{
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    ElevatorQueue[i] = INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}
	return 1;
}

IsFloorInQueue(floorid)
{
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == floorid)
	    {
	        return 1;
		}
	}
	return 0;
}

ReadNextFloorInQueue()
{
	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	{
	    return 0;
	}
	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);
	return 1;
}

DidPlayerRequestElevator(playerid)
{
	for(new i = 0; i < sizeof(FloorRequestedBy); i++)
	{
	    if(FloorRequestedBy[i] == playerid)
	    {
	        return 1;
		}
	}
	return 0;
}

ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	    {
	        strcat(string, "{FF0000}");
		}
	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, LIFT_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Admin Elevator", string, "Accept", "Cancel");
	return 1;
}

CallElevator(playerid, floorid)
{
	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	{
	    return 0;
	}
	
	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);
	return 1;
}

Elevator_Initialize()
{
	Obj_Elevator = CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] = CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] = CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator = CreateDynamic3DTextLabel("Press 'F' to use elevator", NEF_YELLOW, 1784.9822, -1302.0426, 13.6491, 5.0, .testlos = 1, .worldid = 0);

	new Float:z;

	for(new i = 0; i < sizeof(Obj_FloorDoors); i++)
	{
	    Obj_FloorDoors[i][0] = CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] = CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(gstr, sizeof(gstr), "%s\nPress 'F' to call Elevator", FloorNames[i]);

		z = (i == 0) ? (13.4713) : (13.4713 + 8.7396 + ((i - 1) * 5.45155));

		Label_Floors[i] = CreateDynamic3DTextLabel(gstr, RED, 1783.9799, -1300.7660, z, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	}

	Floor_OpenDoors(0);
	Elevator_OpenDoors();
	return 1;
}

Elevator_OpenDoors()
{
	new Float:POS[3];
	GetObjectPos(Obj_ElevatorDoors[0], POS[0], POS[1], POS[2]);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, POS[1], POS[2], DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, POS[1], POS[2], DOORS_SPEED);
	return 1;
}

Elevator_CloseDoors()
{
    if(ElevatorState == ELEVATOR_STATE_MOVING)
	{
		return 0;
	}
	new Float:POS[3];
	GetObjectPos(Obj_ElevatorDoors[0], POS[0], POS[1], POS[2]);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, POS[1], POS[2], DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, POS[1], POS[2], DOORS_SPEED);
	return 1;
}

Floor_OpenDoors(floorid)
{
    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	return 1;
}

Floor_CloseDoors(floorid)
{
    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	return 1;
}

Elevator_MoveToFloor(floorid)
{
	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    DestroyDynamic3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, false, "i", floorid);
	return 1;
}

GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	else
	{
		GetPlayerFacingAngle(playerid, a);
	}
	
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

GetVehicleModelID(vehiclename[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(VehicleNames[i], vehiclename, true) != -1)
		return i + 400;
	}
	return INVALID_VEHICLE_ID;
}

RandomSpawn(playerid, bool:_load_old_pos = false)
{
	if(_load_old_pos)
	{
	    LoadPos(playerid);
	}
	else
	{
		new rand = random(4);
		SetPlayerPosEx(playerid, WorldSpawns[rand][0], WorldSpawns[rand][1], floatadd(WorldSpawns[rand][2], 3.0));
		SetPlayerFacingAngle(playerid, WorldSpawns[rand][3]);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

RandomBGSpawn(playerid, Map, Team)
{
	SetPlayerHealth(playerid, 100.0);
	LoadMap(playerid);
	switch(Map)
	{
	    case BG_MAP1:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M1_T1_Spawns[BGSpawn][0], BG_M1_T1_Spawns[BGSpawn][1], floatadd(BG_M1_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M1_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M1_T2_Spawns[BGSpawn][0], BG_M1_T2_Spawns[BGSpawn][1], floatadd(BG_M1_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M1_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP2:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M2_T1_Spawns[BGSpawn][0], BG_M2_T1_Spawns[BGSpawn][1], floatadd(BG_M2_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M2_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M2_T2_Spawns[BGSpawn][0], BG_M2_T2_Spawns[BGSpawn][1], floatadd(BG_M2_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M2_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP3:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M3_T1_Spawns[BGSpawn][0], BG_M3_T1_Spawns[BGSpawn][1], floatadd(BG_M3_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M3_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M3_T2_Spawns[BGSpawn][0], BG_M3_T2_Spawns[BGSpawn][1], floatadd(BG_M3_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M3_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
   	    case BG_MAP4:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M4_T1_Spawns[BGSpawn][0], BG_M4_T1_Spawns[BGSpawn][1], floatadd(BG_M4_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M4_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M4_T2_Spawns[BGSpawn][0], BG_M4_T2_Spawns[BGSpawn][1], floatadd(BG_M4_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M4_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP5:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M5_T1_Spawns[BGSpawn][0], BG_M5_T1_Spawns[BGSpawn][1], floatadd(BG_M5_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M5_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M5_T2_Spawns[BGSpawn][0], BG_M5_T2_Spawns[BGSpawn][1], floatadd(BG_M5_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M5_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP6:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M6_T1_Spawns[BGSpawn][0], BG_M6_T1_Spawns[BGSpawn][1], floatadd(BG_M6_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M6_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M6_T2_Spawns[BGSpawn][0], BG_M6_T2_Spawns[BGSpawn][1], floatadd(BG_M6_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M6_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	}
	return 1;
}

server_load_textdraws()
{
    new count = GetTickCountEx();
	
	#if WINTER_EDITION == true
	TXTWinterEdition = TextDrawCreate(545.000000, 405.000000, "Winter Edition");
	TextDrawBackgroundColor(TXTWinterEdition, 255);
	TextDrawFont(TXTWinterEdition, 0);
	TextDrawLetterSize(TXTWinterEdition, 0.490000, 1.000000);
	TextDrawColor(TXTWinterEdition, 12189695);
	TextDrawSetOutline(TXTWinterEdition, 1);
	TextDrawSetProportional(TXTWinterEdition, 1);
	TextDrawSetSelectable(TXTWinterEdition, 0);
	#endif
	
	for(new r = 0; r < MAX_GZONES; r++)
	{
		GZoneData[r][e_txtid] = TextDrawCreate(503.000000, 298.000000, "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: --:--");
		TextDrawBackgroundColor(GZoneData[r][e_txtid], 255);
		TextDrawFont(GZoneData[r][e_txtid], 1);
		TextDrawLetterSize(GZoneData[r][e_txtid], 0.240000, 1.100000);
		TextDrawColor(GZoneData[r][e_txtid], -1);
		TextDrawSetOutline(GZoneData[r][e_txtid], 1);
		TextDrawSetProportional(GZoneData[r][e_txtid], 1);
		TextDrawSetSelectable(GZoneData[r][e_txtid], 0);
	}
	
	TXTSpeedo_Main = TextDrawCreate(126.500000, 333.666687, "KM/H");
	TextDrawLetterSize(TXTSpeedo_Main, 0.209998, 0.905833);
	TextDrawAlignment(TXTSpeedo_Main, 1);
	TextDrawColor(TXTSpeedo_Main, 0x73B1ED55);
	TextDrawSetShadow(TXTSpeedo_Main, 0);
	TextDrawSetOutline(TXTSpeedo_Main, 0);
	TextDrawBackgroundColor(TXTSpeedo_Main, 51);
	TextDrawFont(TXTSpeedo_Main, 1);
	TextDrawSetProportional(TXTSpeedo_Main, 1);
	
	TXTRandomInfo = TextDrawCreate(599.000000, 426.000000, "~w~Need a ~b~~h~vehicle~w~? Spawn one using ~r~~h~/v~w~!");
	TextDrawAlignment(TXTRandomInfo, 3);
	TextDrawBackgroundColor(TXTRandomInfo, 168430233);
	TextDrawFont(TXTRandomInfo, 1);
	TextDrawLetterSize(TXTRandomInfo, 0.250000, 1.200000);
	TextDrawColor(TXTRandomInfo, -1);
	TextDrawSetOutline(TXTRandomInfo, 1);
	TextDrawSetProportional(TXTRandomInfo, 1);
	TextDrawSetSelectable(TXTRandomInfo, 0);

	// TXTOnJoin[0] = TextDrawCreate(323.000000, 188.000000, "~y~~h~S~w~tunt ~g~~h~~h~E~w~volution~n~~n~"SVRURLWWW"");
	TXTOnJoin[0] = TextDrawCreate(323.000000, 188.000000, "~y~N~w~ew ~g~~h~~h~E~w~volution ~r~~h~~h~F~w~reeroam~n~~n~"SVRURLWWW"");
	TextDrawAlignment(TXTOnJoin[0], 2);
	TextDrawBackgroundColor(TXTOnJoin[0], 168430202);
	TextDrawFont(TXTOnJoin[0], 1);
	TextDrawLetterSize(TXTOnJoin[0], 0.519999, 2.200000);
	TextDrawColor(TXTOnJoin[0], -1);
	TextDrawSetOutline(TXTOnJoin[0], 1);
	TextDrawSetProportional(TXTOnJoin[0], 1);
	TextDrawSetSelectable(TXTOnJoin[0], 0);

	TXTOnJoin[1] = TextDrawCreate(330.000000, 319.000000, "LOADING GAME ...");
	TextDrawAlignment(TXTOnJoin[1], 2);
	TextDrawBackgroundColor(TXTOnJoin[1], 255);
	TextDrawFont(TXTOnJoin[1], 2);
	TextDrawLetterSize(TXTOnJoin[1], 0.449999, 1.100000);
	TextDrawColor(TXTOnJoin[1], -16843069);
	TextDrawSetOutline(TXTOnJoin[1], 1);
	TextDrawSetProportional(TXTOnJoin[1], 1);
	TextDrawSetSelectable(TXTOnJoin[1], 0);

	JailTD = TextDrawCreate(393.777587, 372.835693, "LD_BUM:bum1");
	TextDrawLetterSize(JailTD, 0.000000, 0.000000);
	TextDrawTextSize(JailTD, 102.666786, -108.515617);
	TextDrawAlignment(JailTD, 3);
	TextDrawColor(JailTD, -1);
	TextDrawFont(JailTD, 4);

	TXTFooterBlack = TextDrawCreate(319.000000, 427.000000, "~n~~n~~n~~n~");
	TextDrawAlignment(TXTFooterBlack, 2);
	TextDrawBackgroundColor(TXTFooterBlack, 255);
	TextDrawFont(TXTFooterBlack, 1);
	TextDrawLetterSize(TXTFooterBlack, 0.500000, 1.000000);
	TextDrawColor(TXTFooterBlack, -1);
	TextDrawSetOutline(TXTFooterBlack, 0);
	TextDrawSetProportional(TXTFooterBlack, 1);
	TextDrawSetShadow(TXTFooterBlack, 1);
	TextDrawUseBox(TXTFooterBlack, 1);
	TextDrawBoxColor(TXTFooterBlack, 0x00000055);
	TextDrawTextSize(TXTFooterBlack, 0.000000, -710.000000);
	TextDrawSetSelectable(TXTFooterBlack, 0);

	TXTFooter = TextDrawCreate(637.000000, 437.000000, "~y~/derby ~r~~h~0 ~y~/cnr ~r~~h~0 ~y~/race ~r~~h~0 ~y~/tdm ~r~~h~0 ~y~/fallout ~r~~h~0 ~y~/gungame ~r~~h~0 ~y~/war ~r~~h~0 ~y~/mini ~r~~h~0 ~y~/sniper ~r~~h~0 ~y~/rocket ~r~~h~0");
	TextDrawAlignment(TXTFooter, 3);
	TextDrawBackgroundColor(TXTFooter, 255);
	TextDrawFont(TXTFooter, 2);
	TextDrawLetterSize(TXTFooter, 0.210000, 1.000000);
	TextDrawColor(TXTFooter, -1);
	TextDrawSetOutline(TXTFooter, 1);
	TextDrawSetProportional(TXTFooter, 1);
	TextDrawSetSelectable(TXTFooter, 0);
	
	NEFLOGO[0] = TextDrawCreate(88.000000, 426.000000, "~y~N~w~ew ~g~~h~E~w~volution ~r~~h~F~w~reeroam");
	TextDrawAlignment(NEFLOGO[0], 2);
	TextDrawBackgroundColor(NEFLOGO[0], 51);
	TextDrawFont(NEFLOGO[0], 3);
	TextDrawLetterSize(NEFLOGO[0], 0.290000, 1.000000);
	TextDrawColor(NEFLOGO[0], -1);
	TextDrawSetOutline(NEFLOGO[0], 1);
	TextDrawSetProportional(NEFLOGO[0], 1);
	TextDrawSetSelectable(NEFLOGO[0], 0);

	NEFLOGO[1] = TextDrawCreate(89.000000, 432.000000, "-");
	TextDrawAlignment(NEFLOGO[1], 2);
	TextDrawBackgroundColor(NEFLOGO[2], 51);
	TextDrawFont(NEFLOGO[1], 1);
	TextDrawLetterSize(NEFLOGO[1], 8.039995, 1.000000);
	TextDrawColor(NEFLOGO[1], 0xF97804FF);
	TextDrawSetOutline(NEFLOGO[1], 1);
	TextDrawSetProportional(NEFLOGO[1], 1);
	TextDrawSetSelectable(NEFLOGO[1], 0);

	NEFLOGO[2] = TextDrawCreate(89.000000, 439.000000, "~b~~h~~h~Stunt~w~/~g~~h~Drift~w~/~y~Race~w~/~r~~h~DM~w~/~p~Fun");
	TextDrawAlignment(NEFLOGO[2], 2);
	TextDrawBackgroundColor(NEFLOGO[2], 51);
	TextDrawFont(NEFLOGO[2], 1);
	TextDrawLetterSize(NEFLOGO[2], 0.260000, 0.899999);
	TextDrawColor(NEFLOGO[2], -1);
	TextDrawSetOutline(NEFLOGO[2], 1);
	TextDrawSetProportional(NEFLOGO[2], 1);
	TextDrawSetSelectable(NEFLOGO[2], 0);

	AchTD[0] = TextDrawCreate(495.000000, 190.000000, "Box0");
	TextDrawBackgroundColor(AchTD[0], 255);
	TextDrawFont(AchTD[0], 1);
	TextDrawLetterSize(AchTD[0], 0.000000, 9.100000);
	TextDrawColor(AchTD[0], -1);
	TextDrawSetOutline(AchTD[0], 0);
	TextDrawSetProportional(AchTD[0], 1);
	TextDrawSetShadow(AchTD[0], 1);
	TextDrawUseBox(AchTD[0], 1);
	TextDrawBoxColor(AchTD[0], 90);
	TextDrawTextSize(AchTD[0], 141.000000, 0.000000);

	AchTD[1] = TextDrawCreate(495.000000, 190.000000, "Box1");
	TextDrawBackgroundColor(AchTD[1], 255);
	TextDrawFont(AchTD[1], 1);
	TextDrawLetterSize(AchTD[1], 0.000000, 4.299999);
	TextDrawColor(AchTD[1], -1);
	TextDrawSetOutline(AchTD[1], 0);
	TextDrawSetProportional(AchTD[1], 1);
	TextDrawSetShadow(AchTD[1], 1);
	TextDrawUseBox(AchTD[1], 1);
	TextDrawBoxColor(AchTD[1], -241);
	TextDrawTextSize(AchTD[1], 141.000000, 0.000000);

	AchTD[2] = TextDrawCreate(187.000000, 191.000000, "ACHIEVEMENT UNLOCKED");
	TextDrawBackgroundColor(AchTD[2], 255);
	TextDrawFont(AchTD[2], 1);
	TextDrawLetterSize(AchTD[2], 0.649999, 2.000000);
	TextDrawColor(AchTD[2], 16711935);
	TextDrawSetOutline(AchTD[2], 0);
	TextDrawSetProportional(AchTD[2], 1);
	TextDrawSetShadow(AchTD[2], 0);

	AchTD[3] = TextDrawCreate(495.000000, 194.000000, "Box2");
	TextDrawBackgroundColor(AchTD[3], 255);
	TextDrawFont(AchTD[3], 1);
	TextDrawLetterSize(AchTD[3], 0.000000, 9.100000);
	TextDrawColor(AchTD[3], -1);
	TextDrawSetOutline(AchTD[3], 0);
	TextDrawSetProportional(AchTD[3], 1);
	TextDrawSetShadow(AchTD[3], 1);
	TextDrawUseBox(AchTD[3], 1);
	TextDrawBoxColor(AchTD[3], 90);
	TextDrawTextSize(AchTD[3], 141.000000, 0.000000);

	AchTD[4] = TextDrawCreate(450.000000, 192.000000, "Box3");
	TextDrawBackgroundColor(AchTD[4], 255);
	TextDrawFont(AchTD[4], 1);
	TextDrawLetterSize(AchTD[4], 0.000000, 1.700000);
	TextDrawColor(AchTD[4], -1);
	TextDrawSetOutline(AchTD[4], 0);
	TextDrawSetProportional(AchTD[4], 1);
	TextDrawSetShadow(AchTD[4], 1);
	TextDrawUseBox(AchTD[4], 1);
	TextDrawBoxColor(AchTD[4], 16711690);
	TextDrawTextSize(AchTD[4], 182.000000, 0.000000);

	AchTD[5] = TextDrawCreate(317.000000, 193.000000, "]                                            ]");
	TextDrawAlignment(AchTD[5], 2);
	TextDrawBackgroundColor(AchTD[5], 255);
	TextDrawFont(AchTD[5], 2);
	TextDrawLetterSize(AchTD[5], 0.500000, 1.600000);
	TextDrawColor(AchTD[5], 16711935);
	TextDrawSetOutline(AchTD[5], 0);
	TextDrawSetProportional(AchTD[5], 1);
	TextDrawSetShadow(AchTD[5], 0);

	NewMsgTD = TextDrawCreate(370.222778, 329.031158, "LD_CHAT:goodcha");
	TextDrawLetterSize(NewMsgTD, 0.000000, 0.000000);
	TextDrawTextSize(NewMsgTD, 32.444427, 28.871093);
	TextDrawAlignment(NewMsgTD, 2);
	TextDrawColor(NewMsgTD, -1);
	TextDrawSetShadow(NewMsgTD, 0);
	TextDrawSetOutline(NewMsgTD, 0);
	TextDrawFont(NewMsgTD, 4);

	CheckTD = TextDrawCreate(370.222778, 329.031158, "LD_CHAT:thumbup");
	TextDrawLetterSize(CheckTD, 0.000000, 0.000000);
	TextDrawTextSize(CheckTD, 45.777770, 31.359985);
	TextDrawAlignment(CheckTD, 1);
	TextDrawColor(CheckTD, -1);
	TextDrawSetShadow(CheckTD, 0);
	TextDrawSetOutline(CheckTD, 0);
	TextDrawFont(CheckTD, 4);
	
	TXTGodTD = TextDrawCreate(499.000000, 106.000000, "~y~~h~GODMODE ENABLED");
	TextDrawBackgroundColor(TXTGodTD, 168430202);
	TextDrawFont(TXTGodTD, 1);
	TextDrawLetterSize(TXTGodTD, 0.319999, 1.399999);
	TextDrawColor(TXTGodTD, -1);
	TextDrawSetOutline(TXTGodTD, 1);
	TextDrawSetProportional(TXTGodTD, 1);
	TextDrawUseBox(TXTGodTD, 1);
	TextDrawBoxColor(TXTGodTD, 168430202);
	TextDrawTextSize(TXTGodTD, 607.000000, 3.000000);
	TextDrawSetSelectable(TXTGodTD, 0);

	TXTWelcome[0] = TextDrawCreate(435.000000, 106.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawBackgroundColor(TXTWelcome[0], 255);
	TextDrawFont(TXTWelcome[0], 1);
	TextDrawLetterSize(TXTWelcome[0], 0.790000, 1.200000);
	TextDrawColor(TXTWelcome[0], -1);
	TextDrawSetOutline(TXTWelcome[0], 0);
	TextDrawSetProportional(TXTWelcome[0], 1);
	TextDrawSetShadow(TXTWelcome[0], 1);
	TextDrawUseBox(TXTWelcome[0], 1);
	TextDrawBoxColor(TXTWelcome[0], 168430165);
	TextDrawTextSize(TXTWelcome[0], 607.000000, 9.000000);
	TextDrawSetSelectable(TXTWelcome[0], 0);

	// TXTWelcome[1] = TextDrawCreate(520.000000, 118.000000, "~y~~h~S~w~tunt ~g~~h~~h~E~w~volution~n~~n~samp."SVRURL":7777");
	TXTWelcome[1] = TextDrawCreate(520.000000, 118.000000, "~y~~h~N~w~ew ~g~~h~~h~E~w~volution ~r~~h~~h~F~w~reeroam~n~~n~samp."SVRURL":7777");
	TextDrawAlignment(TXTWelcome[1], 2);
	TextDrawBackgroundColor(TXTWelcome[1], 168430202);
	TextDrawFont(TXTWelcome[1], 1);
	TextDrawLetterSize(TXTWelcome[1], 0.329998, 1.399999);
	TextDrawColor(TXTWelcome[1], -1);
	TextDrawSetOutline(TXTWelcome[1], 1);
	TextDrawSetProportional(TXTWelcome[1], 1);
	TextDrawSetSelectable(TXTWelcome[1], 0);

	TXTWelcome[2] = TextDrawCreate(438.000000, 172.000000, "Welcome to "SVRSC"! Check out these~n~commands:~n~~n~  ~g~~h~~h~/rules~n~  ~r~~h~~h~/commands~n~  ~p~/help~n~~n~~w~How do I earn money and score?");
	TextDrawBackgroundColor(TXTWelcome[2], 168430202);
	TextDrawFont(TXTWelcome[2], 1);
	TextDrawLetterSize(TXTWelcome[2], 0.229999, 1.099997);
	TextDrawColor(TXTWelcome[2], -1);
	TextDrawSetOutline(TXTWelcome[2], 1);
	TextDrawSetProportional(TXTWelcome[2], 1);
	TextDrawSetSelectable(TXTWelcome[2], 0);

	TXTWelcome[3] = TextDrawCreate(438.000000, 243.000000, "~n~~n~  ~b~~h~~h~See /help for server guides.~n~~n~~w~Stay connected on our forums!~n~~n~  ~p~Visit "SVRFORUM"");
	TextDrawBackgroundColor(TXTWelcome[3], 168430202);
	TextDrawFont(TXTWelcome[3], 1);
	TextDrawLetterSize(TXTWelcome[3], 0.229999, 1.099997);
	TextDrawColor(TXTWelcome[3], -1);
	TextDrawSetOutline(TXTWelcome[3], 1);
	TextDrawSetProportional(TXTWelcome[3], 1);
	TextDrawSetSelectable(TXTWelcome[3], 0);

	TXTWelcome[4] = TextDrawCreate(469.000000, 336.000000, "Enjoy playing on "SVRSC"!");
	TextDrawBackgroundColor(TXTWelcome[4], 168430202);
	TextDrawFont(TXTWelcome[4], 1);
	TextDrawLetterSize(TXTWelcome[4], 0.259999, 1.199998);
	TextDrawColor(TXTWelcome[4], -1);
	TextDrawSetOutline(TXTWelcome[4], 1);
	TextDrawSetProportional(TXTWelcome[4], 1);
	TextDrawSetSelectable(TXTWelcome[4], 0);

    TXTToyInfo = TextDrawCreate(431.000000, 341.000000, "Hold ~r~space ~w~to rotate your view~n~press ~r~escape ~w~to cancel~n~once you are finished click on the ~r~save ~w~icon");
	TextDrawBackgroundColor(TXTToyInfo, 255);
	TextDrawFont(TXTToyInfo, 0);
	TextDrawLetterSize(TXTToyInfo, 0.400000, 1.200000);
	TextDrawColor(TXTToyInfo, -1);
	TextDrawSetOutline(TXTToyInfo, 1);
	TextDrawSetProportional(TXTToyInfo, 1);

    TXTToyBox = TextDrawCreate(822.000000, 335.000000, "      ");
	TextDrawAlignment(TXTToyBox, 2);
	TextDrawBackgroundColor(TXTToyBox, 255);
	TextDrawFont(TXTToyBox, 1);
	TextDrawLetterSize(TXTToyBox, 0.500000, 1.000000);
	TextDrawColor(TXTToyBox, -1);
	TextDrawSetOutline(TXTToyBox, 0);
	TextDrawSetProportional(TXTToyBox, 1);
	TextDrawSetShadow(TXTToyBox, 1);
	TextDrawUseBox(TXTToyBox, 1);
	TextDrawBoxColor(TXTToyBox, 168430207);
	TextDrawTextSize(TXTToyBox, 1.000000, -804.000000);

    TXTRaceSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Race~>~");
	TextDrawAlignment(TXTRaceSign, 2);
	TextDrawBackgroundColor(TXTRaceSign, 168430202);
	TextDrawFont(TXTRaceSign, 0);
	TextDrawLetterSize(TXTRaceSign, 0.479999, 1.299998);
	TextDrawColor(TXTRaceSign, -1);
	TextDrawSetOutline(TXTRaceSign, 1);
	TextDrawSetProportional(TXTRaceSign, 1);
	TextDrawSetSelectable(TXTRaceSign, 0);

    TXTGunGameSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Gungame~>~");
	TextDrawAlignment(TXTGunGameSign, 2);
	TextDrawBackgroundColor(TXTGunGameSign, 168430202);
	TextDrawFont(TXTGunGameSign, 0);
	TextDrawLetterSize(TXTGunGameSign, 0.479999, 1.299998);
	TextDrawColor(TXTGunGameSign, -1);
	TextDrawSetOutline(TXTGunGameSign, 1);
	TextDrawSetProportional(TXTGunGameSign, 1);
	TextDrawSetSelectable(TXTGunGameSign, 0);

    TXTTeleportInfo = TextDrawCreate(500.000000, 5.000000, "~g~~h~~h~Mellnik ~w~has gone to ~b~~h~~h~/trackmania");
	TextDrawBackgroundColor(TXTTeleportInfo, 168430202);
	TextDrawFont(TXTTeleportInfo, 1);
	TextDrawLetterSize(TXTTeleportInfo, 0.189999, 1.099998);
	TextDrawColor(TXTTeleportInfo, -1);
	TextDrawSetOutline(TXTTeleportInfo, 1);
	TextDrawSetProportional(TXTTeleportInfo, 1);
	TextDrawSetSelectable(TXTTeleportInfo, 0);

    TXTFalloutData = TextDrawCreate(513.000000, 344.000000, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~0~n~~w~Status: ~g~~h~~h~Waiting");
	TextDrawBackgroundColor(TXTFalloutData, 168430202);
	TextDrawFont(TXTFalloutData, 1);
	TextDrawLetterSize(TXTFalloutData, 0.270000, 1.099997);
	TextDrawColor(TXTFalloutData, -1);
	TextDrawSetOutline(TXTFalloutData, 1);
	TextDrawSetProportional(TXTFalloutData, 1);
	TextDrawUseBox(TXTFalloutData, 1);
	TextDrawBoxColor(TXTFalloutData, 168430165);
	TextDrawTextSize(TXTFalloutData, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTFalloutData, 0);

    TXTFalloutSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Fallout~>~");
	TextDrawAlignment(TXTFalloutSign, 2);
	TextDrawBackgroundColor(TXTFalloutSign, 168430202);
	TextDrawFont(TXTFalloutSign, 0);
	TextDrawLetterSize(TXTFalloutSign, 0.479999, 1.299998);
	TextDrawColor(TXTFalloutSign, -1);
	TextDrawSetOutline(TXTFalloutSign, 1);
	TextDrawSetProportional(TXTFalloutSign, 1);
	TextDrawSetSelectable(TXTFalloutSign, 0);

    TXTTdmSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~TDM~>~");
	TextDrawAlignment(TXTTdmSign, 2);
	TextDrawBackgroundColor(TXTTdmSign, 168430202);
	TextDrawFont(TXTTdmSign, 0);
	TextDrawLetterSize(TXTTdmSign, 0.479999, 1.299998);
	TextDrawColor(TXTTdmSign, -1);
	TextDrawSetOutline(TXTTdmSign, 1);
	TextDrawSetProportional(TXTTdmSign, 1);
	TextDrawSetSelectable(TXTTdmSign, 0);

    TXTTdmInfo = TextDrawCreate(513.000000, 344.000000, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--~n~~w~Map: ~g~~h~~h~Voting~n~~w~Ranger Kills: ~g~~h~~h~---~n~~w~Spetsnaz Kills: ~g~~h~~h~---");
	TextDrawBackgroundColor(TXTTdmInfo, 168430202);
	TextDrawFont(TXTTdmInfo, 1);
	TextDrawLetterSize(TXTTdmInfo, 0.270000, 1.099997);
	TextDrawColor(TXTTdmInfo, -1);
	TextDrawSetOutline(TXTTdmInfo, 1);
	TextDrawSetProportional(TXTTdmInfo, 1);
	TextDrawUseBox(TXTTdmInfo, 1);
	TextDrawBoxColor(TXTTdmInfo, 168430165);
	TextDrawTextSize(TXTTdmInfo, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTTdmInfo, 0);

    TXTDerbySign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Derby~>~");
	TextDrawAlignment(TXTDerbySign, 2);
	TextDrawBackgroundColor(TXTDerbySign, 168430202);
	TextDrawFont(TXTDerbySign, 0);
	TextDrawLetterSize(TXTDerbySign, 0.479999, 1.299998);
	TextDrawColor(TXTDerbySign, -1);
	TextDrawSetOutline(TXTDerbySign, 1);
	TextDrawSetProportional(TXTDerbySign, 1);
	TextDrawSetSelectable(TXTDerbySign, 0);

    TXTDerbyInfo = TextDrawCreate(513.000000, 344.000000, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~0/20~n~~w~Map: ~g~~h~~h~Voting");
	TextDrawBackgroundColor(TXTDerbyInfo, 168430202);
	TextDrawFont(TXTDerbyInfo, 1);
	TextDrawLetterSize(TXTDerbyInfo, 0.270000, 1.099997);
	TextDrawColor(TXTDerbyInfo, -1);
	TextDrawSetOutline(TXTDerbyInfo, 1);
	TextDrawSetProportional(TXTDerbyInfo, 1);
	TextDrawUseBox(TXTDerbyInfo, 1);
	TextDrawBoxColor(TXTDerbyInfo, 168430165);
	TextDrawTextSize(TXTDerbyInfo, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTDerbyInfo, 0);

    TXTLoading = TextDrawCreate(319.000000, 208.000000, "Loading...");
	TextDrawAlignment(TXTLoading, 2);
	TextDrawBackgroundColor(TXTLoading, 255);
	TextDrawFont(TXTLoading, 2);
	TextDrawLetterSize(TXTLoading, 0.469998, 2.099998);
	TextDrawColor(TXTLoading, -1);
	TextDrawSetOutline(TXTLoading, 1);
	TextDrawSetProportional(TXTLoading, 1);
	TextDrawUseBox(TXTLoading, 1);
	TextDrawBoxColor(TXTLoading, 170);
	TextDrawTextSize(TXTLoading, -9.000000, -152.000000);
	
	Log(LOG_INIT, "TextDraws loaded in %i ms", GetTickCountEx() - count);
	return 1;
}

function:xReactionProgress()
{
    if(xTestBusy)
	{
        tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
        ReactionOn = false;
	}
	return 1;
}

function:xReactionTest()
{
	static const xCharacters[][] =
	{
		"A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M",
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
		"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "m",
		"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
	};

    ReactionOn = true;
    
	new xLength = (random(8) + 3);

	gint = (T_ServerPlayers > 1 && T_ServerPlayers < MAX_PLAYERS) ? T_ServerPlayers : 30;
	xCash = 250 * gint;
	xScore = (random(7) + 2);
	format(xChars, sizeof(xChars), "");
	
	for(new i = 0; i < xLength; i++)
	{
		format(xChars, sizeof(xChars), "%s%s", xChars, xCharacters[random(sizeof(xCharacters))][0]);
	}
	
	format(gstr, sizeof(gstr), "["vlila"REACTION"white"]: The first who types '"vlila"%s"white"' wins $%s + %i score", xChars, number_format(xCash), xScore);
	SCMToAll(WHITE, gstr);
	
	tickReactionStart = GetTickCountEx();
	KillTimer(tReactionTimer);
	xTestBusy = true;
	
	SetTimer("xReactionProgress", 70000, false);
	return 1;
}

function:Elevator_Boost(floorid)
{
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
	return 1;
}

function:Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();
	return 1;
}

function:server_init_shutdown()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
			Kick(i);
	}
	SetTimer("_server_shutdown", 2000, false);
	return 1;
}

function:_server_shutdown()
{
	Log(LOG_EXIT, "server_shutdown() called");
	SendRconCommand("exit");
	return 1;
}

server_initialize()
{
	new count = GetTickCountEx();
	
	// SA_MP Server config
	format(gstr, sizeof(gstr), "hostname %s", HOSTNAME);
	SendRconCommand(gstr);
	SendRconCommand("weburl "SVRURLWWW"");
    SetGameModeText("TdmDerbyRaceCNRFunStuntFreeroam");
	SendRconCommand("mapname "SVRSC" "CURRENT_VERSION"");
	
	EnableVehicleFriendlyFire();
	ShowPlayerMarkers(1);
	DisableInteriorEnterExits();
	ShowNameTags(1);
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	SetNameTagDrawDistance(50.0);
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	SetWeather(1);
	SetWorldTime(12);
	
	// Variable setting
    CurrentBGMap = BG_VOTING;
	StartTime = gettime();
	Iter_Init(iterPlayerIgnore);
	
	for(new i = 1; i < MAX_REPORTS; i++)
		Reports[i] = "<none>";

	for(new i = 0; i < sizeof(g_szCustomCarCategories); i++)
	{
	    format(gstr, sizeof(gstr), "%s\n", g_szCustomCarCategories[i]);
	    strcat(g_sCustomCarCategory, gstr);
	}
		
	// Other stuff to initialize TODO: Overhaul spawns using polygons
    g_SpawnAreas[0] = CreateDynamicSphere(341.8535, -1852.6327, 6.8569, 25.0); // <- beach sphere
    g_SpawnAreas[1] = CreateDynamicSphere(385.4325, 2541.2456, 14.5953, 13.5); // <- AA sphere
    g_SpawnAreas[2] = CreateDynamicSphere(-1203.3666, -27.8846, 15.8403, 15.0); // <- SFA 1 sphere
    g_SpawnAreas[3] = CreateDynamicSphere(-1183.3441, -9.4441, 15.8403, 15.0); // <- SFA 2 sphere
    g_SpawnAreas[4] = CreateDynamicSphere(-2338.0479, -1636.5223, 485.6543, 13.5); // <- MC sphere

	toyslist = LoadModelSelectionMenu("Other/toys.txt");
	hobjslist = LoadModelSelectionMenu("Other/hobjs.txt");
	skinlist = LoadModelSelectionMenu("Other/skins.txt");

	#if WINTER_EDITION == true
    Command_AddAltNamed("xmas", "christmas");
    Command_AddAltNamed("xmas", "christ");
	#endif
	Command_AddAltNamed("toggletp", "togtp");
	Command_AddAltNamed("spectate", "spec");
	Command_AddAltNamed("togglegc", "toggc");
	Command_AddAltNamed("lock", "carlock");
	Command_AddAltNamed("lock", "carunlock");
	Command_AddAltNamed("lock", "unlock");
	Command_AddAltNamed("lock", "vlock");
	Command_AddAltNamed("lock", "vunlock");
	Command_AddAltNamed("hlock", "hunlock");
	Command_AddAltNamed("suspect", "sus");
    Command_AddAltNamed("time", "stime");
    Command_AddAltNamed("oban", "offlineban");
    Command_AddAltNamed("concert", "gig");
    Command_AddAltNamed("radio", "streams");
    Command_AddAltNamed("radio", "listenmusic");
    Command_AddAltNamed("stopradio", "stopstreams");
    Command_AddAltNamed("stopradio", "stopstream");
    Command_AddAltNamed("rocketdm", "rocket");
    Command_AddAltNamed("gmenu", "gstats");
    Command_AddAltNamed("gmenu", "gmembers");
    Command_AddAltNamed("gsetrank", "gsetlevel");
    Command_AddAltNamed("rv", "respawnvehicles");
    Command_AddAltNamed("rv", "resetvehicles");
    Command_AddAltNamed("ah", "fh");
    Command_AddAltNamed("find", "locate");
    Command_AddAltNamed("locate", "loc");
    Command_AddAltNamed("anims", "a");
    Command_AddAltNamed("vs", "wang");
    Command_AddAltNamed("vs", "vehicleshop");
    Command_AddAltNamed("vs", "ottos");
    Command_AddAltNamed("vs", "otto");
	Command_AddAltNamed("ls", "grove");
	Command_AddAltNamed("gc", "cm");
	Command_AddAltNamed("buy", "buyhouse");
	Command_AddAltNamed("sell", "sellhouse");
	Command_AddAltNamed("stopanims", "stopanim");
	Command_AddAltNamed("stopanims", "stopanimations");
	Command_AddAltNamed("stopanims", "clearanim");
	Command_AddAltNamed("stopanims", "clearanims");
	Command_AddAltNamed("bmenu", "gotomybizz");
	Command_AddAltNamed("credits", "secredits");
	Command_AddAltNamed("bmenu", "gotomybusiness");
    Command_AddAltNamed("mk", "medkit");
    Command_AddAltNamed("mk", "medkits");
    Command_AddAltNamed("toys", "wear");
	Command_AddAltNamed("beach", "lsb");
	Command_AddAltNamed("mc", "chiliad");
	Command_AddAltNamed("trackmania", "tm");
	Command_AddAltNamed("trackmania2", "tm2");
	Command_AddAltNamed("trackmania3", "tm3");
	Command_AddAltNamed("a51", "area51");
	Command_AddAltNamed("bs", "bsn");
	Command_AddAltNamed("driftcity", "dc");
	Command_AddAltNamed("driftisland", "df");
	Command_AddAltNamed("parkour", "parkour1");
	Command_AddAltNamed("kk", "krustykrab");
	Command_AddAltNamed("bj", "bj1");
	Command_AddAltNamed("station", "train");
	Command_AddAltNamed("myskin", "skin");
	Command_AddAltNamed("myskin", "setskin");
	Command_AddAltNamed("dm", "dm1");
	Command_AddAltNamed("hidef", "hidefooter");
	Command_AddAltNamed("showf", "showfooter");
	Command_AddAltNamed("textdraws", "textdraw");
	Command_AddAltNamed("textdraws", "moviemode");
	Command_AddAltNamed("s", "sp");
	Command_AddAltNamed("s", "spos");
	Command_AddAltNamed("l", "lpos");
	Command_AddAltNamed("l", "load");
	Command_AddAltNamed("l", "lp");
	Command_AddAltNamed("t", "maps");
	Command_AddAltNamed("t", "map");
	Command_AddAltNamed("t", "teles");
	Command_AddAltNamed("t", "tele");
	Command_AddAltNamed("t", "teleport");
	Command_AddAltNamed("parch", "para");
	Command_AddAltNamed("parch", "pc");
	Command_AddAltNamed("colors", "color");
	Command_AddAltNamed("sb", "speedboost");
	Command_AddAltNamed("sj", "superjump");
	Command_AddAltNamed("sj", "superman");
	Command_AddAltNamed("bbuy", "pbuy");
	Command_AddAltNamed("bsell", "psell");
	Command_AddAltNamed("lock", "pvlock");
	Command_AddAltNamed("unlock", "pvunlock");
	Command_AddAltNamed("tdm", "bg");
	Command_AddAltNamed("gungame", "gg");
	Command_AddAltNamed("adminhelp", "ahelp");
	Command_AddAltNamed("adminhelp", "acmds");
	Command_AddAltNamed("minigun", "mini");
	Command_AddAltNamed("minigun", "mg");
	Command_AddAltNamed("minigun2", "mini2");
	Command_AddAltNamed("minigun2", "mg2");
	Command_AddAltNamed("ff", "dive");
	Command_AddAltNamed("ff", "freefall");
	Command_AddAltNamed("exit", "leave");
	Command_AddAltNamed("burn", "explode");
	Command_AddAltNamed("spawn", "kill");
	Command_AddAltNamed("announce", "ann");
	Command_AddAltNamed("announce2", "ann2");
	Command_AddAltNamed("gotomybusiness", "gotomybizz");
	Command_AddAltNamed("gotomybusiness", "gotomyprop");
	Command_AddAltNamed("go", "goto");
	Command_AddAltNamed("slap", "throw");
	Command_AddAltNamed("giveweapon", "givegun");
	Command_AddAltNamed("admins", "admin");
	Command_AddAltNamed("vips", "premiums");
	Command_AddAltNamed("viplounge", "vipl");
	Command_AddAltNamed("vip", "premium");
	Command_AddAltNamed("vip", "vipcmds");
	Command_AddAltNamed("vip", "viphelp");
	Command_AddAltNamed("cd", "count");
	Command_AddAltNamed("cd", "countdown");
	Command_AddAltNamed("rules", "rule");
	Command_AddAltNamed("wanteds", "wanted");
	Command_AddAltNamed("gangs", "groups");
	Command_AddAltNamed("top", "top5");
	Command_AddAltNamed("top", "top10");
	Command_AddAltNamed("vmenu", "pvmenu");
	Command_AddAltNamed("vmenu", "pv");
	Command_AddAltNamed("vmenu", "mypv");
	Command_AddAltNamed("vcontrol", "vctrl");
	Command_AddAltNamed("vcontrol", "vcs");
	Command_AddAltNamed("label", "labels");
	Command_AddAltNamed("cc", "paint");
	Command_AddAltNamed("cc", "vcolor");
	Command_AddAltNamed("changepass", "changepassword");
	Command_AddAltNamed("serverstats", "serverstat");
	Command_AddAltNamed("armourall", "armorall");
	Command_AddAltNamed("hmenu", "myhouse");
	Command_AddAltNamed("hmenu", "myhouses");
	Command_AddAltNamed("hmenu", "houses");
	Command_AddAltNamed("hmenu", "upgrades");
	Command_AddAltNamed("hmenu", "houseupgrades");
	Command_AddAltNamed("hmenu", "houseupgrade");
	Command_AddAltNamed("settings", "setting");
	Command_AddAltNamed("settings", "cp");
	Command_AddAltNamed("m", "minigames");
	Command_AddAltNamed("m", "minigame");
	Command_AddAltNamed("answer", "ans");
	Command_AddAltNamed("pm", "pn");
	Command_AddAltNamed("pm", "msg");
	Command_AddAltNamed("toys", "toy");
	Command_AddAltNamed("toys", "hod");
	Command_AddAltNamed("toys", "hods");
	Command_AddAltNamed("toys", "attachments");
	Command_AddAltNamed("toys", "attachment");
	Command_AddAltNamed("toys", "o");
	Command_AddAltNamed("achs", "achievements");
	Command_AddAltNamed("achs", "erfolge");
	Command_AddAltNamed("achs", "ach");
	Command_AddAltNamed("c", "cmds");
	Command_AddAltNamed("help", "ghelp");
	Command_AddAltNamed("help", "chelp");
	Command_AddAltNamed("help", "hilfe");
	Command_AddAltNamed("c", "commands");
	Command_AddAltNamed("c", "command");
	Command_AddAltNamed("c", "cmd");
	Command_AddAltNamed("hitman", "hit");
	Command_AddAltNamed("serverstats", "uptime");
	Command_AddAltNamed("w", "weps");
	Command_AddAltNamed("w", "weapon");
	Command_AddAltNamed("w", "weapons");
	Command_AddAltNamed("w", "guns");
	Command_AddAltNamed("w", "gun");
	Command_AddAltNamed("w", "gunz");
	Command_AddAltNamed("w", "waffen");
	Command_AddAltNamed("v", "veh");
	Command_AddAltNamed("v", "vehs");
	Command_AddAltNamed("v", "vehicles");
	Command_AddAltNamed("v", "vehicle");
	Command_AddAltNamed("v", "cars");
	Command_AddAltNamed("credits", "credit");
	Command_AddAltNamed("ar", "arrest");
	Command_AddAltNamed("ar", "arest");
	Command_AddAltNamed("ar", "arr");
	Command_AddAltNamed("help", "h");
	Command_AddAltNamed("rob", "robstore");
	Command_AddAltNamed("hmenu", "gotomyhouse");
	Command_AddAltNamed("hmenu", "upgrade");
	Command_AddAltNamed("hmenu", "housemenu");
	Command_AddAltNamed("vmenu", "vehiclemenu");
    Command_AddAltNamed("vmenu", "plate");
	Command_AddAltNamed("new", "news");
	Command_AddAltNamed("new", "changelog");
	Command_AddAltNamed("exit", "raceoff");
	Command_AddAltNamed("exit", "dmoff");
	Command_AddAltNamed("exit", "derbyoff");
	Command_AddAltNamed("exit", "abandon");
	Command_AddAltNamed("exit", "dejar");
	Command_AddAltNamed("gotoxyza", "gotoxyz");
	Command_AddAltNamed("toggletoys", "toggtoys");
	Command_AddAltNamed("toggletoys", "togtoys");
	Command_AddAltNamed("toggletoys", "ttoys");
	Command_AddAltNamed("toggletoys", "holdoff");
	Command_AddAltNamed("toggletoys", "holdon");
	Command_AddAltNamed("new", "news");
	Command_AddAltNamed("new", "updates");
	Command_AddAltNamed("tops", "ranks");
	Command_AddAltNamed("tops", "ranking");
    Command_AddAltNamed("score", "topscore");
    Command_AddAltNamed("richlist", "topcash");
    Command_AddAltNamed("richlist", "topmoney");
    Command_AddAltNamed("kills", "topkills");
    Command_AddAltNamed("deaths", "topdeaths");
    Command_AddAltNamed("gangs", "topgangs");
    Command_AddAltNamed("races", "topracer");
    Command_AddAltNamed("derbys", "topderby");
    Command_AddAltNamed("gungames", "topgungame");
    Command_AddAltNamed("fallouts", "topfallout");
    Command_AddAltNamed("wanteds", "topwanteds");
    Command_AddAltNamed("rtests", "topreaction");
    Command_AddAltNamed("vmenu", "mycars");
    Command_AddAltNamed("gmenu", "mygang");
    Command_AddAltNamed("hmenu", "myhouses");
	
    AddPlayerClass(3, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
    AddPlayerClass(81, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(1, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(199, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(299, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(5, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(264, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(26, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(289, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(28, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(72, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(248, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(178, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(100, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(115, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(272, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(127, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(138, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(149, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(249, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(162, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(206, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(271, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(145, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(285, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(283, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);

	Log(LOG_INIT, "Server Modules loaded in %i ms", GetTickCountEx() - count);
	return 1;
}

server_load_visuals()
{
	// 3374 heuballen
	// 2898 grünes rasen ding
	
    new count = GetTickCountEx();
    
	bb_mcc = CreateDynamicObject(8323, -2322.76880, -1704.56067, 499.98999,   0.00000, 0.00000, 69.30000);
	SetDynamicObjectMaterialText(bb_mcc, 0, "Welcome to Havoc Freeroam!\nServer time: \n"green"Players online: ", OBJECT_MATERIAL_SIZE_256x128, "Calibri", 0, 0, -32256, -16777216, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);

    new object_id = CreateDynamicObject(11317, 1914.20313, -1377.58191, 26.29986,   0.00000, 0.00000, 91.91999); // Gold Credits Wang Cars
    SetDynamicObjectMaterial(object_id, 2, 19341, "egg_texts", "easter_egg01");
    SetDynamicObjectMaterial(object_id, 3, 19341, "egg_texts", "easter_egg01");
    
	MellnikGate = CreateDynamicObject(980, -205.68774, -2285.10693, 30.65776,   0.00000, 0.00000, 122.80286);
	MellnikRamp = CreateDynamicObject(3115, -153.74190, -2210.68457, 27.16690,   0.00000, 0.00000, -145.55995);

	new mc_text = CreateDynamicObject(19479, -2331.787841, -1635.757690, 484.685546, 0.099999, -90.299964, 178.450790);
	SetDynamicObjectMaterialText(mc_text, 0, ""nef_yellow"New "nef_green"Evolution "nef_red"Freeroam{F0F0F0}™\n"CURRENT_VERSION"\n"SVRURLWWW"", OBJECT_MATERIAL_SIZE_256x128, "Arial", 20, 1, -32256, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	new beach_text = CreateDynamicObject(19479, 309.903930, -1934.953369, 12.736993, 0.000000, 0.000000, 39.940856);
	SetDynamicObjectMaterialText(beach_text, 0, ""orange""SVRURLWWW"\n"red""CURRENT_VERSION"", OBJECT_MATERIAL_SIZE_256x128, "Arial", 30, 1, -32256, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

    pick_chainsaw = CreateDynamicPickup(341, 23, 1219.1809,-924.6318,42.9045);
    pick_life[0] = CreateDynamicPickup(1240, 23, -1987.6259,274.7049,34.9564);
    pick_life[1] = CreateDynamicPickup(1240, 23, 2463.1362,-1683.0521,13.3142);
    pick_life[2] = CreateDynamicPickup(1240, 23, 1184.9302,-1325.9720,13.3399);
    pick_life[3] = CreateDynamicPickup(1240, 23, 241.4559,-1754.1686,4.2808);
    pick_life[4] = CreateDynamicPickup(1240, 23, 333.7505,-1520.1478,35.6370);
    pick_life[5] = CreateDynamicPickup(1240, 23, 800.4719,-1629.9167,13.1530);
    pick_life[6] = CreateDynamicPickup(1240, 23, 2458.5137,2019.7380,10.8325);
    pick_life[7] = CreateDynamicPickup(1240, 23, -588.3522,-3579.2637,3.4029);
    pick_life[8] = CreateDynamicPickup(1240, 23, 2271.3765,1518.1755,42.5862);
    pick_life[9] = CreateDynamicPickup(1240, 23, 2316.5967,1792.5190,10.5918);
    pick_life[10] = CreateDynamicPickup(1240, 23, -2383.1816,-587.0456,131.8897);
    pick_life[11] = CreateDynamicPickup(1240, 23, -1405.9728,492.3374,18.0023);
    pick_life[12] = CreateDynamicPickup(1240, 23, 2035.2893,-2348.9136,13.6844);
    pick_life[13] = CreateDynamicPickup(1240, 23, 400.7469, 2544.7986, 19.6311);
    
    for(new i = 0; i < 16; i++)
    {
        pick_armor[i] = CreateDynamicPickup(1242, 23, g_ArmorPickups[i][0], g_ArmorPickups[i][1], g_ArmorPickups[i][2]);
    }

	for(new i = 0; i < CAR_SHOPS; i++)
	{
		g_CustomCarShops[i][e_pickup] = CreateDynamicPickup(1559, 23, g_CarShopLocations[i][0], g_CarShopLocations[i][1], g_CarShopLocations[i][2], 0, -1, -1, 200.0);
		g_CustomCarShops[i][e_mapicon] = CreateDynamicMapIcon(g_CarShopLocations[i][0], g_CarShopLocations[i][1], g_CarShopLocations[i][2], 55, 1, 0, -1, -1, 200.0);
		g_CustomCarShops[i][e_3dlabel] = CreateDynamic3DTextLabel(""white"["nef_green"Custom car shop"white"]", 1, g_CarShopLocations[i][0], g_CarShopLocations[i][1], g_CarShopLocations[i][2] + 0.5, 300.0);
	}

    g_AdminLCTo = CreateDynamicPickup(1559, 23, 1805.7494,-1302.6721,120.2656);
    g_AdminLCBack = CreateDynamicPickup(1559, 23, -794.806396,497.738037,1376.195312);
	g_CarShopDialogPickup = CreateDynamicPickup(1559, 23, -1407.0137,1013.8229,1049.0288);
    g_CarShopInteriorPickup = CreateDynamicPickup(1559, 23, -1405.4905,985.1736,1049.0078);
	dm1pickup = CreateDynamicPickup(1247, 2, -3954.1172,980.9998,65.6059);
	dm2pickup = CreateDynamicPickup(1247, 2, -3951.4558,982.3098,36.1859);
	VIPLpickup = CreateDynamicPickup(1559, 2, -2624.3010,1411.4360,7.2303);
	VIPLpickup2 = CreateDynamicPickup(1559, 23, -3936.6282,1305.2244,2.4587);

	mc_dive = CreateDynamicPickup(371, 23, -2338.6001,-1627.5149,485.6543);
	CreateDynamic3DTextLabel("Dive", GREEN, -2338.6001,-1627.5149,485.6543+0.5, 30.0);
	mc_tp = CreateDynamicPickup(19130, 2, -2330.7739,-1644.0229,485.6543);
	CreateDynamic3DTextLabel("Teleports "red"(/t)", BLUE, -2330.7739,-1644.0229,485.6543+0.5, 30.0);
	mc_weps = CreateDynamicPickup(1254, 2, -2340.0862,-1644.3979,485.6543);
	CreateDynamic3DTextLabel("Weapons "green"(/w)", RED, -2340.0862,-1644.3979,485.6543+0.5, 30.0);

    CreateDynamic3DTextLabel(""SVRLOGO"\n"r_besch"Beach Zone "grey"(/beach)\n"orange"www.nefserver.net\n"white"Are you a "orange"new "white"player? Explore our maps "orange"/t\n"white"Use "orange"/god "white"for freeroam mode!", -1, 323.8153,-1853.5037,8.2406+0.5, 35.0);
	beach_dive = CreateDynamicPickup(371, 23, 327.5385,-1864.1561,8.2406);
	CreateDynamic3DTextLabel("Dive", GREEN, 327.5385,-1864.1561,8.2406+0.5, 30.0);
	beach_tp = CreateDynamicPickup(19130, 2, 336.6495,-1836.6848,8.2481);
	CreateDynamic3DTextLabel("Teleports "red"(/t)", BLUE, 336.6495,-1836.6848,8.2481+0.5, 30.0);
	beach_weps = CreateDynamicPickup(1254, 2, 327.7540,-1843.1305,8.2481);
	CreateDynamic3DTextLabel("Weapons "green"(/w)", RED, 327.7540,-1843.1305,8.2481+0.5, 30.0);
	beach_m = CreateDynamicPickup(1254, 2, 346.7035,-1867.6292,8.2481);
	CreateDynamic3DTextLabel("Minigames "green"(/m)", RED, 346.7035,-1867.6292,8.2481+0.5, 30.0);

	// old map icons
	CreateDynamicMapIcon(822.6, -1590.3, 13.5, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(-2570.1, 245.4, 10.3, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2726.6, -2026.4, 17.5, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2080.3, 2119.0, 10.8, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2080.3, 2119.0, 10.8, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(675.7, -496.6, 16.8, 7, 1, -1, -1, -1);
    CreateDynamicMapIcon(1971.7, -2036.6, 13.5, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(2071.6, -1779.9, 13.5, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(2094.6, 2119.0, 10.8, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(-2490.5, -40.1, 39.3, 39, 1, -1, -1, -1);
	// old map icons end

	CreateDynamicCP(1024.6803,1292.1177,20.3791, 5.0, 0, -1, -1, 100.0); // Bike Challenge Reward
	CreateDynamicCP(3896.1235,3884.3840,184.7534, 12.0, 0, -1, -1, 100.0); // SkyDive1 Reward
	CreateDynamicCP(-1278.9248,-34.3641,1122.3420, 12.0, 0, -1, -1, 100.0); // SkyDive2 Reward
	CreateDynamicCP(2890.5774, -3223.6228, 2132.9097, 12.0, 0, -1, -1, 100.0); // SkyDive3 Reward
	CreateDynamicCP(148.6426, 3655.9390, 19.3876, 12.0, 0, -1, -1, 100.0); // SkyDive4 Reward
    CreateDynamicCP(3259.0864, -1837.3140, 170.1097, 12.0, 0, -1, -1, 100.0); // BMX Reward
    
    // CNR START
	// Refill Stations
	CreateDynamicCP(2199.9460,2474.7231,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(1596.1165,2196.8958,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(2116.7163,922.6126,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(2637.9185,1103.4926,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // 10
	// Robbery Locations
	CreateDynamicCP(2097.5847,2224.0974,11.0234, 3.0, CNR_WORLD, -1, -1, 100.0); //24/7
	CreateDynamicCP(2194.4106,1990.7670,12.2969, 3.0, CNR_WORLD, -1, -1, 100.0); // 24/7 2
	CreateDynamicCP(2167.2432,2114.3831,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // Casino
	CreateDynamicCP(2159.0449,943.1320,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // Ammunation
	// Exits
	CreateDynamicCP(-31.0415,-92.0112,1003.5469, 2.0, CNR_WORLD, -1, -1, 50.0); //24/7
	CreateDynamicCP(-25.4077,-188.2529,1003.5469, 2.0, CNR_WORLD, -1, -1, 50.0); // 24/7 2
	CreateDynamicCP(1132.9701,-14.2267,1000.6797, 2.0, CNR_WORLD, -1, -1, 50.0); // Casino
	CreateDynamicCP(286.1115,-41.6959,1001.5156, 2.0, CNR_WORLD, -1, -1, 50.0); // Ammunation
	CreateDynamicCP(294.4077,-38.3232,1001.5156, 2.0, CNR_WORLD, -1, -1, 50.0); // Ammunation Menu
	CreateDynamicCP(2297.6804,2466.7480,3.2734, 2.0, CNR_WORLD, -1, -1, 50.0); // PD Refill // 20
	CreateDynamicCP(1291.7106,2672.7725,11.2392, 2.0, CNR_WORLD, -1, -1, 50.0); // Robber Refill
	CreateDynamicCP(2287.0718,2432.3665,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // PD Entrance // 22
	CreateDynamicCP(238.7167,138.6336,1003.0234, 2.0, CNR_WORLD, -1, -1, 75.0); // PD Exit
	CreateDynamicCP(2271.0574,2293.2908,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Roca Escalente Bank // 24
	CreateDynamicCP(2355.3020,1544.3804,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // LV Bank
	CreateDynamicCP(2305.3713,-16.0632,26.7496, 2.0, CNR_WORLD, -1, -1, 75.0); // Roca/LV Bank Exit // 26
	CreateDynamicCP(2019.7651,1007.6656,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // 4D Casino
	CreateDynamicCP(2019.0719,1017.8808,996.8750, 2.0, CNR_WORLD, -1, -1, 75.0); // 4D Exit
	CreateDynamicCP(2089.7944,1514.4180,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Royal Casino
	CreateDynamicCP(2539.2773,2083.7363,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Ammunation
	CreateDynamicCP(2196.8345,1677.1240,12.3672, 2.0, CNR_WORLD, -1, -1, 75.0); // Caligulas Casino
	CreateDynamicCP(2234.1003,1714.3649,1012.3828, 2.0, CNR_WORLD, -1, -1, 75.0); // Caligulas Exit
	CreateDynamicCP(1391.6522,2693.8896,10.8203, 1.5, CNR_WORLD, -1, -1, 75.0); // Robbers Gate
	CreateDynamicCP(1400.9669,2685.9114,10.8203, 1.5, CNR_WORLD, -1, -1, 75.0); // Robbers Gate
	CreateDynamicCP(666.4440, -1866.7815, 4.9608, 3.0, 0, -1, -1, 100.0); // Gold Credits
	CreateDynamicCP(3360.8054,-1934.1283,43.3184, 3.5, 0, -1, -1, 50.0); // bmx bike spawn
	CreateDynamicCP(249.9905, 3772.1204, 18.3780, 12.0, 0, -1, -1, 100.0); // skydive5 checkpoint
	CreateDynamicCP(-1839.5253, -3856.7036, 16.9936, 12.0, 0, -1, -1, 100.0); // skydive6 checkpoint

	//Stores
	CreateDynamicMapIcon(2539.3477,2081.2295,10.8203, 6, 0, CNR_WORLD); //Ammunation 1
	CreateDynamicMapIcon(2159.0449,943.1320,10.8203, 6, 0, CNR_WORLD); //Ammunation 2
	CreateDynamicMapIcon(2097.5847,2224.0974,11.0234, 49, 0, CNR_WORLD); //24/7 1
	CreateDynamicMapIcon(2194.4106,1990.7670,12.2969, 49, 0, CNR_WORLD); //24/7 2
	CreateDynamicMapIcon(2196.8345,1677.1240,12.3672, 25, 0, CNR_WORLD); //Caligulas
	CreateDynamicMapIcon(2019.7651,1007.6656,10.8203, 25, 0, CNR_WORLD); //4D
	CreateDynamicMapIcon(2167.2432,2114.3831,10.8203, 25, 0, CNR_WORLD); //Other Casino
	CreateDynamicMapIcon(2271.0574,2293.2908,10.8203, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(2355.3020,1544.3804,10.8203, 52, 0, CNR_WORLD); //Bank 2
	CreateDynamicMapIcon(-1550.4073,1168.7106,7.1875, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(-2455.3555,503.9716,30.0781, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(1877.7257,-1737.5585,13.3501, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(1550.1409,-1790.7477,15.2916, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(1462.5692,-1010.9126,26.8438, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(1498.3008,-1581.9375,13.5498, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(368.8708,2580.0532,16.9099, 52, 0, CNR_WORLD); //Bank
	CreateDynamicMapIcon(2225.7664,1838.6151,10.8203, 48, 0, CNR_WORLD); // RPC 1
	CreateDynamicMapIcon(-26.1917,2531.7217,17.4203, 48, 0, CNR_WORLD); // RPC 2
	CreateDynamicMapIcon(-2624.0850,1411.7439,7.0938, 48, 0, CNR_WORLD); // RPC 3
	// CNR END
    
	// anti vehile drop
	CreateObject(8040, 660.65997, -1361.88000, 2548.94995,   0.00000, 0.00000, -179.78000); // /speed
	CreateObject(4726, 338.60001, -1853.16003, 5.92000,   0.00000, 0.00000, 270.00000); // LS beach
	CreateObject(9241, -1182.88000, -12.16000, 14.00000,   0.00000, 0.00000, -135.00000); //SFA 1
	CreateObject(9241, -1200.43005, -29.73000, 14.00000,   0.00000, 0.00000, -135.00000); //SFA 2
	CreateObject(18783, 385.4325, 2541.2456, 14.5953,   0.00000, 0.00000, 0.00000); //AA
	CreateObject(8040,-1296.403,-1665.809,538.216,0.0,0.0,-6.016); // Ski-Ramp
	CreateObject(8040, 423.46, 3216.41, 739.40,   0.00, 0.00, -106.57); //AAJUMP
	CreateObject(14548,-2183.280,1194.442,1696.073,0.0,0.0,-3.438); // Andro
	CreateObject(18365, 3315.628, -1892.834, 49.420, 0.0, 0.0, 0.0); // bmx
	CreateObject(4867, 3570.977, 1234.999, 8.923, 0.0, 0.0, 90.241); // carsumo
	CreateObject(8420, 317.289, 651.237, 573.563, 0.0, 0.0, 36.956); // pipe
	CreateObject(13607, 1086.370, 1070.795, 70.407, 0.0, 0.0, -34.377); // nrgbowl
	CreateObject(4108, 2773.962, -1274.130, 4315.749, 0.0, 0.0, 0.0); // TugFun
	CreateObject(8040, 310.667, 5487.085, 3426.353, 0.0, 0.0, -89.381); // Drop
 	CreateObject(5794, 4200.000, 1871.350, 2835.076, 0.0, 0.0, 0.0); // LF
 	CreateObject(8357, -2919.677, -313.097, 3.643, 0.0, 0.0, 0.0); // Racemap
 	CreateObject(4232, 1652.955, 2891.235, 140.517, 0.0, 0.0, 23.205); // BC
	CreateObject(8040, 2498.082, -1697.696, 713.894, 0.0, 0.0, -181.341); // SKC
	CreateObject(17864, -2799.695, 2923.545, 9.153, 0.0, 0.0, 0.0); // Kartrack
	CreateObject(8040, 2348.883, -45.075, 366.637, 0.0, 0.0, 90.241); // Waterjump
 	CreateObject(8040, 2121.594, 2546.270, 514.322, 0.0, 0.0, -89.381); // Glassjump
 	CreateObject(8040, 607.596, 2233.157, 940.345, 0.0, 0.0, -179.622); // Bikejump
	CreateObject(8040, 894.12, 2502.60, 694.15,   0.00, 0.00, 180.00); //hugejump
	CreateObject(8040, 493.427, -35.034, 680.793, 0.0, 0.0, -180.000); // huge loop (/loop)
	CreateObject(8040, 941.538, -1387.319, 654.160, 0.0, 0.0, 0.0); // PipeJump static
	CreateObject(8040,865.293,255.333,587.316,0.0,0.0,110.008); // QJUMP
	CreateObject(8040,31.291,274.093,1199.888,0.0,0.0,-35.466); // Spiral
	CreateObject(9612, 2962.32, -661.09, -27.59,   0.00, 0.00, 270.49); //Drag
	CreateObject(8040, -2683.68, 383.00, 921.70,   0.00, 0.00, 65.27); //LoopJump
	CreateObject(8040,2664.19995117,-1044.90002441,883.00,0.0,0.00,359.52038574); //DeathJump
	CreateObject(4867, 1851.615, -3182.590, 17.740, 0.0, 0.0, 0.164); // Planes
	CreateObject(9241, -1191.68677, -22.75382, 13.76887,   0.00000, 0.00000, 45.60000); // sfa
	CreateObject(8172,2740.04785156,1918.12512207,5268.76220703,0,0,0); // Racemap
	CreateObject(3458, -295.32, 3682.53, 21.10,   0.00, 0.00, 0.00); //Static Base
	CreateObject(8040,564.91992188,860.32714844,7107.35400391,0,21.99462891,0); // GoingDown
	CreateObject(8040,2977.97949219,-1437.01464844,1243.90209961,0,0,189.99755859); // skyroad (/skr)
	CreateObject(18769, -2333.23315, -1650.64453, 483.17276,   0.00000, 0.00000, -1.74001); // mc vspawn
	CreateObject(18769, -2332.09180, -1610.96912, 483.17276,   0.00000, 0.00000, -1.74001); // mc vspawn
	CreateObject(18769, -2320.75146, -1696.56824, 483.17276,   0.00000, 0.00000, 50.64000); // mc vspawn
	CreateObject(18769, -2332.69995, -1630.66577, 483.17276,   0.00000, 0.00000, -2.10001); // mc vspawn
	CreateObject(9241, -2339.24951, -1636.16699, 483.82617,   0.00000, 0.00000, -271.79977); // mc spawn
	
	// derby townhall fix
	CreateDynamicObject(8558, 1544.65198, -1843.98779, 17.14610,   1.80000, -88.90002, -89.69999);
	CreateDynamicObject(8558, 1541.62708, -1843.84485, 17.14610,   1.80000, -88.90002, -89.69999);
	// anti vehicle drop end

	// hotspots
	CreateDynamicMapIcon(-1196.1506, -17.3470, 15.8281, 23, 1, -1, -1, -1, 250.0); // SFA
	CreateDynamicMapIcon(385.4325, 2541.2456, 14.5953, 23, 1, -1, -1, -1, 250.0); // AA
	CreateDynamicMapIcon(341.5075, -1852.6332, 8.2612, 23, 1, -1, -1, -1, 250.0); // BEACH
	// hotspots end

	// login obj (beach ?)
	//CreateDynamicObject(19462, 388.20001, -1809.04004, 16.17000,   0.00000, 90.00000, 13.00000);
	//CreateDynamicObject(19462, 391.57999, -1808.23999, 16.17000,   0.00000, 90.00000, 13.00000);
	//CreateDynamicObject(18102, 386.79163, -1807.13257, 20.75563,   0.00000, 0.00000, -245.76001);
	// login obj end
	
	CreateObject(986, 1385.98, 2643.14, 11.81, 0.00, 0.00, 90.13); // Robbers Gate
	g_CNR_RobberGate[0] = CreateObject(976, 1397.24, 2694.51, 9.91, 0.00, 0.00, 269.23);
	g_CNR_RobberGate[1] = CreateObject(976, 1397.24, 2693.86, 9.91, 0.00, 0.00, 90.07);

	/*// gehört zu beach
	CreateDynamicObject(10771, 224.30000, -2004.00000, 4.10000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(11145, 274.20001, -1962.30005, 3.20000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(10770, 217.70000, -1999.59998, 37.30000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(11237, 217.10001, -1999.30005, 37.10000,   0.00000, 0.00000, 220.00000);
	// beach start
	CreateObject(10771, 224.30000, -2004.00000, 4.10000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(11145, 274.20001, -1962.30005, 3.20000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(10770, 217.70000, -1999.59998, 37.30000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(11237, 217.10001, -1999.30005, 37.10000,   0.00000, 0.00000, 220.00000, 350.0);
	// beach end*/
    
    AddTeleport(4, "Gold Credits", "gc", 654.5861, -1867.3845, 5.5861);
	AddTeleport(6, "Drift", "drift", -344.308, 1528.474, 75.159);
	AddTeleport(6, "Drift City", "dc", 3431.8589, 484.3132, 1788.7490);
	AddTeleport(6, "Drift Island", "df", 3075.9263,-3153.9749,49.1486);
	AddTeleport(6, "Las Venturas Drift", "lvdrift", 2333.8508,1405.8370,42.5904);
	AddTeleport(6, "San Fierro Drift", "sfdrift", -2410.9963, -600.7848, 132.3277);
	AddTeleport(3, "Trackmania", "tm", 1297.3998, -5626.5122, 81.7);
	AddTeleport(3, "Trackmania 2", "tm2", -1929.1312, 6627.0327, 12.0);
	AddTeleport(3, "Trackmania 3", "tm3", -5697.0776,2790.4932,5.6020);
	AddTeleport(3, "Infernus Paradise", "ip", -5051.7461, -2237.2556, 10.9);
	AddTeleport(3, "Infernus Paradise 2", "ip2", -297.6044, 3682.8264, 24.0);
	AddTeleport(3, "Infernus Paradise 3", "ip3", 4546.4175,655.6476,13.4803);
	AddTeleport(1, "Speed", "speed", 680.2595, -1361.8927, 2550.2214);
	AddTeleport(0, "Disney", "disney", 400.2232,636.9904,16.8194);
	AddTeleport(4, "Mellnik's Island", "mi", -3801.8572, 498.8828, 16.5183);
	AddTeleport(4, "Mellnik's House", "mh", -182.9842,-2245.7412,31.1492);
	AddTeleport(2, "Treehouse", "treehouse", -804.6822, -2075.3076, 47.1331);
	AddTeleport(2, "Party", "party", -377.2038,2131.4634,133.1797);
	AddTeleport(4, "Balloon", "balloon", 295.4890,-1813.5734,52.0518);
	AddTeleport(3, "Bike Challange", "bikec", 1102.3887, 1355.4951, 10.8203);
	AddTeleport(3, "Hayclimb", "hayclimb", -1788.4408, 575.2750, 35.1641);
	AddTeleport(1, "HalfPipe", "hp", 2848.1548,-1977.4320,10.6646);
	AddTeleport(1, "Slide", "slide", 1572.9949, -1238.7869, 277.7445);
	AddTeleport(2, "Tugfun", "tugfun", 2774.316, -1309.180, 4316.250);
	AddTeleport(2, "Drop", "drop", 309.7934, 5461.4546, 3426.6863);
	AddTeleport(0, "X-Slide", "xslide", 1862.760, 1337.315, 55.933);
	AddTeleport(1, "Loop Jump", "loopjump", -2682.3909, 385.2379, 924.8377);
	AddTeleport(1, "Death Jump", "deathjump", 2629.9734,-1029.7679,882.9141);
	AddTeleport(1, "Glass Jump", "glassjump", 2121.4280, 2560.6331, 514.7283);
	AddTeleport(1, "Going Down", "gd", 551.1603,860.3625,7113.0366);
	AddTeleport(0, "Maze 1", "maze", 2330.3174, 535.1375, 2.9512);
	AddTeleport(0, "Maze 2", "maze2", 1458.9336, 1854.9144, 54.7362);
	AddTeleport(0, "Maze 3", "maze3", 836.5298,-2048.2273,12.8672);
	AddTeleport(0, "Maze 4", "maze4", 983.0536,2691.7898,10.6925);
	AddTeleport(1, "Tunnel Jump", "bikejump", -494.527, 1600.167, 844.297);
	AddTeleport(1, "Bike Jump", "bikejump", 641.9279,2222.7144,940.5793);
	AddTeleport(1, "Globe", "globe", 1954.7849,1915.3772,144.7200);
	AddTeleport(0, "Quarry Jump", "qjump", 868.278,245.432,587.522);
	AddTeleport(3, "Skydive", "skydive", 3887.5874,3891.2942,2017.7869);
	AddTeleport(3, "Skydive 2", "skydive2", -1288.0760,-44.0085,4216.4507);
	AddTeleport(3, "Skydive 3", "skydive3", 2875,-3233,3268);
	AddTeleport(3, "Skydive 4", "skydive4", 118.210845,3658.245859,836.183776);
	AddTeleport(3, "Skydive 5", "skydive5", 239.3282, 3754.8267, 888.9833);
	AddTeleport(3, "Skydive 6", "skydive6", -1854.9218,-3813.2405,1160.8369);
	AddTeleport(3, "BMX Parkour", "bmx", 3362.586, -1939.724, 43.027);
	AddTeleport(3, "Quad Parkour", "qp", -2904.806, 880.312, 5.354);
	AddTeleport(3, "Quad Parkour 2", "qp2", 2121.9146,2397.7786,51.2586);
	AddTeleport(5, "Los Santos Beach", "beach", 341.8535, -1852.6327, 8.2618);
	AddTeleport(5, "Mount Chilliad", "mc", -2330.8264,-1636.1765,485.6543);
	AddTeleport(8, "Bayside", "bayside", -2227.2446,2326.8723,7.5469);
	AddTeleport(5, "San Fierro Airport", "sfa", -1196.3280, -17.4523, 15.8281);
	AddTeleport(8, "Los Santos Airport", "lsa", 2012.4763,-2448.1399,14.6396);
	AddTeleport(8, "Los Santos", "ls", 2494.7476, -1666.6097, 13.3438);
	AddTeleport(8, "Los Santos Police Department", "lspd", 1542.5554, -1674.7850, 13.5547);
	AddTeleport(8, "Las Venturas Police Department", "lvpd", 2290.5759,2421.3708, 10.8203);
	AddTeleport(8, "San Fierro Police Department", "sfpd", -1624.2128,674.2734,6.9573);
	AddTeleport(4, "Skyroad", "skyroad", 2999.2258, -1433.3010, 1244.1365);
	AddTeleport(0, "Tube", "tube", 1254.5294,-2285.2883,1084.8463);
	AddTeleport(2, "Dune Fun", "dfun",  3638.867, 1179.233, 10.214);
	AddTeleport(2, "Dune Fun 2", "dfun2", 473.3654,-1883.9589,2.4099);
	AddTeleport(4, "Skyroad 2", "skyroad2", 2912.3618,-792.8673,10.7623);
	AddTeleport(4, "Skyroad 3", "skyroad3", 205.0412,2481.6416,16.5166);
	AddTeleport(4, "Skyroad 4", "skyroad4", 587.9016,1400.4779,1228.1453);
	AddTeleport(1, "Water Jump", "wj", 341.6029,2008.7330,571.1588);
	AddTeleport(1, "Jizzy Jump", "jj", -1683.663452, 2010.888916, 1104.387393);
	AddTeleport(5, "Abandoned Airport", "aa", 386.0204, 2541.1179, 18.0953);
	AddTeleport(7, "Transfender", "trans", 1034.5165,-1039.7190,31.6651);
	AddTeleport(7, "Transfender 2", "trans2", -1932.7380,228.3443,34.1563);
	AddTeleport(7, "Transfender 3", "trans3", 2386.2788,1021.7114,10.8203);
	AddTeleport(7, "Loco Low", "lw", 2645.5457, -2004.5851,13.3828);
	AddTeleport(7, "Arch Wheel Angels", "arch", -2689.1001,217.8290,3.9509);
	AddTeleport(8, "Las Venturas Airport", "lva", 1320.6082,1268.7208,13.5903);
	AddTeleport(8, "Las Venturas", "lv", 2039.8860,1546.1112,10.4450);
	AddTeleport(7, "Custom car shop", "vs", 1850.7683,-1459.0325,13.3984, false);
	AddTeleport(2, "RectAngle", "rect", 742.8961,533.1397,461.9956);
	AddTeleport(4, "Balloon", "balloon", 295.4890,-1813.5734,52.0518);
	AddTeleport(3, "Parkour 1", "parkour", 2586.5618,-1346.5614,232.2472);
	AddTeleport(3, "Parkour 2", "parkour2", -787.3710,-2766.3005,2660.3042);
	AddTeleport(3, "Parkour 3", "parkour3", -783.9699, -3662.0358, 137.3758);
	AddTeleport(3, "Parkour 4", "parkour4", -2929.4922,-1876.4229,8.3901);
	AddTeleport(3, "Parkour 5", "parkour5", 1441.3851318359, -1700.8812255859, 915.390625);
	AddTeleport(3, "Parkour 6", "parkour6", 2768.4343261719,-2743.7131347656,2460.0815429688);
	AddTeleport(3, "Parkour 7", "parkour7", 3018.1736,-1879.4410,599.0370);
	AddTeleport(3, "Parkour 8", "parkour8", 2246,-1276,942);
	AddTeleport(4, "Krusty Krab", "kk", 2521.0232, -1504.3864, 25.5929);
	AddTeleport(3, "Los Santos Parkour", "lsp", 2505.2646,-1694.4974,17.9575);
	AddTeleport(0, "Bowl", "bowl", -576.6021,421.7149,75.2376);
	AddTeleport(8, "San Fierro", "sf", -1990.6650, 136.9297, 27.3110);
	AddTeleport(6, "Snow Market", "snow", -719.7679,1723.9852,7.0400);
	AddTeleport(0, "Sherman Dam", "sd", -793.2972,2230.8733,45.0103);
	AddTeleport(0, "Roller Coaster", "rc", 35.7414,-899.6901,1761.7263);
	AddTeleport(0, "Roller Coaster 2", "rc2", 2047.4742,-478.6809,1520.4766);
	AddTeleport(0, "Quarry", "quarry",  833.0357,851.8098,12.0047);
	AddTeleport(8, "Area 51", "a51", 307.2482,2050.7505,17.6406);
	AddTeleport(3, "Base Jump", "bj", 294.3475,-1610.8379,494.6685);
	AddTeleport(2, "Easter Egg", "ee", -2678.2119,1594.8811,217.2739);
	AddTeleport(3, "Glory", "glory", 2354.1689, -2067.3284, 22.3832);
	AddTeleport(4, "Eiffel Tower", "et", 956.2977,2441.0171,205.7626);
	AddTeleport(1, "Sky", "sky", 1544.1896,-1352.2094,329.4762);
	AddTeleport(4, "San Fierro Tower Jump", "sftj", -1753.6401,884.9623,295.8750);
	AddTeleport(4, "Plane", "plane", 1841.8307,-1398.3483,117.0471);
	AddTeleport(8, "Farm", "farm", -1206.7996,-1056.9430,128.3646);
	AddTeleport(8, "Docks", "docks", 2714.5000,-2711.2676,2.4919);
	AddTeleport(8, "Palomino Creek", "palominocreek", 2343.0247,91.6131,26.3281);
	AddTeleport(8, "Burger Shot", "bs", 1207.7231,-920.2217,43.0507);
	AddTeleport(8, "Burger Shot 2", "bs2", 810.2364,-1632.6433,13.3906);
	AddTeleport(8, "Burger Shot 3", "bs3", 2447.1104,2024.7499,10.8203);
	AddTeleport(8, "Burger Shot 4", "bs4", -2314.1365,-143.7879,35.3203);
	AddTeleport(8, "Burger Shot 5", "bs5", -1907.5175,834.4271,35.0156);
	AddTeleport(8, "Film", "film", 909.7761,-1221.2274,16.9766);
	AddTeleport(8, "Bordel", "bordel", -2682.1389,1344.4447,17.0603);
	AddTeleport(1, "Huge Jump", "hugejump", 863.2654, 2490.4468, 694.3790);
	AddTeleport(1, "Jubber Jump", "jujump", 1387.8517,-2425.5776,525.6338);
	AddTeleport(1, "Loop", "loop",  494.7604,4.7474,704.3844);
	AddTeleport(8, "Dillimore Airport", "da", 788.3009,-471.4969,20.5428);
	AddTeleport(2, "Pool", "pool", 4155.7158,2426.9578,1.2054);
	AddTeleport(8, "Restaurant", "restaurant", 370.4659, -1717.2151, 15.0337);
	AddTeleport(6, "Drag", "drag", -557.0079,-3575.5906,7.0870);
	AddTeleport(8, "San Fierro Station", "sfs", -1952.5077,137.8305,26.2813);
	AddTeleport(8, "Los Santos Station", "lss", 1706.4425,-1943.0046,13.5607);
	AddTeleport(8, "Las Venturas Station", "lvs", 1433.8182,2606.3877,10.6719);
	AddTeleport(8, "Las Venturas Station 2", "lvs2", 2859.3931,1290.5574,11.3906);
	AddTeleport(8, "Glen Park", "glen", 1892.7002, -1165.8480, 24.0390);
	AddTeleport(8, "Market Station", "ms",  800.6712,-1330.6608,13.1061);
	AddTeleport(3, "NRG", "nrg", 442.4455, 816.6687, 9.6865);
	AddTeleport(2, "Mellnik's Island", "mi", -3801.8572, 498.8828, 16.5183);
	AddTeleport(5, "Racemap", "racemap", -2904.3860, -415.5923, 4.6274);
	AddTeleport(5, "Racemap 2", "racemap2", 2741.1375,1969.4594,5269.7466);
	AddTeleport(5, "Concert", "concert", 1477.8225,-1714.1190,14.1400);

    CreateDynamic3DTextLabel(""white"["nef_green"Gold Credits"white"]", -1, 666.4440, -1866.7815, 4.9608+0.5, 300.0);
    CreateDynamic3DTextLabel(""red">>> SLOW DOWN <<<", RED, 477.7281,1399.4580,735.2565+0.5, 60.0);
    CreateDynamic3DTextLabel(""white"["lila"Mellnik's Office"white"]", -1, 1794.8202,-1311.3057,120.6237+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["yellow"Admin Liberty City"white"]", -1, 1805.7494,-1302.6721,120.2656+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Custom car shop"white"]", -1, -1407.0137,1013.8229,1049.0288+0.5, 500.0);
    CreateDynamic3DTextLabel(""white"["nef_yellow"VIP"white"]\nLounge Entrance", -1, -2624.3010,1411.4360,7.2303+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Mellnik's Ramp"white"]\n"light_yellow"/rampdown to move it down", -1, -153.74190, -2210.68457, 27.16690+0.5, 20.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Mellnik's Ramp"white"]\n"light_yellow"/rampup to move it up", -1, -153.74190, -2210.68457, 2.17288+0.5, 20.0);
    CreateDynamic3DTextLabel(""white"["yellow"Bank"white"]\nPress 'SPACE'", -1, 2311.63, -3.89, 26.74+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);

    // Create3DTextLabel("{ffffff}You must to enter in the balloon to start it!\nIf you are in it, write "vgreen"'/ballonup'", 0xF67E0FF, 836.0856, -2000.4789, 14.7462, 40.0, 0);

    #if WINTER_EDITION == true
	new veh_cow_obj[5][2];
	for(new i = 0; i < sizeof(veh_cow_obj); i++)
	{
		veh_cow_obj[i][0] = CreateObject(16442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);//Wheelchair
		veh_cow_obj[i][1] = CreateObject(1458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);//Wheelchair
	}

	new veh_cow[5];
	for(new i = 0; i < sizeof(veh_cow); i++)
	{
	    veh_cow[i] = AddStaticVehicleEx(451, g_aCowCars[i][0], g_aCowCars[i][1], g_aCowCars[i][2], g_aCowCars[i][3], 0, 0, RESPAWN_TIME);
	    
		AttachObjectToVehicle(veh_cow_obj[i][0], veh_cow[i], 0.000000, 3.250026, 2.2859988, 0.000000, 0.000000, 93.884956); //Object Model: 16442 |
		AttachObjectToVehicle(veh_cow_obj[i][1], veh_cow[i], 0.000000, -0.100000, 0.1019988, 24.119995, 0.000000, -179.895095); //Object Model: 1458 |
	}
	#endif

	//Cop Vehicles
	veh_cnr[0] = AddStaticVehicleEx(598, 2285.7664, 2430.2393, 2.9800, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[1] = AddStaticVehicleEx(598, 2282.8796, 2444.7170, 3.0999, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[2] = AddStaticVehicleEx(528, 2296.8323, 2451.4624, 3.2577, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[3] = AddStaticVehicleEx(490, 2307.7488, 2431.1436, 3.3698, 180.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[4] = AddStaticVehicleEx(427, 2298.2749, 2460.4929, 3.2459, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[5] = AddStaticVehicleEx(427, 2298.1682, 2456.1875, 3.2459, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[6] = AddStaticVehicleEx(598, 2321.2974, 2417.7664, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[7] = AddStaticVehicleEx(598, 2314.1763, 2417.7959, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[8] = AddStaticVehicleEx(598, 2307.0156, 2417.6638, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[9] = AddStaticVehicleEx(598, 2328.1362, 2417.8223, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[10] = AddStaticVehicleEx(598, 2273.5405, 2463.0112, 10.5051, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[11] = AddStaticVehicleEx(598, 2273.5466, 2456.9402, 10.5051, 180.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[12] = AddStaticVehicleEx(598, 2277.9021, 2462.9363, 10.5051, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[13] = AddStaticVehicleEx(415, 2282.2024, 2478.4297, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);
	veh_cnr[14] = AddStaticVehicleEx(415, 2277.7954, 2478.4199, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);
	veh_cnr[15] = AddStaticVehicleEx(415, 2256.1121, 2442.0830, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);

	//Robber Vehicles
	veh_cnr[16] = AddStaticVehicle(415,1265.0553,2647.0955,10.5763,358.8606,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[17] = AddStaticVehicle(415,1269.2340,2647.1277,10.5914,0.4775,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[18] = AddStaticVehicle(415,1275.2147,2646.5723,10.5369,359.2986,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[19] = AddStaticVehicle(415,1280.6333,2646.4082,10.5405,0.2698,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[20] = AddStaticVehicle(415,1286.0792,2646.0735,10.5735,359.1602,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[21] = AddStaticVehicle(415,1291.4120,2646.1455,10.5704,359.3882,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[22] = AddStaticVehicle(560,1296.2256,2645.6201,10.4884,359.6272,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[23] = AddStaticVehicle(560,1301.4585,2645.3882,10.4914,357.7477,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[24] = AddStaticVehicle(560,1306.0946,2645.3152,10.4949,0.9085,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[25] = AddStaticVehicle(560,1310.6602,2645.1082,10.4886,359.2265,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[26] = AddStaticVehicle(480,1265.0846,2695.6172,10.5405,181.0650,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[27] = AddStaticVehicle(480,1269.9628,2695.7546,10.6028,179.3284,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[28] = AddStaticVehicle(480,1274.7405,2695.2100,10.6010,178.8973,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[29] = AddStaticVehicle(480,1283.3344,2696.4670,10.6153,183.1555,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[30] = AddStaticVehicle(480,1288.0040,2696.5303,10.5937,181.8951,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[31] = AddStaticVehicle(480,1292.9833,2696.6577,10.6080,182.2153,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[32] = AddStaticVehicle(560,1297.6299,2697.0762,10.4878,180.0170,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[33] = AddStaticVehicle(480,1278.6843,2695.2646,10.5931,180.4225,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[34] = AddStaticVehicle(411,1302.2333,2697.1301,10.5474,177.6185,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[35] = AddStaticVehicle(411,1307.5626,2697.2542,10.5474,180.0817,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[36] = AddStaticVehicle(411,1312.7013,2696.8682,10.5474,179.2350,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[37] = AddStaticVehicle(411,1318.5618,2696.8582,10.5474,181.0543,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[38] = AddStaticVehicle(411,1324.0300,2697.5952,10.5474,180.6811,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[39] = AddStaticVehicle(581,1296.7982,2669.1709,10.4163,359.8661,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[40] = AddStaticVehicle(521,1298.7959,2668.9023,10.4026,1.2673,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[41] = AddStaticVehicle(461,1300.4843,2669.1316,10.4045,0.8748,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[42] = AddStaticVehicle(521,1302.2410,2668.7324,10.3917,359.3293,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[43] = AddStaticVehicle(522,1297.7581,2676.5684,10.3770,267.7968,randomColors[random(23)], randomColors[random(23)]); // rVehicle

	// Extra CNR Vehicles
	veh_cnr[44] = AddStaticVehicle(429, 2315.6377, 2490.2546, 2.9531,90.5976,0,1); // banshee
	veh_cnr[45] = AddStaticVehicle(429, 2315.6377, 2485.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[46] = AddStaticVehicle(429, 2315.6377, 2480.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[47] = AddStaticVehicle(411, 2315.6377, 2475.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[48] = AddStaticVehicle(411, 2315.6377, 2470.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[49] = AddStaticVehicle(411, 2315.6377, 2465.0505, 2.9531,90.1596,0,1); // banshee

	veh_cnr[50] = AddStaticVehicle(415,2273.0752,2408.1292,10.5143,89.6031,0,0); // cheetah
	veh_cnr[51] = AddStaticVehicle(415,2266.0752,2408.2861,10.5151,89.3953,0,0); // cheetah
	veh_cnr[52] = AddStaticVehicle(541,2259.0752,2408.2861,10.5151,89.3953,0,1); // Bullet
	veh_cnr[53] = AddStaticVehicle(541,2252.0752,2408.2861,10.5151,89.3953,0,1); // Bullet
	veh_cnr[54] = AddStaticVehicle(541,2245.0752,2408.2861,10.5151,89.3953,0,1); // Bullet

	veh_cnr[55] = AddStaticVehicle(597,2269.0212,2442.7817,10.5881,0.1288,1,1); // police car
	veh_cnr[56] = AddStaticVehicle(597,2273.5813,2442.8718,10.5879,358.9766,0,0); // police car
	veh_cnr[57] = AddStaticVehicle(597,2277.0212,2442.7817,10.5881,0.1288,1,1); // police car
	veh_cnr[58] = AddStaticVehicle(597,2281.5813,2442.8718,10.5879,358.9766,0,0); // police car
	veh_cnr[59] = AddStaticVehicle(579,2251.9163,2442.2461,10.7527,359.4724,0,0); // huntley
	veh_cnr[60] = AddStaticVehicle(579,2260.3193,2442.0244,10.7540,359.9288,0,0); // huntley
	veh_cnr[61] = AddStaticVehicle(580,2260.4109,2477.2659,10.6165,179.2883,0,0); // stafford
	veh_cnr[62] = AddStaticVehicle(523,2256.5503,2477.2349,10.3924,178.7605,130,151); // Police Bike
	veh_cnr[63] = AddStaticVehicle(523,2254.0439,2476.5071,10.3912,179.8921,130,151); // Police Bike
	veh_cnr[64] = AddStaticVehicle(523,2251.2036,2476.9832,10.3941,178.4231,130,151); // Police Bike
	veh_cnr[65] = AddStaticVehicle(522,2311.9348,2404.8508,10.3843,90.1988,0,154); // Police NRG
	veh_cnr[66] = AddStaticVehicle(522,2307.3904,2404.8455,10.3948,90.1990,0,154); // Police NRG
	veh_cnr[67] = AddStaticVehicle(522,2301.8076,2404.8271,10.3920,90.1989,0,154); // Police NRG
	veh_cnr[68] = AddStaticVehicle(522,2308.5410,2424.6011,10.3888,179.2661,0,1); // Police NRG
	veh_cnr[69] = AddStaticVehicle(490,2303.2266,2430.8889,3.4019,1.0985,0,0); // fbi rancher
	veh_cnr[70] = AddStaticVehicle(490,2298.8901,2430.9990,3.4020,0.3266,0,0); // fbi rancher
	veh_cnr[71] = AddStaticVehicle(497,2305.5271,2384.1899,10.9974,1.0422,1,0); // Police Heli
	veh_cnr[72] = AddStaticVehicle(497,2332.3037,2389.5691,10.9974,357.4843,1,0); // Police Heli
	veh_cnr[73] = AddStaticVehicle(500,2273.3101,2425.0483,10.9230,180.0461,0,0); // Police Mesa
	veh_cnr[74] = AddStaticVehicle(579,1263.8951,2686.1047,10.7459,270.2721,randomColors[random(23)], randomColors[random(23)]); // Robber Huntley
	veh_cnr[75] = AddStaticVehicle(579,1264.3302,2681.0591,10.7514,268.8174,randomColors[random(23)], randomColors[random(23)]); // Robber Huntley
	veh_cnr[76] = AddStaticVehicle(487,1366.3276,2651.1182,10.9969,1.3734,0,6); // Robber Heli
	veh_cnr[77] = AddStaticVehicle(522,2315.1082,2461.6951,2.8463,90.7273,0,154); // Police NRG
	veh_cnr[78] = AddStaticVehicle(522,2315.1082,2459.3013,2.8463,90.7273,0,154); // Police NRG
	veh_cnr[79] = AddStaticVehicle(522,2315.1082,2466.6951,2.8463,90.7273,0,154); // Police NRG

	// CNR LVAir Vehicles.
	veh_cnr[80] = AddStaticVehicleEx(411,1306.25061035,1278.93981934,10.62031269,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[81] = AddStaticVehicleEx(411,1309.57360840,1279.07617188,10.56885719,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[82] = AddStaticVehicleEx(411,1312.77416992,1279.08898926,10.56885719,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[83] = AddStaticVehicleEx(522,1329.80957031,1279.55419922,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[84] = AddStaticVehicleEx(522,1328.10888672,1279.55383301,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[85] = AddStaticVehicleEx(522,1326.20581055,1279.62536621,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[86] = AddStaticVehicleEx(522,1324.45275879,1279.59948730,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[87] = AddStaticVehicleEx(429,1282.96484375,1290.23681641,10.57031250,270.99975586,-1,-1,RESPAWN_TIME); //Banshee
	veh_cnr[88] = AddStaticVehicleEx(451,1283.08300781,1293.23046875,10.68155670,271.99951172,-1,-1,RESPAWN_TIME); //Turismo
	veh_cnr[89] = AddStaticVehicleEx(477,1271.44482422,1290.71228027,10.67031288,270.0,-1,-1,RESPAWN_TIME); //ZR-350
	veh_cnr[90] = AddStaticVehicleEx(506,1283.20556641,1300.58459473,10.65430450,270.0,-1,-1,RESPAWN_TIME); //Super GT
	veh_cnr[91] = AddStaticVehicleEx(541,1283.12548828,1303.69567871,10.54988289,271.74682617,-1,-1,RESPAWN_TIME); //Bullet
	veh_cnr[92] = AddStaticVehicleEx(402,1271.57556152,1294.70288086,10.75295925,272.0,-1,-1,RESPAWN_TIME); //Buffalo
	veh_cnr[93] = AddStaticVehicleEx(559,1271.28588867,1300.21789551,10.56702328,270.0,-1,-1,RESPAWN_TIME); //Jester
	veh_cnr[94] = AddStaticVehicleEx(560,1271.01367188,1304.30175781,10.62528801,271.25000000,-1,-1,RESPAWN_TIME); //Sultan
	veh_cnr[95] = AddStaticVehicleEx(562,1271.05859375,1308.47912598,10.57386208,270.0,-1,-1,RESPAWN_TIME); //Elegy
	veh_cnr[96] = AddStaticVehicleEx(480,1282.87402344,1306.90576172,10.67031288,270.49987793,-1,-1,RESPAWN_TIME); //Comet
	veh_cnr[97] = AddStaticVehicle(487,1296.6503,1255.1896,19.5204,359.1064,0,1); // Cop Heli
	veh_cnr[98] = AddStaticVehicle(487,1358.5673,1271.2000,10.9968,357.7185,149,0); // Cop Heli2
	veh_cnr[99] = AddStaticVehicle(476,1280.4342,1322.4233,11.5314,269.4824,149,0); // Ruster 1
	veh_cnr[100] = AddStaticVehicle(476,1280.1094,1359.2792,11.5311,271.8246,0,0); // ruster 2

	for(new iit = 0; iit < sizeof(veh_cnr); iit++)
	{
		SetVehicleVirtualWorld(veh_cnr[iit], CNR_WORLD);
	}
	
	#if WINTER_EDITION == true
	/*// /sfa
	CreateDynamicObject(18864, -1194.72559, -0.87202, -11.20715,   0.78000, -2.34000, 0.00000);
	CreateDynamicObject(18864, -1220.71948, -13.26828, -11.20715,   -6.48000, 0.30000, -19.38000);
	CreateDynamicObject(18864, -1280.35095, -34.72476, -11.20715,   3.60000, 0.12000, -31.50000);
	CreateDynamicObject(18864, -1141.50659, 10.96347, -11.20715,   0.00000, 0.00000, -10.38000);
	
	// /aa
	CreateDynamicObject(18864, 367.69247, 2541.04590, 11.47494,   21.24000, -13.86000, -16.26000);
	CreateDynamicObject(18864, 349.47034, 2557.65430, 11.47494,   17.16000, -14.16001, -42.72001);
	CreateDynamicObject(18864, 276.03021, 2530.35815, 11.47494,   8.28000, -5.52000, -36.30000);
	CreateDynamicObject(18864, 384.88461, 2495.96265, 11.47494,   2.28000, 3.84000, -16.26000);

	// /beach
	CreateDynamicObject(18864, 348.17380, -1821.61865, -7.70428,   0.00000, 0.00000, 77.34000);
	CreateDynamicObject(18864, 340.14447, -1918.99731, -7.70428,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18864, 339.97049, -1911.74902, -7.70428,   0.00000, 0.00000, -43.92000);
	CreateDynamicObject(18864, 294.34283, -1795.64587, -7.70428,   7.32000, -12.60000, 34.08001);*/

	// /xmas
	CreateDynamicObject(18864, 1074.81909, -1787.72852, 5.67135,   38.64000, -12.24000, 0.00000);
	CreateDynamicObject(18864, 1016.54395, -1877.87366, 6.09436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18864, 1075.43176, -1786.99316, 5.67135,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18864, 1016.54395, -1877.87366, 5.51193,   49.86001, 19.44000, 0.00000);
	
	// /sfa xmas tree + gifts
	CreateDynamicObject(19076, -1229.98816, 15.61859, 13.00140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19058, -1227.87573, 15.38023, 13.62287,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19056, -1230.08716, 13.93682, 13.67405,   0.00000, 0.00000, -29.82000);
	CreateDynamicObject(19055, -1228.39331, 13.85308, 13.74400,   0.00000, 0.00000, -50.40001);
	
	// /aa xmas tree + gifts
	CreateDynamicObject(19076, 398.50684, 2507.79150, 15.53978,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19058, 398.99847, 2508.93213, 16.00566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19057, 400.05566, 2506.91431, 15.98826,   0.00000, 0.00000, -71.75999);
	CreateDynamicObject(19055, 397.18692, 2507.30273, 15.78823,   0.00000, 0.00000, -28.80000);
	CreateDynamicObject(19054, 396.50635, 2509.77783, 15.83313,   0.00000, 0.00000, -56.75998);
	CreateDynamicObject(19056, 397.88464, 2505.68677, 15.81423,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3891, 406.17706, 2475.50293, 14.98146,   7.08000, -2.76000, -4.26001);
	CreateDynamicObject(3891, 382.23135, 2537.15796, 15.11454,   7.08000, -2.76000, -168.36002);
	CreateDynamicObject(3891, 431.83859, 2495.83105, 15.11454,   7.02000, -4.02000, -308.09958);
	CreateDynamicObject(19054, 396.12781, 2508.60010, 15.83313,   0.00000, 0.00000, -81.05999);
	
	AddStaticVehicleEx(539, 1104.3873,-1758.3083,13.6477,105.2126, randomColors[random(23)], randomColors[random(23)], 30);
	AddStaticVehicleEx(539, 1104.8311,-1764.4894,13.6477,95.1859, randomColors[random(23)], randomColors[random(23)], 30);
	AddStaticVehicleEx(539, 1104.7172,-1772.7986,13.6497,77.3257, randomColors[random(23)], randomColors[random(23)], 30);
	AddStaticVehicleEx(539, 1092.0996,-1772.5856,13.6578,290.9977, randomColors[random(23)], randomColors[random(23)], 30);
	AddStaticVehicleEx(539, 1092.1677,-1766.5497,13.6578,286.9243, randomColors[random(23)], randomColors[random(23)], 30);
	#endif

	#if WINTER_EDITION == true
	CreateDynamicObject(6337, 1088.79382, -1766.49841, 4.57421,   0.00000, 0.00000, 450.00000);
	CreateDynamicObject(6337, 1088.77832, -1777.13379, 4.58603,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1108.05957, -1769.01953, 13.04965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1094.66833, -1753.80701, 13.04603,   0.00000, 0.00000, 540.00000);
	CreateDynamicObject(6337, 1096.69055, -1766.48682, 4.57584,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6337, 1096.69153, -1777.14539, 4.57784,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3115, 1098.60022, -1763.61316, 17.45557,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1108.07031, -1758.72192, 13.04965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1103.18359, -1753.81238, 13.04603,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1108.05933, -1772.06702, 13.04965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1103.13257, -1776.95813, 13.04965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1094.22192, -1776.95300, 13.04284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1089.33203, -1772.02673, 13.04784,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 1089.33594, -1767.06226, 13.04603,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3440, 1090.17017, -1776.11035, 14.95784,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3440, 1107.20435, -1776.09680, 14.94965,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3440, 1107.09363, -1754.69165, 14.94765,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3440, 1090.31152, -1754.63525, 14.94602,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3115, 1098.61108, -1766.62341, 17.45784,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 1006.68097, -1857.51599, 12.45465,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8980, 1031.15320, -1850.89648, 10.25854,   0.00000, 179.00000, 0.00000);
	CreateDynamicObject(8980, 1031.16089, -1852.23059, 10.26747,   0.00000, 179.00000, 0.00000);
	CreateDynamicObject(6299, 1071.16797, -1782.74341, 14.35001,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(6462, 1065.22302, -1771.68323, 14.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1341, 1075.28882, -1762.33093, 13.29552,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1342, 1075.13647, -1757.69153, 13.38488,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1340, 1075.04761, -1760.15173, 13.49827,   0.00000, 0.00000, 540.00000);
	CreateDynamicObject(8947, 1053.48535, -1791.86707, 2.19075,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(18275, 1052.21545, -1798.72290, 16.68115,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3819, 1062.79016, -1786.71790, 13.68114,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3819, 1062.83643, -1796.95825, 13.68115,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(14434, 1059.31860, -1798.06970, 18.87878,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8947, 1051.59216, -1791.87537, 2.18615,   90.00000, 450.00000, 360.00000);
	CreateDynamicObject(18275, 1049.23535, -1795.72131, 16.67115,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18275, 1052.14868, -1785.02673, 16.68115,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18275, 1049.18567, -1788.61230, 16.68115,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8947, 1051.59583, -1791.85474, 2.17811,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(8947, 1053.48560, -1791.85242, 2.18837,   90.00000, -180.00000, 90.00000);
	CreateDynamicObject(8880, 1052.82727, -1795.10583, 16.78115,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(8879, 1049.16846, -1798.70044, 15.98114,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(8879, 1049.14478, -1785.13953, 16.18115,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(8880, 1052.88123, -1788.90027, 16.98115,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(2232, 1057.08862, -1798.57861, 13.28115,   0.00000, 0.00000, 105.00000);
	CreateDynamicObject(2232, 1057.05505, -1784.95056, 13.29410,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1594, 1067.44299, -1806.31482, 13.19003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1071.95837, -1810.34839, 13.19678,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1594, 1072.29346, -1806.54004, 13.19666,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(1594, 1067.98560, -1814.69849, 13.20545,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1594, 1061.83105, -1809.67981, 13.20375,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1594, 1066.88684, -1810.54272, 13.20665,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(1594, 1061.32593, -1814.59607, 13.24226,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(1594, 1055.48706, -1808.34924, 13.23712,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(1594, 1058.97729, -1804.45386, 13.19231,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1063.16663, -1805.50830, 13.19555,   0.00000, 0.00000, 654698.00000);
	CreateDynamicObject(1594, 1068.51782, -1800.76892, 13.18514,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1064.69702, -1817.10498, 13.19164,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1064.38672, -1812.85571, 13.21515,   0.00000, 0.00000, 3209.00000);
	CreateDynamicObject(8980, 1004.73840, -1880.42468, 9.64791,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1369, 1103.37000, -1742.04797, 13.13104,   0.00000, 360.00000, 189.00000);
	CreateDynamicObject(8980, 1003.61688, -1880.42236, 9.64531,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2951, 1006.93103, -1857.91663, 10.94205,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(8947, 1101.46436, -1743.31396, 15.40362,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8324, 1098.50916, -1747.93213, 12.21911,   1350.90002, 1530.00000, 810.00000);
	CreateDynamicObject(8324, 1098.50562, -1742.20129, 12.21689,   630.90002, 90.00000, 90.00000);
	CreateDynamicObject(8324, 1098.49219, -1739.61475, 12.22675,   271.00000, 90.00000, 90.00000);
	CreateDynamicObject(8324, 1105.19824, -1738.11023, 12.21436,   -89.50000, 90.00000, 270.00000);
	CreateDynamicObject(8324, 1104.95459, -1744.69043, 12.20454,   -90.00000, 90.00000, 90.00000);
	CreateDynamicObject(8324, 1105.22925, -1748.19055, 12.19844,   -90.00000, 90.00000, 90.00000);
	CreateDynamicObject(8947, 1101.45911, -1743.27563, 9.53324,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(6865, 1108.53955, -1739.88379, 12.71840,   -30.00000, 35.00000, 345.00000);
	CreateDynamicObject(3528, 1087.63074, -1743.02002, 18.74534,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3524, 1105.99390, -1743.72473, 16.65305,   0.00000, 180.00000, -169.00000);
	CreateDynamicObject(1347, 1102.37769, -1742.17371, 13.19693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 1097.08264, -1740.83142, 13.26480,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(851, 1091.43030, -1738.01074, 12.95473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1101.65112, -1737.61353, 12.93635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3374, 1101.76245, -1744.80579, 14.08679,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(3471, 1088.15344, -1747.60217, 13.63264,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3471, 1088.11096, -1738.96191, 13.80486,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1008.19824, -1848.99890, 12.44762,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2589, 1091.56567, -1748.88660, 18.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2589, 1092.36035, -1749.38000, 18.38679,   0.00000, 0.00000, 3045.00000);
	CreateDynamicObject(18568, 1090.33350, -1743.63110, 15.46340,   360.00000, 450.00000, 270.00000);
	CreateDynamicObject(18568, 1090.34143, -1743.68445, 16.58679,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(18568, 1092.94287, -1743.54822, 15.48679,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(18568, 1093.02490, -1743.49426, 16.58679,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(18568, 1092.21094, -1742.74414, 15.58679,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18568, 1092.19019, -1742.67651, 16.88679,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3415, 1100.39551, -1744.82373, 12.58679,   0.00000, 0.00000, 720.00000);
	CreateDynamicObject(1441, 1103.90259, -1736.87256, 13.28679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 1093.94189, -1742.99963, -9.00836,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 1100.59424, -1742.38074, 12.87123,   0.00000, 35.00000, 30.00000);
	CreateDynamicObject(337, 1092.79431, -1736.55078, 13.49124,   0.00000, 170.00000, -90.00000);
	CreateDynamicObject(1211, 1095.35083, -1737.12170, 12.83679,   440.00000, 110.00000, 190.00000);
	CreateDynamicObject(2905, 1103.43201, -1741.28748, 12.98678,   -40.00000, 90.00000, 0.00000);
	CreateDynamicObject(2407, 1098.01978, -1737.09143, 12.88679,   -20.00000, 80.00000, 20.00000);
	CreateDynamicObject(1415, 1098.21814, -1736.88843, 12.58679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2907, 1103.30774, -1742.17725, 13.58679,   290.00000, 0.00000, 5.00000);
	CreateDynamicObject(3524, 1112.39587, -1743.31250, 13.08679,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(2905, 1102.86133, -1741.29077, 12.93679,   680.00000, 90.00000, 30.00000);
	CreateDynamicObject(2906, 1102.95605, -1742.21021, 13.83679,   540.00000, 0.00000, 250.00000);
	CreateDynamicObject(2906, 1103.63049, -1742.23779, 13.58679,   600.00000, 90.00000, 90.00000);
	CreateDynamicObject(2905, 1103.30688, -1741.90796, 13.32679,   380.00000, 180.00000, 160.00000);
	CreateDynamicObject(2905, 1103.20203, -1741.80591, 13.18679,   10.00000, 0.00000, 210.00000);
	CreateDynamicObject(3092, 1095.71826, -1740.79395, 13.08679,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(924, 1112.39233, -1749.16321, 12.88679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(924, 1112.90295, -1748.33057, 12.88679,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(924, 1112.24609, -1748.37268, 12.88679,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(924, 1111.76086, -1748.95264, 12.88679,   0.00000, 0.00000, -67.00000);
	CreateDynamicObject(924, 1111.58923, -1748.04639, 12.88679,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(924, 1112.66858, -1748.76855, 12.98679,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1112.25500, -1748.63708, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1112.21619, -1749.02869, 12.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 1112.53381, -1748.67065, 13.08679,   0.00000, 180.00000, 100.00000);
	CreateDynamicObject(3092, 1112.41138, -1748.64355, 13.98679,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3092, 1101.62244, -1745.98962, 14.58679,   90.00000, 0.00000, 120.00000);
	CreateDynamicObject(3092, 1100.75610, -1745.91663, 14.08679,   90.00000, 0.00000, 30.00000);
	CreateDynamicObject(3092, 1102.77026, -1745.64526, 14.08679,   90.00000, 0.00000, -40.00000);
	CreateDynamicObject(3092, 1101.00159, -1745.96606, 13.38679,   50.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 1107.36426, -1742.32019, 16.68679,   0.00000, 180.00000, -125.00000);
	CreateDynamicObject(3524, 1109.56348, -1743.31396, 13.08679,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(3524, 1107.71704, -1744.40955, 13.08679,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(9824, 1081.26294, -1812.56470, 15.22653,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3524, 1110.72083, -1745.77661, 13.08679,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(3524, 1107.76355, -1747.09485, 13.08679,   0.00000, 0.00000, 167.00000);
	CreateDynamicObject(3524, 1107.46252, -1749.49268, 13.08679,   0.00000, 0.00000, -150.00000);
	CreateDynamicObject(3461, 1090.24097, -1746.57507, 13.44604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1090.71436, -1744.16418, 13.45544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1097.03845, -1746.95874, 14.08679,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(3461, 1093.89124, -1743.99756, 13.38679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1093.87439, -1746.50293, 13.28679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2589, 1092.72083, -1748.93359, 18.18679,   0.00000, 0.00000, 161856.00000);
	CreateDynamicObject(3578, 1011.56482, -1852.62964, 12.45308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16088, 1047.81995, -1791.83667, 13.48689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1074.81091, -1815.93237, 13.17007,   0.00000, 0.00000, 304.00000);
	CreateDynamicObject(1594, 1070.71936, -1818.38831, 13.18622,   0.00000, 0.00000, 3046.00000);
	CreateDynamicObject(1594, 1066.11267, -1820.67908, 13.18725,   0.00000, 0.00000, 30469.00000);
	CreateDynamicObject(10281, 1088.41626, -1765.08557, 17.56060,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2908, 1102.53809, -1742.07715, 12.73679,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(8947, 1101.46912, -1743.31287, 16.56772,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1213, 1106.08447, -1740.45569, 11.48643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1213, 1111.40601, -1748.12231, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1213, 1103.32727, -1748.78381, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1213, 1093.68127, -1748.17859, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1213, 1091.06909, -1736.87646, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1213, 1109.78943, -1745.57422, 11.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3009, 1097.80688, -1737.15564, 12.38679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16337, 1090.30566, -1758.22168, 12.86637,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3578, 1089.34705, -1764.74768, 13.04852,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16337, 1088.49487, -1743.51160, 12.95661,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(18568, 1094.81689, -1742.77917, 15.58679,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18568, 1094.83411, -1742.71960, 16.78679,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16770, 1085.12598, -1798.61035, 14.23408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3378, 1090.55115, -1800.24316, 11.46545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3568, 1095.05713, -1797.49658, 12.84502,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8948, 1092.11414, -1792.35620, 15.29747,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8948, 1092.12561, -1799.59045, 15.29875,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8948, 1092.12537, -1805.69543, 15.30634,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8948, 1094.94543, -1792.36536, 15.30189,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8948, 1094.94788, -1799.37891, 15.30157,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8948, 1094.94800, -1805.69360, 15.31626,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(3578, 1011.58112, -1849.00537, 12.44743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 1094.40063, -1788.70251, 13.34749,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3260, 1095.70996, -1788.70923, 13.34846,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1567, 1093.34119, -1802.14587, 12.64634,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2679, 1092.64758, -1790.44946, 13.55146,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(2679, 1092.64856, -1792.88391, 13.55134,   -270.00000, 0.00000, 180.00000);
	CreateDynamicObject(2679, 1092.65210, -1795.32434, 13.55134,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(2679, 1092.65234, -1797.76147, 13.55134,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(2679, 1092.65186, -1800.19763, 13.55134,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(13007, 1071.86816, -1736.50537, 10.41511,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13644, 1075.04028, -1743.99353, 10.15308,   360.00000, 630.00000, 270.00000);
	CreateDynamicObject(13644, 1078.76099, -1743.98865, 11.00737,   270.00000, 270.00000, 270.00000);
	CreateDynamicObject(13644, 1075.89124, -1743.99280, 10.14937,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(13644, 1080.72388, -1741.80054, 10.14237,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(13644, 1080.72437, -1738.67114, 11.00737,   270.00000, 270.00000, 0.00000);
	CreateDynamicObject(13644, 1078.84424, -1736.18555, 10.14737,   360.00000, 270.00000, 90.00000);
	CreateDynamicObject(13644, 1075.69763, -1736.18542, 11.00737,   270.00000, 90.00000, -90.00000);
	CreateDynamicObject(13644, 1072.26306, -1736.18555, 11.00737,   270.00000, -90.00000, 90.00000);
	CreateDynamicObject(13644, 1068.83020, -1736.18616, 11.00537,   270.00000, 90.00000, -90.00000);
	CreateDynamicObject(13644, 1065.40784, -1736.18652, 11.00337,   270.00000, 90.00000, -90.00000);
	CreateDynamicObject(13644, 1062.90088, -1738.36548, 10.14237,   180.00000, 90.00000, 0.00000);
	CreateDynamicObject(13644, 1062.90063, -1741.27625, 11.00337,   270.00000, 90.00000, 0.00000);
	CreateDynamicObject(13644, 1064.94897, -1743.96729, 10.14037,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(13644, 1067.52795, -1743.96606, 11.00737,   270.00000, 90.00000, 90.00000);
	CreateDynamicObject(3055, 1077.50208, -1744.21680, 12.44003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2592, 1064.12292, -1741.11206, 13.47737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1081.34692, -1740.42151, 12.44109,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1081.34143, -1739.80359, 12.43853,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1077.49463, -1735.86914, 12.44132,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1069.66626, -1735.87842, 12.43717,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1065.33569, -1735.87134, 12.44781,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1061.44385, -1739.81042, 12.44983,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1061.43982, -1740.39270, 12.44396,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1065.32568, -1744.18665, 12.45373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1073.87793, -1740.81042, 13.38737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16637, 1079.52979, -1740.40955, 15.33734,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1079.52942, -1737.38062, 15.33160,   0.00000, -270.00000, 90.00000);
	CreateDynamicObject(16637, 1079.52795, -1742.81128, 15.33661,   0.00000, -270.00000, 90.00000);
	CreateDynamicObject(16637, 1075.71606, -1737.38464, 15.33582,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1075.71606, -1740.40845, 15.33502,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1075.72400, -1742.81775, 15.33325,   0.00000, -270.00000, 90.00000);
	CreateDynamicObject(16637, 1071.90295, -1737.38611, 15.32922,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1071.91211, -1740.40698, 15.33344,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1071.91162, -1742.81982, 15.33264,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1068.10803, -1737.37976, 15.33344,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1068.10730, -1740.40320, 15.33368,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1068.10486, -1742.82068, 15.33288,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1064.30261, -1737.37793, 15.32763,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1064.29993, -1740.39734, 15.32788,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1064.30273, -1742.82520, 15.33209,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1063.33142, -1742.82886, 15.33630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1063.33337, -1740.36255, 15.32507,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16637, 1063.34277, -1737.38794, 15.32709,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1836, 1073.61401, -1737.40955, 13.33737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2784, 1071.50403, -1737.24683, 13.83737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1837, 1069.44312, -1737.39355, 13.32736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2584, 1071.52905, -1736.80652, 13.62737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2584, 1071.52808, -1737.33533, 13.62737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2710, 1071.34558, -1737.45166, 13.73736,   0.00000, 0.00000, 25.00000);
	CreateDynamicObject(2710, 1071.69568, -1737.45483, 13.73736,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(330, 1071.44080, -1737.49854, 13.36736,   90.00000, 0.00000, 200.00000);
	CreateDynamicObject(2967, 1071.70459, -1737.51697, 13.37236,   0.00000, 0.00000, -14.00000);
	CreateDynamicObject(322, 1071.23181, -1737.42358, 14.08737,   0.00000, 5.00000, 0.00000);
	CreateDynamicObject(324, 1071.66382, -1737.65942, 14.07736,   0.00000, 5.00000, -330.00000);
	CreateDynamicObject(2592, 1079.48181, -1741.00867, 13.48736,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1837, 1079.52380, -1741.01453, 13.38737,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1836, 1064.13635, -1741.09326, 13.38737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 1078.38477, -1738.99255, 14.07837,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(2509, 1078.82837, -1737.38000, 13.13737,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1078.41187, -1737.37878, 13.13437,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1077.93799, -1736.91846, 13.13136,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1077.63977, -1737.08679, 12.83737,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1077.64148, -1737.56506, 12.19436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1077.47253, -1737.35730, 12.19736,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2509, 1077.92065, -1738.01489, 12.19437,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2509, 1078.39258, -1738.02344, 12.49537,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2509, 1079.29382, -1738.02478, 12.49037,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2509, 1076.96631, -1737.37024, 13.48737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1076.97266, -1737.36890, 14.06937,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1076.93079, -1737.36511, 14.06736,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2509, 1076.92908, -1737.36365, 12.18737,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2509, 1079.74390, -1737.35449, 14.07036,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2509, 1079.07166, -1737.16284, 14.07736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1077.76770, -1737.16113, 14.07736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1077.63721, -1737.15466, 14.07736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1077.88989, -1737.33508, 14.97737,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1079.75842, -1737.34131, 14.97437,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1077.86951, -1737.34338, 15.00737,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, 1079.06616, -1737.33801, 15.00737,   -90.00000, 0.00000, 270.00000);
	CreateDynamicObject(2486, 1077.75281, -1737.72961, 13.19737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2486, 1078.41260, -1737.72241, 13.18737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2474, 1077.61084, -1736.86414, 13.13737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2473, 1078.61108, -1737.16614, 13.18179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2590, 1077.36401, -1737.71753, 15.48736,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(2590, 1077.33533, -1737.72913, 15.48736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2590, 1077.34778, -1737.69995, 15.48737,   0.00000, 0.00000, 1680.00000);
	CreateDynamicObject(2040, 1077.34253, -1737.61719, 15.15737,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2475, 1079.69568, -1737.00928, 12.23737,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2464, 1079.75610, -1737.27893, 13.88737,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2503, 1079.52234, -1737.32190, 14.62737,   360.00000, 90.00000, -90.00000);
	CreateDynamicObject(8402, 1090.93555, -1738.24561, -26.21263,   45.00000, 90.00000, 270.00000);
	CreateDynamicObject(2886, 1077.60510, -1737.95215, 13.04737,   -89.80000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1069.60913, -1740.80249, 13.38737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1073.87524, -1740.12170, 13.38237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2785, 1069.60583, -1740.10034, 13.38437,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2681, 1064.28870, -1737.71887, 12.58737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2872, 1065.31311, -1737.71460, 12.58737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2779, 1066.31860, -1737.71802, 12.58737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2456, 1082.69287, -1803.32568, 12.65025,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(7666, 1069.25354, -1744.34241, 15.30015,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(2774, 1080.31982, -1837.99011, 25.05600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16644, 1080.74329, -1836.67175, 22.46063,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(16644, 1079.08459, -1837.57263, 22.47414,   0.00000, 450.00000, 720.00000);
	CreateDynamicObject(16644, 1080.71838, -1839.23340, 20.10227,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(16644, 1081.66370, -1838.25891, 22.47605,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(16096, 1079.99890, -1837.91833, 10.94687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3430, 1075.13342, -1835.50537, 14.19900,   0.00000, 0.00000, 2.70000);
	CreateDynamicObject(2774, 1080.31873, -1837.95776, 51.14038,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(16644, 1079.08655, -1837.52014, 39.94362,   360.00000, 90.00000, 0.00000);
	CreateDynamicObject(16644, 1080.78918, -1836.66199, 39.90361,   360.00000, 90.00000, -90.00000);
	CreateDynamicObject(16644, 1079.92859, -1839.23633, 39.94361,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16644, 1081.66724, -1838.26013, 39.95361,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(16644, 1080.84521, -1836.66028, 57.33323,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(16644, 1079.87415, -1839.23120, 57.33323,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16644, 1079.08752, -1837.46411, 57.33323,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16644, 1081.65662, -1838.31396, 57.33323,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(2952, 1081.76624, -1836.53491, 64.85094,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(2952, 1081.76282, -1837.16943, 64.84557,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(970, 1074.60999, -1839.75012, 13.06600,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(970, 1077.73047, -1841.56152, 13.04976,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1081.83496, -1841.56091, 13.05473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1083.92664, -1836.06726, 13.05758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1083.92651, -1839.46729, 13.05758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1081.84082, -1834.00562, 13.11598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1077.70667, -1834.00525, 13.12265,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1494, 1073.64539, -1837.97241, 11.08749,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1666, 1093.01160, -1789.65979, 13.65696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1093.01184, -1789.75977, 13.65696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1093.01160, -1789.70972, 13.82696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1093.01160, -1789.55981, 13.65696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1093.01160, -1789.60986, 13.82696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1093.01160, -1789.65979, 13.98696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96448, -1791.34998, 13.66018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96460, -1791.25000, 13.66018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96448, -1791.44995, 13.66018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96448, -1791.40002, 13.83018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96448, -1791.29993, 13.83018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.96448, -1791.34998, 13.99018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94580, -1792.63354, 13.64908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94556, -1792.73352, 13.64908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94580, -1792.83350, 13.64908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94580, -1792.78357, 13.81908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94580, -1792.68347, 13.81908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94580, -1792.73352, 13.98908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91284, -1794.13452, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91284, -1794.23450, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91284, -1794.33447, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91284, -1794.18445, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91284, -1794.28455, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.91663, -1794.24048, 13.98134,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.62354, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.72351, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.82349, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.77344, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.67346, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95654, -1795.72351, 13.98634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.02502, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.12500, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.22498, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.07495, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.17505, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.94775, -1797.12500, 13.98634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1798.90222, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1798.90222, 13.98634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1798.80225, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1799.00220, 13.64634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1798.85217, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 1092.95007, -1798.95227, 13.81634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1058.82288, -1809.28943, 12.71672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1071.39087, -1803.58704, 12.69117,   0.00000, 0.00000, 480.00000);
	CreateDynamicObject(3472, 1073.59216, -1818.84814, 12.66451,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(3472, 1063.52466, -1823.31641, 12.68976,   0.00000, 0.00000, 600.00000);
	CreateDynamicObject(3472, 1091.76062, -1782.93628, 12.64209,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1076.15076, -1785.22498, 12.64720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1075.66687, -1756.02637, 12.38968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1060.28870, -1776.46155, 12.35613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1085.26404, -1734.17737, 12.38564,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1383, 1005.02972, -1962.71472, 11.81122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16395, 1005.45477, -1862.83398, 13.67459,   0.00000, 5.00000, 91.00000);
	CreateDynamicObject(1383, 1004.77136, -1914.30042, -6.01799,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1006.66492, -1866.16235, 12.45697,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1003.31219, -1866.26526, 12.44777,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16395, 1003.83118, -1862.84937, 13.67242,   0.00000, 5.00000, 91.00000);
	CreateDynamicObject(3578, 1006.65326, -1874.72827, 14.14692,   0.00000, 19.50000, 90.00000);
	CreateDynamicObject(3578, 1003.29877, -1874.59546, 14.11131,   0.00000, 19.50000, 90.00000);
	CreateDynamicObject(3578, 1006.63849, -1884.42285, 17.57938,   0.00000, 19.50000, 90.00000);
	CreateDynamicObject(3578, 1003.28021, -1884.30151, 17.52053,   0.00000, 19.20000, 90.00000);
	CreateDynamicObject(3578, 1003.26721, -1894.04126, 20.84970,   0.00000, 18.50000, 90.00000);
	CreateDynamicObject(3578, 1006.64172, -1894.14819, 20.90951,   0.00000, 18.30000, 90.00000);
	CreateDynamicObject(3578, 1006.62299, -1903.92285, 24.15619,   0.00000, 18.50000, 90.00000);
	CreateDynamicObject(3578, 1003.26605, -1903.79810, 24.11308,   0.00000, 18.50000, 90.00000);
	CreateDynamicObject(3578, 1006.60980, -1913.67847, 27.45069,   0.00000, 18.80000, 90.00000);
	CreateDynamicObject(3578, 1003.26685, -1913.53821, 27.32394,   0.00000, 18.00000, 90.00000);
	CreateDynamicObject(3578, 1003.25311, -1923.29565, 30.58510,   0.00000, 19.00000, 90.00000);
	CreateDynamicObject(3578, 1006.59705, -1923.37146, 30.77001,   0.00000, 19.00000, 90.00000);
	CreateDynamicObject(3578, 1006.58362, -1933.08313, 34.18187,   0.00000, 19.70000, 90.00000);
	CreateDynamicObject(3578, 1003.24188, -1932.99182, 34.02279,   0.00000, 20.00000, 90.00000);
	CreateDynamicObject(3578, 1006.57593, -1942.76526, 37.67575,   0.00000, 20.00000, 90.00000);
	CreateDynamicObject(3578, 1003.22876, -1942.65076, 37.59007,   0.00000, 20.50000, 90.00000);
	CreateDynamicObject(3578, 1003.21179, -1952.23755, 41.28096,   0.00000, 21.60000, 90.00000);
	CreateDynamicObject(3578, 1006.56427, -1952.38440, 41.31760,   0.00000, 21.50000, 90.00000);
	CreateDynamicObject(3578, 1006.55511, -1961.90637, 45.20713,   0.00000, 23.00000, 90.00000);
	CreateDynamicObject(3578, 1003.20526, -1961.72791, 45.17839,   0.00000, 23.00000, 90.00000);
	CreateDynamicObject(3578, 1003.31854, -1853.90002, 12.44531,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1391, 1008.25861, -1968.74426, 39.84436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1391, 1001.48322, -1968.75195, 39.83865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16096, 1010.34479, -1975.50391, 9.44595,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16096, 1005.44476, -1975.50281, 9.44563,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1002.17017, -1975.20898, 12.06798,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1007.64362, -1975.23376, 12.07532,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1007.33459, -1982.26160, 12.08532,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1002.16821, -1977.38025, 12.07532,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16096, 1000.21277, -1975.16492, 9.44798,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16096, 1000.21173, -1980.08923, 9.44532,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16096, 1004.98846, -1980.08630, 9.44532,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16096, 1010.00586, -1980.08655, 9.44601,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16337, 1009.66290, -1977.56641, 11.82570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16076, 1007.09705, -1981.15466, 2.87502,   0.00000, 180.00000, 360.00000);
	CreateDynamicObject(16076, 999.47577, -1974.32532, 2.99885,   0.00000, 180.00000, -90.00000);
	CreateDynamicObject(2343, 1078.56641, -1837.65540, 13.46871,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2343, 1078.56836, -1838.27441, 13.46686,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2343, 1080.67114, -1839.72693, 13.47656,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2343, 1080.04175, -1839.75574, 13.47656,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2343, 1082.16187, -1838.17700, 13.47656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2343, 1082.14771, -1837.55920, 13.47656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2343, 1080.64941, -1836.13293, 13.47656,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2343, 1080.01758, -1836.14539, 13.47656,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2963, 1004.88324, -1968.84534, 11.37064,   0.00000, 270.00000, -90.00000);
	CreateDynamicObject(970, 1004.88544, -1966.76672, 11.83076,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1006.96472, -1968.83752, 11.83076,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1002.80469, -1968.83154, 11.83076,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1004.88568, -1970.89807, 11.82064,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8980, 1003.80017, -1877.75269, 9.70044,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3593, 1041.32568, -1849.09436, 12.95031,   0.00000, 4.00000, 0.00000);
	CreateDynamicObject(19076, 1069.25354, -1759.94104, 12.23292,   0.00000, 0.00000, 5.34000);
	CreateDynamicObject(19054, 1068.27319, -1761.38672, 12.89007,   0.00000, 0.00000, -1.56000);
	CreateDynamicObject(19055, 1070.07788, -1761.28613, 12.98894,   0.00000, 0.00000, -27.84000);
	CreateDynamicObject(19055, 1068.01636, -1758.77527, 12.98894,   0.00000, 0.00000, -62.16000);
	CreateDynamicObject(19056, 1071.38623, -1759.62512, 12.95176,   0.00000, 0.00000, 79.43999);
	CreateDynamicObject(19058, 1069.95715, -1762.87659, 12.86110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19057, 1069.35632, -1761.98413, 13.97802,   0.00000, 0.00000, -14.88000);
	CreateDynamicObject(19057, 1070.10852, -1758.34338, 12.96951,   0.24000, -0.78000, -20.70000);
	CreateDynamicObject(19058, 1068.80005, -1757.28943, 12.92470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19056, 1066.84094, -1760.02844, 12.77734,   0.00000, 0.00000, 0.00000);
	#endif

	Log(LOG_INIT, "Static Meshes loaded in %i ms", GetTickCountEx() - count);
	return 1;
}

PVSlotSelect(playerid)
{
    new string[1024], tmp[128];

	strcat(string, ""nef_green"Select an unused slot for your new vehicle below:\n");

    for(new i = 0; i < MAX_PLAYER_PVS; i++)
    {
        if(i > PlayerData[playerid][e_addpvslots]) // Can not use
        {
        	format(tmp, sizeof(tmp), ""white"PV Slot %i "red"(Locked)\n", i + 1);
        	strcat(string, tmp);
		}
        else // Can use
		{
            if(PlayerPVData[playerid][i][e_model] != 0)
            {
            	format(tmp, sizeof(tmp), ""white"PV Slot %i "green2"(Used) (Vehicle: %s)\n", i + 1, GetPVNameByModelId(PlayerPVData[playerid][i][e_model]));
            	strcat(string, tmp);
			}
			else
			{
            	format(tmp, sizeof(tmp), ""white"PV Slot %i\n", i + 1);
            	strcat(string, tmp);
			}
		}
    }

	ShowPlayerDialog(playerid, PV_SLOT_SELECT_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Custom car shop", string, "Select", "Back");
	return 1;
}

CreateFinalCar(playerid, pv_slot)
{
	if(pv_slot > PlayerData[playerid][e_addpvslots])
	{
	    player_notice(playerid, "This PV slot is locked", "");
	    PVSlotSelect(playerid);
	    return 1;
	}

	if(PlayerPVData[playerid][pv_slot][e_model] != 0)
	{
	    player_notice(playerid, "This PV slot is in use", "");
	    PVSlotSelect(playerid);
	    return 1;
	}

	DestroyPlayerVehicles(playerid);

    if(PlayerData[playerid][pPreviewVehicle] != INVALID_VEHICLE_ID)
    {
		DestroyVehicleEx(PlayerData[playerid][pPreviewVehicle]);
		PlayerData[playerid][pPreviewVehicle] = INVALID_VEHICLE_ID;
	}

    PVSelect[playerid] = pv_slot;
    PlayerPVData[playerid][PVSelect[playerid]][e_model] = PlayerPVTMP[playerid][0];
    strmid(PlayerPVData[playerid][PVSelect[playerid]][e_plate], PlayerPVTMPPlate[playerid], 0, 13, 13);
    
	new vlabel[100];

	format(vlabel, sizeof(vlabel), ""nef_yellow"%s's\n"white"custom car", __GetName(playerid));

	PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] = CreateVehicleEx(PlayerPVData[playerid][PVSelect[playerid]][e_model], 1826.9821, -1383.8724, 25.3348, 180.0407, 0, 0, -1);
	PlayerPVData[playerid][PVSelect[playerid]][e_labelid] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 1, -1, -1, -1, 30.0);

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetVehicleVirtualWorld(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);
	LinkVehicleToInterior(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);
    GivePlayerMoneyEx(playerid, -PlayerPVTMP[playerid][1]);

    SetVehicleNumberPlate(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_plate]);
    SetVehicleToRespawn(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]);

    TogglePlayerControllable(playerid, true);
    PutPlayerInVehicle(playerid, PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], 0);
    player_notice(playerid, "Custom car purchased", "");
    gTeam[playerid] = gFREEROAM;

    RandomWeapons(playerid);

    ShowPlayerDialog(playerid, 5003, DIALOG_STYLE_MSGBOX, ""white"Vehicle bought!", ""white"You can now use these commands:\n\n/pv\n/lock\n/unlock", "OK", "");

	SQL_SaveAccount(playerid, false, true);
    return 1;
}

PortPlayerMap(playerid, Float:X, Float:Y, Float:Z, Float:Angle, const mapname[], const cmd[], bool:populate = true, bool:preload = true)
{
	if(gTeam[playerid] != gFREEROAM)
	{
	    SCM(playerid, GREY, NOT_AVAIL);
		return 0;
	}

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	if(preload)
		Streamer_UpdateEx(playerid, X, Y, Z);

	SetPlayerPos(playerid, X, Y, floatadd(Z, 3.0));
	SetPlayerFacingAngle(playerid, Angle);

    //PlayerPlaySound(playerid, 1039, 0.0, 0.0, 0.0);
    SetCameraBehindPlayer(playerid);
    
    if(populate)
	{
		new rcmd[32];
		rcmd[0] = '/';
		strcat(rcmd, cmd, sizeof(rcmd));
		player_notice(playerid, mapname, rcmd);
	
        NewMapEvent(playerid, cmd);
	} 
	return 1;
}

PortPlayerMapVeh(playerid, Float:X, Float:Y, Float:Z, Float:Angle, Float:XVeh, Float:YVeh, Float:ZVeh, Float:AngleVeh, const mapname[], const cmd[], bool:populate = true, bool:preload = true)
{
	if(gTeam[playerid] != gFREEROAM)
	{
	    SCM(playerid, GREY, NOT_AVAIL);
		return 0;
	}
	
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    gint = GetPlayerVehicleID(playerid);
	    if(preload)
			Streamer_UpdateEx(playerid, XVeh, YVeh, ZVeh);
		SetVehiclePos(gint, XVeh, YVeh, floatadd(ZVeh, 4.5));
	    SetVehicleVirtualWorld(gint, 0);
   		SetVehicleZAngle(gint, AngleVeh);
   		LinkVehicleToInterior(gint, 0);
		PutPlayerInVehicle(playerid, gint,0);
	}
	else
	{
	    if(preload)
			Streamer_UpdateEx(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, floatadd(Z, 3.0));
		SetPlayerFacingAngle(playerid, Angle);
	}
	
	//PlayerPlaySound(playerid, 1039, 0.0, 0.0, 0.0);
    SetCameraBehindPlayer(playerid);
    
    if(populate)
	{
	 	new rcmd[32];
		rcmd[0] = '/';
		strcat(rcmd, cmd, sizeof(rcmd));
	    player_notice(playerid, mapname, rcmd);
	    
        NewMapEvent(playerid, cmd);
	} 
	return 1;
}

SendWelcomeMSG(playerid)
{
	SCM(playerid, GREY, "===================="white""CURRENT_VERSION""grey"=======================");
	SCM(playerid, RED, "» Welcome to "SVRLOGO"");
	SCM(playerid, NEF_GREEN, "» Type /help for further information");
	SCM(playerid, BLUE, "» You can show/hide the textdraws with /textdraws");
	SCM(playerid, YELLOW, "» Visit our forum at http://"SVRFORUM"");
	SCM(playerid, NEF_YELLOW, "» You can use /radio or /streams for music streams");
	SCM(playerid, GREY, "===================="white""CURRENT_VERSION""grey"=======================");
	return 1;
}

SetPlayerBGStaticMeshes(playerid)
{
    TogglePlayerControllable(playerid, false);
    SetPlayerHealth(playerid, 99999.0);
	ResetPlayerWeapons(playerid);

    switch(CurrentBGMap)
    {
        case BG_VOTING:
        {
			SetPlayerPos(playerid, BG_MAP1_WHILECAM);
       		SetPlayerCameraPos(playerid, BG_MAP1_CAMPOS);
       		SetPlayerCameraLookAt(playerid, BG_MAP1_CAMLA);
        }
        case BG_MAP1:
        {
	  		SetPlayerPos(playerid, BG_MAP1_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP1_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP1_CAMLA);
        }
        case BG_MAP2:
        {
     		SetPlayerPos(playerid, BG_MAP2_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP2_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP2_CAMLA);
        }
        case BG_MAP3:
        {
     		SetPlayerPos(playerid, BG_MAP3_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP3_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP3_CAMLA);
        }
        case BG_MAP4:
        {
     		SetPlayerPos(playerid, BG_MAP4_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP4_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP4_CAMLA);
        }
        case BG_MAP5:
        {
     		SetPlayerPos(playerid, BG_MAP5_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP5_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP5_CAMLA);
        }
        case BG_MAP6:
        {
     		SetPlayerPos(playerid, BG_MAP6_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP6_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP6_CAMLA);
        }
    }
	return 1;
}

function:DerbyVoting()
{
	if(CurrentDerbyPlayers < 2)
	{
	    derby_broadcast("There need to be 2 players to start!");
		ClearDerbyVotes();
		ExecDerbyVotingTimer();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	ClearDerbyAfkPlayers();

	new iTotalVotes;
	iTotalVotes = DerbyMapVotes[0] + DerbyMapVotes[1] + DerbyMapVotes[2] + DerbyMapVotes[3] + DerbyMapVotes[4] + DerbyMapVotes[5] + DerbyMapVotes[6] + DerbyMapVotes[7] + DerbyMapVotes[8];
	if(iTotalVotes == 0)
	{
	    ExecDerbyVotingTimer();
		ClearDerbyVotes();
		derby_broadcast("There were no votes!");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
	    return 1;
	}

	new highestmapvotes = -1, draw = 0;
	for(new i = 0; i < sizeof(DerbyMapVotes); i++)
	{
 		if(DerbyMapVotes[i] > highestmapvotes && draw == 0)
		{
  			highestmapvotes = DerbyMapVotes[i];
		}
		else if(DerbyMapVotes[i] > highestmapvotes && draw != 0)
		{
		    highestmapvotes = DerbyMapVotes[i];
		    draw = 0;
		}
		else if(DerbyMapVotes[i] == highestmapvotes)
		{
			draw++;
		}
	}

	if(draw >= 1)
	{
	    derby_broadcast("Voting was not clear. New Voting starting.");
	    ExecDerbyVotingTimer();
		ClearDerbyVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	new	active_db_players = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == DERBY)
		{
	        SetPlayerVirtualWorld(i, DERBY_WORLD); // <bla>
	        if(IsPlayerOnDesktop(i, 5000))
			{
	            PlayerData[i][bDerbyAFK] = true;
	        }
	        else
			{
	            active_db_players++;
	        }
	    }
	}
	if(active_db_players < 2)
	{
	    // Wir können nicht starten
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	if(highestmapvotes == DerbyMapVotes[0]) StartDerbyMap1();
	else if(highestmapvotes == DerbyMapVotes[1]) StartDerbyMap2();
	else if(highestmapvotes == DerbyMapVotes[2]) StartDerbyMap3();
    else if(highestmapvotes == DerbyMapVotes[3]) StartDerbyMap4();
    else if(highestmapvotes == DerbyMapVotes[4]) StartDerbyMap5();
    else if(highestmapvotes == DerbyMapVotes[5]) StartDerbyMap6();
    else if(highestmapvotes == DerbyMapVotes[6]) StartDerbyMap7();
    else if(highestmapvotes == DerbyMapVotes[7]) StartDerbyMap8();
    else if(highestmapvotes == DerbyMapVotes[8]) StartDerbyMap9();
	return 1;
}

ClearDerbyAfkPlayers()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyAFK] = false;
	}
	return 1;
}

function:StartDerbyMap1()
{
    CurrentDerbyMap = 1;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Lighthouse' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	IsDerbyRunning = true;

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
		   	for(new m1s = 0; m1s < sizeof(Derby_Map1Spawns); m1s++)
			{
				if(!Derby_Map1Spawns[m1s][m1sUsed])
		 		{
		 		    Streamer_UpdateEx(i, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]);
	    			SetPlayerPos(i, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(vid, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], floatadd(Derby_Map1Spawns[m1s][m1sZ], 6.0), Derby_Map1Spawns[m1s][m1sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
 					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map1Spawns[m1s][m1sUsed] = true;
					break;
				}
 			}
		}
 	}
 	ExecDerbyTimer();
    Derby_EnableFreezePool();
 	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap2()
{
    CurrentDerbyMap = 2;
    new pcount = 0;
	ClearDerbyVotes();
    derby_broadcast("Map 'Truncat' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
  		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
  		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m2s = 0; m2s < sizeof(Derby_Map2Spawns); m2s++)
			{
				if(!Derby_Map2Spawns[m2s][m2sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]);
	    		    SetPlayerPos(i, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(vid, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], floatadd(Derby_Map2Spawns[m2s][m2sZ], 6.0), Derby_Map2Spawns[m2s][m2sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
 					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map2Spawns[m2s][m2sUsed] = true;
					break;
				}
			}
		}
	}
	ExecDerbyTimer();
	Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap3()
{
    CurrentDerbyMap = 3;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Sky Skiing' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m3s = 0; m3s < sizeof(Derby_Map3Spawns); m3s++)
			{
				if(!Derby_Map3Spawns[m3s][m3sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]);
	    		    SetPlayerPos(i, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(vid, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], floatadd(Derby_Map3Spawns[m3s][m3sZ], 6.0), Derby_Map3Spawns[m3s][m3sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map3Spawns[m3s][m3sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap4()
{
    CurrentDerbyMap = 4;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Townhall' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
  		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m4s = 0; m4s < sizeof(Derby_Map4Spawns); m4s++)
			{
				if(!Derby_Map4Spawns[m4s][m4sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]);
	    		    SetPlayerPos(i, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(vid, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], floatadd(Derby_Map4Spawns[m4s][m4sZ], 6.0), Derby_Map4Spawns[m4s][m4sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map4Spawns[m4s][m4sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap5()
{
    CurrentDerbyMap = 5;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Glazz' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m5s = 0; m5s < sizeof(Derby_Map5Spawns); m5s++)
			{
				if(!Derby_Map5Spawns[m5s][m5sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]);
	    		    SetPlayerPos(i, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(vid, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], floatadd(Derby_Map5Spawns[m5s][m5sZ], 6.0), Derby_Map5Spawns[m5s][m5sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map5Spawns[m5s][m5sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap6()
{
    CurrentDerbyMap = 6;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Rambo' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m6s = 0; m6s < sizeof(Derby_Map6Spawns); m6s++)
			{
				if(!Derby_Map6Spawns[m6s][m6sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]);
	    		    SetPlayerPos(i, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(573, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], floatadd(Derby_Map6Spawns[m6s][m6sZ], 6.0), Derby_Map6Spawns[m6s][m6sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map6Spawns[m6s][m6sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap7()
{
    CurrentDerbyMap = 7;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'SilverGround' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m7s = 0; m7s < sizeof(Derby_Map7Spawns); m7s++)
			{
				if(!Derby_Map7Spawns[m7s][m7sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]);
	    		    SetPlayerPos(i, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(415, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], floatadd(Derby_Map7Spawns[m7s][m7sZ], 6.0), Derby_Map7Spawns[m7s][m7sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map7Spawns[m7s][m7sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap8()
{
    CurrentDerbyMap = 8;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Anubis' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m8s = 0; m8s < sizeof(Derby_Map8Spawns); m8s++)
			{
				if(!Derby_Map8Spawns[m8s][m8sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]);
	    		    SetPlayerPos(i, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(415, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], floatadd(Derby_Map8Spawns[m8s][m8sZ], 6.0), Derby_Map8Spawns[m8s][m8sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map8Spawns[m8s][m8sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap9()
{
    CurrentDerbyMap = 9;
    new pcount = 0;
	ClearDerbyVotes();
	derby_broadcast("Map 'Confusing' won! Let's start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    PlayerData[i][bDerbyWinner] = false;
		if(gTeam[i] == DERBY)
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    format(gstr, sizeof(gstr), "%s couldn't be put in vehicle!", __GetName(i));
				derby_broadcast(gstr);
				PlayerData[i][bDerbyAFK] = true;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		derby_broadcast("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
		{
			PlayerData[i][bDerbyWinner] = true;
			DerbyPlayers++;
			for(new m9s = 0; m9s < sizeof(Derby_Map9Spawns); m9s++)
			{
				if(!Derby_Map9Spawns[m9s][m9sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], Derby_Map9Spawns[m9s][m9sZ]);
	    		    SetPlayerPos(i, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], Derby_Map9Spawns[m9s][m9sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					PlayerData[i][pDerbyVehicle] = CreateVehicleEx(415, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], floatadd(Derby_Map9Spawns[m9s][m9sZ], 6.0), Derby_Map9Spawns[m9s][m9sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(PlayerData[i][pDerbyVehicle], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(PlayerData[i][pDerbyVehicle]);
					SetVehicleVirtualWorld(PlayerData[i][pDerbyVehicle], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, PlayerData[i][pDerbyVehicle], 0);
					RepairVehicle(PlayerData[i][pDerbyVehicle]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(PlayerData[i][pDerbyVehicle], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby is starting!", 3000, 5);
					Derby_Map9Spawns[m9s][m9sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
    Derby_EnableFreezePool();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:Derby()
{
    IsDerbyRunning = false;
    KillTimer(tDerbyTimer);
    KillTimer(tDerbyFallOver);
    ClearDerbySpawns();
	ClearDerbyVotes();
	ResetDerbyGameTime();
	ExecDerbyVotingTimer();

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerData[i][pDerbyVehicle] != INVALID_VEHICLE_ID)
	    {
	    	DestroyVehicleEx(PlayerData[i][pDerbyVehicle]);
	    	PlayerData[i][pDerbyVehicle] = INVALID_VEHICLE_ID;
		}
	}

	if(DerbyPlayers > 1)
	{
    	for(new i = 0; i < MAX_PLAYERS; i++)
    	{
  			if(gTeam[i] == DERBY)
			{
       			SetPlayerVirtualWorld(i, DERBY_WORLD);
       			SetPlayerDerbyStaticMeshes(i);
				ShowDialog(i, DERBY_VOTING_DIALOG);
			}
		}
  		SCMToAll(-1, ""derby_sign" No winner! new round starting soon. Join with /derby");
	}
	else if(DerbyPlayers == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
    	{
			if(gTeam[i] == DERBY && !PlayerData[i][bDerbyAFK])
			{
			    if(PlayerData[i][bDerbyWinner])
			    {
			    	PlayerData[i][e_derbywins]++;

					if(PlayerData[i][e_derbywins] >= 20 && PlayerAchData[i][e_ach_destroyer][0] == 0)
					{
					    GivePlayerAchievement(i, e_ach_destroyer, "Destroyer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}

					new money = (3500 * CurrentDerbyPlayers),
						score = floatround(floatdiv(2 * CurrentDerbyPlayers, 1.5));

			    	GivePlayerMoneyEx(i, money, true, true);
			    	GivePlayerScoreEx(i, score, true, true);
			    	
			    	PlayerData[i][bDerbyWinner] = false;
			    	
			    	format(gstr, sizeof(gstr), "%s won the Derby and earned "nef_yellow"$%s", __GetName(i), number_format(money));
					derby_broadcast(gstr);
	   			}
				SetPlayerDerbyStaticMeshes(i);
	      		ShowDialog(i, DERBY_VOTING_DIALOG);
			}
		}
	}
	DerbyPlayers = 0;
	CurrentDerbyPlayers = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
   	{
		if(gTeam[i] == DERBY)
		{
		    if(PlayerData[i][bDerbyAFK])
		    {
		        if(IsPlayerOnDesktop(i, 1300))
		        {
		            continue;
		        }
		        else CurrentDerbyPlayers++;
		    }
		    else CurrentDerbyPlayers++;
		}
	}
	ClearDerbyAfkPlayers();
	return 1;
}

function:DerbyFallOver()
{
	static CURRENT_FALLOVER;
	switch(CurrentDerbyMap)
	{
	    case 1: CURRENT_FALLOVER = DERBY_FALLOVER_M1;
	    case 2: CURRENT_FALLOVER = DERBY_FALLOVER_M2; // <-- ;) ?
	    case 3: CURRENT_FALLOVER = DERBY_FALLOVER_M3; // <-- ;) ? wasch war da falsch    -> http://www.youtube.com/watch?v=1zrtdDQlYOY
	    case 4: CURRENT_FALLOVER = DERBY_FALLOVER_M4;
	    case 5: CURRENT_FALLOVER = DERBY_FALLOVER_M5;
	    case 6: CURRENT_FALLOVER = DERBY_FALLOVER_M6;
	    case 7: CURRENT_FALLOVER = DERBY_FALLOVER_M7;
	    case 8: CURRENT_FALLOVER = DERBY_FALLOVER_M8;
	    case 9: CURRENT_FALLOVER = DERBY_FALLOVER_M9;
	}

	new Float:POS[3], string[64];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && PlayerData[i][bDerbyWinner])
		{
		    if(PlayerData[i][bDerbyAFK]) continue;

		    if(IsPlayerOnDesktop(i, 4000))
			{
	   			TogglePlayerControllable(i, true);
			    if(PlayerData[i][pDerbyVehicle] != INVALID_VEHICLE_ID)
			    {
			        SetVehiclePos(PlayerData[i][pDerbyVehicle], 0.0, 0.0, 20.0);
					RemovePlayerFromVehicle(i);
					DestroyVehicleEx(PlayerData[i][pDerbyVehicle]);
			    	PlayerData[i][pDerbyVehicle] = INVALID_VEHICLE_ID;
				}
				format(string, sizeof(string), "%s(%i) was kicked out of derby (AFK)", __GetName(i), i);
                derby_broadcast(string);
				DerbyPlayers--;
	 			PlayerData[i][bDerbyWinner] = false;
				SetPlayerDerbyStaticMeshes(i);
				SetPlayerVirtualWorld(i, 12345); // <bla>
	  			if((DerbyPlayers == 1) && (IsDerbyRunning))
	  			{
					Derby();
	  			}
	  			continue;
		    }

			if(GetPlayerPos(i, POS[0], POS[1], POS[2]))
			{
				if(POS[2] <= CURRENT_FALLOVER)
				{
					format(string, sizeof(string), "%s(%i) fell over the map!", __GetName(i), i);
					derby_broadcast(string);
		 			DerbyPlayers--;
     			    if(PlayerData[i][pDerbyVehicle] != INVALID_VEHICLE_ID)
				    {
						DestroyVehicleEx(PlayerData[i][pDerbyVehicle]);
				    	PlayerData[i][pDerbyVehicle] = INVALID_VEHICLE_ID;
					}
		 			PlayerData[i][bDerbyWinner] = false;
					SetPlayerDerbyStaticMeshes(i);
		  			if((DerbyPlayers == 1) && (IsDerbyRunning))
		  			{
						Derby();
		  			}
				}
            }
		}
	}
}

function:QueueProcess()
{
	mysql_pquery(pSQL, "SELECT * FROM `queue` WHERE `ExecutionDate` < UNIX_TIMESTAMP();", "OnQueueReceived", "");

	getdate(gTime[0], gTime[1], gTime[2]);
	gettime(gTime[3], gTime[4], gTime[5]);
	format(gstr, sizeof(gstr), "worldtime %02i:%02i | %02i.%02i", gTime[3], gTime[4], gTime[2], gTime[1]);
	SendRconCommand(gstr);

    /* PAYDAY PROCESS */
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i))
			continue;
			
	    if(IsPlayerOnDesktop(i, 30000))
			continue;
	
		if(PlayerData[i][e_payday] > 0)
		{
		    PlayerData[i][e_payday]--;
		}
		else if(PlayerData[i][e_payday] <= 0)
		{
		    PlayerData[i][e_payday] = 60;
		    
		    /* BANK INTEREST RULES:
		    - less than $1kk + playing hours less than 35
				1.5% of Bank Credit
			- less than $1kk
				1.0% of Bank Credit
			- less than $5kk
				0.5% of Bank Credit
			- less than $10kk
				0.25% of Bank Credit
			- greater than $10kk
				0.1% of Bank Credit

			VIPs get 1/4 of the interests on top of it
			*/

		    new string0[100],
				string1[100],
				string2[100],
				string3[100],
				string4[100],
				string5[100];

			new Float:bmul;
			new BankInterest,
			    BankInterestVIP,
			    BusinessInterest,
			    BusinessInterestVIP;
		    
		    if(PlayerData[i][e_bank] > 0 && PlayerData[i][e_bank] < 1000000 && PlayerData[i][e_time] < 126000)
		        bmul = 1.5;
		    else if(PlayerData[i][e_bank] > 0 && PlayerData[i][e_bank] < 1000000)
		        bmul = 1.0;
		    else if(PlayerData[i][e_bank] <= 5000000)
		        bmul = 0.5;
		    else if(PlayerData[i][e_bank] <= 10000000)
		        bmul = 0.25;
		    else if(PlayerData[i][e_bank] > 10000000)
		        bmul = 0.05;
		    else
		        bmul = 0.0;

            format(string0, sizeof(string0), "Bank balance before PayDay: "green"$%s", number_format(PlayerData[i][e_bank]));

			if(bmul > 0.0)
			{
				BankInterest = floatround((PlayerData[i][e_bank] * bmul) / 100.0, floatround_round);
			    BankInterestVIP = floatround(BankInterest / 2.5, floatround_round);
			    
				format(string1, sizeof(string1), "Bank interest gained: "green"$%s", number_format(BankInterest));

				if(PlayerData[i][e_vip] == 1)
		        	format(string4, sizeof(string4), "Bank interest gained "lb_e"(VIP BOOST)"white": "green"$%s", number_format(BankInterestVIP));
		        else
					format(string4, sizeof(string4), "Bank interest gained "lb_e"(VIP BOOST)"white": "red"---");
			}
			else
			{
			    BankInterest = 0;
			    BankInterestVIP = 0;
			}

			if(GetPlayerBusinessCount(__GetName(i)) > 0)
			{
			    BusinessInterest = GetPlayerBusinessEarnings(i);
			    BusinessInterestVIP = floatround(BusinessInterest / 2.5, floatround_round);
			    
			    format(string3, sizeof(string3), "Business earnings: "green"$%s", number_format(BusinessInterest));
			    
			   	if(PlayerData[i][e_vip] == 1)
			   		format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "green"$%s", number_format(BusinessInterestVIP));
				else
					format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "red"---");
			}
			else
			{
				format(string3, sizeof(string3), "Business earnings: "red"--- (You don't own any business)");
				format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "red"---");
			}
			
			PlayerData[i][e_bank] = PlayerData[i][e_bank] + BusinessInterest + BusinessInterestVIP + BankInterest + BankInterestVIP;
			
			format(string2, sizeof(string2), "Bank balance after PayDay: "green"$%s", number_format(PlayerData[i][e_bank]));
			
            GameTextForPlayer(i, "~g~~h~~h~PayDay~n~~w~Paycheck", 6000, 1);
			SCM(i, -1, ""green"|--------------------"yellow"PAY-DAY"green"-------------------|");
		    if(bmul > 0.0)
		    {
				SCM(i, WHITE, string0);
				SCM(i, WHITE, string1);
				SCM(i, WHITE, string4);
			}
			SCM(i, WHITE, string3);
			SCM(i, WHITE, string5);
			SCM(i, WHITE, string2);
			SCM(i, -1, ""green"|--------------------------------------------------|");
		}
	}
	return 1;
}

function:OnQueueReceived()
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);
	
	if(rows > 0)
	{
	    new Cache:Data = cache_save(pSQL);
	    cache_set_active(Data, pSQL);
	
		for(new i = 0; i < rows; i++)
		{
		    new action = cache_get_row_int(i, 1, pSQL);
		    
		    switch(action)
			{
		        case 1: // give a player credits
		        {
		            new name[26], credits, payment[21];
		            cache_get_row(i, 3, gstr2, pSQL, sizeof(gstr2));
		            
		            sscanf(gstr2, "p<,>s[25]is[20]",
		                name,
		                credits,
						payment);
		            
		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID && islogged(playerid))
		            {
						AlterPlayerCredits(playerid, credits);
						
						format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You were given %sGC!", number_format(credits));
						SCM(playerid, -1, gstr2);

						format(gstr2, sizeof(gstr2), "~r~~h~~h~You were given ~b~~h~~h~%sGC ~r~~h~~h~!", number_format(credits));
						InfoTD_MSG(playerid, 10000, gstr2);
						SQL_SaveAccount(playerid);
		            }
		            else
		            {
		                mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `credits` = `credits` + %i WHERE `name` = '%e' LIMIT 1;", credits, name);
		                mysql_tquery(pSQL, gstr2);
						mysql_format(pSQL, gstr2, sizeof(gstr2), "INSERT INTO `creditslog` VALUES (NULL, '%e', %i, %i);", name, credits, gettime());
						mysql_tquery(pSQL, gstr2);
		            }
		            
					format(gstr, sizeof(gstr), "~p~%s received %s credits for donating!", name, number_format(credits));
                    GameTextForAll(gstr, 10000, 3);
                    format(gstr, sizeof(gstr), "%s received %s credits for donating!", name, number_format(credits));
                    SCMToAll(ORANGE, gstr);
		        }
		        case 2..6: // alter boost
		        {
		            new name[25];
		            cache_get_row(i, 3, name, pSQL, sizeof(name));
		            
		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID)
		            {
		                switch(action)
		                {
		                    case 2:
							{
							    if(PlayerData[playerid][Boost] & BOOST_MONEY_x2) PlayerData[playerid][Boost] &= ~BOOST_MONEY_x2;
							    SCM(playerid, -1, ""server_sign" "green"Your Money Boost x2 ran out!");
							    player_notice(playerid, "~b~~h~~h~Your Money Boost x2 ran out!", "", 4000);
							}
							case 3:
							{
							    if(PlayerData[playerid][Boost] & BOOST_MONEY_x3) PlayerData[playerid][Boost] &= ~BOOST_MONEY_x3;
							    SCM(playerid, -1, ""server_sign" "green"Your Money Boost x3 ran out!");
							    player_notice(playerid, "~b~~h~~h~Your Money Boost x3 ran out!", "", 4000);
							}
							case 4:
							{
							    if(PlayerData[playerid][Boost] & BOOST_SCORE_x2) PlayerData[playerid][Boost] &= ~BOOST_SCORE_x2;
							    SCM(playerid, -1, ""server_sign" "green"Your Score Boost x2 ran out!");
							    player_notice(playerid, "~b~~h~~h~Your Score Boost x2 ran out!", "", 4000);
							}
							case 5:
							{
							    if(PlayerData[playerid][Boost] & BOOST_SCORE_x3) PlayerData[playerid][Boost] &= ~BOOST_SCORE_x3;
							    SCM(playerid, -1, ""server_sign" "green"Your Score Boost x3 ran out!");
							    player_notice(playerid, "~b~~h~~h~Your Score Boost x3 ran out!", "", 4000);
							}
							case 6:
							{
							    if(PlayerData[playerid][Boost] & BOOST_MASTER) PlayerData[playerid][Boost] &= ~BOOST_MASTER;
							    SCM(playerid, -1, ""server_sign" "green"Your Master Boost ran out!");
							    player_notice(playerid, "~b~~h~~h~Your Master Boost ran out!", "", 4000);
							}
		                }
		            }
		        }
		        case 7: // give a player vip
		        {
		            new name[26], payment[21];
                    cache_get_row(i, 3, gstr2, pSQL, sizeof(gstr2));
                    
				    sscanf(gstr2, "p<,>s[25]s[20]",
		                name,
		                payment);

		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID && islogged(playerid))
		            {
		                PlayerData[playerid][e_vip] = 1;
		                PlayerData[playerid][e_bank] += 1000000;
		                
		                if(PlayerData[playerid][e_addpvslots] < 7)
		                {
		                    PlayerData[playerid][e_addpvslots]++;
		                }
		                if(PlayerData[playerid][e_addpvslots] < 7)
		                {
		                    PlayerData[playerid][e_addpvslots]++;
		                }
						if(PlayerData[playerid][e_addhouseslots] < 4)
						{
							PlayerData[playerid][e_addhouseslots]++;
						}
						if(PlayerData[playerid][e_addbizzslots] < 4)
						{
							PlayerData[playerid][e_addbizzslots]++;
						}
		                
						SCM(playerid, -1, ""server_sign" "r_besch"You received VIP status + $1,000,000 bank money + 2 PV Slots + 1 House Slot + 1 Bizz Slot!");

						InfoTD_MSG(playerid, 10000, "~r~~h~~h~You received VIP status + $1,000,000 bank money + 2 PV Slots + 1 House Slot + 1 Bizz Slot!");
						SQL_SaveAccount(playerid);
		            }
		            else
		            {
						cache_set_active(Cache:0, pSQL);
		                
						mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `addpvslots`, `addhouseslots`, `addbizzslots` FROM `accounts` WHERE `name` = '%e';", name);
						new Cache:res = mysql_query(pSQL, gstr);
						
						if(cache_get_row_count(pSQL) > 0)
						{
							new pvslot = cache_get_row_int(0, 0, pSQL),
							    houseslot = cache_get_row_int(0, 1, pSQL),
							    propslot = cache_get_row_int(0, 2, pSQL);

			                if(pvslot < 7)
			                {
			                    pvslot++;
			                }
			                if(pvslot < 7)
			                {
			                    pvslot++;
			                }
			                if(houseslot < 4)
			                {
			                    houseslot++;
			                }
			                if(propslot < 4)
			                {
			                    propslot++;
			                }

			                mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `vip` = 1, `bank` = `bank` + 1000000, `addpvslots` = %i, `addhouseslots` = %i, `addbizzslots` = %i WHERE `name` = '%e' LIMIT 1;",
								pvslot,
								houseslot,
								propslot,
								name);

			                mysql_tquery(pSQL, gstr2, "", "");
						}

    					cache_delete(res);
						cache_set_active(Data, pSQL);
		            }
		            
					format(gstr, sizeof(gstr), "~p~%s received VIP for donating!", name);
                    GameTextForAll(gstr, 10000, 3);
                    format(gstr, sizeof(gstr), "%s received VIP for donating!", name);
                    SCMToAll(ORANGE, gstr);
		        }
		        default: continue;
		    }
			format(gstr2, sizeof(gstr2), "DELETE FROM `queue` WHERE `ID` = %i LIMIT 1;", cache_get_row_int(i, 0, pSQL));
			mysql_tquery(pSQL, gstr2, "", "");
		}
		
		cache_delete(Data, pSQL);
	}
	return 1;
}

function:LogoSwitch()
{
	static phase;
	
	switch(phase)
	{
	    case 0:
	    {
	        TextDrawSetString(NEFLOGO[2], "~w~NEF "CURRENT_VERSION"");
	        phase = 1;
	    }
	    case 1:
	    {
            TextDrawSetString(NEFLOGO[2], "~b~~h~~h~Stunt~w~/~g~~h~Drift~w~/~y~Race~w~/~r~~h~DM~w~/~p~Fun");
	        phase = 2;
	    }
	    case 2:
	    {
			TextDrawSetString(NEFLOGO[2], "~b~~h~~h~Stunt~w~/~g~~h~Drift~w~/~y~Race~w~/~r~~h~DM~w~/~p~Fun");
	        phase = 0;
	    }
	}
	return 1;
}

function:ProcessTick()
{
    g_tickProcessTickCalls++;

	static utime;
	utime = gettime();

	if(g_RaceStatus == RaceStatus_Active)
	{
	    race_calculate_position();
	}

	T_RacePlayers = 0;
	T_DerbyPlayers = 0;
	T_GunGamePlayers = 0;
	T_FalloutPlayers = 0;
	T_TDMPlayers = 0;
	T_WarPlayers = 0;
	T_MinigunPlayers = 0;
	T_SniperPlayers = 0;
	T_CNRPlayers = 0;
	T_JPDMPlayers = 0;
	T_RocketDMPlayers = 0;
	T_ServerPlayers = 0;
	T_SawnPlayers = 0;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			++T_ServerPlayers;
			switch(gTeam[i])
			{
			    case gFREEROAM:
			    {
			        SavePos(i);
			        
				    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				    {
						for(new ii = 0; ii < sizeof(g_SpawnAreas); ii++)
						{
						    if(IsPlayerInDynamicArea(i, g_SpawnAreas[ii]))
						    {
						        new Float:POS[4], vid = GetPlayerVehicleID(i);
						        GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
						        GetVehicleZAngle(vid, POS[3]);

						        POS[0] += (-1.1 * floatsin(-POS[3], degrees));
						        POS[1] += (-1.1 * floatcos(-POS[3], degrees));

						        SetVehicleVelocity(vid, POS[0], POS[1], POS[2] + 0.20);
						        break;
						    }
						}
				    }
			    }
			    case SPEC:
			    {
			        if(PlayerData[i][SpecID] != INVALID_PLAYER_ID)
			        {
			            new Float:hp, Float:ar;
			 			GetPlayerHealth(PlayerData[i][SpecID], hp);
						GetPlayerArmour(PlayerData[i][SpecID], ar);
						
						format(gstr, sizeof(gstr), "~n~~n~~n~~n~~n~~n~~n~~w~%s - id:%i~n~hp:%0.1f ar:%0.1f $%s~n~Godmode:%s VIP:%s",
							__GetName(PlayerData[i][SpecID]),
							PlayerData[i][SpecID],
							hp,
							ar,
							number_format((GetPlayerMoneyEx(PlayerData[i][SpecID]) + PlayerData[PlayerData[i][SpecID]][e_bank])),
							PlayerData[PlayerData[i][SpecID]][bGod] ? ("Yes") : ("No"),
							PlayerData[PlayerData[i][SpecID]][e_vip] == 1 ? ("Yes") : ("No"));
							
						GameTextForPlayer(i, gstr, 30000, 3);
					}
				}
			    case gRACE:
			    {
					if(g_RaceStatus == RaceStatus_Active)
					{
			  			if(g_RacePlayerCount == 1)
			  			{
			                format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~1/1~n~~w~Checkpoint: ~b~~h~~h~%i/%i~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~%s", g_CPProgress[i], g_RaceArray[E_rCPs], g_RacePlayerCount, g_NextRace, GameTimeConvert(g_RaceTime));
						}
						else
						{
							format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~%i/%i~n~~w~Checkpoint: ~b~~h~~h~%i/%i~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~%s", g_RacePosition[i], g_RacePlayerCount, g_CPProgress[i], g_RaceArray[E_rCPs], g_RacePlayerCount, g_NextRace, GameTimeConvert(g_RaceTime));
						}
					}
					else if(g_RaceStatus == RaceStatus_StartUp)
					{
						format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~-/-~n~~w~Checkpoint: ~b~~h~~h~-/-~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~--:--", g_RacePlayerCount, g_NextRace);
					}
					PlayerTextDrawSetString(i, TXTRaceInfo[i], gstr2);

			        if(IsPlayerInAnyVehicle(i))
			        {
						new kmh = GetPlayerKMH(i);
						if(292 <= kmh > 270)
						{
						  	format(gstr2, sizeof(gstr2), "[SUSPECT] Possible speed cheat detected | Player: %s(%i) | Race", __GetName(i), i);
							admin_broadcast(RED, gstr2);
							print(gstr2);
						}
						else if(kmh > 292)
						{
						    Command_ReProcess(i, "/exit", false);
						  	format(gstr2, sizeof(gstr2), "[SUSPECT] Speed cheat detected | Player: %s(%i) | Player has been removed from race", __GetName(i), i);
							admin_broadcast(RED, gstr2);
							print(gstr2);
						}
					}

					T_RacePlayers++;
			    }
			    case DERBY:
			    {
					T_DerbyPlayers++;
			    }
			    case GUNGAME:
			    {
				    new wp[32],
						pweapon = GetPlayerWeapon(i);

				    GetWeaponName(pweapon, wp, sizeof(wp));
				    format(gstr2, sizeof(gstr2), "Players: ~b~~h~~h~%i~n~~w~Level: ~r~~h~~h~%i of 14~n~~w~Weapon: ~g~~h~~h~%s", GunGamePlayers(), GunGame_Player[i][level], wp);
				    PlayerTextDrawSetString(i, TXTGunGameInfo[i], gstr2);

				    T_GunGamePlayers++;
			    }
			    case FALLOUT:
			    {
			        T_FalloutPlayers++;
			        
			        if(g_FalloutStatus == e_Fallout_Running)
			        {
				        if(IsPlayerOnDesktop(i, 6000))
				        {
							format(gstr, sizeof(gstr), "%s(%i) went AFK for too long!", __GetName(i), i);
							fallout_broadcast(gstr);

							gTeam[i] = gFREEROAM;
							PlayerData[i][bFalloutLost] = true;
							HidePlayerFalloutTextdraws(i);
							CurrentFalloutPlayers--;
							ResetPlayerWorld(i);
							RandomSpawn(i, true);
							RandomWeapons(i);
				        }
					}
			    }
			    case gBG_VOTING, gBG_TEAM1, gBG_TEAM2:
			    {
			        T_TDMPlayers++;
			    }
			    case WAR:
			    {
			        T_WarPlayers++;
			    }
			    case MINIGUN:
			    {
			        T_MinigunPlayers++;
			    }
			    case SNIPER:
			    {
			        T_SniperPlayers++;
			    }
			    case CNR:
			    {
					T_CNRPlayers++;
			    }
			    case ROCKETDM:
			    {
			        T_RocketDMPlayers++;
			    }
			    case JETPACKDM:
			    {
			        T_JPDMPlayers++;
			    }
			    case gSAWN:
			    {
			        T_SawnPlayers++;
			    }
			    case JAIL:
			    {
					if(PlayerData[i][iJailTime] > 0)
					{
					    --PlayerData[i][iJailTime];
					    format(gstr2, sizeof(gstr2), "~b~~h~~h~You will be released in %d seconds.~n~Type /escape to attempt to escape [CNR Only]", PlayerData[i][iJailTime]);
						InfoTD_MSG(i, 1000, gstr2);
						continue;
					}

				    if(PlayerData[i][iJailTime] <= 0)
				    {
				        if(GetPVarInt(i, "JailedByAdmin") == 1)
				        {
				            gTeam[i] = gFREEROAM;
				        }
				        else
				        {
				            gTeam[i] = CNR;
				        }

				    	DeletePVar(i, "JailedByAdmin");
						SetPVarInt(i, "HasEscaped", 0);
						SpawnPlayer(i);
				    	SCM(i, COLOR_STEELBLUE, ""RED_E">> "GREY_E"You have been un-jailed by the server. (times up)");
					}
			    }
			}
	    }
	}
	
	if(g_tickProcessTickCalls >= 3) /* TICK 3 SECONDS */
	{
	    g_tickProcessTickCalls = 0;
	
		format(gstr2, sizeof(gstr2), "~y~/derby ~r~~h~%i ~y~/cnr ~r~~h~%i ~y~/race ~r~~h~%i ~y~/tdm ~r~~h~%i ~y~/fallout ~r~~h~%i ~y~/gungame ~r~~h~%i ~y~/war ~r~~h~%i ~y~/mini ~r~~h~%i ~y~/sniper ~r~~h~%i ~y~/rocket ~r~~h~%i",
	        T_DerbyPlayers,
	        T_CNRPlayers,
			T_RacePlayers,
			T_TDMPlayers,
			T_FalloutPlayers,
			T_GunGamePlayers,
			T_WarPlayers,
			T_MinigunPlayers,
			T_SniperPlayers,
			T_RocketDMPlayers);
		TextDrawSetString(TXTFooter, gstr2);

		format(gstr, sizeof(gstr), "Welcome to New Evolution Freeroam!\n\nServer time: %02i:%02i | %02i.%02i\nPlayers online: %i", gTime[3], gTime[4], gTime[2], gTime[1], T_ServerPlayers);
		SetDynamicObjectMaterialText(bb_mcc, 0, gstr, OBJECT_MATERIAL_SIZE_256x128, "Calibri", 0, 0, -32256, -16777216, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);
	}

	if(g_FalloutStatus != e_Fallout_Inactive)
	{
	    switch(g_FalloutStatus)
	    {
	        case e_Fallout_Startup:
			{
				format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~%i~n~~w~Status: ~g~~h~~h~Startup", CurrentFalloutPlayers);
			}
	        case e_Fallout_Running:
	        {
		        FalloutGameTime--;
				format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Status: ~g~~h~~h~Playing", GameTimeConvert(FalloutGameTime), CurrentFalloutPlayers);
    		}
		}
		TextDrawSetString(TXTFalloutData, gstr2);
	}

	if(CurrentBGMap != BG_VOTING)
	{
		--BGGameTime;
		new bg_players = BGTeam1Players + BGTeam2Players;
		switch(CurrentBGMap)
		{                                     
		    case BG_MAP1: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Forest~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
		    case BG_MAP2: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Quaters~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP3: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Rust~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP4: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Italy~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP5: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Medieval~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP6: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Hangar War~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
		}
		TextDrawSetString(TXTTdmInfo, gstr2);
	}
	else
	{
		TextDrawSetString(TXTTdmInfo, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--~n~~w~Map: ~g~~h~~h~Voting~n~~w~Ranger Kills: ~g~~h~~h~---~n~~w~Spetsnaz Kills: ~g~~h~~h~---");
	}

	if(IsDerbyRunning)
	{
 		--DerbyGameTime;
   		switch(CurrentDerbyMap)
	    {                                    
			case 1: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Lighthouse", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 2: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Truncat", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 3: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~SkySkiing", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 4: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Townhall", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 5: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Glazz", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 6: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Rambo", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 7: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~SilverGround", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 8: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Anubis", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 9: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Confusing", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		}
		TextDrawSetString(TXTDerbyInfo, gstr2);
	}
	else
	{
		TextDrawSetString(TXTDerbyInfo, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--/--~n~~w~Map: ~g~~h~~h~Voting");
	}

	for(new r = 0; r < MAX_GZONES; r++)
	{
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;

        if(GZoneData[r][e_locked] > utime) {
            if(GZoneData[r][e_pickupid] == -1) {
                GZoneData[r][e_pickupid] = CreateDynamicPickup(1314, 23, GZoneData[r][e_pos][0], GZoneData[r][e_pos][1], GZoneData[r][e_pos][2], 0, -1, -1);
                Log(LOG_WORLD, "Creating zone pickup %i,%i", GZoneData[r][e_locked], GZoneData[r][e_localgang]);
            }
		} else {
            if(GZoneData[r][e_pickupid] != -1) {
				if(IsValidDynamicPickup(GZoneData[r][e_pickupid])) {
                	DestroyDynamicPickup(GZoneData[r][e_pickupid]);
                	Log(LOG_WORLD, "Destroying zone pickup %i,%i", GZoneData[r][e_locked], GZoneData[r][e_localgang]);
				}
            }
		}

		if(GZoneData[r][e_underattack])
		{
			if(GZoneData[r][e_timeleft] > 0)
			{
			    --GZoneData[r][e_timeleft];

			    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: %s", GZoneData[r][e_zname], GameTimeConvert(GZoneData[r][e_timeleft]));
			    TextDrawSetString(GZoneData[r][e_txtid], gstr);
			}
			else if(GZoneData[r][e_timeleft] <= 0)
			{
			    Iter_Remove(iterGangWar, GZoneData[r][e_attacker]);
			
			    new Iterator:Players<MAX_PLAYERS>;
			    for(new it = 0; it < MAX_PLAYERS; it++)
			    {
			        if(IsPlayerAvail(it) && PlayerData[it][e_gangid] == GZoneData[r][e_attacker] && PlayerData[it][bGWarMode])
			        {
						if(!IsPlayerInDynamicArea(it, GZoneData[r][e_areaid]))
						    continue;

                        if(IsPlayerOnDesktop(it, 2500))
							continue;

			            Iter_Add(Players, it);
			        }
			    }

			    if(Iter_Count(Players) == 0)
			    {
			        // No attackers around
				    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang failed to capture '%s' as there are no alive players around!", GZoneData[r][e_zname]);
					gang_broadcast(GZoneData[r][e_attacker], gstr);

			        if(GZoneData[r][e_defender] == 0)
			        {
			            // Zone must have been whitnessed as there are no defenders
						format(gstr, sizeof(gstr), ""orange"[GANG] %s failed to capture '%s' (No players left!)", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname]);
						SCMToAll(-1, gstr);

						for(new it = 0; it < MAX_PLAYERS; it++)
						{
						    if(IsPlayerAvail(it) && PlayerData[it][bGWarMode])
						    {
						        if(PlayerData[it][e_gangid] == GZoneData[r][e_attacker] || PlayerData[it][e_gangid] == GZoneData[r][e_defender])
						        {
						    		ResetPlayerGWarMode(it);
								}
							}
						}
						
						GZoneData[r][e_localgang] = 0;
					}
					else
					{
						format(gstr, sizeof(gstr), ""orange"Gang %s failed to capture '%s' The zone remains %s gang territory!", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_defender]));
						SCMToAll(-1, gstr);

						for(new it = 0; it < MAX_PLAYERS; it++)
						{
						    if(IsPlayerAvail(it) && PlayerData[it][bGWarMode])
						    {
						        if(PlayerData[it][e_gangid] == GZoneData[r][e_attacker] || PlayerData[it][e_gangid] == GZoneData[r][e_defender])
						        {
						    		ResetPlayerGWarMode(it);
								}
							}
						}
						
						gang_broadcast(GZoneData[r][e_defender], ""gang_sign" "r_besch" The opposing gang failed to capture your gang zone.");

						Iter_Remove(iterGangWar, GZoneData[r][e_localgang]);
						
						GZoneData[r][e_localgang] = GZoneData[r][e_defender];
					}
					
					GZoneData[r][e_attacker] = 0;
					GZoneData[r][e_defender] = 0;
					GZoneData[r][e_timeleft] = 0;
					GZoneData[r][e_underattack] = false;
					GZoneData[r][e_locked] = gettime();
			    }
			    else
				{
				    new CashReward;
				
				    if(GZoneData[r][e_defender] == 0)
				    {
				        // No defenders, less reward
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang successfully captured '%s' with %i alive player(s)!", GZoneData[r][e_zname], Iter_Count(Players));
						gang_broadcast(GZoneData[r][e_attacker], gstr);
						gang_broadcast(GZoneData[r][e_attacker], ""gang_sign" "r_besch" The gang gained 4 gang score and each member $10,000 who were tied.");

						format(gstr, sizeof(gstr), ""SVRSC" "orange"Gang %s captured zone '%s' and gained their reward", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname]);
						SCMToAll(-1, gstr);
						SCMToAll(-1, ""orange"This zone is now locked for 2 hours and cannot be attacked during that time!");

						SQL_UpdateGangScore(GZoneData[r][e_attacker], 4);
						CashReward = 10000;
					}
					else
					{
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang successfully captured '%s' with %i alive player(s)!", GZoneData[r][e_zname], Iter_Count(Players));
						gang_broadcast(GZoneData[r][e_attacker], gstr);
						gang_broadcast(GZoneData[r][e_attacker], ""gang_sign" "r_besch" The gang gained 7 gang score and each member $20,000 who were tied.");

						format(gstr, sizeof(gstr), ""SVRSC" "orange"Gang %s captured zone '%s' which was territory of %s", GetGangNameByID(GZoneData[r][e_attacker]), GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_defender]));
						SCMToAll(-1, gstr);
						SCMToAll(-1, ""orange"This zone is now locked for 2 hours and cannot be attacked during that time!");
						
                        format(gstr, sizeof(gstr), ""SVRSC" "gang_sign" "r_besch" '%s' was captured by the gang %s!", GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_attacker]));
						gang_broadcast(GZoneData[r][e_defender], gstr);
						
						SQL_UpdateGangScore(GZoneData[r][e_attacker], 7);
						CashReward = 20000;
						
						Iter_Remove(iterGangWar, GZoneData[r][e_localgang]);
					}
			    
			        GZoneData[r][e_localgang] = GZoneData[r][e_attacker];
			    
        			format(gstr2, sizeof(gstr2), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: %s\n"orange"Type /gwar to start an attack!", GZoneData[r][e_id], GZoneData[r][e_zname], GetGangNameByID(GZoneData[r][e_attacker]));
                    UpdateDynamic3DTextLabelText(GZoneData[r][e_labelid], WHITE, gstr2);
			        
					for(new it = 0; it < MAX_PLAYERS; it++)
					{
					    if(IsPlayerAvail(it) && PlayerData[it][bGWarMode])
					    {
					        if(PlayerData[it][e_gangid] == GZoneData[r][e_attacker] || PlayerData[it][e_gangid] == GZoneData[r][e_defender])
					        {
					    		ResetPlayerGWarMode(it);
							}
							if(PlayerData[it][e_gangid] == GZoneData[r][e_attacker] && gTeam[it] != SPEC)
							{
							    GivePlayerMoneyEx(it, CashReward);
							}
						}
					    SyncGangZones(it);
					}
					
					GZoneData[r][e_timeleft] = 0;
					GZoneData[r][e_attacker] = 0;
					GZoneData[r][e_defender] = 0;
					GZoneData[r][e_underattack] = false;
					GZoneData[r][e_locked] = gettime() + 7200;
				}
				
				orm_update(GZoneData[r][e_ormid]);
			}
		}
	}
	return 1;
}

ResetBGGameTime()
{
	BGGameTime = DEFAULT_BG_TIME;
	return 1;
}

fallout_reset_gametime()
{
	FalloutGameTime = DEFAULT_FALLOUT_TIME;
	return 1;
}

ResetDerbyGameTime()
{
	DerbyGameTime = DEFAULT_DERBY_TIME;
	return 1;
}

function:ClearDerbyVotes()
{
	for(new i = 0; i < 9; i++)
	{
	    DerbyMapVotes[i] = 0;
	}
	
	Iter_Clear(iterDerbyVoters);
	return 1;
}

function:ExecDerbyVotingTimer()
{
	KillTimer(tDerbyVoting);
	tDerbyVoting = SetTimer("DerbyVoting", DERBY_VOTING_TIME, false);
	return 1;
}

function:ExecDerbyTimer()
{
	KillTimer(tDerbyTimer);
    tDerbyTimer = SetTimer("Derby", DERBY_TIME, false);
    return 1;
}

Derby_EnableFreezePool()
{
    g_DerbyFreezePool = DERBY_FREEZE_TIME / DERBY_FREEZE_INTERVAL;
	SetTimer("Derby_FreezeVehicles", DERBY_FREEZE_INTERVAL, 0);
}

function:Derby_FreezeVehicles()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == DERBY)
	    {
	        if(IsPlayerInAnyVehicle(i))
	        {
	            SetVehicleVelocity(GetPlayerVehicleID(i), 0.0, 0.0, 0.0);
	        }
	    }
	}

	if(--g_DerbyFreezePool > 0 && IsDerbyRunning)
	{
	    SetTimer("Derby_FreezeVehicles", DERBY_FREEZE_INTERVAL, 0);
	}
	return 1;
}

function:ClearDerbySpawns()
{
	for(new i = 0; i < sizeof(Derby_Map1Spawns); i++)
	{
	    Derby_Map1Spawns[i][m1sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map2Spawns); i++)
	{
	    Derby_Map2Spawns[i][m2sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map3Spawns); i++)
	{
	    Derby_Map3Spawns[i][m3sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map4Spawns); i++)
	{
	    Derby_Map4Spawns[i][m4sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map5Spawns); i++)
	{
	    Derby_Map5Spawns[i][m5sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map6Spawns); i++)
	{
	    Derby_Map6Spawns[i][m6sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map7Spawns); i++)
	{
	    Derby_Map7Spawns[i][m7sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map8Spawns); i++)
	{
	    Derby_Map8Spawns[i][m8sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map9Spawns); i++)
	{
	    Derby_Map9Spawns[i][m9sUsed] = false;
	}
	return 1;
}

function:SetPlayerDerbyStaticMeshes(playerid)
{
    SetPlayerHealth(playerid, 99999.0);
    switch(CurrentDerbyMap)
    {
		case 1:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M1);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M1);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M1);
		}
		case 2:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M2);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M2);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M2);
		}
		case 3:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M3);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M3);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M3);
		}
		case 4:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M4);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M4);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M4);
		}
		case 5:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M5);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M5);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M5);
		}
		case 6:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M6);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M6);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M6);
		}
		case 7:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M7);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M7);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M7);
		}
		case 8:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M8);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M8);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M8);
		}
		case 9:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M9);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M9);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M9);
		}
	}
	TogglePlayerControllable(playerid, false);
}

derby_healthbar_update(playerid)
{
	new Float:HP;
	GetVehicleHealth(GetPlayerVehicleID(playerid), HP);
	UpdatePlayer3DTextLabelText(playerid, PlayerData[playerid][t3dDerbyVehicleLabel], -1, derby_healthbar_format(floatround(HP)));
	return 1;
}

derby_healthbar_format(hp)
{
	new str[30];
	if(hp == 1000) format(str, sizeof(str), "{00ff00}••••••••••");
	else if(hp >= 900) format(str, sizeof(str), "{66ff00}•••••••••{ffffff}•");
	else if(hp >= 800) format(str, sizeof(str), "{7fff00}••••••••{ffffff}••");
	else if(hp >= 700) format(str, sizeof(str), "{ccff00}•••••••{ffffff}•••");
	else if(hp >= 600) format(str, sizeof(str), "{f7f21a}••••••{ffffff}••••");
	else if(hp >= 500) format(str, sizeof(str), "{f4c430}•••••{ffffff}•••••");
	else if(hp >= 400) format(str, sizeof(str), "{e49b0f}••••{ffffff}••••••");
	else if(hp >= 300) format(str, sizeof(str), "{e4650e}•••{ffffff}•••••••");
	else if(hp >= 250) format(str, sizeof(str), "{ff2400}••{ffffff}••••••••");
	else format(str, sizeof(str), "{ff2400}Boom!");
	
	return str;
}

function:derby_healthbar_reset(playerid, namehash)
{
	if(namehash != YHash(__GetName(playerid)))
	    return 0;

	PlayerData[playerid][bDerbyHealthBarShowing] = false;
	PlayerData[playerid][tDerbyHealthBar] = -1;
	PlayerData[playerid][fDerbyCDamage] = 0;

	derby_healthbar_update(playerid);
	return 1;
}

SetPlayerBGTeam1(playerid)
{
    ResetPlayerWeapons(playerid);
    
    SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
	SetPlayerSkin(playerid, 285);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerTeam(playerid, 10);
	SetPlayerColor(playerid, BLUE);
	GivePlayerWeapon(playerid, 24, 999999);
	GivePlayerWeapon(playerid, 31, 999999);
	GivePlayerWeapon(playerid, 34, 999999);
	
	switch(random(3))
	{
		case 1: GivePlayerWeapon(playerid, 35, 1);
	}
	return 1;
}

SetPlayerBGTeam2(playerid)
{
	ResetPlayerWeapons(playerid);
	
    SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
	SetPlayerSkin(playerid, 122);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerTeam(playerid, 20);
	SetPlayerColor(playerid, RED);
	
	GivePlayerWeapon(playerid, 24, 999999);
	GivePlayerWeapon(playerid, 30, 999999);
	GivePlayerWeapon(playerid, 34, 999999);
	
	switch(random(3))
	{
		case 1: GivePlayerWeapon(playerid, 35, 1);
	}
	return 1;
}

ShowPlayerWelcomeTextdraws(playerid)
{
	for(new i = 0; i < sizeof(TXTWelcome); i++)
	{
    	TextDrawShowForPlayer(playerid, TXTWelcome[i]);
	}
}

HidePlayerWelcomeTextdraws(playerid)
{
	for(new i = 0; i < sizeof(TXTWelcome); i++)
	{
    	TextDrawHideForPlayer(playerid, TXTWelcome[i]);
	}
}

ShowPlayerGunGameTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTGunGameSign);
	PlayerTextDrawShow(playerid, TXTGunGameInfo[playerid]);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerGunGameTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTGunGameSign);
	PlayerTextDrawHide(playerid, TXTGunGameInfo[playerid]);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

HidePlayerRaceTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTRaceSign);
	PlayerTextDrawHide(playerid, TXTRaceInfo[playerid]);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerRaceTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTRaceSign);
	PlayerTextDrawShow(playerid, TXTRaceInfo[playerid]);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerToyTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTToyBox);
	TextDrawShowForPlayer(playerid, TXTToyInfo);
}

HidePlayerToyTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTToyBox);
	TextDrawHideForPlayer(playerid, TXTToyInfo);
}

ShowPlayerCNRTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerCNRTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerDerbyTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTDerbyInfo);
	TextDrawShowForPlayer(playerid, TXTDerbySign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerDerbyTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTDerbyInfo);
	TextDrawHideForPlayer(playerid, TXTDerbySign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerBGTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTTdmInfo);
	TextDrawShowForPlayer(playerid, TXTTdmSign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerBGTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTTdmInfo);
	TextDrawHideForPlayer(playerid, TXTTdmSign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerFalloutTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTFalloutData);
	TextDrawShowForPlayer(playerid, TXTFalloutSign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerFalloutTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTFalloutData);
	TextDrawHideForPlayer(playerid, TXTFalloutSign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

HidePlayerDMTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerDMTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerInfoTextdraws(playerid)
{
	TextDrawHideForPlayer(playerid, TXTTeleportInfo);
}

ShowPlayerInfoTextdraws(playerid)
{
	TextDrawShowForPlayer(playerid, TXTTeleportInfo);
}

fallout_buildmap()
{
    fallout_reset();

    FalloutData[I_iCount] = 15;
	FalloutData[I_iFirstShake] = true;

	new j = 0;
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	FalloutData[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	return 1;
}

fallout_startgame()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayerData[i][bFalloutLost] = false;
		
	    if(gTeam[i] == FALLOUT)
		{
			SetPlayerHealth(i, 100.0);
	    }
	}

	FalloutData[I_tCountdown] = SetTimer("fallout_countdown", 1000, true);

	fallout_broadcast("A new game has started!");
	return 1;
}

fallout_setplayer(playerid)
{
	SetPlayerPos(playerid, 2482.1921 - random(39), -1660.4783 + random(47), 161.0000);
	SetPlayerFacingAngle(playerid, random(360));
	Streamer_Update(playerid);
	TogglePlayerControllable(playerid, false);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, FALLOUT_WORLD);
	ShowPlayerFalloutTextdraws(playerid);
	ResetPlayerWeapons(playerid);
}

fallout_cancel()
{
    CurrentFalloutPlayers = 0;
	g_FalloutStatus = e_Fallout_Inactive;
	
	fallout_reset();
	return 1;
}

fallout_reset()
{
	for(new i = 0; i < FALLOUT_OBJECTS; i++)
	{
	    if(IsValidDynamicObject(FalloutData[I_iObject][i]))
			DestroyDynamicObject(FalloutData[I_iObject][i]);

		FalloutData[I_iNumberout][i] = -1;
		KillTimer(FalloutData[I_tShake][i]);
		FalloutData[I_iShake][i] = 0;
	}

    KillTimer(FalloutData[I_tSolarfall]);
    KillTimer(FalloutData[I_tCountdown]);
    KillTimer(FalloutData[I_tLoseGame]);
}

function:fallout_losegame()
{
	new players,
		Float:POS[3];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] != FALLOUT)
			continue;
		if(PlayerData[i][bFalloutLost])
			continue;

		GetPlayerPos(i, POS[0], POS[1], POS[2]);

		if(POS[2] <= 158.0 && !PlayerData[i][bFalloutLost])
		{
			GameTextForPlayer(i, "~p~You lost the Fallout!", 3000, 1);

			format(gstr, sizeof(gstr), "%s(%i) fell over the glass bottom!", __GetName(i), i);
			fallout_broadcast(gstr);

            gTeam[i] = gFREEROAM;
			PlayerData[i][bFalloutLost] = true;
			CurrentFalloutPlayers--;
			
			HidePlayerFalloutTextdraws(i);
			ResetPlayerWorld(i);
			RandomSpawn(i, true);
			RandomWeapons(i);
		}
		else
		{
		    players++;
		}
	}

	if(players <= 1 && g_FalloutStatus == e_Fallout_Running)
	{
	    g_FalloutStatus = e_Fallout_Finish;
		SetTimer("fallout_decidewinners", 1500, false);
	}
	return 1;
}

function:fallout_countdown()
{
	if(--FalloutData[I_iCount] <= 0)
	{
		KillTimer(FalloutData[I_tCountdown]);

		if(fallout_get_playercount() <= 1)
		{
		    fallout_cancel();

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == FALLOUT)
				{
				    TogglePlayerControllable(i, true);
			        HidePlayerFalloutTextdraws(i);
			        ResetPlayerWorld(i);
                    RandomSpawn(i, true);
					RandomWeapons(i);
					
			        gTeam[i] = gFREEROAM;
			        
			        global_broadcast("Fallout canceled due to lack of players!");
			    }
			}
		}
		else
		{
			format(gstr, sizeof(gstr), "~b~Start!");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == FALLOUT)
				{
				    GameTextForPlayer(i, gstr, 1000, 3);
					Streamer_Update(i);
					TogglePlayerControllable(i, true);

					PlayerData[i][bFalloutLost] = false;
			    }
			}

			SetTimer("fallout_start_falling", 587, false);
			g_FalloutStatus = e_Fallout_Running;
		}
	}
	else
	{
	    format(gstr, sizeof(gstr), "~y~FALLOUT STARTING IN~n~~p~- %i -~n~~y~SECONDS", FalloutData[I_iCount]);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == FALLOUT)
			{
				GameTextForPlayer(i, gstr, 1000, 3);
		    }
		}
	}
	return 1;
}

function:fallout_solarfall()
{
	new objectid,
		go;
		
	for(new i = 0; i < FALLOUT_OBJECTS; i++)
		if(FalloutData[I_iNumberout][i] == -1)
			go++;

	if(go == 3)
	{
		if(g_FalloutStatus == e_Fallout_Running)
		{
			g_FalloutStatus = e_Fallout_Finish;
            fallout_decidewinners();
		}
		
		KillTimer(FalloutData[I_tSolarfall]);
		return 1;
	}

	start:
	if(FalloutData[I_iFirstShake])
	    objectid = 0;
	else
		objectid = random(FALLOUT_OBJECTS);

    FalloutData[I_iFirstShake] = false;

	if(FalloutData[I_iNumberout][objectid] != -1)
		goto start;

	FalloutData[I_iNumberout][objectid] = 0;
	FalloutData[I_tShake][objectid] = SetTimerEx("fallout_squareshake", 100, true, "i", objectid);
	return 1;
}

function:fallout_start_falling()
{
	FalloutData[I_tSolarfall] = SetTimer("fallout_solarfall", 500, true);
	FalloutData[I_tLoseGame] = SetTimer("fallout_losegame", 750, true);
	return 1;
}

function:fallout_decidewinners()
{
	g_FalloutStatus = e_Fallout_Inactive;

	new winners,
		money;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
		{
		    if(gTeam[i] != FALLOUT)
				continue;

			HidePlayerFalloutTextdraws(i);
		    ResetPlayerWorld(i);
		    RandomWeapons(i);
		    
			if(!PlayerData[i][bFalloutLost])
			{
				winners++;

				format(gstr, sizeof(gstr), ""fallout_sign" Winner(s): %i. %s", winners, __GetName(i));
				SCMToAll(YELLOW, gstr);

				money = (2500 * CurrentFalloutPlayers);
                GivePlayerMoneyEx(i, money, true, true);
				GivePlayerScoreEx(i, 5, true, true);
				
				PlayerData[i][e_falloutwins]++;
				
				if(PlayerAchData[i][e_ach_deepimpact][0] == 0 && PlayerData[i][e_falloutwins] >= 10)
				{
				    GivePlayerAchievement(i, e_ach_deepimpact, "Deep Impact", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				}
				
				gTeam[i] = gFREEROAM;
				SpawnPlayer(i);
			}
		}
		
		PlayerData[i][bFalloutLost] = true;
	}
	
	fallout_cancel();

	if(winners == 0)
		fallout_broadcast(""white"There are no winners this round!");

	return 1;
}

function:fallout_squareshake(objectid)
{
	if(objectid == 0)
	{
		return KillTimer(FalloutData[I_tShake][objectid]);
	}

	switch(FalloutData[I_iShake][objectid])
	{
		case 0, 5:
		{
			SetDynamicObjectRot(FalloutData[I_iObject][objectid], 31.8, 2, 0);
		}
		case 1, 6:
		{
			SetDynamicObjectRot(FalloutData[I_iObject][objectid], 33.8, 0, 0);
		}
		case 2, 7:
		{
			SetDynamicObjectRot(FalloutData[I_iObject][objectid], 31.8, -2, 0);
		}
		case 3, 8:
		{
			SetDynamicObjectRot(FalloutData[I_iObject][objectid], 29.8, 0, 0);
		}
		case 4, 9:
		{
			SetDynamicObjectRot(FalloutData[I_iObject][objectid], 31.8, 0, 0);
		}
		case 10:
		{
			new Float:patPOS[3];
			GetDynamicObjectPos(FalloutData[I_iObject][objectid], patPOS[0], patPOS[1], patPOS[2]);
			MoveDynamicObject(FalloutData[I_iObject][objectid], patPOS[0], patPOS[1], (patPOS[2] - 100.0), 4);
		}
		case 11..99:
		{
  			SetDynamicObjectPos(FalloutData[I_iObject][objectid], 31.8 - floatsub((FalloutData[I_iShake][objectid] * 2), 20), 0, 0);
		}
		default:
		{
			DestroyDynamicObject(FalloutData[I_iObject][objectid]);

			KillTimer(FalloutData[I_tShake][objectid]);
		}
	}

	FalloutData[I_iShake][objectid]++;
	return 1;
}

fallout_get_playercount()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i))
			continue;

		if(gTeam[i] == FALLOUT)
			count++;
	}
	return count;
}

function:ModVehicleColor(playerid)
{
	new color1,
	    color2;

	color1 = PlayerPVData[playerid][PVSelect[playerid]][e_color1] != 0 ? PlayerPVData[playerid][PVSelect[playerid]][e_color1] : 0;
	color2 = PlayerPVData[playerid][PVSelect[playerid]][e_color2] != 0 ? PlayerPVData[playerid][PVSelect[playerid]][e_color2] : 0;

	ChangeVehicleColor(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], color1, color2);
	return 1;
}

function:ModVehiclePaintJob(playerid)
{
	if(PlayerPVData[playerid][PVSelect[playerid]][e_paintjob] != -1)
	{
		ChangeVehiclePaintjob(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_paintjob]);
	}
	return 1;
}

function:ModVehicleComponents(playerid)
{
    for(new i = 0; i < 17; i++)
    {
        if(PlayerPVData[playerid][PVSelect[playerid]][e_mods][i] != 0)
        {
            AddVehicleComponent(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid], PlayerPVData[playerid][PVSelect[playerid]][e_mods][i]);
        }
	}
	return 1;
}

function:SaveVehComponets(playerid, componentid)
{
	for(new s = 0; s < 20; s++)
	{
    	if(componentid == pv_spoiler[s][0])
		{
      		PlayerPVData[playerid][PVSelect[playerid]][e_mods][0] = componentid;
   	    }
	}

	for(new s = 0; s < 3; s++)
	{
    	if(componentid == pv_nitro[s][0])
		{
    		PlayerPVData[playerid][PVSelect[playerid]][e_mods][1] = componentid;
   		}
	}

	for(new s = 0; s < 23; s++)
	{
    	if(componentid == pv_fbumper[s][0])
		{
    		PlayerPVData[playerid][PVSelect[playerid]][e_mods][2] = componentid;
   	 	}
	}

	for(new s = 0; s < 22; s++)
	{
    	if(componentid == pv_rbumper[s][0])
		{
    		PlayerPVData[playerid][PVSelect[playerid]][e_mods][3] = componentid;
   		}
	}

	for(new s = 0; s < 28; s++)
	{
     	if(componentid == pv_exhaust[s][0])
		{
       		PlayerPVData[playerid][PVSelect[playerid]][e_mods][4] = componentid;
		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventr[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][5] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventl[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][6] = componentid;
 		}
	}

	for(new s = 0; s < 4; s++)
	{
		if(componentid == pv_bscoop[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][7] = componentid;
 		}
	}

	for(new s = 0; s < 17; s++)
	{
		if(componentid == pv_roof[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][8] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_lskirt[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][9] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_rskirt[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][10] = componentid;
 		}
	}

	for(new s = 0; s < 1; s++)
	{
		if(componentid == pv_hydraulics[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][11] = componentid;
		}
	}

	for(new s = 0; s < 1; s++)
	{
     	if(componentid == pv_base[s][0])
 		{
       		PlayerPVData[playerid][PVSelect[playerid]][e_mods][12] = componentid;
		}
	}

	for(new s = 0; s < 4; s++)
	{
     	if(componentid == pv_rbbars[s][0])
 		{
       		PlayerPVData[playerid][PVSelect[playerid]][e_mods][13] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_fbbars[s][0])
		{
    		PlayerPVData[playerid][PVSelect[playerid]][e_mods][14] = componentid;
		}
	}

	for(new s = 0; s < 17; s++)
	{
    	if(componentid == pv_wheels[s][0])
		{
      		PlayerPVData[playerid][PVSelect[playerid]][e_mods][15] = componentid;
   	    }
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_lights[s][0])
		{
			PlayerPVData[playerid][PVSelect[playerid]][e_mods][16] = componentid;
 		}
    }
	return 1;
}

function:player_unmute(playerid, namehash)
{
	if(namehash == YHash(__GetName(playerid)))
	{
	    PlayerData[playerid][bMuted] = false;
	    PlayerData[playerid][tMute] = -1;
	}
    return 1;
}

function:ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
	    case DIALOG_DUEL + 1:
	    {
	        ShowPlayerDialog(playerid, DIALOG_DUEL + 1, DIALOG_STYLE_LIST, ""nef" :: Duel > Locations (Step 2/2)", "Stadium Top\nChinatown\nCampsite", "Send", "Back");
	    }
	    case DIALOG_DUEL:
	    {
	        ShowPlayerDialog(playerid, DIALOG_DUEL, DIALOG_STYLE_LIST, ""nef" :: Duel > Weapons (Step 1/2)", "Knife\nChainsaw\nGrenade\nPistol\nDesert Eagle\nPumpgun\nSawn-off Shotgun\nCombat Shotgun\nUZI\nMP5\nAK-47\nM4\nTEC-9\nSniper Rifle\nRPG", "Next", "Cancel");
	    }
		case DIALOG_RACE_RACESTARTPOS:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACESTARTPOS, DIALOG_STYLE_MSGBOX, ""nef" :: Race Creation "white"- (Step 4/5)", ""white"Set start postions 'KEY_FIRE'", "GO", "Exit");
		}
		case DIALOG_RACE_CHECKPOINTS:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_CHECKPOINTS, DIALOG_STYLE_MSGBOX, ""nef" :: Race Creation "white"- (Step 5/5)", ""white"Checkpoints", "GO", "Exit");
		}
		case DIALOG_RACE_RACERDY:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACERDY, DIALOG_STYLE_MSGBOX, ""nef" :: Race Creation "white"- (DONE)", ""white"Race has been created - ready to use", "Finish", "");
		}
		case DIALOG_RACE_RACEVEH:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACEVEH, DIALOG_STYLE_INPUT, ""nef" :: Race Creation "white"- (Step 3/5)", ""white"vehicle:", "Next", "Exit");
		}
	    case DIALOG_RACE_RACEVW:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACEVW, DIALOG_STYLE_INPUT, ""nef" :: Race Creation "white"- (Step 2/5)", ""white"Virtual world:", "Next", "Exit");
		}
		case DIALOG_RACE_RACETYPE:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACETYPE, DIALOG_STYLE_LIST, ""nef" :: Race Creation "white"- (Step 1/5)", "Normal Race\nAir Race", "Next", "Exit");
		}
		case DIALOG_SET_BUSINESS_TYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_SET_BUSINESS_TYPE, DIALOG_STYLE_LIST, ""nef" :: Select a business type", "Loan Sharks\nRobbery\nSmuggling\nProstitution\nMeth Lab", "Select", "Back");
		}
	    case DIALOG_UPGRADE_BUSINESS:
	    {
	        new string[512];
	        
	        new r = GetBusinessSlotBySelection(playerid);
	        
			if(r != -1) {
			    strcat(string, ""white"The higher the level the higher the earnings. Upgrade your business\nlevel to receive more money each payday! Max. level: 20\n\nCurrent Business Level: ");
			    
			    if(BusinessData[r][e_level] >= MAX_BUSINESS_LEVEL)
			    {
				    format(gstr, sizeof(gstr), "%i\nCurrent Business Earnings: $%s\n\nThis business reached it's max. level!", BusinessData[r][e_level], number_format(GetBusinessEarnings(r)));
					strcat(string, gstr);
			    }
			    else
			    {
				    format(gstr, sizeof(gstr), "%i\nCurrent Business Earnings: $%s\nEarnings in next level: $%s\n\nUpgrade now for "yellow_e"$%s"white"!",
						BusinessData[r][e_level],
						number_format(GetBusinessEarnings(r)),
						number_format(g_aBusinessLevelMatrix[BusinessData[r][e_level]][E_bearnings]),
						number_format(g_aBusinessLevelMatrix[BusinessData[r][e_level]][E_bupgradeprice]));
					strcat(string, gstr);
				}
				
	 	        format(gstr, sizeof(gstr), ""nef" :: Business Level Upgrade > Slot: %i", PlayerData[playerid][BusinessIdSelected] + 1);

	            if(BusinessData[r][e_level] == MAX_BUSINESS_LEVEL) {
					ShowPlayerDialog(playerid, DIALOG_UPGRADE_BUSINESS, DIALOG_STYLE_MSGBOX, gstr, string, "Back", "");
				} else {
	                ShowPlayerDialog(playerid, DIALOG_UPGRADE_BUSINESS, DIALOG_STYLE_MSGBOX, gstr, string, "Upgrade", "Back");
				}
			} else {
                player_notice(playerid, "Couldn't find the business in that slot", "Report on forums", 4000);
			}
		}
	    case CM_DIALOG:
	    {
	        new string[1024];

	        strcat(string, ""red"How to get Gold Credits\nToy Slots\nCustom car slot\nHouse Slots\nHouse Item Slots\nBusiness Slots\nInstant Namechange Access");
	        strcat(string, "\nMedkit x20\nMedkit x100\nMoney Boost x2\nMoney Boost x3\nScore Boost x2\nScore Boost x3\nMaster Boost\nReset K/D");

	        ShowPlayerDialog(playerid, CM_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Gold Credits", string, "Select", "Cancel");
	    }
	    case NO_CREDITS_DIALOG:
	    {
	        ShowPlayerDialog(playerid, NO_CREDITS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Gold Credits", ""nef_green"You don't have enough Gold Credits to perform this action.\n"white"To purchase Gold Credits goto "SVRURLWWW"/credits", "OK", "");
	    }
	    case SERVERSTATS_DIALOG:
	    {
	        new string[680];
	        format(string, sizeof(string), "%s since %s. During that time...\n\n... "yellow_e"%i "white"commands have been performed\n... "yellow_e"%i "white"chat messages have been sent\n... "yellow_e"%i "white"new players have registered\n... "yellow_e"%i "white"players have been murdered",
				GetUptime(), UTConvert(StartTime), g_ServerStats[0], g_ServerStats[1], g_ServerStats[2], g_ServerStats[3]);
				
			format(gstr2, sizeof(gstr2), "\n\nStreamed client objects: %i\nServer FPS: %i\nPlayer record: %i", Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT), GetServerTickRate(), m_PlayerRecord);
	        strcat(string, gstr2);
	        strcat(string, "\n\nServer version: "SVRNAME" "CURRENT_VERSION" on SA-MP "SAMP_VERSION"");
	        
	        ShowPlayerDialog(playerid, SERVERSTATS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Server Stats", string, "OK", "");
	    }
	    case LABEL_DIALOG + 1:
	    {
	        ShowPlayerDialog(playerid, LABEL_DIALOG + 1, DIALOG_STYLE_INPUT, ""nef" :: Change VIP Label Text", ""white"Enter the new text which your label shall display\n"nef_yellow"* "white"Input length: 3-35", "Next", "Cancel");
	    }
	    case LABEL_DIALOG:
	    {
        	ShowPlayerDialog(playerid, LABEL_DIALOG, DIALOG_STYLE_INPUT, ""nef" :: Attach VIP Label", ""white"Enter some text which your label shall display\n"nef_yellow"* "white"Input length: 3-35", "Next", "Cancel");
	    }
	    case VCONTROL_DIALOG:
	    {
			ShowPlayerDialog(playerid, VCONTROL_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Vehicle Control", "Engine control\nLight control\nAlarm\nBonnet\nBoot", "Select", "Cancel");
	    }
	    case NAME_CHANGE_DIALOG:
	    {
	        new string[1024];

	        if(PlayerData[playerid][e_vip] == 1)
	        {
	            if((PlayerData[playerid][e_lastnc] + 1209600) > gettime() && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	            {
	                format(string, sizeof(string), ""red"Namechange not possible"white"\n\nNamechange cooldown: 14 days "lb_e"(VIP)"white"\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s",
						UTConvert(PlayerData[playerid][e_lastnc]),
						UTConvert(PlayerData[playerid][e_lastnc] + 1209600),
						__GetName(playerid));
					return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Namechange", string, "OK", "");
	            }
	            else
	            {
	                if(PlayerData[playerid][e_lastnc] == 0)
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 14 days "lb_e"(VIP)"white"\nLast Namechange: Never\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UTConvert(PlayerData[playerid][e_regdate]),
							__GetName(playerid));
	                }
	                else
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 14 days "lb_e"(VIP)"white"\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UTConvert(PlayerData[playerid][e_lastnc]),
							UTConvert(PlayerData[playerid][e_lastnc] + 1209600),
							__GetName(playerid));
	                }
	                
					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG, DIALOG_STYLE_INPUT, ""nef" :: Namechange", string, "Change", "Cancel");
	            }
	        }
	        else
	        {
	            if((PlayerData[playerid][e_lastnc] + 2678400) > gettime() && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	            {
	                format(string, sizeof(string), ""red"Namechange not possible"white"\n\nNamechange cooldown: 30 days\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s",
						UTConvert(PlayerData[playerid][e_lastnc]),
						UTConvert(PlayerData[playerid][e_lastnc] + 2678400),
						__GetName(playerid));
					return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Namechange", string, "OK", "");
	            }
	            else
	            {
	                if(PlayerData[playerid][e_lastnc] == 0)
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 30 days\nLast Namechange: Never\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UTConvert(PlayerData[playerid][e_regdate]),
							__GetName(playerid));
	                }
	                else
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 30 days\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UTConvert(PlayerData[playerid][e_lastnc]),
							UTConvert(PlayerData[playerid][e_lastnc] + 2678400),
							__GetName(playerid));
	                }

					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG, DIALOG_STYLE_INPUT, ""nef" :: Namechange", string, "Change", "Cancel");
	            }
			}
		}
		case HAREFILL_DIALOG:
		{
		 	new tick = GetTickCountEx();
			if((PlayerData[playerid][tickLastRefill] + COOLDOWN_CMD_HAREFILL) >= tick)
			{
			    return player_notice(playerid, "Command is on cooldown!", "");
			}
		    ShowPlayerDialog(playerid, HAREFILL_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Health & Armor Refill", "Health\t\t"grey"[$5,000]\nArmor\t\t"grey"[$2,500]", "Select", "Cancel");
		}
	    case GANG_SET_RANK_DIALOG:
	    {
	        switch(PlayerData[playerid][e_gangrank])
	        {
	            case GANG_POS_LEADER: ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Gang Rank Menu", ""grey"Select a rank below:\nJunior Member\nMember\nSenior Member\nAdvisor", "Next", "Cancel");
	            case GANG_POS_CO_FOUNDER: ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Gang Rank Menu", ""grey"Select a rank below:\nJunior Member\nMember\nSenior Member\nAdvisor\nLeader", "Next", "Cancel");
	            case GANG_POS_FOUNDER: ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Gang Rank Menu", ""grey"Select a rank below:\nJunior Member\nMember\nSenior Member\nAdvisor\nLeader\nCo-Founder", "Next", "Cancel");
	        }
		}
	    case CLOSE_GANG_DIALOG:
	    {
	        ShowPlayerDialog(playerid, CLOSE_GANG_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" :: Close Gang", ""white"If you want to destroy your gang right click\non 'Close' else 'Cancel'", "Close", "Cancel");
	    }
	    case GANG_KICK_DIALOG:
	    {
	        ShowPlayerDialog(playerid, GANG_KICK_DIALOG, DIALOG_STYLE_INPUT, ""nef" :: Gang Kick Menu", ""white"Enter the "nef_yellow"exact "white"name the of the player you want to kick out of your gang:", "Kick", "Cancel");
	    }
	    case SETTINGS_DIALOG:
	    {
	    	ShowPlayerDialog(playerid, SETTINGS_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Settings", GetPlayerSettings(playerid), "Select", "Cancel");
	    }
	    case HELP_DIALOG:
	    {
	        new str[400];
	        strcat(str, "General Help\nCommands\nShortcuts\nMinigames\nMaps\nSettings\n");
	        strcat(str, "How do I earn money and score?\nWhat can I do on this server?\nHow do I get Gold Credits?\nHow do I get VIP?\n"grey"ServerIP: "SERVER_IP"");
	        ShowPlayerDialog(playerid, HELP_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Help", str, "OK", "");
	    }
	    case CMDS_DIALOG:
	    {
        	ShowPlayerDialog(playerid, CMDS_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Commands", "General\nAccount\nGang\nHouse/Business\nCustom cars\nOther\nVIP\nGold Credits", "Select", "Cancel");
		}
	    case HOUSE_UPGRADE_DIALOG:
	    {
	        new string[512];

			format(string, sizeof(string), "Barrack\nStandard\nAdvanced Standard\nRyders House\nBunker House\nUnderground\nNice Small Hotel Room\nCJs House");
			format(gstr, sizeof(gstr), "\nLuxury House\nStrip Club\nEntire Motel\nSmall Villa\nBig Villa\nMadd Doggs Mansion\nSweets House");
			strcat(string, gstr);

	        ShowPlayerDialog(playerid, HOUSE_UPGRADE_DIALOG, DIALOG_STYLE_LIST, ""nef" :: House Upgrade", string, "Select", "Cancel");
	    }
		case STREAM_DIALOG:
		{
			ShowPlayerDialog(playerid, STREAM_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Audio Streams", "Electro\nMetal\nPop\nHip Hop\nRap\nMainstream/Rock\nOldies\nDubstep\n"grey"Your own stream", "Select", "Stop stream");
		}
		case VEHICLE_PLATE_DIALOG:
  		{
			ShowPlayerDialog(playerid, VEHICLE_PLATE_DIALOG, DIALOG_STYLE_INPUT, ""nef" :: Custom car shop", ""white"Please enter something for your number plate:\nYou can change it later.\nLength: 2 - 12 characters", "Next", "Back");
  		}
		case NEON_DIALOG:
		{
			format(gstr, sizeof(gstr), ""nef" :: Custom car menu > Slot: %i > Neon Menu", PVVMenuSel[playerid] + 1);
		    ShowPlayerDialog(playerid, NEON_DIALOG, DIALOG_STYLE_LIST, gstr, "Red\nGreen\nBlue\nYellow\nWhite\nPink\n"grey"Remove", "Select", "Back");
		}
		case CUSTOM_PLATE_DIALOG:
		{
			format(gstr, sizeof(gstr), ""nef" :: Custom car menu > Slot: %i > Plate", PVVMenuSel[playerid] + 1);
		    ShowPlayerDialog(playerid, CUSTOM_PLATE_DIALOG, DIALOG_STYLE_INPUT, gstr, ""white"Please enter something for your number plate:\nLength: 2 - 12 characters", "Change", "Back");
		}
		case VEHICLE_DIALOG:
		{
			new string[512],
				finstring[1024];

			format(finstring, sizeof(finstring), ""yellow_e"VIP Vehicles\nAirplanes\nHelicopters\nBikes\nConvertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles\nSaloons\n");
			format(string, sizeof(string), "Sport Vehicles\nStation Wagons\nBoats\nTrailers\nUnique Vehicles\nRC Vehicles");
			strcat(finstring, string, sizeof(string));
			ShowPlayerDialog(playerid, VEHICLE_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Vehicle Menu", finstring, "Select", "Cancel");
		}
		case TELE_DIALOG:
		{
		    ShowPlayerDialog(playerid, TELE_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Teleports", "Stunt Zones\nJumps\nFun Maps\nChallenges/Parkours\nSpecials\nHotspots\nDrifts\nTune Shops\nCities", "Select", "Cancel");
		}
		case VMENU_DIALOG:
		{
		    new string[1024], tmp[128];
		    
		    for(new i = 0; i < MAX_PLAYER_PVS; i++)
		    {
		        if(i > PlayerData[playerid][e_addpvslots]) // Can not use
		        {
	            	format(tmp, sizeof(tmp), ""white"PV Slot %i "red"(Locked)\n", i + 1);
	            	strcat(string, tmp);
				}
		        else // Can use
				{
		            if(PlayerPVData[playerid][i][e_model] != 0)
		            {
		            	format(tmp, sizeof(tmp), ""white"PV Slot %i "green2"(Used) (Vehicle: %s)\n", i + 1, GetPVNameByModelId(PlayerPVData[playerid][i][e_model]));
		            	strcat(string, tmp);
					}
					else
					{
		            	format(tmp, sizeof(tmp), ""white"PV Slot %i\n", i + 1);
		            	strcat(string, tmp);
					}
				}
		    }
		    
			ShowPlayerDialog(playerid, VMENU_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Your custom cars", string, "Select", "Cancel");
		}
		case WEAPON_DIALOG:
		{
			ShowPlayerDialog(playerid, WEAPON_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Weapons", "Rifles\nSubmachine Guns\nShot Guns\nHand Guns\nMelee Weapons\nSpecial Weapons", "Select", "Cancel");
		}
		case CARBUY_DIALOG:
		{
  			ShowPlayerDialog(playerid, CARBUY_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Custom car shop", g_sCustomCarCategory, "Select", "Cancel");
		}
		case GMENU_DIALOG:
		{
		    format(gstr, sizeof(gstr), ""grey"[%s] %s "white"- Gang Menu", PlayerData[playerid][GangTag], PlayerData[playerid][GangName]);
		
		    switch(PlayerData[playerid][e_gangrank])
			{
			    case GANG_POS_JUNIOR_MEMBER, GANG_POS_MEMBER, GANG_POS_SENIOR_MEMBER, GANG_POS_ADVISOR:
			    {
			        ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, "Gang Info\nShow all gang members\nView all gang commands\nView gang zones", "Select", "Cancel");
			    }
			    case GANG_POS_LEADER:
			    {
			        ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, "Gang Info\nShow all gang members\nView All gang commands\nView gang zones\nSet Player Rank", "Select", "Cancel");
			    }
			    case GANG_POS_CO_FOUNDER, GANG_POS_FOUNDER:
			    {
			    	ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, "Gang Info\nShow all gang members\nView All gang commands\nView gang zones\nSet Player Rank\nKick Player From Gang", "Select", "Cancel");
			    }
			}
		}
		case BGVOTING_DIALOG:
		{
		    ShowPlayerDialog(playerid, BGVOTING_DIALOG, DIALOG_STYLE_LIST, ""nef" :: TDM Map Voting", "Forest\nQuarters\nRust\nItaly\nMedieval\nHangar War", "Vote", "");
		}
		case DERBY_VOTING_DIALOG:
		{
            ShowPlayerDialog(playerid, DERBY_VOTING_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Derby Map Voting", "SilverGround\nAnubis\nConfusing\nLighthouse\nTruncat\nSky Skiing\nTownhall\nGlazz\nRambo", "Vote", "");
		}
		case BANK_DIALOG:
		{
		    ShowPlayerDialog(playerid, BANK_DIALOG, DIALOG_STYLE_LIST, ""nef" :: Bank Menu", "Deposit\nWithdraw\nShow Credit", "Select", "Cancel");
		}
	}
	return 1;
}

function:server_random_broadcast()
{
	static const szRandomServerMessages[15][] =
	{
		""yellow_e"- Server - "LB2_E"Visit our site: "SVRURLWWW"",
		""yellow_e"- Server - "LB2_E"Join Minigames for money and score - /help",
		""yellow_e"- Server - "LB2_E"Access your player preferences: /settings",
		""yellow_e"- Server - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip",
		""yellow_e"- Server - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip",
		""yellow_e"- Server - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/gc/",
		""yellow_e"- Server - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/gc/",
		""yellow_e"- Server - "LB2_E"Join Minigames to earn money and score - /help",
		""yellow_e"- Server - "LB2_E"Got suggestions? Post them on our forums! ("SVRFORUM")",
		""yellow_e"- Server - "LB2_E"Use /report to report a player to the admins",
		""yellow_e"- Server - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/gc/",
		""yellow_e"- Server - "LB2_E"Add "SVRSC" to your favlist! samp."SVRURL":7777",
		""yellow_e"- Server - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip/",
		""yellow_e"- Server - "LB2_E"Get your own car at /vs which you can tune!",
		""yellow_e"- Server - "LB2_E"Get your own car at /vs which you can tune!"
	};
	
    SCMToAll(WHITE, szRandomServerMessages[random(sizeof(szRandomServerMessages))]);
	return 1;
}

function:InitSession(playerid)
{
	TXTMoney[playerid] = CreatePlayerTextDraw(playerid, 323.000000, 247.000000, "~g~~h~~h~+$100");
	PlayerTextDrawAlignment(playerid, TXTMoney[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TXTMoney[playerid], 255);
	PlayerTextDrawFont(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTMoney[playerid], 0.299999, 1.399999);
	PlayerTextDrawColor(playerid, TXTMoney[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTMoney[playerid], 0);

	TXTScore[playerid] = CreatePlayerTextDraw(playerid, 323.000000, 262.000000, "~y~~h~+1 Score");
	PlayerTextDrawAlignment(playerid, TXTScore[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TXTScore[playerid], 255);
	PlayerTextDrawFont(playerid, TXTScore[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTScore[playerid], 0.299999, 1.399999);
	PlayerTextDrawColor(playerid, TXTScore[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTScore[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTScore[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTScore[playerid], 0);

	TXTWantedsTD[playerid] = CreatePlayerTextDraw(playerid, -5.000000, 404.000000, "~y~[] ~w~0");
	PlayerTextDrawBackgroundColor(playerid, TXTWantedsTD[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTWantedsTD[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TXTWantedsTD[playerid], 0.300000, 1.299998);
	PlayerTextDrawColor(playerid, TXTWantedsTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTWantedsTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTWantedsTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTWantedsTD[playerid], 0);
	
	TXTInfoTD[playerid] = CreatePlayerTextDraw(playerid, 148.888, 361.385, "~b~~h~Welcome!");
 	PlayerTextDrawLetterSize(playerid, TXTInfoTD[playerid], 0.326, 1.654);
	PlayerTextDrawAlignment(playerid, TXTInfoTD[playerid], 1);
	PlayerTextDrawColor(playerid, TXTInfoTD[playerid], -18177);
	PlayerTextDrawSetOutline(playerid, TXTInfoTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TXTInfoTD[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, TXTInfoTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTInfoTD[playerid], 1);
	
	DynamicAchTD[playerid][0] = CreatePlayerTextDraw(playerid, 313.000000, 213.000000, "TITLE");
	PlayerTextDrawAlignment(playerid, DynamicAchTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, DynamicAchTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, DynamicAchTD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, DynamicAchTD[playerid][0], 0.519999, 1.700000);
	PlayerTextDrawColor(playerid, DynamicAchTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, DynamicAchTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, DynamicAchTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, DynamicAchTD[playerid][0], 0);

	DynamicAchTD[playerid][1] = CreatePlayerTextDraw(playerid, 313.000000, 235.000000, "INFO");
	PlayerTextDrawAlignment(playerid, DynamicAchTD[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, DynamicAchTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, DynamicAchTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, DynamicAchTD[playerid][1], 0.290000, 1.200000);
	PlayerTextDrawColor(playerid, DynamicAchTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, DynamicAchTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, DynamicAchTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, DynamicAchTD[playerid][1], 0);
	
	vTD[playerid] = CreatePlayerTextDraw(playerid, 555.110412, 320.119964, "_");
	PlayerTextDrawLetterSize(playerid, vTD[playerid], 0.561555, 3.038580);
	PlayerTextDrawAlignment(playerid, vTD[playerid], 2);
	PlayerTextDrawColor(playerid, vTD[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, vTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, vTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, vTD[playerid], 51);
	PlayerTextDrawFont(playerid, vTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, vTD[playerid], 1);

	TXTRaceInfo[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 344.000000, "Position: ~r~~h~~h~-/-~n~~w~Checkpoint: ~b~~h~~h~-/-~n~~w~Players: ~g~~h~~h~--/12~n~~w~Map: ~y~~h~--~n~~w~Timeleft: ~r~~h~~h~--:--");
	PlayerTextDrawBackgroundColor(playerid, TXTRaceInfo[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTRaceInfo[playerid], 0.270000, 1.099997);
	PlayerTextDrawColor(playerid, TXTRaceInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawUseBox(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TXTRaceInfo[playerid], 168430165);
	PlayerTextDrawTextSize(playerid, TXTRaceInfo[playerid], 640.000000, -7.000000);
	PlayerTextDrawSetSelectable(playerid, TXTRaceInfo[playerid], 0);

	TXTGunGameInfo[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 344.000000, "Players: ~b~~h~~h~--~n~~w~Level: ~r~~h~~h~--~n~~w~Weapon: ~g~~h~~h~--");
	PlayerTextDrawBackgroundColor(playerid, TXTGunGameInfo[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTGunGameInfo[playerid], 0.270000, 1.099997);
	PlayerTextDrawColor(playerid, TXTGunGameInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawUseBox(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TXTGunGameInfo[playerid], 168430165);
	PlayerTextDrawTextSize(playerid, TXTGunGameInfo[playerid], 640.000000, -7.000000);
	PlayerTextDrawSetSelectable(playerid, TXTGunGameInfo[playerid], 0);

	TXTSpeedo[playerid] = CreatePlayerTextDraw(playerid, 147.500000, 325.499938, "0");
	PlayerTextDrawLetterSize(playerid, TXTSpeedo[playerid], 0.569999, 3.338332);
	PlayerTextDrawTextSize(playerid, TXTSpeedo[playerid], 0.000000, 2.333331);
	PlayerTextDrawAlignment(playerid, TXTSpeedo[playerid], 1);
	PlayerTextDrawColor(playerid, TXTSpeedo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TXTSpeedo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TXTSpeedo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TXTSpeedo[playerid],0x73B1ED55);
	PlayerTextDrawFont(playerid, TXTSpeedo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TXTSpeedo[playerid], 1);

	PreloadAnimLib(playerid, "DANCING");
    PreloadAnimLib(playerid, "DANCING");

	// Gold Credits
	RemoveBuildingForPlayer(playerid, 5575, 1919.5234, -1400.8984, 16.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1978.1484, -1371.1484, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 1966.7109, -1360.0938, 17.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1971.8203, -1411.8750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 5390, 1919.5234, -1400.8984, 16.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 5415, 1916.9375, -1400.8906, 19.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5663, 1919.4453, -1400.8828, 19.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1958.8828, -1395.1953, 13.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1933.2422, -1376.1719, 13.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1978.1484, -1371.1484, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1858.1875, -1439.6875, 11.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5660, 1916.0547, -1426.2422, 16.0313, 0.25);
	// Gold Credits End
	return 1;
}

player_notice(playerid, const top[], const desc[], time = 3000, type = 3)
{
	format(gstr, sizeof(gstr), "~y~%s~n~~w~%s", top, desc);
    GameTextForPlayer(playerid, gstr, time, type);
	return 1;
}

KickEx(playerid, delay = 3200)
{
	PlayerData[playerid][bOpenSeason] = true;
	SetTimerEx("Kick_Delay", delay, false, "ii", playerid, YHash(__GetName(playerid)));
	
	Log(LOG_PLAYER, "%s (%i, %s, %s, %i) KickEx initiated.", __GetName(playerid), playerid, __GetIP(playerid), __GetSerial(playerid), delay);
	return 1;
}

function:Kick_Delay(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
		Kick(playerid);
	}
	return 1;
}

GetPlayerSettings(playerid)
{
	new string[1024];

	if(PlayerData[playerid][bSpeedBoost])
	{
	    format(gstr, sizeof(gstr), ""white"1)\tSpeedboost\t"vgreen"[ON]\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"1)\tSpeedboost\t"red"[OFF]\n");
	    strcat(string, gstr);
	}

	if(PlayerData[playerid][bSuperJump])
	{
	    format(gstr, sizeof(gstr), ""white"2)\tSuperjump\t"vgreen"[ON]\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"2)\tSuperjump\t"red"[OFF]\n");
	    strcat(string, gstr);
	}

	if(PlayerData[playerid][bTextdraws])
	{
	    format(gstr, sizeof(gstr), ""white"3)\tTextdraws\t"vgreen"[ON]\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"3)\tTextdraws\t"red"[OFF]\n");
	    strcat(string, gstr);
	}

    format(gstr, sizeof(gstr), ""white"4)\tColor\t\t{%06x}Color\n", GetColorEx(playerid) >>> 8);
    strcat(string, gstr);

	if(!PlayerData[playerid][bHasCustomSpawn])
	{
	    format(gstr, sizeof(gstr), ""white"5)\tSpawn Place\t"vgreen"Default Random\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"5)\tSpawn Place\t"vgreen"Custom\n");
	    strcat(string, gstr);
	}

	if(PlayerData[playerid][e_color] == 0)
	{
	    format(gstr, sizeof(gstr), ""white"6)\tSaved Color\tRandom\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"6)\tSaved Color\t{%06x}Saved Color\n", PlayerData[playerid][e_color] >>> 8);
	    strcat(string, gstr);
	}

	if(PlayerData[playerid][e_skinsave] == -1)
	{
	    format(gstr, sizeof(gstr), ""white"7)\tSaved Skin\tRandom\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"7)\tSaved Skin\tID: %i\n", PlayerData[playerid][e_skinsave]);
	    strcat(string, gstr);
	}

	if(PlayerData[playerid][bSpeedo])
	{
	    format(gstr, sizeof(gstr), ""white"8)\tSpeedometer\t"vgreen"[ON]\n");
	    strcat(string, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), ""white"8)\tSpeedometer\t"red"[OFF]\n");
	    strcat(string, gstr);
	}

    format(gstr, sizeof(gstr), ""grey"9)\tChange password\n");
    strcat(string, gstr);
    format(gstr, sizeof(gstr), ""grey"10)\tSet recovery Email\n");
    strcat(string, gstr);
    format(gstr, sizeof(gstr), ""grey"11)\tStats\n");
    strcat(string, gstr);
    format(gstr, sizeof(gstr), ""grey"12)\tHelp\n");
    strcat(string, gstr);
	return string;
}

UTConvert(unixtime)
{
	new u_year,
	    u_month,
	    u_day,
		u_hour,
		u_minute,
		u_second,
		u_date[50];

    TimestampToDate(unixtime, u_year, u_month, u_day, u_hour, u_minute, u_second, 1);

    format(u_date, sizeof(u_date), "%02i/%02i/%i %02i:%02i:%02i", u_day, u_month, u_year, u_hour, u_minute, u_second);
	return u_date;
}

number_format(num)
{
    new szStr[16];
    format(szStr, sizeof(szStr), "%i", num);

    for(new iLen = strlen(szStr) - (num < 0 ? 4 : 3); iLen > 0; iLen -= 3)
    {
        strins(szStr, ",", iLen);
    }
    return szStr;
}

GetPlayerKMH(playerid)
{
	new Float:Vx, Float:Vy, Float:Vz, Float:rtn;
  
  	GetVehicleVelocity(GetPlayerVehicleID(playerid), Vx, Vy, Vz);
  	rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz, 2)));
  	return floatround(rtn * 100 * 1.61);
}

function:ChangeColors(playerid)
{
	new vehid = GetPlayerVehicleID(playerid);

	if(PVSelect[playerid] != -1)
	{
	    if(vehid == PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]) return 1;
	}

	if(PlayerData[playerid][bRainbow] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		ChangeVehicleColor(vehid, randomColors[random(23)], randomColors[random(23)]);
	}
	else
	{
		KillTimer(PlayerData[playerid][tRainbow]);
		PlayerData[playerid][bRainbow] = false;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned off");
	}
	return true;
}

function:DestroyRampObject(objid, playerid)
{
	DestroyDynamicObject(objid);
	PlayerData[playerid][bRampActive] = false;
}

GetVehicleModelSeats(modelid)
{
    static const gVehicleSeats[] =
    {
        4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
        1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
        4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
        2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
        1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
        2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
        4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
        4, 0, 0
    };
    return (modelid < 400 || modelid > 611) ? 0 : gVehicleSeats[modelid - 400];
}

AddTeleport(teleport_category, const teleport_name[], const teleport_cmd[], Float:x, Float:y, Float:z, bool:create_label = true)
{
	if(create_label)
	{
	    format(gstr, sizeof(gstr), ""nef"\n%s (/%s)", teleport_name, teleport_cmd);
		CreateDynamic3DTextLabel(gstr, -1, x, y, z + 0.50, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1);
	}
	
	if(NC_AddTeleport(teleport_category, teleport_name, teleport_cmd, x, y, z) == 0)
	{
	    Log(LOG_FAIL, "NC_AddTeleport returned 0");
	    SendRconCommand("exit");
	}
    return 1;
}

GetTeleportDialogString(teleport_category)
{
    g_dialogTpString[0] = '\0';
	
    if(NC_GetTeleportDialogString(teleport_category, g_dialogTpString, sizeof(g_dialogTpString)) == 0)
	{
	    printf("NC_GetTeleportDialogString returned 0");
	    PrintAmxBacktrace();
	    strmid(g_dialogTpString, "INVALID", 0, sizeof(g_dialogTpString), sizeof(g_dialogTpString));
	}
}

PushTeleportInput(playerid, teleport_category, input)
{
    g_cmdString[0] = '\0';
	
	if(NC_ProcessTeleportRequest(teleport_category, input, g_cmdString, sizeof(g_cmdString)) == 0)
	{
	    printf("NC_ProcessTeleportRequest returned 0");
	    PrintAmxBacktrace();
		return 0;
	}
	
	Command_ReProcess(playerid, g_cmdString, false);
	return 1;
}

function:player_hide_vehicle_td(playerid)
{
	PlayerTextDrawHide(playerid, vTD[playerid]);
	PlayerData[playerid][bVehicleInfo] = false;
}

SetPlayerPosition(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
    SetPlayerPos(playerid, X, Y, Z);
	SetCameraBehindPlayer(playerid);
	SetPlayerFacingAngle(playerid, a);
	SetPlayerInterior(playerid, inter);
}

function:cnr_reset_robbery(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
		SetPVarInt(playerid, "HasRobbed", 0);
	}
}

function:JailPlayer(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
		SetPVarInt(playerid, "Robber", 1);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 10);
		SetPlayerWantedLevel(playerid, 0);
		SetPlayerFacingAngle(playerid, 360.0);
		SetPlayerPos(playerid, 197.5662, 175.4800, 1004.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ResetPlayerWeapons(playerid);
		PlayerPlaySound(playerid, 1186, 0, 0, 0);
		TextDrawShowForPlayer(playerid, JailTD);
		SetTimerEx("HideJailTextdraw", 4000, false, "ii", playerid, YHash(__GetName(playerid)));
	}
	return true;
}

function:StartRobbery(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
		if(GetPVarInt(playerid, "InStore") == 0)
		{
			KillTimer(PlayerData[playerid][tRobbery]);
			GameTextForPlayer(playerid, " ", 1000, 3);
			RemovePlayerAttachedObject(playerid, 4);
			SCM(playerid, COLOR_RED, "Server: "GREY_E"Robbery Failed.");
			PlayerData[playerid][iRobberyCount] = 0;
			return true;
		}

	  	if(--PlayerData[playerid][iRobberyCount] <= 0)
		{
			KillTimer(PlayerData[playerid][tRobbery]);
			RemovePlayerAttachedObject(playerid, 4);

			for(new i = 0; i < MAX_PLAYERS; i++)
	 		{
	 			if(GetPVarInt(i, "Cop") != 0)
				{
					PlayCrimeReportForPlayer(i, playerid, 18);
				}
			}
			switch(random(8))
			{
				case 0:
				{
					format(gstr, sizeof(gstr), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$13,000", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, gstr);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$13,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$13,000");
					GivePlayerMoneyEx(playerid, 13000, true, true);
				}
				case 1:
				{
					format(gstr, sizeof(gstr), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$10,000", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, gstr);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$10,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$10,000");
					GivePlayerMoneyEx(playerid, 10000, true, true);
				}
				case 2:
				{
					format(gstr, sizeof(gstr), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$5,000", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, gstr);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$5,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$5,000");
					GivePlayerMoneyEx(playerid, 5000, true, true);
				}
				case 3:
				{
					format(gstr, sizeof(gstr), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$8,000", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, gstr);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$8,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$8,000");
					GivePlayerMoneyEx(playerid, 8000, true, true);
				}
				case 4:
				{
					format(gstr, sizeof(gstr), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$3,000", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, gstr);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$3,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$3,000");
					GivePlayerMoneyEx(playerid, 3000, true, true);
				}
				case 5..7:
				{
					GameTextForPlayer(playerid, "~r~Robbery Failed", 4000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "RED_E"You have failed the robbery and got away with nothing, the cops have been notified.");
				}
			}
			return 1;
		}
		else
		{
			format(gstr, sizeof(gstr),"~w~~b~robbery in progress~n~~w~stay in the store~n~~r~%i ~w~seconds left.", PlayerData[playerid][iRobberyCount]);
			GameTextForPlayer(playerid, gstr, 2000, 3);
		}
	}
	else
	{
	    KillTimer(PlayerData[playerid][tRobbery]);
	    PlayerData[playerid][iRobberyCount] = 0;
	}
	return 1;
}
/*
GetStoreName(playerid)
{
	static store_names[11][] =
	{
	    "UNKNOWN_STORE",
		"24/7 in Roca Escalente",
		"24/7 in Strip",
		"Casino in Strip",
		"Ammunation in Come-A-Lot",
		"Bank in Roca Escalente",
		"Bank in Las Venturas",
		"4 Dragons Casino",
		"Royal Casino",
		"Ammunation in Strip",
		"Caligulas Casino"
	};

	if(GetPVarInt(playerid, "InStore") < 1 || GetPVarInt(playerid, "InStore") > 10)
		return store_names[0];
		
	return store_names[GetPVarInt(playerid, "InStore")];
}*/
GetStoreName(playerid)
{
	new store_name[40];
	switch(GetPVarInt(playerid, "InStore"))
	{
		case 1:
		{
			store_name = "24/7 in Roca Escalente";
		}
		case 2:
		{
			store_name = "24/7 in Strip";
		}
		case 3:
		{
			store_name = "Casino in Strip";
		}
		case 4:
		{
			store_name = "Ammunation in Come-A-Lot";
		}
		case 5:
		{
			store_name = "Bank in Roca Escalente";
		}
		case 6:
		{
			store_name = "Bank in Las Venturas";
		}
		case 7:
		{
			store_name = "4 Dragons Casino";
		}
		case 8:
		{
			store_name = "Royal Casino";
		}
		case 9:
		{
			store_name = "Ammunation in Strip";
		}
		case 10:
		{
			store_name = "Caligulas Casino";
		}
  	}
	return store_name;
}

function:CNR_RobberGateMoveBack(playerid)
{
	// Return gate back to Original pos.
	MoveObject(g_CNR_RobberGate[0], 1397.24, 2694.51, 9.91, 3);
	MoveObject(g_CNR_RobberGate[1], 1397.24, 2693.86, 9.91, 3);
	return 1;
}

function:HideJailTextdraw(playerid, namehash)
{
	if(namehash == YHash(__GetName(playerid)))
	{
    	TextDrawHideForPlayer(playerid, JailTD);
	}
	return 1;
}

function:Maths()
{
	if(mathsAnswered == 0)
	{
		format(gstr2, sizeof(gstr2), ""RED_E"[MATHS] "white"Previous question(%s) wasn't answered "GREEN_E"(right answer was %i)", mathsCurrent, mathsAnswer);
		SCMToAll(NEF_GREEN, gstr2);
	}
	
    new NR1 = random(100),
		NR2 = random(100),
		NR3 = random(100),
		OP1 = random(3),
		OP2 = random(3),
		FOP1[2],
		FOP2[2];

    mathsAnswer = 0;
    mathsAnswered = 0;
    mathsAward = 0;

    // 0 = -
    // 1 = +
    // 2 = *

	switch(OP1)
	{
		case 0:
        {
        	format(FOP1, sizeof(FOP1), "-");
        	mathsAward = mathsAward + 2500;
            switch(OP2)
            {
            	case 0:
                {
                	format(FOP2, sizeof(FOP2), "-");
                    mathsAnswer = NR1-NR2-NR3;
                    mathsAward = mathsAward + 2500;
             	}
                case 1:
                {
                	format(FOP2, sizeof(FOP2), "+");
                    mathsAnswer = NR1-NR2+NR3;
                    mathsAward = mathsAward + 2000;
                }
                case 2:
                {
                	format(FOP2, sizeof(FOP2), "*");
                	mathsAnswer = NR1-NR2*NR3;
                	mathsAward = mathsAward + 3500;
            	}
          	}
 		}
  		case 1:
    	{
     		format(FOP1, sizeof(FOP1), "+");
			mathsAward = mathsAward + 2000;
            switch(OP2)
			{
   				case 0:
                {
                	format(FOP2, sizeof(FOP2), "-");
                    mathsAnswer = NR1+NR2-NR3;
                    mathsAward = mathsAward + 2500;
                }
                case 1:
                {
                	format(FOP2, sizeof(FOP2), "+");
                    mathsAnswer = NR1+NR2+NR3;
                    mathsAward = mathsAward + 2000;
                }
                case 2:
                {
                	format(FOP2, sizeof(FOP2), "*");
                	mathsAnswer = NR1+NR2*NR3;
                	mathsAward = mathsAward + 3500;
           		}
			}
		}
		case 2:
		{
			format(FOP1, sizeof(FOP1), "*");
			mathsAward = mathsAward + 3500;
			switch(OP2)
			{
				case 0:
				{
					format(FOP2, sizeof(FOP2), "-");
					mathsAnswer = NR1*NR2-NR3;
					mathsAward = mathsAward + 2500;
				}
				case 1:
				{
					format(FOP2, sizeof(FOP2), "+");
					mathsAnswer = NR1*NR2+NR3;
					mathsAward = mathsAward + 2000;
				}
				case 2:
				{
					format(FOP2, sizeof(FOP2), "x");
					mathsAnswer = NR1*NR2*NR3;
					mathsAward = mathsAward + 3500;
				}
			}
		}
	}
	format(mathsCurrent, sizeof(mathsCurrent), "%i%s%i%s%i", NR1, FOP1, NR2, FOP2, NR3);
	format(gstr2, sizeof(gstr2), ""SVRSC" "RED_E"[MATHS] "white"Calculate %s and write /answer <answer> "YELLOW_E"(Score: 4 | Money: $%s)", mathsCurrent, number_format(mathsAward));
	SCMToAll(-1, gstr2);
	return 1;
}

CheckPlayerGod(playerid)
{
	TextDrawHideForPlayer(playerid, TXTGodTD);
	SetPlayerHealth(playerid, 100.0);
	PlayerData[playerid][bGod] = false;
}

function:hideCheck(playerid)
{
    TextDrawHideForPlayer(playerid, CheckTD);
	return 1;
}

function:hideMsgTD(playerid)
{
    TextDrawHideForPlayer(playerid, NewMsgTD);
	return 1;
}

GivePlayerAchievement(playerid, E_PLAYER_ACH_DATA:achivement, achname[], description[])
{
    if(playerid == INVALID_PLAYER_ID) return 0;
	if(GetPVarInt(playerid, "AchShowing") == 1) return 1;

	if(islogged(playerid))
	{
		mysql_format(pSQL, gstr, sizeof(gstr), "INSERT INTO `achievements` VALUES (%i, %i, UNIX_TIMESTAMP());", PlayerData[playerid][e_accountid], _:achivement);
		mysql_pquery(pSQL, gstr);
	}
	
	PlayerAchData[playerid][achivement][0] = 1;
	PlayerAchData[playerid][achivement][1] = gettime();

	GivePlayerMoneyEx(playerid, 30000, true, true);
    PlayerData[playerid][e_score] += 10;
	SetPlayerScore(playerid, PlayerData[playerid][e_score]);

	format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "GREEN_E"has unlocked the achievement '%s'!", GetColorEx(playerid) >>> 8, __GetName(playerid), playerid, achname);
	SCMToAll(-1, gstr);

	ShowPlayerAchievement(playerid, achname, description);
	return 1;
}

ShowPlayerAchievement(playerid, title[], infos[])
{
	TextDrawShowForPlayer(playerid, AchTD[0]);
	TextDrawShowForPlayer(playerid, AchTD[1]);
	TextDrawShowForPlayer(playerid, AchTD[2]);
	TextDrawShowForPlayer(playerid, AchTD[3]);
	TextDrawShowForPlayer(playerid, AchTD[4]);
	TextDrawShowForPlayer(playerid, AchTD[5]);
	PlayerTextDrawSetString(playerid, DynamicAchTD[playerid][0], title);
	PlayerTextDrawSetString(playerid, DynamicAchTD[playerid][1], infos);
	PlayerTextDrawShow(playerid, DynamicAchTD[playerid][0]);
	PlayerTextDrawShow(playerid, DynamicAchTD[playerid][1]);
	PlayerPlaySound(playerid, 1183, 0, 0, 0);
	SetPVarInt(playerid, "AchShowing", 1);
	SetTimerEx("HideAch", 12000, false, "i", playerid);
	return 1;
}

function:HideAch(playerid)
{
	DeletePVar(playerid, "AchShowing");
    PlayerPlaySound(playerid, 1184, 0, 0, 0);
    TextDrawHideForPlayer(playerid, AchTD[0]);
	TextDrawHideForPlayer(playerid, AchTD[1]);
	TextDrawHideForPlayer(playerid, AchTD[2]);
	TextDrawHideForPlayer(playerid, AchTD[3]);
	TextDrawHideForPlayer(playerid, AchTD[4]);
	TextDrawHideForPlayer(playerid, AchTD[5]);
	PlayerTextDrawHide(playerid, DynamicAchTD[playerid][0]);
	PlayerTextDrawHide(playerid, DynamicAchTD[playerid][1]);
	return 1;
}

function:InfoTD_MSG(playerid, ms_time, text[])
{
	if(GetPVarInt(playerid, "InfoTDshown") != -1)
	{
	    PlayerTextDrawHide(playerid, TXTInfoTD[playerid]);
	    KillTimer(GetPVarInt(playerid, "InfoTDshown"));
	}

    PlayerTextDrawSetString(playerid, TXTInfoTD[playerid], text);
    PlayerTextDrawShow(playerid, TXTInfoTD[playerid]);
	SetPVarInt(playerid, "InfoTDshown", SetTimerEx("InfoTD_Hide", ms_time, false, "i", playerid));
}

function:InfoTD_Hide(playerid)
{
	SetPVarInt(playerid, "InfoTDshown", -1);
	PlayerTextDrawHide(playerid, TXTInfoTD[playerid]);
}

function:DoLotto()
{
	Iter_Clear(iterLottoNumberPool);
	g_LottoNumber = random(75) + 1;
	g_LottoJackpot = 200000 + random(100000);
	bLottoActive = true;

	format(gstr, sizeof(gstr), "~g~~h~~<~ Lottery Information ~>~~n~~w~Buy a lotto in any 24/7 shop (/247) inside use /lotto <1-75>~n~~r~~h~Jackpot: $%s - Draw starts in 5 minutes!", number_format(g_LottoJackpot));

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
		InfoTD_MSG(i, 15000, gstr);
	}
	
	SetTimer("LottoDraw", 300000, false);
	return 1;
}

function:LottoDraw()
{
    bLottoActive = false;

	format(gstr2, sizeof(gstr2), "~g~~h~~<~ Lottery Information ~>~~n~~w~Numbers have been drawn. Current jackpot is: $%s - Drawn number: %i~n~~b~~h~~h~", number_format(g_LottoJackpot), g_LottoNumber);
	
	new bool:found = false;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerData[i][DrawnNumber] == g_LottoNumber)
	    {
			format(gstr, sizeof(gstr), "We have a winner! %s(%i) has lotto %i and won the jackpot!", __GetName(i), i, g_LottoNumber, number_format(g_LottoJackpot));
	        strcat(gstr2, gstr);
	        GivePlayerMoneyEx(i, g_LottoJackpot, true, true);
	        PlayerPlaySound(i, 5448, 0, 0, 0);
	        player_notice(i, "~g~~h~~h~You won the lotto jackpot!", "", 4000);
	        found = true;
	        break;
	    }
	}
	
	if(!found) strcat(gstr2, "No winner this round!");
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
		InfoTD_MSG(i, 15000, gstr2);
	}
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        PlayerData[i][DrawnNumber] = -1;
	}

	SetTimer("DoLotto", 1200000, false);
	return 1;
}

IsComponentIdCompatible(modelid, componentid)
{
	if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
	     componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
	     componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
	     componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
	     return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}

GetPVNameByModelId(modelid)
{
	new bool:found = false,
		modelname[32];

	for(new i = 0; i < sizeof(g_aPVMatrix); i++)
	{
	    if(g_aPVMatrix[i][pv_modelid] == modelid)
	    {
	        found = true;
	        strmid(modelname, g_aPVMatrix[i][pv_modelname], 0, 32, 32);
	        break;
	    }
	}
	if(!found) modelname = "INVALID_MODEL_ID";
	return modelname;
}

GetPVPriceByModelId(modelid)
{
	for(new i = 0; i < sizeof(g_aPVMatrix); i++)
	{
	    if(g_aPVMatrix[i][pv_modelid] == modelid)
	    {
	        new pr = g_aPVMatrix[i][pv_price];
	        return pr;
	    }
	}
	return -1;
}

function:AlterPlayerCredits(playerid, amount)
{
	format(gstr, sizeof(gstr), "INSERT INTO `creditslog` VALUES (NULL, '%s', %i, %i);", __GetName(playerid), amount, gettime());
	mysql_tquery(pSQL, gstr);
	
	PlayerData[playerid][e_credits] += amount;
	format(gstr, sizeof(gstr), "UPDATE `accounts` SET `credits` = %i WHERE `name` = '%s' LIMIT 1;", PlayerData[playerid][e_credits], __GetName(playerid));
	mysql_tquery(pSQL, gstr);
	
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return 1;
}

IsAd(const text[])
{
	new is1 = 0,
		r = 0;

 	while(strlen(text[is1]))
 	{
  		if('0' <= text[is1] <= '9')
  		{
 			new is2 = is1 + 1,
			 	p = 0;

			while(p == 0)
  			{
   				if('0' <= text[is2] <= '9' && strlen(text[is2]))
		   		{
			  		is2++;
				}
 				else
  				{
				   	strmid(gstr2[r], text, is1, is2, sizeof(gstr2));
				   	if(strval(gstr2[r]) < sizeof(gstr2)) r++;
				    is1 = is2;
				    p = 1;
				}
			}
		}
 		is1++;
 	}
	if(r >= 4 && r <= 8) return true;
	return false;
}

function:OnNCReceive(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
	    new tmp[128], string[1024], oldname[25], newname[25];
	    strcat(string, ""white"Displaying last 10 Name Change Records:\n\n");
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 1, oldname, pSQL, sizeof(oldname));
	        cache_get_row(i, 2, newname, pSQL, sizeof(newname));
	        format(tmp, sizeof(tmp), "%i - %s changed their name to %s on %s\n", i + 1, oldname, newname, UTConvert(cache_get_row_int(i, 3, pSQL)));
	        strcat(string, tmp);
	    }

		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Namechange Records", string, "OK", "");
	}
	return 1;
}

function:OnNCReceive2(playerid, name[])
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
	    new tmp[128], string[1024], oldname[25], newname[25];
	    format(tmp, sizeof(tmp), ""white"%i Name Change Records for %s\n\n", rows, name);
	    strcat(string, tmp);
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 1, oldname, pSQL, sizeof(oldname));
	        cache_get_row(i, 2, newname, pSQL, sizeof(newname));
	        format(tmp, sizeof(tmp), "%i - %s changed their name to %s on %s\n", i + 1, oldname, newname, UTConvert(cache_get_row_int(i, 3, pSQL)));
	        strcat(string, tmp);
	    }

		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Namechange Records", string, "OK", "");
	}
	else SCM(playerid, -1, ""er"No records found for that player");
	return 1;
}

GetNearestHouse(playerid)
{
	new Float:fPOS[3];
	GetPlayerPos(playerid, fPOS[0], fPOS[1], fPOS[2]);

	for(new i = 0; i < houseid; i++)
	{
	    if(GetDistance3D(fPOS[0], fPOS[1], fPOS[2], HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z]) > 2.0) continue;
	    //if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z])) continue;

	    return i;
	}
	return -1;
}

GetHouseIdByPlayerSlotSel(playerid)
{
	new idx = 0;
	for(new i = 0; i < houseid; i++)
	{
        if(!strcmp(HouseData[i][Owner], __GetName(playerid), true) && HouseData[i][sold] == 1)
        {
            if(idx == PlayerData[playerid][HouseSlotSelected])
            {
            	return i;
			}
			else idx++;
		}
	}
	return -1;
}

GetBusinessSlotBySelection(playerid)
{
	new idx = 0;
	for(new r = 0; r < MAX_BUSINESSES; r++)
	{
        if(!strcmp(BusinessData[r][e_owner], __GetName(playerid), true) && BusinessData[r][e_sold] == 1)
        {
            if(idx == PlayerData[playerid][BusinessIdSelected])
            {
            	return r;
			}
			else idx++;
		}
	}
	return -1;
}

ExitPlayer(playerid)
{
    if(PlayerData[playerid][bGWarMode])
    {
        ResetPlayerGWarMode(playerid);
        return 0;
    }
    
	switch(gTeam[playerid])
	{
	    case gDUEL:
	    {
	        return 2;
	    }
	    case gBUILDRACE:
	    {
		    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
			if(fexist(gstr))
			{
				fremove(gstr);
			}
			RemoveFromRaceBuilder(playerid);
			return 0;
	    }
	    case CNR:
	    {
	        gTeam[playerid] = gFREEROAM;

			SetPVarInt(playerid, "Robber", 0);
			SetPVarInt(playerid, "Cop", 0);

			SetPlayerColor(playerid, GetPVarInt(playerid, "oldColor"));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "dSkin"));

            Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
            Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
            Streamer_Update(playerid);
            
		    HidePlayerCNRTextdraws(playerid);
		    SetPlayerWantedLevel(playerid, 0);
		    ResetPlayerWorld(playerid);
		    RandomSpawn(playerid, true);
		    RandomWeapons(playerid);
		    
		    SetPlayerTeam(playerid, NO_TEAM);
		    
		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerData[playerid][tickJoin_bmx] = 0;
	        return 0;
	    }
		case VIPL:
		{
 		    SetPlayerPos(playerid, -2623.6348, 1407.9154, 7.1016);
		    ResetPlayerWorld(playerid);
		    gTeam[playerid] = gFREEROAM;
		    PlayerPlaySound(playerid, 1069, 0, 0, 0);

		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerData[playerid][tickJoin_bmx] = 0;
		    return 0;
		}
	    case SPEC:
	    {
	        Command_ReProcess(playerid, "/specoff", false);
	        return 0;
	    }
	    case gFREEROAM:
	    {
	        SCM(playerid, -1, ""er"You can't use this command now!");
	        return 0;
	    }
	    case BUYCAR:
	    {
		    for(new i = 0; i < CAR_SHOPS; i++)
		    {
		        if(gLastMap[playerid] == g_CustomCarShops[i][e_pickup])
		        {
					SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid, g_CarShopLocations[i][0] - 2.0, g_CarShopLocations[i][1] - 2.0, g_CarShopLocations[i][2] + 0.5);
				    RandomWeapons(playerid);
					gTeam[playerid] = gFREEROAM;
					gLastMap[playerid] = 0;
		        }
		    }

			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
	    }
	    case STORE:
	    {
	        SCM(playerid, -1, ""er"Leave the store by entering the pickup");
	        return 0;
	    }
	    case MINIGUN, SNIPER, ROCKETDM, MINIGUN2:
	    {
			gTeam[playerid] = gFREEROAM;
			
			ShowPlayerInfoTextdraws(playerid);
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid, true);
			RandomWeapons(playerid);
			
			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
	    }
		case HOUSE:
		{
		    new bool:found = false;
			for(new i = 0; i < houseid; i++)
			{
		    	if(GetPlayerInterior(playerid) == g_aHouseInteriorTypes[HouseData[i][interior]][interior] && GetPlayerVirtualWorld(playerid) == (HouseData[i][e_id] + 1000))
				{
				    found = true;
				    
				    LoadMap(playerid);
			    	SetPlayerPos(playerid, HouseData[i][e_x], HouseData[i][e_y], HouseData[i][e_z]);
			    	SetPlayerInterior(playerid, 0);
			    	SetPlayerVirtualWorld(playerid, 0);
			    	CancelEdit(playerid);
			    	
			    	gTeam[playerid] = gFREEROAM;
			    	break;
		    	}
		    	else continue;
			}
			if(!found)
			{
				return SCM(playerid, -1, ""er"Go to the house door to exit!");
			}
			return 0;
		}
		case gBG_VOTING:
		{
			gTeam[playerid] = gFREEROAM;
		
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, szPlayerColors[random(sizeof(szPlayerColors))]);
		    SetPlayerTeam(playerid, NO_TEAM);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			RandomWeapons(playerid);
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid, true);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gBG_TEAM1:
		{
		    BGTeam1Players--;
		    gTeam[playerid] = gFREEROAM;
		
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, szPlayerColors[random(sizeof(szPlayerColors))]);
			SetPlayerTeam(playerid, NO_TEAM);
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid, true);
			RandomWeapons(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gBG_TEAM2:
		{
		    BGTeam2Players--;
		    gTeam[playerid] = gFREEROAM;
		
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, szPlayerColors[random(sizeof(szPlayerColors))]);
		    SetPlayerTeam(playerid, NO_TEAM);
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid, true);
			RandomWeapons(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case DM, WAR, gSAWN:
		{
			gTeam[playerid] = gFREEROAM;
			
			ResetPlayerWorld(playerid);
			RandomWeapons(playerid);
			RandomSpawn(playerid, true);
			HidePlayerDMTextdraws(playerid);

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gRACE:
		{
     		--g_RacePlayerCount;

	    	format(gstr, sizeof(gstr), "%s(%i) left the race!", __GetName(playerid), playerid);
			race_broadcast(gstr);

			gTeam[playerid] = gFREEROAM;

			if(g_RaceVehicle[playerid] != -1)
			{
				DestroyVehicleEx(g_RaceVehicle[playerid]);
				g_RaceVehicle[playerid] = -1;
			}

		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(playerid);

			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			ResetPlayerWorld(playerid);
			RandomSpawn(playerid, true);
			RandomWeapons(playerid);
            ToggleSpeedo(playerid, false);

			g_CPProgress[playerid] = 0;

			HidePlayerRaceTextdraws(playerid);
            DisablePlayerRaceCheckpoint(playerid);
			
		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerData[playerid][tickJoin_bmx] = 0;
		    return 0;
		}
		case DERBY:
		{
		    //exit
		    HidePlayerDerbyTextdraws(playerid);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerHealth(playerid, 100.0);
		    SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			RandomSpawn(playerid, true);
			RandomWeapons(playerid);
			
		    gTeam[playerid] = gFREEROAM;
		    
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_Update(playerid);
            
		    if(PlayerData[playerid][t3dDerbyVehicleLabel] != PlayerText3D:-1)
		    {
		    	DeletePlayer3DTextLabel(playerid, PlayerData[playerid][t3dDerbyVehicleLabel]);
		    	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
		    }

		    if(PlayerData[playerid][bDerbyAFK])
			{
		        return 0;
		    }

		    CurrentDerbyPlayers--;

			if(!IsDerbyRunning)
			{
				if(CurrentDerbyPlayers < 2)
				{
				    ClearDerbyVotes();
					ExecDerbyVotingTimer();
				}
			}
			else if(IsDerbyRunning && PlayerData[playerid][bDerbyWinner])
			{
			    if(PlayerData[playerid][pDerbyVehicle] != INVALID_VEHICLE_ID)
			    {
			    	DestroyVehicleEx(PlayerData[playerid][pDerbyVehicle]);
			    	PlayerData[playerid][pDerbyVehicle] = INVALID_VEHICLE_ID;
				}
				DerbyPlayers--;
				PlayerData[playerid][bDerbyWinner] = false;
				if(DerbyPlayers == 1) Derby();
			}

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case FALLOUT:
		{
			gTeam[playerid] = gFREEROAM;
		    CurrentFalloutPlayers--;
            PlayerData[playerid][bFalloutLost] = true;
			
		    TogglePlayerControllable(playerid, true);
			ResetPlayerWorld(playerid);
		    RandomSpawn(playerid, true);
		    RandomWeapons(playerid);
		    HidePlayerFalloutTextdraws(playerid);

			if(fallout_get_playercount() < 2)
			{
			    KillTimer(FalloutData[I_tCountdown]);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(gTeam[i] == FALLOUT)
				    {
				    	TogglePlayerControllable(i, true);
						ResetPlayerWorld(i);
					    RandomSpawn(i, true);
					    RandomWeapons(i);
					    HidePlayerFalloutTextdraws(i);
					    fallout_broadcast("Fallout has been canceled!");
                        gTeam[i] = gFREEROAM;
					}
				}
				fallout_cancel();
			}

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerData[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case GUNGAME:
		{
  			gTeam[playerid] = gFREEROAM;

			ResetPlayerWorld(playerid);
	    	RandomSpawn(playerid, true);
			SetCameraBehindPlayer(playerid);
	    	RandomWeapons(playerid);
	    	HidePlayerGunGameTextdraws(playerid);

	    	if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
	    	SetPVarInt(playerid, "doingStunt", 0);
	    	PlayerData[playerid][tickJoin_bmx] = 0;
	    	return 0;
		}
		default: return 1;
	}
	return 3;
}

LoadMap(playerid)
{
    TogglePlayerControllable(playerid, 0);
	Streamer_Update(playerid);
	PlayerData[playerid][bLoadMap] = true;
	TextDrawShowForPlayer(playerid, TXTLoading);
	
	new ping = GetPlayerPing(playerid);
	if(ping < 65)
	{
		PlayerData[playerid][tLoadMap] = SetTimerEx("player_free", 1550, false, "i", playerid);
	}
	else if(ping < 110)
	{
	    PlayerData[playerid][tLoadMap] = SetTimerEx("player_free", 2050, false, "i", playerid);
	}
	else if(ping < 200)
	{
	    PlayerData[playerid][tLoadMap] = SetTimerEx("player_free", 3050, false, "i", playerid);
	}
	else
	{
		PlayerData[playerid][tLoadMap] = SetTimerEx("player_free", 3550, false, "i", playerid);
	}
}

function:player_free(playerid)
{
	if(PlayerData[playerid][bLoadMap])
	{
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid, TXTLoading);
		PlayerData[playerid][tLoadMap] = -1;
		PlayerData[playerid][bLoadMap] = false;
	}
	return 1;
}

IsNeonBikeModel(modelid)
{
	switch(modelid)
	{
	    case 581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 468, 586: return 1;
	}
	return 0;
}

GetItem(index)
{
	new string[2048], tmp[300];
	format(string, sizeof(string), ""green"* "white"Item: %s\n"green"* "white"Gold Credits: "white"%sGC\n"green"* "white"Quantity: "white"%i\n"green"* "white"Duration: "white"%s\n",
		g_aCreditsProductMatrix[index][E_item_name],
		number_format(g_aCreditsProductMatrix[index][E_item_credits]),
        g_aCreditsProductMatrix[index][E_item_quantity],
        g_aCreditsProductMatrix[index][E_item_duration]);
	
	format(tmp, sizeof(tmp), ""green"* "white"Item Description:\n%s",
		g_aCreditsProductMatrix[index][E_item_description]);
	strcat(string, tmp);
	return string;
}

GetCredits(playerid)
{
	new c = PlayerData[playerid][e_credits];
	return c;
}

function:OnGangRenameAttempt(playerid, newgangname[], newgangtag[], namehash)
{
	if(namehash != YHash(__GetName(playerid)))
	    return 0;

	if(cache_get_row_count() > 0)
	{
		SCM(playerid, -1, ""er"This gang name is already in use");
	}
	else
	{
	    for(new r = 0; r < MAX_GZONES; r++)
	    {
	 	    if(GZoneData[r][e_ormid] == ORM:-1)
		        continue;
	        
	        if(GZoneData[r][e_localgang] == PlayerData[playerid][e_gangid])
	        {
	            new tmp[144];
	            gstr[0] = '\0';
	            tmp[0] = '\0';

	            GetDynamic3DTextLabelText(GZoneData[r][e_labelid], gstr, sizeof(gstr));

				NC_StringReplace(gstr, PlayerData[playerid][GangName], newgangname, tmp, sizeof(tmp));

				UpdateDynamic3DTextLabelText(GZoneData[r][e_labelid], WHITE, tmp);
	        }
	    }

	    format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", newgangname);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(PlayerData[i][e_gangid] == PlayerData[playerid][e_gangid] || PlayerData[i][TmpGangID] == PlayerData[playerid][e_gangid])
	        {
	            strmid(PlayerData[i][GangName], newgangname, 0, 21, 21);
	            strmid(PlayerData[i][GangTag], newgangtag, 0, 5, 5);
	            
	            UpdateDynamic3DTextLabelText(PlayerData[i][GangLabel], WHITE, gstr);
	        }
	    }
	    
	    mysql_format(pSQL, gstr2, sizeof(gstr2), "UPDATE `gangs` SET `gname` = '%s', `gtag` = '%s' WHERE `id` = %i LIMIT 1;", newgangname, newgangtag, PlayerData[playerid][e_gangid]);
	    mysql_pquery(pSQL, gstr2);
	    
	    format(gstr2, sizeof(gstr2), ""gang_sign" "r_besch"Gang Founder %s(%i) changed the gang's name to [%s]%s", __GetName(playerid), playerid, newgangtag, newgangname);
		gang_broadcast(PlayerData[playerid][e_gangid], gstr2);
		
		GivePlayerMoneyEx(playerid, -100000);
	}
	return 1;
}

function:OnBoostReceive(playerid, namehash)
{
    if(!IsPlayerConnected(playerid))
		return 0;
		
	if(YHash(__GetName(playerid)) != namehash)
		return 0;

	new rows, fields;
	cache_get_data(rows, fields, pSQL);
	
	if(rows > 0)
	{
	    for(new i = 0; i < rows; i++)
	    {
	        new bool:set = true;
	        
			switch(cache_get_row_int(i, 1, pSQL))
			{
			    case 2: PlayerData[playerid][Boost] |= BOOST_MONEY_x2;
			    case 3: PlayerData[playerid][Boost] |= BOOST_MONEY_x3;
			    case 4: PlayerData[playerid][Boost] |= BOOST_SCORE_x2;
			    case 5: PlayerData[playerid][Boost] |= BOOST_SCORE_x3;
			    case 6: PlayerData[playerid][Boost] |= BOOST_MASTER;
			    default: set = false;
			}
			
			if(set)
			{
				PlayerData[playerid][BoostDeplete] = cache_get_row_int(i, 2, pSQL);
				
				format(gstr, sizeof(gstr), ""server_sign" "r_besch"Boost has been loaded! Runs out on: %s", UTConvert(PlayerData[playerid][BoostDeplete]));
				SCM(playerid, -1, gstr);
			}
	    }
	}
	return 1;
}

function:player_medkit_charge(playerid)
{
	if(PlayerData[playerid][iMedkitTime] > 0)
	{
	    if(!IsPlayerConnected(playerid))
	    {
			KillTimer(PlayerData[playerid][tMedkit]);
			PlayerData[playerid][tMedkit] = -1;
			return 1;
	    }
	
		new Float:health;
		GetPlayerHealth(playerid, health);

		if(health + 1.0 >= 100.0)
		{
			KillTimer(PlayerData[playerid][tMedkit]);
			PlayerData[playerid][tMedkit] = -1;
			InfoTD_MSG(playerid, 1500, "~g~~h~~h~Max. Health reached!");
			return 1;
		}

		SetPlayerHealth(playerid, health + 1.0);
		SetPlayerChatBubble(playerid, ""green"Used 1 Medkit!", -1, 15.0, 200);
		
		PlayerData[playerid][iMedkitTime]--;
	}
	else
	{
	    KillTimer(PlayerData[playerid][tMedkit]);
	    PlayerData[playerid][tMedkit] = -1;
	    InfoTD_MSG(playerid, 1500, "~g~~h~~h~Medkit depleted!");
	}
	return 1;
}

GetPlayerBusinessEarnings(playerid)
{
	new __int32 = 0;
	for(new r = 0; r < MAX_BUSINESSES; r++)
	{
	    if(strcmp(BusinessData[r][e_owner], __GetName(playerid), true)) continue;
	    
	    __int32 += GetBusinessEarnings(r);
	}
	return __int32;
}

GetBusinessEarnings(r)
{
	new __int32 = 0;
	for(new i = 0; i < sizeof(g_aBusinessLevelMatrix); i++)
	{
		if(i == (BusinessData[r][e_level] - 1))
		{
		    __int32 = g_aBusinessLevelMatrix[i][E_bearnings];
		    return __int32;
		}
	}
	return 0;
}

GetPlayerBusinessCount(const name[])
{
	mysql_format(pSQL, gstr, sizeof(gstr), "SELECT COUNT(`id`) FROM `businesses` WHERE `owner` = '%e';", name);
	
	new Cache:cache = mysql_query(pSQL, gstr);
	new count = cache_get_row_int(0, 0);
	cache_delete(cache);
	
	return count;
}

GetCNRCops()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Cop"))
		{
		    count++;
		}
	}
	return count;
}

GetCNRRobbers()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Robber"))
		{
		    count++;
		}
	}
	return count;
}

LoadPos(playerid)
{
	SetPlayerPos(playerid, PlayerData[playerid][fOldPos][0], PlayerData[playerid][fOldPos][1], PlayerData[playerid][fOldPos][2] + 1.5);
	SetPlayerFacingAngle(playerid, PlayerData[playerid][fOldPos][3]);
	SetCameraBehindPlayer(playerid);
}

SavePos(playerid)
{
	GetPlayerPos(playerid, PlayerData[playerid][fOldPos][0], PlayerData[playerid][fOldPos][1], PlayerData[playerid][fOldPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][fOldPos][3]);
}

islogged(playerid)
{
	if(playerid == INVALID_PLAYER_ID) return 0;
	if(PlayerData[playerid][ExitType] == EXIT_FIRST_SPAWNED && PlayerData[playerid][bLogged])
	{
	    return 1;
	}
	return 0;
}

function:RandomTXTInfo()
{
	static const szRandomTdMessages[14][] =
	{
		"~w~Need a ~b~~h~vehicle~w~? Spawn one using ~r~~h~/v~w~!",
		"~w~Don't wanna get killed? Type ~g~~h~~h~/god",
		"~w~Want access to ~y~bonus commands~w~? Check out ~r~~h~/premium~w~!",
		"~w~Edit your server preferences and features using ~r~~h~/settings~w~!",
		"~w~Flip your vehicle with the key ~g~~h~~h~'2'",
		"~w~Join our ~r~~h~forums~w~! Register at ~b~~h~~h~"SVRURLWWW"~w~!",
		"~w~Get some ~y~Gold Credits ~w~at "SVRURLWWW"/gc/",
		"~w~Try our ~y~Cops and Robbers ~w~Minigame! ~y~/cnr",
		"~w~Type ~g~~h~~h~/c ~b~~h~~h~/t~w~ for ~y~commands ~w~and ~y~teleports!",
		"~w~Go to ~g~~h~~h~/vs ~w~and get your own car which you can tune!",
		"~w~Join minigames to earn money and score! ~g~~h~~h~/m",
		"~w~Spawn vehicles using ~r~~h~/v ~w~or ~r~~h~/car",
		"~w~Edit your server preferences and features using ~r~/settings~w~!",
		"~w~Challenge your friends in ~r~~h~~h~/duel"
	};

	TextDrawSetString(TXTRandomInfo, szRandomTdMessages[random(sizeof(szRandomTdMessages))]);
	return 1;
}

function:OnUnbanAttempt(playerid, unban[])
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
	    format(gstr, sizeof(gstr), "DELETE FROM `bans` WHERE `playername` = '%s' LIMIT 1;", unban);
	    mysql_pquery(pSQL, gstr);
	    
	    format(gstr, sizeof(gstr), "SELECT `ip` FROM `accounts` WHERE `name` = '%s';", unban);
	    mysql_pquery(pSQL, gstr, "OnUnbanAttempt2");

	    SCM(playerid, -1, ""er"Player has been unbanned!");
	}
	else
	{
	    SCM(playerid, -1, ""er"Player is not banned or does not exist");
	}
	return 1;
}

function:OnUnbanAttempt2()
{
	if(cache_get_row_count() > 0)
	{
	    new ip[MAX_PLAYER_IP + 1];
	    cache_get_row(0, 0, ip, pSQL, sizeof(ip));
	    
	    format(gstr, sizeof(gstr), "DELETE FROM `blacklist` WHERE `ip` = '%s';", ip);
	    mysql_pquery(pSQL, gstr);
	}
	return 1;
}

function:OnOfflineBanAttempt(playerid, ban[], reason[])
{
	if(cache_get_row_count() > 0)
	{
		new buffer[30];
		cache_get_row(0, 0, buffer, pSQL, sizeof(buffer));
		
		format(gstr, sizeof(gstr), ""er"%s has already been banned by %s", ban, buffer);
	    SCM(playerid, -1, gstr);
	}
	else
	{
	    mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `level`, `ip` FROM `accounts` WHERE `name` = '%e' LIMIT 1;", ban);
	    mysql_pquery(pSQL, gstr, "OnOfflineBanAttempt2", "iss", playerid, ban, reason);
	}
	return 1;
}

function:OnOfflineBanAttempt2(playerid, ban[], reason[])
{
    if(cache_get_row_count() > 0)
	{
	    if(cache_get_row_int(0, 0, pSQL) != 0 && PlayerData[playerid][e_level] != MAX_ADMIN_LEVEL)
	    {
	        return SCM(playerid, -1, ""er"You may not ban admins");
	    }

	    new ip[16];
		cache_get_row(0, 1, ip, pSQL, sizeof(ip));
		
		mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `id` FROM `blacklist` WHERE `ip` = '%e';", ip);
		new Cache:cache = mysql_query(pSQL, gstr);
		
		if(cache_get_row_count() == 0)
		    SQL_BanIP(ip);
		
		cache_delete(cache);

		SQL_BanAccount(ban, __GetName(playerid), reason);
		
		format(gstr, sizeof(gstr), "[ADMIN CHAT] "LG_E"Account and IP (o)banned of %s [EXPIRES: NEVER, REASON: %s] by %s", ban, reason, __GetName(playerid));
		admin_broadcast(COLOR_RED, gstr);
		Log(LOG_PLAYER, gstr);

        SCM(playerid, -1, ""er"Player has been banned!");
	}
	else
	{
	    SCM(playerid, -1, ""er"Player does not exist!");
	}
	return 1;
}

function:HideMoneyTD(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
    	PlayerTextDrawHide(playerid, TXTMoney[playerid]);
	}
}

function:player_hide_scoretd(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid)) == namehash)
	{
    	PlayerTextDrawHide(playerid, TXTScore[playerid]);
	}
}

function:OnIpLookUp(playerid, ip[])
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
	    for(new i = 0; i < rows; i++)
	    {
			new buffer[MAX_PLAYER_NAME+1];
			cache_get_row(i, 0, buffer, pSQL, sizeof(buffer));

			format(gstr, sizeof(gstr), "%i) %s used %s", i, buffer, ip);
			SCM(playerid, BLUE, gstr);
	    }
	}
	else
	{
  		SCM(playerid, BLUE, "No players found for this ip");
	}
	return 1;
}

race_fetch_data()
{
	g_RaceCount = dini_Int("/Race/Index/Index.ini", "TotalRaces");
}

function:race_open()
{
	if(g_RaceCount == 0) return 1;
	
	if(g_RaceForceMap != 0)
	{
	    g_NextRace = g_RaceForceMap;
	}
	else
	{
	    g_NextRace = random(g_RaceCount) + 1;
	}
	g_RaceForceMap = 0;
	
	race_prepare();
	
	format(gstr, sizeof(gstr), ""race_sign" New race "white"%03i is now active [/race]", g_NextRace);
	SCMToAll(-1, gstr);

	format(gstr, sizeof(gstr), "SELECT `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 1;", g_NextRace);
	mysql_tquery(pSQL, gstr, "OnRaceDataLoaded", "");
	return 1;
}

race_prepare()
{
	new file[16];
	format(file, sizeof(file), "/Race/%03i.race", g_NextRace);

	if(!fexist(file)) return race_stop();
	
	g_RaceArray[E_vModel] = dini_Int(file, "vModel");
	g_RaceArray[E_rType] = dini_Int(file, "rType");
    g_RaceArray[E_rWorld] = dini_Int(file, "rVirtualWorld");
	g_RaceArray[E_rCPs] = dini_Int(file, "rTotalRaceCPs");
	g_RaceArray[E_DeployTime] = dini_Int(file, "rDeployTime");

	for(new i = 0; i < RACE_MAX_PLAYERS; i++)
	{
	    format(gstr, sizeof(gstr), "vPosX_%i", i);
	    g_RaceVehCoords[i][0] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vPosY_%i", i);
	    g_RaceVehCoords[i][1] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vPosZ_%i", i);
	    g_RaceVehCoords[i][2] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vAngle_%i", i);
	    g_RaceVehCoords[i][3] = dini_Float(file, gstr);
	}
	
	for(new i = 0; i < g_RaceArray[E_rCPs]; i++)
	{
	    format(gstr, sizeof(gstr), "CP_%i_PosX", i);
	    g_RaceCPs[i][0] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "CP_%i_PosY", i);
	    g_RaceCPs[i][1] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "CP_%i_PosZ", i);
	    g_RaceCPs[i][2] = dini_Float(file, gstr);
	}

	Iter_Clear(iterRaceJoins);
	
    g_rPosition = 0;
	g_RaceTime = MAX_RACE_TIME;
	g_RacePlayerCount = 0;
	g_RaceCountDown = COUNT_DOWN_TILL_RACE_START;
	g_RaceStatus = RaceStatus_StandBy;
	return 1;
}

function:OnRaceDataLoaded()
{
	new rows, fields;
	cache_get_data(rows, fields, pSQL);

	if(rows > 0)
	{
		new name[25],
		    minute,
		    sec,
		    msec;

		format(gstr, sizeof(gstr), " -> Vehicle: %s | Checkpoints: %i", VehicleNames[g_RaceArray[E_vModel] - 400], g_RaceArray[E_rCPs]);
		SCMToAll(YELLOW, gstr);

		cache_get_row(0, 0, name, pSQL, sizeof(name));
		ConvertTime(var, cache_get_row_int(0, 1, pSQL), minute, sec, msec);

		format(gstr, sizeof(gstr), " -> #1 %s | %02i:%02i.%03i", name, minute, sec, msec);
		SCMToAll(YELLOW, gstr);
	}
	return 1;
}

race_player_setup(playerid)
{
    gTeam[playerid] = gRACE;
    
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	ResetPlayerWeapons(playerid);
    ShowPlayerRaceTextdraws(playerid);
    HidePlayerInfoTextdraws(playerid);

    race_set_cp(playerid, g_CPProgress[playerid], g_CPProgress[playerid] + 1, g_RaceArray[E_rCPs], g_RaceArray[E_rType]);

	g_RaceVehicle[playerid] = CreateVehicleEx(g_RaceArray[E_vModel], g_RaceVehCoords[g_RaceSpawnCount][0], g_RaceVehCoords[g_RaceSpawnCount][1], g_RaceVehCoords[g_RaceSpawnCount][2] + 0.5, g_RaceVehCoords[g_RaceSpawnCount][3], (random(128) + 127), (random(128) + 127), 60);
	SetPlayerPos(playerid, g_RaceVehCoords[g_RaceSpawnCount][0], g_RaceVehCoords[g_RaceSpawnCount][1], floatadd(g_RaceVehCoords[g_RaceSpawnCount][2], 2.0));
	SetPlayerFacingAngle(playerid, g_RaceVehCoords[g_RaceSpawnCount][3]);
	SetPlayerVirtualWorld(playerid, g_RaceArray[E_rWorld]);
	SetPlayerInterior(playerid, 0);

	SetVehicleNumberPlate(g_RaceVehicle[playerid], "{3399ff}R{FFFFFF}ac{F81414}E");
	SetVehicleToRespawn(g_RaceVehicle[playerid]);
	SetVehicleVirtualWorld(g_RaceVehicle[playerid], g_RaceArray[E_rWorld]);
	if(IsComponentIdCompatible(GetVehicleModel(g_RaceVehicle[playerid]), 1010)) AddVehicleComponent(g_RaceVehicle[playerid], 1010);
	RepairVehicle(g_RaceVehicle[playerid]);

    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 0);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
    
	PutPlayerInVehicle(playerid, g_RaceVehicle[playerid], 0);

    TogglePlayerControllable(playerid, false);
    SetCameraBehindPlayer(playerid);

    ToggleSpeedo(playerid, true);

    g_CPProgress[playerid] = 0;

    format(gstr2, sizeof(gstr2), "SELECT `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 5;", g_NextRace);
    mysql_tquery(pSQL, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_RACE_TOPLIST, playerid, pSQL);

	++g_RacePlayerCount;
	++g_RaceSpawnCount;
}

function:race_countdown()
{
	switch(g_RaceCountDown)
	{
 		case 0:
	    {
	        KillTimer(g_tRaceCounter);
			race_start();
	    }
	    case 1..5:
	    {
			format(gstr, sizeof(gstr), "~y~RACE STARTING IN~n~~p~- %i -~n~~y~SECONDS", g_RaceCountDown);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == gRACE)
			    {
			    	GameTextForPlayer(i, gstr, 999, 3);
			    	PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			    }
			}
	    }
	    case 21, 6:
	    {
			format(gstr, sizeof(gstr), ""race_sign" Still %i seconds till %03i named race starts [/race]", g_RaceCountDown - 1, g_NextRace);
			SCMToAll(-1, gstr);
	    }
	}
	return g_RaceCountDown--;
}

race_start()
{
    g_RaceStatus = RaceStatus_Active;
    g_RaceTick = GetTickCountEx();

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gRACE)
	    {
	        TogglePlayerControllable(i, true);
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
  			GameTextForPlayer(i, "~g~GO~w~! ~g~GO~w~! ~g~GO~w~!", 2000, 5);
			SetCameraBehindPlayer(i);
	    }
	}
	g_tRaceCounter = SetTimer("race_counter", 1000, true);
	
    SCMToAll(-1, ""race_sign" The current race has been started!");
}

function:race_counter()
{
	if(g_RaceStatus == RaceStatus_Active)
	{
		g_RaceTime--;
		if(g_RacePlayerCount <= 0)
		{
			SCMToAll(-1, ""race_sign" Race ended, no one left in the race");
			return race_stop();
		}
	}
	if(g_RaceTime <= 0)
	{
	    SCMToAll(-1, ""race_sign" Race ended. No time left!");
	    return race_stop();
	}
	return 1;
}

function:race_stop()
{
	KillTimer(g_tRaceCounter);
	KillTimer(g_tRaceOpenSelection);
	g_RacePlayerCount = 0;
	g_RaceSpawnCount = 0;
    g_RaceTick = 0;
	g_RaceStatus = RaceStatus_Inactive;
    g_RaceFinishCount = 0;
    g_iRaceEnd = 0;
    
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gRACE)
	    {
			TogglePlayerControllable(i, true);
			if(g_RaceVehicle[i] != -1)
			{
				DestroyVehicleEx(g_RaceVehicle[i]);
				g_RaceVehicle[i] = -1;
			}
			g_CPProgress[i] = 0;
			gTeam[i] = gFREEROAM;
			ResetPlayerWorld(i);
			RandomWeapons(i);
			HidePlayerRaceTextdraws(i);
			DisablePlayerRaceCheckpoint(i);
			TogglePlayerControllable(i, true);
			ToggleSpeedo(i, false);

		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(i);

			if(GetPVarInt(i, "HadGod") == 1) Command_ReProcess(i, "/god silent", false);
		}
	}
	
	g_tRaceOpenSelection = SetTimer("race_open", (6 * 30 * 1000) + 307, false);
	return 1;
}

function:race_end()
{
	if(--g_iRaceEnd <= 0 || g_RacePlayerCount <= 0)
	{
	    return race_stop();
	}
	
	format(gstr, sizeof(gstr), "~w~Still ~p~%i ~w~seconds left!", g_iRaceEnd);

    for(new i = 0; i < MAX_PLAYERS; i++)
	{
        if(gTeam[i] == gRACE)
		{
            GameTextForPlayer(i, gstr, 1300, 4);
        }
    }

	g_RaceTime = g_iRaceEnd;

    SetTimer("race_end", 1000, false);
	return 1;
}

RemoveFromRaceBuilder(playerid)
{
	g_BuildRace = INVALID_PLAYER_ID;
 	g_BuildCheckPointCount = 0;
	g_BuildVehPosCount = 0;
	g_BuildRaceType = 1;
	g_BuildModeVMID = 0;
	g_BuildVirtualWorld = 0;
	g_BuildTakeCheckpoints = false;
	g_BuildTakeVehPos = false;
	
	if(g_BuildVehicle != -1)
	{
		DestroyVehicleEx(g_BuildVehicle);
		g_BuildVehicle = -1;
	}
	
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
    Streamer_Update(playerid);
    
    gTeam[playerid] = gFREEROAM;
}

race_set_cp(playerid, PrevCP, NextCP, MaxCP, Type)
{
	const Float:RACE_CHECKPOINT_SIZE = 12.0;
	if(Type == 1)
	{
		if(NextCP == MaxCP)
		{
			SetPlayerRaceCheckpoint(playerid, 1, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
		else
		{
			SetPlayerRaceCheckpoint(playerid, 0, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
	}
	else if(Type == 2)
	{
		if(NextCP == MaxCP)
		{
			SetPlayerRaceCheckpoint(playerid, 4, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
		else
		{
			SetPlayerRaceCheckpoint(playerid, 3, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
	}
}

race_calculate_position()
{
	new cp,
	    vehicleid,
		Float:POS[4],
	    c = 0,
		tmp_RacePosition[12][e_race_position];

	static const OFFSET_VALUE = 10000;

	for(new i = 0; i < RACE_MAX_PLAYERS; i++)
	{
	    tmp_RacePosition[i][RP_iPlayer] = INVALID_PLAYER_ID;
	    tmp_RacePosition[i][RP_iValue] = -(i + 1);
	}

	for(new i = 0; i < MAX_PLAYERS && c < RACE_MAX_PLAYERS; i++)
	{
        if(gTeam[i] == gRACE)
		{
			if((vehicleid = GetPlayerVehicleID(i)) != INVALID_VEHICLE_ID)
			{
				GetVehiclePos(vehicleid, POS[0], POS[1], POS[2]);

				cp = g_CPProgress[i] + 1;

				POS[3] = GetDistance3D(POS[0], POS[1], POS[2], g_RaceCPs[cp][0], g_RaceCPs[cp][1], g_RaceCPs[cp][2]);

				if(POS[3] > OFFSET_VALUE)
				{
				    POS[3] = OFFSET_VALUE;
				}

				POS[3] = (OFFSET_VALUE - POS[3]);

	            tmp_RacePosition[c][RP_iPlayer] = i;
	            tmp_RacePosition[c][RP_iValue] = (g_CPProgress[i] * OFFSET_VALUE) + floatround(POS[3]);
	            c++;
			}
        }
	}

	SortDeepArray(tmp_RacePosition, RP_iValue, .order = SORT_DESC);

	for(new i = 0; i < RACE_MAX_PLAYERS; i++)
	{
        if(tmp_RacePosition[i][RP_iPlayer] != INVALID_PLAYER_ID)
		{
            g_RacePosition[tmp_RacePosition[i][RP_iPlayer]] = i + 1;
		}
	}
	return 1;
}

DestroyPlayerVehicles(playerid, bool:minigames = false)
{
	for(new obj = 0; obj < 13; obj++)
	{
	    if(hVIPVehObj[playerid][obj] != -1)
	    {
	        DestroyDynamicObject(hVIPVehObj[playerid][obj]);
	    }
	    
	    hVIPVehObj[playerid][obj] = -1;
	}
	
	if(PlayerData[playerid][pVehicle] != INVALID_VEHICLE_ID)
	{
		DestroyVehicleEx(PlayerData[playerid][pVehicle]);
		PlayerData[playerid][pVehicle] = INVALID_VEHICLE_ID;
	}

	if(PVSelect[playerid] != -1)
	{
		if(PlayerPVData[playerid][PVSelect[playerid]][e_neon1] != -1)
		{
			DestroyDynamicObject(PlayerPVData[playerid][PVSelect[playerid]][e_neon1]);
			PlayerPVData[playerid][PVSelect[playerid]][e_neon1] = -1;
		}
		if(PlayerPVData[playerid][PVSelect[playerid]][e_neon2] != -1)
		{
			DestroyDynamicObject(PlayerPVData[playerid][PVSelect[playerid]][e_neon2]);
			PlayerPVData[playerid][PVSelect[playerid]][e_neon2] = -1;
		}
	    if(PlayerPVData[playerid][PVSelect[playerid]][e_labelid] != Text3D:-1)
	    {
	        DestroyDynamic3DTextLabel(PlayerPVData[playerid][PVSelect[playerid]][e_labelid]);
	        PlayerPVData[playerid][PVSelect[playerid]][e_labelid] = Text3D:-1;
	    }
		if(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] != -1)
		{
			DestroyVehicleEx(PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid]);
			PlayerPVData[playerid][PVSelect[playerid]][e_vehicleid] = -1;
		}
	}
	
	if(PlayerData[playerid][pTrailerVehicle] != INVALID_VEHICLE_ID)
	{
		DestroyVehicleEx(PlayerData[playerid][pTrailerVehicle]);
		PlayerData[playerid][pTrailerVehicle] = INVALID_VEHICLE_ID;
	}
	
	if(minigames)
	{
		if(g_RaceVehicle[playerid] != -1)
		{
			DestroyVehicleEx(g_RaceVehicle[playerid]);
			g_RaceVehicle[playerid] = -1;
		}
		
	    if(PlayerData[playerid][pDerbyVehicle] != INVALID_VEHICLE_ID)
	    {
	    	DestroyVehicleEx(PlayerData[playerid][pDerbyVehicle]);
	    	PlayerData[playerid][pDerbyVehicle] = INVALID_VEHICLE_ID;
		}
	}
	return 1;
}

function:OnNewsReceive(playerid, response_code, data[])
{
	if(response_code == 200) {
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: News", data, "OK", "");
	} else {
		player_notice(playerid, "ERROR", "Fetching data");
	}
	return 1;
}

function:OnRaceRecordPurged(playerid, map)
{
	if(cache_get_row_count(pSQL) == 1)
	{
		format(gstr, sizeof(gstr), "DELETE FROM `race_records` WHERE `id` = %i;", cache_get_row_int(0, 0, pSQL));
		mysql_tquery(pSQL, gstr, "", "");

		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) deleted the first record in race %i", __GetName(playerid), playerid, map);
		admin_broadcast(-1, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, ""er"First race record not found!");
	}
	return 1;
}

function:server_force_spawn(playerid)
{
	SpawnPlayer(playerid);
	return 1;
}

function:server_vip_countdown()
{
	switch(iCountdownVIP)
	{
	    case 5:
	    {
			GameTextForAll("~r~~h~~h~- 5 -", 1000, 3);
	    }
	    case 4:
	    {
	        GameTextForAll("~p~~h~~h~- 4 -", 1000, 3);
	    }
	    case 3:
	    {
	        GameTextForAll("~b~~h~~h~- 3 -", 1000, 3);
	    }
	    case 2:
	    {
	        GameTextForAll("~g~~h~~h~- 2 -", 1000, 3);
	    }
	    case 1:
	    {
	        GameTextForAll("~y~~h~- 1 -", 1000, 3);
	    }
 	    case 0:
	    {
	        GameTextForAll("~g~~h~~h~GO GO GO", 1000, 3);
	        KillTimer(tVIPCountdown);
         	IsCountDownRunning = false;
	    }
	    default:
	    {
	        GameTextForAll("~g~~h~~h~GO GO GO", 1000, 3);
	        KillTimer(tVIPCountdown);
         	IsCountDownRunning = false;
	    }
	}
	iCountdownVIP--;
	return 1;
}

function:OnPlayerAccountRequest(playerid, namehash, request)
{
    if(!IsPlayerConnected(playerid))
		return 0;

	if(YHash(__GetName(playerid)) != namehash) {
	    Log(LOG_NET, "OnPlayerAccountRequest data race detected, kicking (%s, %i, %i, %i)", __GetName(playerid), playerid, YHash(__GetName(playerid)), namehash);
	    Kick(playerid);
		return 0;
	}

	switch(request)
	{
	    case ACCOUNT_REQUEST_BANNED:
	    {
	        if(cache_get_row_count() != 0)
	        {
	            new szAdmin[MAX_PLAYER_NAME + 1],
	                szReason[128],
	                u_iBanDate,
	                iLift;

	            cache_get_row(0, 2, szAdmin);
	            cache_get_row(0, 3, szReason);
				iLift = cache_get_row_int(0, 4, pSQL);
				u_iBanDate = cache_get_row_int(0, 5, pSQL);

				if(iLift == 0) // Player has a permanent ban
				{
				    format(gstr2, sizeof(gstr2), ""red"You have been banned!"white"\n\nAdmin: %s\nYour name: %s\nReason: %s\nDate: %s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", szAdmin, __GetName(playerid), szReason, UTConvert(u_iBanDate));
					ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Notice", gstr2, "OK", "");
					KickEx(playerid);
					return 1;
				}
				else if(iLift < gettime()) // Player is time banned, checking if ban ran out
				{
				    mysql_format(pSQL, gstr2, sizeof(gstr2), "DELETE FROM `bans` WHERE `playername` = '%e' LIMIT 1;", __GetName(playerid)); // Delete time ban
				    mysql_pquery(pSQL, gstr2);

				    SCM(playerid, -1, ""nef" Your time ban expired, you've been unbanned!");
				}
				else
				{
				    format(gstr2, sizeof(gstr2), ""red"You have been time banned!"white"\n\nAdmin: %s\nYour name: %s\nReason: %s\nExpires: %s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", szAdmin, __GetName(playerid), szReason, UTConvert(iLift));
					ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" :: Notice", gstr2, "OK", "");
					KickEx(playerid);
					return 1;
				}
	        }

	        mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT * FROM `blacklist` WHERE `ip` = '%e' LIMIT 1;", __GetIP(playerid));
	        mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_IP_BANNED);
	        return 1;
	    }
	    case ACCOUNT_REQUEST_IP_BANNED:
	    {
            if(cache_get_row_count() == 0) // IP Address is not blacklisted
            {
				mysql_format(pSQL, gstr, sizeof(gstr), "SELECT `id` FROM `accounts` WHERE `name` = '%e' LIMIT 1;", __GetName(playerid));
				mysql_pquery(pSQL, gstr, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_EXIST); // Check if the account already exist

				SendWelcomeMSG(playerid);
            }
            else
			{
	 		   	TextDrawHideForPlayer(playerid, TXTOnJoin[0]);
	 		   	TextDrawHideForPlayer(playerid, TXTOnJoin[1]);
			
	 		   	SCM(playerid, -1, ""server_sign" You have been banned.");
       			KickEx(playerid);
			}
	        return 1;
	    }
	    case ACCOUNT_REQUEST_EXIST:
	    {
			TextDrawHideForPlayer(playerid, TXTOnJoin[0]);
			TextDrawHideForPlayer(playerid, TXTOnJoin[1]);

			Streamer_UpdateEx(playerid, 1797.5835, -1305.0114, 121.2348, -1, -1);
			SetPlayerPos(playerid, 1797.5835, -1305.0114, 121.2348);
			SetPlayerFacingAngle(playerid, 359.9696);
			SetPlayerCameraPos(playerid, 1797.3688, -1299.8156, 121.4657);
			SetPlayerCameraLookAt(playerid, 1797.3661, -1300.8164, 121.4556);

			mysql_format(pSQL, gstr2, sizeof(gstr2), "INSERT INTO `online` VALUES (NULL, '%e', '%s', UNIX_TIMESTAMP());", __GetName(playerid), __GetIP(playerid));
			mysql_tquery(pSQL, gstr2);

		    if(cache_get_row_count() != 0) // acc exists
		    {
				mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT `id` FROM `accounts` WHERE `name` = '%e' AND `ip` = '%s' LIMIT 1;", __GetName(playerid), __GetIP(playerid));
				mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUEST_AUTO_LOGIN); // Check auto login
		    }
		    else
		    {
		        mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT COUNT(`id`) FROM `accounts` WHERE `ip` = '%s' AND `regdate` > (UNIX_TIMESTAMP() - 86400);", __GetIP(playerid));
		        mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUST_VERIFY_REGISTER);
		    }
	        return 1;
	    }
	    case ACCOUNT_REQUST_VERIFY_REGISTER:
	    {
	        if(cache_get_row_int(0, 0) > 4)
	        {
	            Log(LOG_PLAYER, "%i, %s IP accounts found, kicking (%s, %i)", cache_get_row_int(0, 0), __GetIP(playerid), __GetName(playerid), playerid);
				Kick(playerid);
			}
			else
			{
		        mysql_format(pSQL, gstr2, sizeof(gstr2), "SELECT COUNT(`id`) FROM `accounts` WHERE `serial` = '%e' AND `regdate` > (UNIX_TIMESTAMP() - 2000);", __GetSerial(playerid));
		        mysql_pquery(pSQL, gstr2, "OnPlayerAccountRequest", "iii", playerid, YHash(__GetName(playerid)), ACCOUNT_REQUST_VERIFY_REGISTER + 1);
			}
			return 1;
	    }
	    case ACCOUNT_REQUST_VERIFY_REGISTER + 1:
	    {
	        if(cache_get_row_int(0, 0) > 4)
	        {
	            Log(LOG_PLAYER, "%i, %s serial accounts found, kicking (%s, %i)", cache_get_row_int(0, 0), __GetSerial(playerid), __GetName(playerid), playerid);
				Kick(playerid);
	        }
	        else
	        {
	            RequestRegistration(playerid);
	        }
	        return 1;
	    }
	    case ACCOUNT_REQUEST_AUTO_LOGIN:
	    {
	        if(cache_get_row_count() > 0) // Account with IP found
	        {
	            // Auto Login
				AutoLogin(playerid);
	        }
	        else // ip on account is not the same as current connection
	        {
	            // Login Dialog
	            RequestLogin(playerid);
	        }
	        return 1;
	    }
	    case ACCOUNT_REQUEST_LOAD:
	    {
			if(cache_get_row_count() > 0)
			{
				new ORM:ormid = PlayerData[playerid][e_ormid] = orm_create("accounts");

				orm_addvar_int(ormid, PlayerData[playerid][e_accountid], "id");
				orm_addvar_string(ormid, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1, "name");
				orm_addvar_string(ormid, PlayerData[playerid][e_email], 26, "email");
				orm_addvar_int(ormid, PlayerData[playerid][e_level], "level");
				orm_addvar_int(ormid, PlayerData[playerid][e_score], "score");
				orm_addvar_int(ormid, PlayerData[playerid][e_money], "money");
				orm_addvar_int(ormid, PlayerData[playerid][e_bank], "bank");
				orm_addvar_int(ormid, PlayerData[playerid][e_color], "color");
				orm_addvar_int(ormid, PlayerData[playerid][e_kills], "kills");
				orm_addvar_int(ormid, PlayerData[playerid][e_deaths], "deaths");
				orm_addvar_int(ormid, PlayerData[playerid][e_time], "time");
				orm_addvar_int(ormid, PlayerData[playerid][e_skin], "skin");
				orm_addvar_int(ormid, PlayerData[playerid][e_payday], "payday");
				orm_addvar_int(ormid, PlayerData[playerid][e_reaction], "reaction");
				orm_addvar_int(ormid, PlayerData[playerid][e_mathwins], "mathwins");
				orm_addvar_int(ormid, PlayerData[playerid][e_houses], "houses");
				orm_addvar_int(ormid, PlayerData[playerid][e_gangid], "gangid");
				orm_addvar_int(ormid, PlayerData[playerid][e_gangrank], "gangrank");
				orm_addvar_int(ormid, PlayerData[playerid][e_addpvslots], "addpvslots");
				orm_addvar_int(ormid, PlayerData[playerid][e_addtoyslots], "addtoyslots");
				orm_addvar_int(ormid, PlayerData[playerid][e_addhouseslots], "addhouseslots");
				orm_addvar_int(ormid, PlayerData[playerid][e_addbizzslots], "addbizzslots");
				orm_addvar_int(ormid, PlayerData[playerid][e_addhouseitemslots], "addhouseitemslots");
				orm_addvar_int(ormid, PlayerData[playerid][e_derbywins], "derbywins");
				orm_addvar_int(ormid, PlayerData[playerid][e_racewins], "racewins");
				orm_addvar_int(ormid, PlayerData[playerid][e_tdmwins], "tdmwins");
				orm_addvar_int(ormid, PlayerData[playerid][e_falloutwins], "falloutwins");
				orm_addvar_int(ormid, PlayerData[playerid][e_gungamewins], "gungamewins");
				orm_addvar_int(ormid, PlayerData[playerid][e_eventwins], "eventwins");
				orm_addvar_int(ormid, PlayerData[playerid][e_wanteds], "wanteds");
				orm_addvar_int(ormid, PlayerData[playerid][e_vip], "vip");
				orm_addvar_int(ormid, PlayerData[playerid][e_credits], "credits");
				orm_addvar_int(ormid, PlayerData[playerid][e_medkits], "medkits");
				orm_addvar_int(ormid, PlayerData[playerid][e_regdate], "regdate");
				orm_addvar_int(ormid, PlayerData[playerid][e_lastlogin], "lastlogin");
				orm_addvar_int(ormid, PlayerData[playerid][e_lastnc], "lastnc");
				orm_addvar_int(ormid, PlayerData[playerid][e_skinsave], "skinsave");
				
				orm_setkey(ormid, "id");
				orm_apply_cache(ormid, 0);

				if(!IsValidSkin(PlayerData[playerid][e_skinsave])) {
				    PlayerData[playerid][e_skinsave] = -1;
				}
				
				PlayerData[playerid][ConnectTime] = gettime();
				
				if(PlayerData[playerid][e_gangid] != 0) {
					SQL_LoadPlayerGang(playerid);
				}
				
				SQL_LoadPlayerAchs(playerid);
				SQL_LoadPlayerToys(playerid);
				SQL_LoadPlayerPVs(playerid);

  			 	SetPlayerScoreEx(playerid, PlayerData[playerid][e_score]);
			 	SetPlayerMoneyEx(playerid, PlayerData[playerid][e_money]);
				format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerData[playerid][e_wanteds]);
				PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);

				mysql_format(pSQL, gstr, sizeof(gstr), "INSERT INTO `loginlog` VALUES (%i, '%s', 0, UNIX_TIMESTAMP());", PlayerData[playerid][e_accountid], __GetIP(playerid));
				mysql_pquery(pSQL, gstr);

				if(PlayerData[playerid][e_level] > 0)
				{
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"Successfully logged in. (Level: %s)", g_szStaffLevelNames[PlayerData[playerid][e_level]][e_rank]);
					SCM(playerid, -1, gstr2);
		   		}
		   		else
				{
				   	SCM(playerid, -1, ""server_sign" "r_besch"Successfully logged in!");
				}

				format(gstr, sizeof(gstr), ""server_sign" "r_besch"You were last online at %s and registered on %s", UTConvert(PlayerData[playerid][e_lastlogin]), UTConvert(PlayerData[playerid][e_regdate]));
				SCM(playerid, -1, gstr);
				format(gstr, sizeof(gstr), ""server_sign" "r_besch"You've been online for %s", GetPlayingTimeFormat(playerid));
				SCM(playerid, -1, gstr);
				
				if(PlayerData[playerid][e_color] != 0)
				{
				    SetPlayerColor(playerid, PlayerData[playerid][e_color]);
				    SCM(playerid, -1, ""server_sign" "r_besch"Your saved color has been set. (/deletecolor to remove)");
				}

				if(PlayerData[playerid][e_vip] == 1)
				{
                    format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"VIP %s(%i) logged in!", __GetName(playerid), playerid);
                    SCMToAll(-1, gstr2);
				}

				mysql_format(pSQL, gstr, sizeof(gstr), "SELECT * FROM `queue` WHERE `Extra` = '%e';", __GetName(playerid));
				mysql_pquery(pSQL, gstr, "OnBoostReceive", "ii", playerid, YHash(__GetName(playerid)));
			}
	        return 1;
	    }
	    case ACCOUNT_REQUEST_GANG_LOAD:
	    {
		    if(cache_get_row_count() > 0)
			{
		        cache_get_row(0, 0, PlayerData[playerid][GangName], pSQL, 25);
		        cache_get_row(0, 1, PlayerData[playerid][GangTag], pSQL, 5);

				if(PlayerData[playerid][GangLabel] != Text3D:-1)
				{
				    DestroyDynamic3DTextLabel(PlayerData[playerid][GangLabel]);
		 			PlayerData[playerid][GangLabel] = Text3D:-1;
				}

 			    format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerData[playerid][GangName]);
				PlayerData[playerid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);

			    format(gstr, sizeof(gstr), ""gang_sign" "grey"%s %s(%i) logged in!", g_szGangRanks[PlayerData[playerid][e_gangrank]][E_gang_pos_name], __GetName(playerid), playerid);
				gang_broadcast(PlayerData[playerid][e_gangid], gstr);
			}
	        return 1;
	    }
	    case ACCOUNT_REQUEST_ACHS_LOAD:
	    {
	        if(cache_get_row_count() > 0)
	        {
				for(new i = 0; i < cache_get_row_count(); i++)
				{
				    PlayerAchData[playerid][E_PLAYER_ACH_DATA:cache_get_row_int(i, 0)][0] = 1;
				    PlayerAchData[playerid][E_PLAYER_ACH_DATA:cache_get_row_int(i, 0)][1] = cache_get_row_int(i, 1);
				}
	        }
	        PlayerData[playerid][bAchsLoad] = true;
	        return 1;
	    }
	    case ACCOUNT_REQUEST_TOYS_LOAD:
	    {
	        if(cache_get_row_count() > 0)
	        {
	            for(new i = 0; i < cache_get_row_count() && i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	            {
					new r = cache_get_row_int(i, 1);
					
					PlayerToyData[playerid][r][toy_model] = cache_get_row_int(i, 2);
					PlayerToyData[playerid][r][toy_bone] = cache_get_row_int(i, 3);
					PlayerToyData[playerid][r][toy_x] = cache_get_row_float(i, 4);
					PlayerToyData[playerid][r][toy_y] = cache_get_row_float(i, 5);
					PlayerToyData[playerid][r][toy_z] = cache_get_row_float(i, 6);
					PlayerToyData[playerid][r][toy_rx] = cache_get_row_float(i, 7);
					PlayerToyData[playerid][r][toy_ry] = cache_get_row_float(i, 8);
					PlayerToyData[playerid][r][toy_rz] = cache_get_row_float(i, 9);
					PlayerToyData[playerid][r][toy_sx] = cache_get_row_float(i, 10);
					PlayerToyData[playerid][r][toy_sy] = cache_get_row_float(i, 11);
					PlayerToyData[playerid][r][toy_sz] = cache_get_row_float(i, 12);
	            }
	        }
	        return 1;
	    }
	    case ACCOUNT_REQUEST_PVS_LOAD:
	    {
	        if(cache_get_row_count() > 0)
	        {
				for(new i = 0; i < cache_get_row_count() && i < MAX_PLAYER_PVS; i++)
				{
				    new r = cache_get_row_int(i, 1);
				    
				    PlayerPVData[playerid][r][e_model] = cache_get_row_int(i, 2);
				    cache_get_row(i, 3, PlayerPVData[playerid][r][e_plate], pSQL, 13);
				    PlayerPVData[playerid][r][e_paintjob] = cache_get_row_int(i, 4);
				    PlayerPVData[playerid][r][e_color1] = cache_get_row_int(i, 5);
				    PlayerPVData[playerid][r][e_color2] = cache_get_row_int(i, 6);
				    
				    for(new m = 0; m < 17; m++)
				    {
				        PlayerPVData[playerid][r][e_mods][m] = cache_get_row_int(i, m + 7);
				    }
				}
	        }
	        return 1;
	    }
	    case ACCOUNT_REQUEST_LOGIN:
	    {
	  		if(cache_get_row_count() != 0) // Correct password
		    {
		        PlayerData[playerid][bAllowSpawn] = true;
				PlayerData[playerid][bLogged] = true;
                PlayerData[playerid][ExitType] = EXIT_LOGGED;

				SQL_UpdateAccount(playerid);
				SQL_LoadAccount(playerid);
			}
			else
			{
			    SkipLogin(playerid);
			}
	        return 1;
	    }
	}
	return 0;
}

Log(E_LOG_LEVEL:log_level, const fmat[], va_args<>)
{
	va_format(gstr2, sizeof(gstr2), fmat, va_start<2>);
	
	switch(log_level)
	{
	    case LOG_INIT: strins(gstr2, "LogInit: ", 0, sizeof(gstr2));
		case LOG_EXIT: strins(gstr2, "LogExit: ", 0, sizeof(gstr2));
		case LOG_ONLINE: strins(gstr2, "LogOnline: ", 0, sizeof(gstr2));
		case LOG_NET: strins(gstr2, "LogNet: ", 0, sizeof(gstr2));
		case LOG_PLAYER: strins(gstr2, "LogPlayer: ", 0, sizeof(gstr2));
		case LOG_WORLD: strins(gstr2, "LogWorld: ", 0, sizeof(gstr2));
		case LOG_FAIL: strins(gstr2, "LogError: ", 0, sizeof(gstr2));
		case LOG_SUSPECT: strins(gstr2, "LogSuspect: ", 0, sizeof(gstr2));
	}
	return print(gstr2);
}

global_broadcast(const fmat[], va_args<>)
{
	format(gstr, sizeof(gstr), "[{00FF96}GLOBAL"white"] %s", fmat);
	va_format(gstr2, sizeof(gstr2), gstr, va_start<1>);
	return SCMToAll(WHITE, gstr2);
}

server_read_config()
{
    m_PlayerRecord = dini_Int("/Other/server.ini", "m_PlayerRecord");
}

server_save_config()
{
	Log(LOG_ONLINE, "Updating server config");
	dini_IntSet("/Other/server.ini", "m_PlayerRecord", m_PlayerRecord);
}

ResetPlayerWorld(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
}

IsPlayerAvail(playerid)
{
	if(playerid == INVALID_PLAYER_ID)
		return 0;

	if(playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	if(!IsPlayerConnected(playerid) || PlayerData[playerid][ExitType] != EXIT_FIRST_SPAWNED)
		return 0;
		
	return 1;
}

SollIchDirMaEtWatSagen()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

GameTimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds / 60);
  	seconds -= minutes * 60;
   	format(tmp, sizeof(tmp), "%02i:%02i", minutes, seconds);
   	return tmp;
}

SetPlayerMoneyEx(playerid, amount)
{
	if(playerid == INVALID_PLAYER_ID)
		return 0;
		
	if(PlayerData[playerid][e_money] >= 1000000000)
		return 0;
	
    ResetPlayerMoney(playerid);
	PlayerData[playerid][e_money] = amount;
    GivePlayerMoney(playerid, PlayerData[playerid][e_money]);
    return 1;
}

GivePlayerMoneyEx(playerid, amount, bool:populate = true, bool:boost = false)
{
	if(playerid == INVALID_PLAYER_ID) return 1;
	if(PlayerData[playerid][e_money] >= 1000000000) return 1;

    ResetPlayerMoney(playerid);

    if(amount < 0)
    {
        PlayerData[playerid][e_money] += amount;
        format(gstr, sizeof(gstr), "~r~~h~~h~-$%s", number_format(amount * -1));
	}
	else
	{
		if(boost)
		{
			if(PlayerData[playerid][Boost] & BOOST_MONEY_x2)
			{
			    PlayerData[playerid][e_money] += amount * 2;
			    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s (x2 Boost)", number_format(amount * 2));
			}
			else if(PlayerData[playerid][Boost] & BOOST_MONEY_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
			{
			    PlayerData[playerid][e_money] += amount * 3;
			    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s (x3 Boost)", number_format(amount * 3));
			}
			else
			{
		    	PlayerData[playerid][e_money] += amount;
		    	format(gstr, sizeof(gstr), "~g~~h~~h~+$%s", number_format(amount));
			}
		}
		else
		{
		    PlayerData[playerid][e_money] += amount;
		    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s", number_format(amount));
		}
	}

    if(populate)
    {
		PlayerTextDrawSetString(playerid, TXTMoney[playerid], gstr);
        PlayerTextDrawShow(playerid, TXTMoney[playerid]);
		SetTimerEx("HideMoneyTD", 3000, false, "ii", playerid, YHash(__GetName(playerid)));
    }

    GivePlayerMoney(playerid, PlayerData[playerid][e_money]);
	return 1;
}

GetPlayerMoneyEx(playerid)
{
    if(playerid == INVALID_PLAYER_ID)
		return 0;

	return PlayerData[playerid][e_money];
}

GivePlayerScoreEx(playerid, amount, bool:populate = true, bool:boost = false)
{
    if(playerid == INVALID_PLAYER_ID) return 1;

    if(amount < 0)
    {
        format(gstr, sizeof(gstr), "~r~~h~~h~-%i Score", amount * -1);
    }
    else
    {
		if(boost)
		{
			if(PlayerData[playerid][Boost] & BOOST_SCORE_x2)
			{
			    PlayerData[playerid][e_score] += amount * 2;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score (x2 Boost)", number_format(amount * 2));
			}
			else if(PlayerData[playerid][Boost] & BOOST_SCORE_x3 || PlayerData[playerid][Boost] & BOOST_MASTER)
			{
			    PlayerData[playerid][e_score] += amount * 3;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score (x3 Boost)", number_format(amount * 3));
			}
			else
			{
			    PlayerData[playerid][e_score] += amount;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score", number_format(amount));
			}
		}
		else
		{
		    PlayerData[playerid][e_score] += amount;
		    format(gstr, sizeof(gstr), "~y~~h~+%s Score", number_format(amount));
		}
	}

	SetPlayerScore(playerid, PlayerData[playerid][e_score]);

    if(populate)
    {
		PlayerTextDrawSetString(playerid, TXTScore[playerid], gstr);
        PlayerTextDrawShow(playerid, TXTScore[playerid]);
		SetTimerEx("player_hide_scoretd", 3000, false, "ii", playerid, YHash(__GetName(playerid)));
    }

    if(PlayerData[playerid][bLogged] && PlayerData[playerid][bAchsLoad])
    {
		if(PlayerAchData[playerid][e_ach_scorewhore][0] == 0 && PlayerData[playerid][e_score] >= 2000)
		{
		    GivePlayerAchievement(playerid, e_ach_scorewhore, "Score Whore", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		}
	}
	return 1;
}

SetPlayerScoreEx(playerid, amount)
{
    if(playerid == INVALID_PLAYER_ID)
		return 0;

	PlayerData[playerid][e_score] = amount;
    SetPlayerScore(playerid, PlayerData[playerid][e_score]);

    if(PlayerData[playerid][bLogged] && PlayerData[playerid][bAchsLoad])
    {
	 	if(PlayerAchData[playerid][e_ach_scorewhore][0] == 0 && PlayerData[playerid][e_score] >= 2000)
		{
		    GivePlayerAchievement(playerid, e_ach_scorewhore, "Score Whore", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		}
	}
	return 1;
}

GetPlayerScoreEx(playerid)
{
    if(playerid == INVALID_PLAYER_ID)
		return -1;

	return PlayerData[playerid][e_score];
}

NewMinigameJoin(playerid, const minigame[], const cmd[])
{
	format(gstr, sizeof(gstr), ""r_besch"[JOIN] {D2D2AB}%s(%i) just joined %s [/%s]", __GetName(playerid), playerid, minigame, cmd);
	SCMToAll(-1, gstr);
}

NewMapEvent(playerid, const cmd[])
{
	format(gstr, sizeof(gstr), "~g~~h~~h~%s ~w~has gone to ~b~~h~~h~/%s", __GetName(playerid), cmd);
    TextDrawSetString(TXTTeleportInfo, gstr);
}

IsValidVehicleModel(vmodel)
{
	if(vmodel < 400 || vmodel > 611) return 0;
	return 1;
}

IsValidSkin(skinid)
{
    if(skinid == 74 || skinid > 299 || skinid < 0)
    {
        return 0;
	}
    return 1;
}

__GetPlayerID(const playername[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
    	if(IsPlayerConnected(i))
      	{
        	if(!strcmp(playername, __GetName(i), true))
        	{
          		return i;
        	}
      	}
    }
    return INVALID_PLAYER_ID;
}

__GetName(playerid)
{
	new tmp[MAX_PLAYER_NAME + 1];

	strcat(tmp, PlayerData[playerid][e_name], MAX_PLAYER_NAME + 1);
	return tmp;
}

__GetIP(playerid)
{
	new tmp[MAX_PLAYER_IP + 1];

	strcat(tmp, PlayerData[playerid][e_ip], MAX_PLAYER_IP + 1);
	return tmp;
}

__GetSerial(playerid)
{
	new tmp[64];

    gpci(playerid, tmp, sizeof(tmp));
    return tmp;
}

GetColorEx(playerid)
{
	new color = GetPlayerColor(playerid);
	return color;
}

GetUptime()
{
    new Result[128],
        Remaining = gettime() - StartTime,
        Time[4];

    Time[0] = Remaining % 60;
    Remaining /= 60;
    Time[1] = Remaining % 60;
    Remaining /= 60;
    Time[2] = Remaining % 24;
    Remaining /= 24;
    Time[3] = Remaining;

    if(Time[3])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i days, %i hours, %i minutes and %i seconds", Time[3], Time[2], Time[1], Time[0]);
	}
    else if(Time[2])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i hours, %i minutes and %i seconds", Time[2], Time[1], Time[0]);
	}
    else if(Time[1])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i minutes and %i seconds", Time[1], Time[0]);
	}
    else
    {
        format(Result, sizeof(Result), ""white"Server is up for %i seconds", Time[0]);
	}
    return Result;
}

GetVehicleNameById(vehicleid)
{
	new	string[57];

	if(IsValidVehicleModel(GetVehicleModel(vehicleid)))
	{
	    format(string, sizeof(string), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	}
	else
	{
        format(string, sizeof(string), "---");
	}
    return string;
}

ResetPlayerPV(playerid)
{
    PVSelect[playerid] = -1;
	for(new i = 0; i < MAX_PLAYER_PVS; i++)
	{
		PlayerPVData[playerid][i][e_vehicleid] = -1;
		PlayerPVData[playerid][i][e_labelid] = Text3D:-1;
	    PlayerPVData[playerid][i][e_model] = 0;
	    PlayerPVData[playerid][i][e_paintjob] = -1;
	    PlayerPVData[playerid][i][e_color1] = 0;
	    PlayerPVData[playerid][i][e_color2] = 0;
 	    PlayerPVData[playerid][i][e_neon1] = -1;
	    PlayerPVData[playerid][i][e_neon2] = -1;
		for(new r = 0; r < 17; r++)
	    {
            PlayerPVData[playerid][i][e_mods][r] = 0;
	    }
	    strmid(PlayerPVData[playerid][i][e_plate], "Plate", 0, 13, 13);
	}
}

ResetPlayerToy(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		PlayerToyData[playerid][i][toy_model] = 0;
		PlayerToyData[playerid][i][toy_bone] = 1;
		PlayerToyData[playerid][i][toy_x] = 0.0;
		PlayerToyData[playerid][i][toy_y] = 0.0;
		PlayerToyData[playerid][i][toy_z] = 0.0;
		PlayerToyData[playerid][i][toy_rx] = 0.0;
		PlayerToyData[playerid][i][toy_ry] = 0.0;
		PlayerToyData[playerid][i][toy_rz] = 0.0;
		PlayerToyData[playerid][i][toy_sx] = 1.0;
		PlayerToyData[playerid][i][toy_sy] = 1.0;
		PlayerToyData[playerid][i][toy_sz] = 1.0;
	}
}

RemovePlayerToys(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
			RemovePlayerAttachedObject(playerid, i);
	    }
	}
}

AttachPlayerToys(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(PlayerToyData[playerid][i][toy_model] != 0)
	    {
	        SetPlayerAttachedObject(playerid,
	            i,
	            PlayerToyData[playerid][i][toy_model],
	            PlayerToyData[playerid][i][toy_bone],
	            PlayerToyData[playerid][i][toy_x],
	            PlayerToyData[playerid][i][toy_y],
	            PlayerToyData[playerid][i][toy_z],
	            PlayerToyData[playerid][i][toy_rx],
	            PlayerToyData[playerid][i][toy_ry],
	            PlayerToyData[playerid][i][toy_rz],
	            PlayerToyData[playerid][i][toy_sx],
	            PlayerToyData[playerid][i][toy_sy],
	            PlayerToyData[playerid][i][toy_sz]);
		 }
	}
}

SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z)
{
    Streamer_UpdateEx(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z);
}

get_command_name(cmdtext[])
{
	new space = -1;
	for(new i, l = strlen(cmdtext); i < l; i++)
	{
	    if(cmdtext[i] == ' ')
	    {
	        space = i;
	        break;
	    }
	}

    gstr[0] = '\0';
	if(space == -1)
	{
	    strcat(gstr, cmdtext[1], sizeof(gstr));
		return gstr;
	}
	strmid(gstr, cmdtext, 1, space, sizeof(gstr));
	return gstr;
}

badsql(const string[], bool:strict = true)
{
	if(strict)
	{
	    if(strfind(string, " ", true) != -1) return 1;
	    if(strfind(string, ",", true) != -1) return 1;
	}

	if(strfind(string, "|", true) != -1) return 1;
	if(strfind(string, "@", true) != -1) return 1;
	if(strfind(string, "*", true) != -1) return 1;
	if(strfind(string, "'", true) != -1) return 1;
	if(strfind(string, "/", true) != -1) return 1;
	if(strfind(string, "\\", true) != -1) return 1;
	if(strfind(string, "´", true) != -1) return 1;
	if(strfind(string, "`", true) != -1) return 1;
	if(strfind(string, "~", true) != -1) return 1;
	if(strfind(string, "#", true) != -1) return 1;
	if(strfind(string, "\"", true) != -1) return 1;
	return 0;
}

SetSpawnInfoEx(playerid, team, skin, Float:x, Float:y, Float:z, Float:Angle)
{
	if(!IsValidSkin(skin)) skin = 0;
	//printf("SetSpawnInfo(%i, %i, %i, %f, %f, %f, %f, 0, 0, 0, 0, 0, 0);", playerid, team, skin, x, y, z, Angle);
	return SetSpawnInfo(playerid, team, skin, x, y, z, Angle, 0, 0, 0, 0, 0, 0);
}

GunGamePlayers()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++) {
	    if(gTeam[i] == GUNGAME) {
	        ++count;
		}
	}
	return count;
}

GetTickCountEx()
{
	return (GetTickCount() + 3600000);
}

CreateVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
	new vid = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay);

	if(vid == INVALID_VEHICLE_ID)
	{
	    Log(LOG_FAIL, "Could not create vehicle! return: %i, params: %i %.2f %.2f %.2f %.2f %i %i %i", vid, modelid, x, y, z, angle, color1, color2, respawn_delay);
	}
	return vid;
}

DestroyVehicleEx(vehicleid)
{
	if(!IsValidVehicle(vehicleid))
		return 0;

	new ret = DestroyVehicle(vehicleid);

	if(!ret)
	{
	    Log(LOG_FAIL, "Could not destroy vehicle! return %i, params: %i", ret, vehicleid);
	}
	return ret;
}

ToggleSpeedo(playerid, bool:toggle)
{
	if(!toggle)
	{
	    PlayerData[playerid][bSpeedo] = false;

		PlayerTextDrawHide(playerid, TXTSpeedo[playerid]);
		TextDrawHideForPlayer(playerid, TXTSpeedo_Main);
	}
	else
	{
	    PlayerData[playerid][bSpeedo] = true;

		PlayerTextDrawShow(playerid, TXTSpeedo[playerid]);
		TextDrawShowForPlayer(playerid, TXTSpeedo_Main);
	}
}

ResetPlayerVars(playerid)
{
	gTeam[playerid] = gNONE;
    g_RaceVehicle[playerid] = -1;
 	GunGame_Player[playerid][level] = 0;
	GunGame_Player[playerid][dead] = true;
	GunGame_Player[playerid][pw] = true;
	strmid(LastPlayerText[playerid], " ", 0, 144, 144);
    DestoryDamageBox(playerid);

	for(new i = 0; E_PLAYER_ACH_DATA:i < E_PLAYER_ACH_DATA; i++)
	    PlayerAchData[playerid][E_PLAYER_ACH_DATA:i][0] = 0;

    Iter_Clear(iterPlayerIgnore[playerid]);

	SetPVarInt(playerid, "LastID", INVALID_PLAYER_ID);
    SetPVarInt(playerid, "doingStunt", 0);
	SetPVarInt(playerid, "Cop", 0);
	SetPVarInt(playerid, "Robber", 0);
	SetPVarInt(playerid, "inCNR", 0);

	strmid(PlayerData[playerid][e_email], "NoData", 0, 26, 26);
	PlayerData[playerid][fOldPos][0] = 2012.4763;
	PlayerData[playerid][fOldPos][1] = -2448.1399;
	PlayerData[playerid][fOldPos][2] = 14.6396;
    PlayerData[playerid][e_ormid] = ORM:-1;
    PlayerData[playerid][e_accountid] = 0;
    PlayerData[playerid][bHideGC] = false;
    PlayerData[playerid][bAchsLoad] = false;
	PlayerData[playerid][bVIPLInv] = false;
	PlayerData[playerid][bIsDead] = false;
	PlayerData[playerid][bShowToys] = true;
	PlayerData[playerid][bAllowPlayerTeleport] = true;
	PlayerData[playerid][bFrozen] = false;
	PlayerData[playerid][bAllowSpawn] = false;
 	PlayerData[playerid][bDuty] = false;
	PlayerData[playerid][bMuted] = false;
 	PlayerData[playerid][bSpeedBoost] = true;
 	PlayerData[playerid][bSuperJump] = false;
	PlayerData[playerid][bOnlineAdmin] = true;
 	PlayerData[playerid][bGangInvite] = false;
 	PlayerData[playerid][bFalloutLost] = true;
	PlayerData[playerid][bStateSaved] = false;
	PlayerData[playerid][bHasCustomSpawn] = false;
	PlayerData[playerid][bFirstSpawn] = false;
	PlayerData[playerid][bTextdraws] = true;
	PlayerData[playerid][bRainbow] = false;
	PlayerData[playerid][bVehicleInfo] = false;
	PlayerData[playerid][bRampActive] = false;
	PlayerData[playerid][bCaps] = true;
	PlayerData[playerid][bGod] = false;
	PlayerData[playerid][bGWarMode] = false;
	PlayerData[playerid][bLoadMap] = false;
	PlayerData[playerid][bOpenSeason] = false;
	PlayerData[playerid][bLogged] = false;
	PlayerData[playerid][bSpeedo] = false;
	PlayerData[playerid][bDerbyWinner] = false;
	PlayerData[playerid][bDerbyAFK] = false;
	PlayerData[playerid][bDerbyHealthBarShowing] = false;
	PlayerData[playerid][t3dDerbyVehicleLabel] = PlayerText3D:-1;
	PlayerData[playerid][pDerbyVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][iProAimCount] = 0;
	PlayerData[playerid][iJailTime] = 0;
	PlayerData[playerid][bwCNRFraction] = CNR_NONE;
	PlayerData[playerid][iRobberyCount] = 0;
	PlayerData[playerid][tRobbery] = -1;
	PlayerData[playerid][tLoadMap] = -1;
	PlayerData[playerid][Boost] = BOOST:0;
	PlayerData[playerid][bwSuspect] = SUSPECT:0;
	PlayerData[playerid][BoostDeplete] = 0;
	PlayerData[playerid][e_color] = 0;
	PlayerData[playerid][e_skinsave] = -1;
	PlayerData[playerid][e_addpvslots] = 0;
	PlayerData[playerid][e_addtoyslots] = 0;
	PlayerData[playerid][e_addhouseslots] = 0;
	PlayerData[playerid][e_addbizzslots] = 0;
	PlayerData[playerid][e_addhouseitemslots] = 0;
	PlayerData[playerid][HouseSlotSelected] = 0;
	PlayerData[playerid][BusinessIdSelected] = 0;
	PlayerData[playerid][DrawnNumber] = -1;
	PlayerData[playerid][pTrailerVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][tRainbow] = -1;
	PlayerData[playerid][tTDhandle] = -1;
	PlayerData[playerid][ExitType] = EXIT_NONE;
	PlayerData[playerid][e_level] = 0;
	PlayerData[playerid][e_kills] = 0;
	PlayerData[playerid][e_deaths] = 0;
	PlayerData[playerid][e_money] = 0;
	PlayerData[playerid][e_score] = 0;
	PlayerData[playerid][e_derbywins] = 0;
	PlayerData[playerid][e_racewins] = 0;
	PlayerData[playerid][e_falloutwins] = 0;
	PlayerData[playerid][e_gungamewins] = 0;
	PlayerData[playerid][e_eventwins] = 0;
	PlayerData[playerid][e_tdmwins] = 0;
	PlayerData[playerid][e_credits] = 0;
	PlayerData[playerid][e_medkits] = 0;
	PlayerData[playerid][tMedkit] = -1;
	PlayerData[playerid][iMedkitTime] = 0;
	PlayerData[playerid][e_payday] = 60;
  	PlayerData[playerid][e_houses] = 0;
	PlayerData[playerid][GCPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][GCNameHash] = 0;
	PlayerData[playerid][GCOffer] = 0;
	PlayerData[playerid][GCPrice] = 0;
	PlayerData[playerid][VIPPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][VIPNameHash] = 0;
	PlayerData[playerid][VIPOffer] = 0;
	PlayerData[playerid][VehicleSpamViolation] = 0;
    PlayerData[playerid][tickLastAr] = 0;
	PlayerData[playerid][tickLastShot] = 0;
	PlayerData[playerid][tickLastRob] = 0;
	PlayerData[playerid][tickVehicleEnterTime] = 0;
	PlayerData[playerid][tickLastGiveCash] = 0;
	PlayerData[playerid][tickLastMedkit] = 0;
	PlayerData[playerid][tickLastVIPLInv] = 0;
	PlayerData[playerid][tickLastRefill] = 0;
	PlayerData[playerid][tickLastReport] = 0;
	PlayerData[playerid][tickLastHitman] = 0;
	PlayerData[playerid][tickLastGInvite] = 0;
	PlayerData[playerid][tickLastGKick] = 0;
	PlayerData[playerid][tickLastGCreate] = 0;
	PlayerData[playerid][tickLastLocked] = 0;
	PlayerData[playerid][tickLastBIKEC] = 0;
  	PlayerData[playerid][tickLastBuy] = 0;
  	PlayerData[playerid][tickLastPBuy] = 0;
  	PlayerData[playerid][tickLastSell] = 0;
  	PlayerData[playerid][tickLastPSell] = 0;
  	PlayerData[playerid][tickLastPW] = 0;
  	PlayerData[playerid][tickLastChat] = 0;
  	PlayerData[playerid][tickLastPM] = 0;
  	PlayerData[playerid][tickPlayerUpdate] = 0;
  	PlayerData[playerid][tickPlayerUpdateCalls] = 0;
  	PlayerData[playerid][tickPlayerUpdateCalls2] = 0;
  	PlayerData[playerid][tickLastCD] = 0;
    PlayerData[playerid][tickJoin_bmx] = 0;
    PlayerData[playerid][iKickBanIssued] = 0,
    PlayerData[playerid][tickLastBan] = 0,
    PlayerData[playerid][tickLastPickup][0] = 0,
    PlayerData[playerid][tickLastPickup][1] = 0,
  	PlayerData[playerid][e_lastlogin] = 0;
	PlayerData[playerid][e_reaction] = 0;
	PlayerData[playerid][e_mathwins] = 0;
	PlayerData[playerid][e_bank] = 0;
	PlayerData[playerid][e_time] = 0;
	PlayerData[playerid][e_skin] = 0;
	PlayerData[playerid][ConnectTime] = 0;
	PlayerData[playerid][e_vip] = 0;
	PlayerData[playerid][e_lastnc] = 0;
	PlayerData[playerid][Warnings] = 0;
	PlayerData[playerid][RankSelected] = 0;
	PlayerData[playerid][e_wanteds] = 0;
	PlayerData[playerid][HitmanHit] = 0;
	PlayerData[playerid][pVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][AdminDutyLabel] = Text3D:-1;
	PlayerData[playerid][VIPLabel] = Text3D:-1;
	PlayerData[playerid][iLastChat] = 0;
	PlayerData[playerid][tMute] = -1;
 	PlayerData[playerid][e_gangrank] = GANG_POS_NONE;
 	PlayerData[playerid][TmpGangID] = 0;
 	PlayerData[playerid][e_gangid] = 0;
	PlayerData[playerid][GangLabel] = Text3D:-1;
	PlayerData[playerid][GangKickMem][0] = '\0';
	PlayerData[playerid][GangAssignRank][0] = '\0';
 	PlayerData[playerid][GangName][0] = '\0';
 	PlayerData[playerid][GangTag][0] = '\0';
	PlayerData[playerid][e_regdate] = 0;
 	PlayerData[playerid][HouseIntSelected] = 0;
	PlayerData[playerid][SpecID] = INVALID_PLAYER_ID;
	PlayerData[playerid][tDerbyHealthBar] = -1;
	PlayerData[playerid][toy_selected] = 0;
	PlayerData[playerid][houseobj_selected] = 0;
	PlayerData[playerid][iCoolDownCommand] = 0;
	PlayerData[playerid][iCoolDownChat] = 0;
	PlayerData[playerid][iLastDeathTime] = 0;
    PlayerData[playerid][iDeathCountThreshold] = 0;
	PlayerData[playerid][DuelWeapon] = 0;
	PlayerData[playerid][DuelLocation] = 0;
	PlayerData[playerid][DuelRequest] = INVALID_PLAYER_ID;
	PlayerData[playerid][DuelRequestRecv] = INVALID_PLAYER_ID;

    if(PlayerData[playerid][pPreviewVehicle] != INVALID_VEHICLE_ID)
    {
		DestroyVehicleEx(PlayerData[playerid][pPreviewVehicle]);
		PlayerData[playerid][pPreviewVehicle] = INVALID_VEHICLE_ID;
	}
}

CancelGangCreation(playerid)
{
	PlayerData[playerid][e_gangrank] = 0;
	PlayerData[playerid][e_gangid] = 0;
	PlayerData[playerid][GangName][0] = '\0';
	PlayerData[playerid][GangTag][0] = '\0';
 	return 1;
}

Float:GetElevatorZCoordForFloor(floorid)
{
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.
}

Float:GetDoorsZCoordForFloor(floorid)
{
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);
}

Float:GetDistance3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return VectorSize(x1 - x2, y1 - y2, z1 - z2);
}

GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	
 	for(new i = 0; i != sizeof(g_aSAZones); i++ )
 	{
		if(x >= g_aSAZones[i][SAZONE_AREA][0] && x <= g_aSAZones[i][SAZONE_AREA][3] && y >= g_aSAZones[i][SAZONE_AREA][1] && y <= g_aSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, g_aSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

IsNumeric(string[])
{
	for(new i = 0, j = strlen(string); i < j; i++)
	{
		if(string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

RandomWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	if(PlayerData[playerid][bGod])
		return 1;

    // melee
	static const w_melee[8] = {2, 3, 4, 5, 6, 7, 8, 9};
	GivePlayerWeapon(playerid, w_melee[random(sizeof(w_melee))], 1);

	// pistol
	static const w_pistol[3] = {22, 23, 24};
	GivePlayerWeapon(playerid, w_pistol[random(sizeof(w_pistol))], 99999);
	
	// shotgun
	static const w_shotgun[3] = {25, 26, 27};
	GivePlayerWeapon(playerid, w_shotgun[random(sizeof(w_shotgun))], 99999);

	// sub-machine pistol
	static const w_smp[3] = {28, 29, 32};
	GivePlayerWeapon(playerid, w_smp[random(sizeof(w_smp))], 99999);
	
	// aussault rifle
	static const w_assault[2] = {30, 31};
	GivePlayerWeapon(playerid, w_assault[random(sizeof(w_assault))], 99999);

	// rifle
	static const w_rifle[2] = {33, 34};
	GivePlayerWeapon(playerid, w_rifle[random(sizeof(w_rifle))], 99999);

	// heavy
	switch(random(6)) // heavy
	{
	    case 2: GivePlayerWeapon(playerid, 37, 99999);
	}

	switch(random(3)) // nade
	{
	    case 2: GivePlayerWeapon(playerid, 16, 3);
	}

	switch(random(5))
	{
	    case 1: GivePlayerWeapon(playerid, 41, 50);
	    case 2: GivePlayerWeapon(playerid, 42, 50);
	    case 3: GivePlayerWeapon(playerid, 43, 1);
	}
    return 1;
}

EnterHouse(playerid, i)
{
    if(HouseData[i][locked])
	{
		return SCM(playerid, -1, ""er"This house is locked");
	}

    gTeam[playerid] = HOUSE;
    SetPlayerInterior(playerid, g_aHouseInteriorTypes[HouseData[i][interior]][interior]);
	SetPlayerVirtualWorld(playerid, HouseData[i][e_id] + 1000);
	SetPlayerPos(playerid, g_aHouseInteriorTypes[HouseData[i][interior]][house_x], g_aHouseInteriorTypes[HouseData[i][interior]][house_y], g_aHouseInteriorTypes[HouseData[i][interior]][house_z]);
	player_notice(playerid, "House entered", "type ~y~/exit ~w~to leave", 4000);
	SCM(playerid, -1, ""er"Type /exit to leave the house");
	return 1;
}

SetPlayerGWarMode(playerid)
{
    SCM(playerid, -1, ""orange"You are now in Gang War mode, type /exit to leave Gang War!");

	if(PlayerData[playerid][bGod])
	{
        SetPVarInt(playerid, "HadGod", 0);
        TextDrawHideForPlayer(playerid, TXTGodTD);
        PlayerData[playerid][bGod] = false;
        RandomWeapons(playerid);
		SetPlayerHealth(playerid, 100.0);
  		SCM(playerid, -1, ""orange"God mode has been disabled!");
	}

	PlayerData[playerid][bSpeedBoost] = false;
    PlayerData[playerid][bSuperJump] = false;
    PlayerData[playerid][bGWarMode] = true;
}

ResetPlayerGWarMode(playerid, bool:msg = true)
{
    if(msg) SCM(playerid, -1, ""orange"You have left the gang war!");

    for(new r = 0; r < MAX_GZONES; r++)
    {
	    if(GZoneData[r][e_ormid] == ORM:-1)
	        continue;

        TextDrawHideForPlayer(playerid, GZoneData[r][e_txtid]);
    }

    PlayerData[playerid][bGWarMode] = false;
	PlayerData[playerid][bSpeedBoost] = true;
    PlayerData[playerid][bSuperJump] = false;
}
