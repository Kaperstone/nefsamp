/*======================================================================*\
|| #################################################################### ||
|| # Project New Evolution Freeroam - Release 13         			  # ||
|| # ---------------------------------------------------------------- # ||
|| # Copyright ©2011-2013 New Evolution Freeroam	  				  # ||
|| # Created by Mellnik                                               # ||
|| # ---------------------------------------------------------------- # ||
|| # http://nefserver.net	    	                      			  # ||
|| #################################################################### ||
\*======================================================================*/

#pragma dynamic 8192

#define IS_RELEASE_BUILD (true)
#define INC_ENVIORMENT (true)
#define IRC_CONNECT (true)
#define YSI_IS_SERVER

// -
// - Plugins
// -
// sscanf.so | 2.8.1
// timerfix.so | v1.3
// streamer.so | R84
// mysql_static.so | R34
// irc.so | 1.4.3
// dns.so | 2.4

// -
// - Includes
// -
#include <a_samp>   		// 0.3x-R2
#undef MAX_PLAYERS
#define MAX_PLAYERS (405)
#include <YSI\y_iterate>	// 21/09/2013
#include <YSI\y_commands>   // 21/09/2013
#include <YSI\y_master>     // 21/09/2013
#include <YSI\y_stringhash> // 21/09/2013
#include <timerfix>         // v1.3
#include <a_zones>          // 0.3x-R2
#include <sscanf2>      	// 2.8.1
#include <streamer>     	// 2.6.1 R84
#include <floodcontrol>     // 28/06/2012
#include <mSelection>       // 1.1 R3
#include <a_mysql_R34>  	// R34
#include <dini>         	// 1.6
#include <irc>          	// 1.4.3
#include <md-sort>      	// 16/07/2013
#include <unixtimetodate> 	// 2.0
#include <dns>              // v2.4
#if INC_ENVIORMENT == true
#include <server_maps>
#include <server_maps_2>
#include <server_maps_3>
#include <server_maps_4>
#include <server_map_vehicles>
#endif

native IsValidVehicle(vehicleid); // undefined

// -
// - MySQL
// -
#define SQL_HOST   						"127.0.0.1"
#define SQL_PORT                        (3306)
#if IS_RELEASE_BUILD == true
#define SQL_USER   						"nefserver"
#define SQL_PASS   						"t2t0.SZth-zTruhJpR(7ucr8?u"
#define SQL_DATA   						"nefserver"
#else
#define SQL_USER   						"nefdev"
#define SQL_PASS   						"83Qhrb8e7ghRfvb7tgbfsd"
#define SQL_DATA                        "nefdev"
#endif

// -
// - Enviroment
// -
#define SVRNAME                      	"New Evolution Freeroam"
#define SVRSC	                    	"NEF"
//#define SVRLOGO                         "{646464}«(-|-|{CD0000}Stunt {005FFF}Evolution{F0F0F0}™{646464}|-|-)»"
#define SVRLOGO                         "{646464}«(-|-|{CD0000}New {005FFF}Evolution {FFE600}Freeroam{F0F0F0}™{646464}|-|-)»"
#define SVRURL                          "nefserver.net"
#define SVRURLWWW                       "www.nefserver.net"
#define SVRFORUM                        "forum.nefserver.net"
#define SERVER_IP                       "31.204.154.81:7777"
//#define HOSTNAME 						"                  «(-|-| Stunt Evolution™ |-|-)»"
//#define HOSTNAME 						"•NEF• :: New Evolution Freeroam 0.3x (R11)"
//#define HOSTNAME                        "•••••••••• NEF :: Stunt/Race/Freeroam ••••••••••"
#define HOSTNAME                        " 	        NEF » ×DM/Stunt/Race/Freeroam/Minigames×"
//#define HOSTNAME 						"NEF 0.3x (R11)     «Stunt/Race/Freeroam/DM»"
#if IS_RELEASE_BUILD == true
#define CURRENT_VERSION                 "Release 13"
#define CURRENT_VERISON_SHORT           "R13"
#else
#define CURRENT_VERSION                 "PTS:R13"
#define CURRENT_VERSION_SHORT           "PTS:R13"
#endif
#define HOTFIX_REV                      "Hotfix #0"
#define SAMP_VERSION                    "SA-MP 0.3x-R2"
#define MAX_REPORTS 					(7)
#define MAX_ADS                         (10)
#define MAX_GANG_NAME					(20)
#define MIN_GANG_NAME					(4)
#define GANG_POS_NONE                   (0)
#define GANG_POS_JUNIOR_MEMBER          (1)
#define GANG_POS_MEMBER                 (2)
#define GANG_POS_SENIOR_MEMBER          (3)
#define GANG_POS_ADVISOR                (4)
#define GANG_POS_LEADER                 (5)
#define GANG_POS_MAIN_LEADER            (6)
#define house_mark                      "{FFFFFF}[{88EE88}House{FFFFFF}]"
#define business_mark                   "{FFFFFF}[{AAAAFF}Business{FFFFFF}]"
#define gwars_mark                      "{FFFFFF}[{2DFF00}Gang Zone{FFFFFF}]"
#define derby_sign                      "{FFFFFF}[{AAAAFF}DERBY{FFFFFF}]"
#define race_sign                       "{FFFFFF}[{AAAAFF}RACE{FFFFFF}]"
#define tdm_sign                        "{FFFFFF}[{AAAAFF}TDM{FFFFFF}]"
#define cnr_sign                        "{FFFFFF}[{AAAAFF}CNR{FFFFFF}]"
#define war_sign                        "{FFFFFF}[{AAAAFF}WAR{FFFFFF}]"
#define gungame_sign                    "{FFFFFF}[{AAAAFF}GUNGAME{FFFFFF}]"
#define fallout_sign                    "{FFFFFF}[{AAAAFF}FALLOUT{FFFFFF}]"
#define server_sign                     "{FFFFFF}[{FF005F}SERVER{FFFFFF}]"
#define gang_sign                       "{FFFFFF}[{FFA000}GANG{FFFFFF}]"
#define nef                             "{FFFFFF}[{FFE600}"SVRSC"{FFFFFF}]"
#define NO_PERM                     	"{F42626}[INFO] {F42626}Insufficient Permissions"
#define NOT_AVAIL                       "{F42626}[INFO] {F42626}You can´t use this command now! Use /exit to leave."
#define er                              "{F42626}[INFO] {F42626}"
// D2D2D2
#define Error(%1,%2) 					SendClientMessage(%1, -1, "{F42626}[INFO] "GREY2_E""%2)
#define dl                              "{FFE600}• {F0F0F0}"
#define notlogged(%1)                   ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef"", ""white"You need to be logged in to use this feature.\n\n"nef_yellow"Type /register to create an account for you current name.", "OK", "")
#define MAX_ADMIN_LEVEL         		(6)
#define MAX_WARNINGS 					(3)
#define ELEVATOR_SPEED      			(5.0)
#define DOORS_SPEED         			(4.0)
#define ELEVATOR_WAIT_TIME  			(5000)
#define X_DOOR_CLOSED       			(1786.627685)
#define X_DOOR_R_OPENED     			(1785.027685)
#define X_DOOR_L_OPENED     			(1788.227685)
#define GROUND_Z_COORD      			(14.511476)
#define ELEVATOR_OFFSET     			(0.059523)
#define ELEVATOR_STATE_IDLE     		(0)
#define ELEVATOR_STATE_WAITING  		(1)
#define ELEVATOR_STATE_MOVING   		(2)
#define INVALID_FLOOR           		(-1)
#define RESPAWN_TIME                    (60)
#define SCM SendClientMessage
#define SCMToAll SendClientMessageToAll
#define MAX_TELE_CATEGORYS              (10)
#define RGBA(%1,%2,%3,%4) (((((%1) & 0xff) << 24) | (((%2) & 0xff) << 16) | (((%3) & 0xff) << 8) | ((%4) & 0xff)))
#define UpperToLower(%1) for(new ToLowerChar; ToLowerChar < strlen(%1); ToLowerChar++) if(%1[ToLowerChar] > 64 && %1[ToLowerChar] < 91) %1[ToLowerChar] += 32

// -
// - DERBY
// -
#define DERBY_WIHLE_CAM_M1				-3948.2632, 951.8198, 78.4012
#define DERBY_WIHLE_CAM_M2          	2953.7620, 486.3492, 44.3681
#define DERBY_WIHLE_CAM_M3          	214.0030, 1637.5992, 369.9997
#define DERBY_WIHLE_CAM_M4              1509.0637, -1790.3726, 77.7660
#define DERBY_WIHLE_CAM_M5              -1923.6121, -859.1075, 86.4540
#define DERBY_WIHLE_CAM_M6              3749.7786, -69.5137, 34.7968
#define DERBY_WIHLE_CAM_M7              4028.5825, -1909.2007, 56.6765
#define DERBY_WIHLE_CAM_M8              2876.0093, -3530.1829, 24.4397
#define DERBY_WIHLE_CAM_M9              4520.9189, -1753.6084, 56.1358
#define DERBY_CAMPOS_M1                 -4031.8118, 985.9628, 73.5483
#define DERBY_CAMPOS_M2                 2878.3738, 509.6317, 57.4209
#define DERBY_CAMPOS_M3                 146.2626, 1726.9897, 375.9173
#define DERBY_CAMPOS_M4                 1481.6500, -1713.3242, 58.8331
#define DERBY_CAMPOS_M5                 -1990.0116, -962.2039, 65.3364
#define DERBY_CAMPOS_M6                 3917.3489, -53.3306, 18.7947
#define DERBY_CAMPOS_M7                 4090.4087, -1995.4886, 50.2633
#define DERBY_CAMPOS_M8                 2800.4382, -3449.5762, 39.5314
#define DERBY_CAMPOS_M9                 4453.8774, -1642.1117, 36.6551
#define DERBY_CAMLA_M1                  -4030.9736, 985.4224, 73.2184
#define DERBY_CAMLA_M2                  2879.3184, 509.2916, 56.9258
#define DERBY_CAMLA_M3                  147.0293, 1726.3483, 375.4769
#define DERBY_CAMLA_M4                  1481.6300, -1714.3220, 58.3079
#define DERBY_CAMLA_M5                  -1989.5079, -961.3351, 64.8612
#define DERBY_CAMLA_M6                  3916.3560, -53.4894, 18.5597
#define DERBY_CAMLA_M7                  4089.7327, -1994.7545, 49.7484
#define DERBY_CAMLA_M8                  2801.1716, -3450.2600, 38.9760
#define DERBY_CAMLA_M9                  4454.6743, -1642.7051, 36.2001
#define DERBY_FALLOVER_M1     			(20)
#define DERBY_FALLOVER_M2               (1)
#define DERBY_FALLOVER_M3               (327)
#define DERBY_FALLOVER_M4               (27)
#define DERBY_FALLOVER_M5               (36)
#define DERBY_FALLOVER_M6               (1)
#define DERBY_FALLOVER_M7               (1)
#define DERBY_FALLOVER_M8               (1)
#define DERBY_FALLOVER_M9               (1)
#define MAX_DERBY_PLAYERS  				(20)
#define DERBY_WORLD                     (5050)
#define DERBY_TIME      				(120000)
#define DERBY_VOTING_TIME     			(15000)
#define DEFAULT_DERBY_TIME              (120)
#define DERBY_FALLOVER_CHECK_TIME   	(500)

// -
// - Firework
// -
#define MAX_LIGHTS 						(100)
#define MAX_PARTS 						(13)
#define Sprinkleid 						(52)
#define RBSprinkleid 					(20)

// -
// - TDM
// -
#define DEFAULT_BG_TIME                 (240)
#define BG_MAP1_WHILECAM                -512.8727, -121.8333, 97.8991
#define BG_MAP2_WHILECAM                623.2424,-2418.4194,9.4857
#define BG_MAP3_WHILECAM                -2156.0381, -233.5269, 51.2263
#define BG_MAP4_WHILECAM                738.9284, -2306.1187, 117.9879
#define BG_MAP5_WHILECAM                1757.4000, -3023.5654, 26.0215
#define BG_MAP1_CAMPOS                  -409.0511, -39.5656, 126.9736
#define BG_MAP2_CAMPOS                  620.6779, -2421.5466, 17.5673
#define BG_MAP3_CAMPOS                  -2134.0254, -191.9131, 57.6586
#define BG_MAP4_CAMPOS                  726.9686, -2300.6931, 118.7531
#define BG_MAP5_CAMPOS                  1784.0186, -2997.1704, 30.8122
#define BG_MAP1_CAMLA                   -409.8650, -40.1510, 126.3882
#define BG_MAP2_CAMLA                   618.8812,-2419.9033,15.4312
#define BG_MAP3_CAMLA                   -2134.6445, -192.7050, 57.1735
#define BG_MAP4_CAMLA                   726.3855, -2301.5107, 118.2781
#define BG_MAP5_CAMLA                   1784.7314, -2997.8691, 30.3122
#define BG_WORLD                        (5048)
#define BG_TEAM1                        (1)
#define BG_TEAM2                        (2)
#define BG_VOTING                       (0)
#define BG_MAP1                         (1)
#define BG_MAP2                         (2)
#define BG_MAP3                         (3)
#define BG_MAP4                         (4)
#define BG_MAP5                         (5)
#define BG_TIME                         (240000)
#define BG_VOTING_TIME                  (20000)

// -
// - Fallout
// -
#define DEFAULT_FALLOUT_TIME            (240)
#define FALLOUT_WORLD                   (121212)

// -
// - Deathmatch
// -
#define DM_WORLD                        (100000)
#define DM_1                            (1)
#define DM_2                            (2)
#define DM_3                            (3)
#define DM_4                            (4)

// -
// - CNR
// -
#define CNR_WORLD                       (20)
#define COLOR_CNR_COP 					0x1F75FEFF
#define COLOR_CNR_PRO_ROBBER            0xFF3200FF

// -
// - GWARS
// -
#define MAX_GZONES						(45)
#define MAX_GZONES_PER_GANG             (15)
#define GZONE_SIZE                      (75.0)
#define COLOR_HOSTILE                   (0x95133496)
#define COLOR_FRIENDLY                  (0x33FF33AA)
#define COLOR_NONE                      (0xFFFFFFAA)

// -
// - Houses
// -
#define MAX_HOUSES 						(1000)
#define MAX_PLAYER_HOUSES 				(5)
#define MAX_HOUSE_OBJECTS               (10)

// -
// - Properties
// -
#define MAX_PROPS                       (1000)
#define MAX_PLAYER_PROPS 				(5)
#define MAX_PROP_LEVEL                  (20)

// -
// - Other
// -
#define REAC_TIME              			(800000)
#define MAX_BANKS    			 		20
#define MAX_AMMUNATIONS    		 		20
#define MAX_BURGERSHOTS    		 		20
#define MAX_CLUCKINBELLS    	 		20
#define MAX_PIZZASTACKS 		 		20
#define MAX_TFS                         20
#define MAX_STORES 						(MAX_BANKS + MAX_AMMUNATIONS + MAX_BURGERSHOTS + MAX_CLUCKINBELLS + MAX_PIZZASTACKS + MAX_TFS)
#define COUNT_DOWN_TILL_RACE_START 		(21)
#define MAX_RACE_TIME 					(300)
#define RACE_MAX_CHECKPOINTS            (75)
#define RACE_MAX_PLAYERS 				(12)
#define Key(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0) 					((newkeys & (%0)) == (%0))
#define RELEASED(%0) 					(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PreloadAnimLib(%1,%2)			ApplyAnimation(%1,%2,"NULL",0.0,0,0,0,0,0)
#define MINIGUN_WORLD                   (68565)
#define SNIPER_WORLD                    (57412)
#define SERVERMSGS_TIME                 (900000)
#define MAX_PLAYER_PVS	                (8)

#define function:%1(%2) \
			forward public %1(%2); \
			public %1(%2)

#define ConvertTime(%0,%1,%2,%3,%4) \
	new \
	    Float:%0 = floatdiv(%1, 60000) \
	;\
	%2 = floatround(%0, floatround_tozero); \
	%3 = floatround(floatmul(%0 - %2, 60), floatround_tozero); \
	%4 = floatround(floatmul(floatmul(%0 - %2, 60) - %3, 1000), floatround_tozero)

// -
// - IRC
// -
#if IS_RELEASE_BUILD == true
#define IRC_SERVER                      "mars.sa-irc.com"
#define IRC_PORT                        (6667)
#define IRC_CHANNEL     				"#NEF"
#define IRC_NICKSERV            		"Nickserv"
#define PLUGIN_VERSION 					"1.4.3"
#define IRC_MAX_BOTS                    (5)
#else
#define IRC_SERVER                      "earth.sa-irc.com"
#define IRC_PORT                        (6667)
#define IRC_CHANNEL     				"#NEF.samp.PTS"
#define IRC_NICKSERV            		"Nickserv"
#define PLUGIN_VERSION 					"1.4.3"
#define IRC_MAX_BOTS                    (5)
#endif

// - 
// - Colors
// -
#define SEMI_TRANS                      (0x0A0A0A55)
#define SEMI_WHITE                      (0xFEFEFEC3)
#define PURPLE                  		(0x7800FF85)
#define NEF_GREEN                      	(0x2DFF00FF)
#define NEF_YELLOW                      (0xFFE600FF)
#define GREEN 							(0x0BDDC400)
#define GREEN2		 					(0x3BBD44FF)
#define RED        						(0xF4262600)
#define ORANGE 							(0xFF96008B)
#define BLUE 							(0x3793FAFF)
#define YELLOW 							(0xF2F853FF)
#define FYELLOW                         (0xFFE600FF)
#define LIGHT_YELLOW                    (0xFFFF0066)
#define WHITE 							(0xFEFEFEFF)
#define PINK 							(0xFF00EB80)
#define LILA 							(0xFF005FFF)
#define GREY 							(0x8C8C8CFF)
#define BROWN 							(0xA52A2AAA)
#define BLACK       					(0x0A0A0AFF)
#define ADMIN       					(0xF50000FF)
#define BESCH                           (0xE8D04C00)
#define R_BESCH                         (0x00FFB4FF)
#define r_besch                         "{00FFB4}"
#define besch                           "{E8D04C}"
#define lila                            "{FF005F}"
#define vlila                           "{4764EF}"
#define lgreen                          "{88EE88}"
#define green2                          "{43D017}"
#define vgreen                          "{6EF83C}"
#define purple                          "{7800FF}"
#define green                           "{0BDDC4}"
#define yellow                          "{F2F853}"
#define fyellow                         "{FFE600}"
#define yellow_e                        "{DBED15}"
#define light_yellow                    "{FFFA00}"
#define white                           "{F0F0F0}"
#define blue							"{0087FF}"
#define orange                          "{FFA000}"
#define grey                            "{969696}"
#define red                             "{F42626}"
#define lb_e 							"{15D4ED}"
#define nef_green                      	"{2DFF00}"
#define nef_yellow                      "{FFE600}"

// old Stunt Evolution Colors
#define COLOR_WHITE 					0xFFFFFFFF
#define COLOR_WHITEP 					0xFFE4C4FF
#define COLOR_ORANGE   					0xDB881AFF
#define COLOR_ORANGE2					0xFF5000FF
#define COLOR_IVORY 					0xFFFF82FF
#define COLOR_BLUE						0x004BFFFF
#define COLOR_RCONBLUE      			0x0080FF99
#define COLOR_PURPLE 					0x5A00FFFF
#define COLOR_RED 						0xFF0000FF
#define COLOR_LIGHTGREEN 				0x00FF00FF
#define COLOR_YELLOW 					0xFFFF00FF
#define COLOR_YELLOW2 					0xF5DEB3FF
#define COLOR_LIGHTBLUE 				0x87CEFAFF
#define COLOR_PINK						0xEE82EEFF
#define COLOR_GOLD						0xFFD700FF
#define COLOR_FIREBRICK 				0xB22222FF
#define COLOR_GREEN 					0x3BBD44FF
#define COLOR_GREY						0xBABABAFF
#define COLOR_GREY2 					0x778899FF
#define COLOR_BROWN 					0x8B4513FF
#define COLOR_STEELBLUE 				0xB0C4DEFF
#define COLOR_SYSTEM 					0xEFEFF7FF
#define COLOR_CNR_COP       			0x1F75FEFF

#define RED_E 							"{FF0000}"
#define BLUE_E 							"{004BFF}"
#define PINK_E 							"{FFB6C1}"
#define YELLOW_E 						"{DBED15}"
#define LG_E 							"{00FF00}"
#define LB_E 							"{15D4ED}"
#define LB2_E							"{87CEFA}"
#define GREY_E 							"{BABABA}"
#define GREY2_E 						"{778899}"
#define WHITE_E 						"{FFFFFF}"
#define WHITEP_E 						"{FFE4C4}"
#define IVORY_E 						"{FFFF82}"
#define ORANGE_E 						"{DB881A}"
#define GREEN_E 						"{3BBD44}"
#define PURPLE_E 						"{5A00FF}"

// -
// - Player
// -
#define COOLDOWN_CHAT                   (5500)
#define COOLDOWN_CMD_ROB                (10000)
#define COOLDOWN_CMD_BUY                (30000)
#define COOLDOWN_CMD_PBUY               (30000)
#define COOLDOWN_CMD_LOCK               (5000)
#define COOLDOWN_CMD_GIVECASH           (120000)
#define COOLDOWN_CMD_REPORT             (30000)
#define COOLDOWN_CMD_SELL               (30000)
#define COOLDOWN_CMD_PSELL              (30000)
#define COOLDOWN_CMD_CHANGEPASS         (60000)
#define COOLDOWN_CMD_PM                 (3000)
#define COOLDOWN_CMD_HITMAN             (60000)
#define COOLDOWN_CMD_GINVITE            (60000)
#define COOLDOWN_CMD_GKICK              (8000)
#define COOLDOWN_CMD_GCREATE            (5000)
#define COOLDOWN_DEATH                  (3000)
#define COOLDOWN_CMD                  	(5000)
#define COOLDOWN_TEXT                   (5000)
#define COOLDOWN_CMD_HAREFILL           (120000)
#define COOLDOWN_CMD_VIPLI              (15000)
#define COOLDOWN_CMD_CD                 (60000)
#define COOLDOWN_BIKEC                  (300000)
#define COOLDOWN_CMD_MEDKIT             (120000)


// ===
// Enums
// ===

// -
// - DIALOGIDS
// -
enum
{
	EXIT_NONE,
	EXIT_LOGGED,
	EXIT_FIRST_SPAWNED
};

enum (+= 56)
{
    DIALOG_RACE_RACESTARTPOS,
    DIALOG_RACE_CHECKPOINTS,
    DIALOG_RACE_RACERDY,
    DIALOG_RACE_RACEVEH,
    DIALOG_RACE_RACEVW,
    DIALOG_RACE_RACETYPE,
    REGISTER_DIALOG,
    REGISTER_DIALOG2,
    LOGIN_DIALOG,
    TELE_DIALOG,
    WEAPON_DIALOG,
    STREAM_DIALOG,
    ACHS_DIALOG,
    LIFT_DIALOG,
    BANK_DIALOG,
    SERVERSTATS_DIALOG,
    VEHICLE_DIALOG,
    TOY_DIALOG,
    CARBUY_DIALOG,
    VEHICLE_PLATE_DIALOG,
    CUSTOM_PLATE_DIALOG,
    VMENU_DIALOG,
    NEON_DIALOG,
    GMENU_DIALOG,
    BGVOTING_DIALOG,
    DERBY_VOTING_DIALOG,
    HELP_DIALOG,
    ANIMS_DIALOG,
    STATS_DIALOG,
    WANTEDS_DIALOG,
    TOPLIST_DIALOG,
    ADMINS_DIALOG,
    CMDS_DIALOG,
    MOST_DEATHS_DIALOG,
	MOST_KILLS_DIALOG,
	FIRST_SPAWN_DIALOG,
	MOST_PLAYING_TIME_DIALOG,
	RICHLIST_DIALOG,
	SCORE_DIALOG,
	GANGS_DIALOG,
	HOUSE_UPGRADE_DIALOG,
	HOUSE_MENU_DIALOG,
	PROP_MENU_DIALOG,
	SETTINGS_DIALOG,
	GANG_KICK_DIALOG,
	CLOSE_GANG_DIALOG,
	GANG_SET_RANK_DIALOG,
	RULES_DIALOG,
    TOP_GANGS_DIALOG,
    NAME_CHANGE_DIALOG,
    HAREFILL_DIALOG,
    VCONTROL_DIALOG,
    VIP_DIALOG,
    ADMIN_CMD_DIALOG,
    LABEL_DIALOG,
    COLOR_DIALOG,
    ANN2_DIALOG,
    REFIL_DIALOG,
    PV_SLOT_SELECT_DIALOG,
    CM_DIALOG,
    CNR_DIALOG,
    COPS_REFILL,
    ROBBER_REFILL,
    NO_CREDITS_DIALOG,
    PROP_LEVEL_UPGRADE_DIALOG,
    NO_DIALOG_ID
};

// -
// - MySQL
// -
enum
{
	THREAD_ACCOUNT_EXIST,
  	THREAD_IS_BANNED,
  	THREAD_CHECK_IP,
  	THREAD_CREATE_ACCOUNT,
  	THREAD_CREATE_ACCOUNT2,
  	THREAD_LOAD_PLAYER,
  	THREAD_LOAD_PLAYER_GANG,
  	THREAD_CHECK_PLAYER_PASSWD,
  	THREAD_GANG_EXIST,
  	THREAD_CREATE_GANG,
  	THREAD_FETCH_GANG_MEMBER_NAMES,
  	THREAD_FETCH_GANG_INFO,
  	THREAD_KICK_FROM_GANG,
  	THREAD_KICK_FROM_GANG_2,
 	THREAD_ASSIGN_RANK,
	THREAD_ASSIGN_RANK_2,
  	THREAD_CHECK_AUTO_LOGIN,
  	THREAD_GANG_DESTROY,
  	THREAD_RACE_TOPLIST,
  	THREAD_RACE_FINISH,
  	THREAD_RACE_LATEST
};

// -
// - gTeam data
// -
enum
{
	NORMAL,
	DERBY,
 	gRACE,
	gBG_TEAM1,
	gBG_TEAM2,
	MINIGUN,
	SNIPER,
	BG,
	DM,
	WAR,
	CNR,
	HOUSE,
	BUYCAR,
	gBG_VOTING,
	GUNGAME,
	FALLOUT,
	gBUILDRACE,
	STORE,
	SPEC,
	VIPL,
	JAIL
};

// -
// - gang pos
// -
enum e_gang_pos
{
	E_gang_pos_name[16]
};

// -
// - player enum
// -
enum (<<= 1)
{
	BOOST_MONEY_x2,
	BOOST_MONEY_x3 = 1,
	BOOST_SCORE_x2,
	BOOST_SCORE_x3,
	BOOST_MASTER
};

enum e_player_data
{
	bool:GotVIPLInv,
	bool:bIsDead,
	bool:bShowToys,
	bool:Frozen,
	bool:AllowSpawn,
 	bool:onduty,
	bool:Muted,
 	bool:SpeedBoost,
 	bool:SuperJump,
	bool:AOnline,
 	bool:gInvite,
 	bool:FalloutLost,
	bool:SavedPos,
	bool:bHasSpawn,
	bool:bFirstSpawn,
	bool:bFooterEnabled,
	bool:bRainbow,
	bool:vTDShown,
	bool:RampActive,
	bool:bCaps,
	bool:bGod,
	bool:bGWarMode,
	bool:bLotto,
	bool:bLoadMap,
	bool:KBMarked,
	bool:SniperAiming,
	bool:bFloodDect,
	bool:bLogged,
	bool:bSpeedo,
	tLoadMap,
	Boost,
	BoostDeplete,
	sName[25],
	sIP[16],
	SavedColor,
	Float:fOldPos[4],
	AdditionalPVSlots,
	AdditionalToySlots,
	AdditionalHouseSlots,
	AdditionalPropSlots,
	AdditionalHouseObjSlots,
	HouseSlotSelected,
	PropSlotSelected,
	DrawnNumber,
	TrailerVid,
	tRainbow,
	tTDhandle,
	ExitType,
	GlobalID,
	Level,
	Kills,
	Deaths,
	Money,
	Score,
	DerbyWins,
	RaceWins,
	FalloutWins,
	GungameWins,
	EventWins,
	BGWins,
	Credits,
	Medkits,
	tMedkit,
	MedkitTime,
	PayDay,
	tInfo,
  	Houses,
	Props,
	GCPlayer,
	GCNameHash,
	GCOffer,
	GCPrice,
	VIPPlayer,
	VIPNameHash,
	VIPOffer,
	tickLastRob,
	tickLastGiveCash,
	tickLastMedkit,
	tickLastVIPLInv,
	tickLastRefill,
	tickLastReport,
	tickLastHitman,
	tickLastGInvite,
	tickLastGKick,
	tickLastGCreate,
	tickLastLocked,
	tickLastBIKEC,
  	tickLastBuy,
  	tickLastPBuy,
  	tickLastSell,
  	tickLastPSell,
  	tickLastPW,
  	tickLastChat,
  	tickLastPM,
  	tickPlayerUpdate,
  	tickLastCD,
    tickJoin_bmx,
  	LastLogin,
	Reaction,
	Bank,
	TotalTime,
	ConnectTime,
	VIP,
	LastNameChange,
	Warnings,
	RankSelected,
	Wanteds,
	HitmanHit,
	Vehicle,
	Text3D:AdminDutyLabel,
	Text3D:VIPLabel,
	ChatWrote,
	MuteTimer,
 	GangPosition,
 	TmpGangID,
 	GangID,
	Text3D:GangLabel,
	GangKickMem[MAX_PLAYER_NAME+1],
	GangAssignRank[MAX_PLAYER_NAME+1],
 	GangName[21],
 	GangTag[5],
 	RegDate,
 	HouseIntSelected,
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sA,
	SpecID,
	Float:SpecX,
	Float:SpecY,
	Float:SpecZ,
	Float:SpecA,
	Float:CSpawnX,
	Float:CSpawnY,
	Float:CSpawnZ,
	Float:CSpawnA,
	tTimerHP,
	toy_selected,
	houseobj_selected,
	iCoolDownCommand,
	iCoolDownText,
	iCoolDownDeath
};
enum e_player_ach_data
{
    E_ach_styler, // Buy a toy (/toy)
	E_ach_grimreaper, // Make 300 Kills
	E_ach_masskiller, // Get a 25 Killstreak
	E_ach_eliteracer, // win 10 races
	E_ach_toofast, // win 10 reaction tests
	E_ach_scorewhore, // get 2000 score
	E_ach_destroyer, // win 10 derbys
	E_ach_restinpeace, // die 50 times
	E_ach_silentkiller, // kill someone with a knife
    E_ach_oneshot2kills, // win 10 gungames
    E_ach_deepimpact, // win 10 fallouts
	E_ach_skydiver, // win /skydive and /skydive2 in a row
	E_ach_biker, // win /bikec
	E_ach_bmxmaster // win /bmx
};

// -
// - top stats
// -
enum e_top_wanteds
{
	E_playerid,
	E_wanteds
};

enum e_top_richlist
{
	E_playerid,
	E_money
};

enum e_top_score
{
	E_playerid,
	E_pscore
};

enum e_top_kills
{
	E_playerid,
	E_kills
};

enum e_top_deaths
{
	E_playerid,
	E_deaths
};

enum e_top_time
{
	E_playerid,
	E_time
};

enum e_top_rtests
{
	E_playerid,
	E_test
};

enum e_top_derby
{
	E_playerid,
	E_derby
};

enum e_top_fallout
{
	E_playerid,
	E_fallout
};

enum e_top_race
{
	E_playerid,
	E_race
};

enum e_top_gungame
{
	E_playerid,
	E_gungame
};

// -
// - player toy data
// -
enum e_toy_data
{
	toy_model,
	toy_bone,
	Float:toy_x,
	Float:toy_y,
	Float:toy_z,
	Float:toy_rx,
	Float:toy_ry,
	Float:toy_rz,
	Float:toy_sx,
	Float:toy_sy,
	Float:toy_sz
};

// -
// - player pv enum
// -
enum e_player_pv_data
{
	PVehicleID,
	Text3D:PVehicleLabel,
	Model,
	PaintJob,
	Color1,
	Color2,
	Mod1,
	Mod2,
	Mod3,
	Mod4,
	Mod5,
	Mod6,
	Mod7,
	Mod8,
	Mod9,
	Mod10,
	Mod11,
	Mod12,
	Mod13,
	Mod14,
	Mod15,
	Mod16,
	Mod17,
	Neon1,
	Neon2,
	Plate[13]
};

// -
// - gzone enum
// -
enum e_gzone_data
{
	iID,
	sZoneName[41],
	Float:E_x,
	Float:E_y,
	Float:E_z,
	localGang,
	iLocked,
	iTimeLeft,
	iconid,
	Text3D:label,
	Text:E_Txt,
	checkid,
	zoneid,
	zsphere,
	bool:bUnderAttack,
	AttackingGang,
	DefendingGang
};

// -
// - house enum
// -
enum e_house_data
{
	iID,
	Owner[25],
	Float:E_x,
	Float:E_y,
	Float:E_z,
	interior,
	price,
	E_score,
	Text3D:label,
	sold,
	locked,
	pickid,
	iconid,
	E_Obj_Model[MAX_HOUSE_OBJECTS],
	E_Obj_ObjectID[MAX_HOUSE_OBJECTS],
	Text3D:E_Obj_Label[MAX_HOUSE_OBJECTS],
	date
};

// -
// - property enum
// -
enum e_property_data
{
	iID,
	Owner[25],
	Float:E_x,
	Float:E_y,
	Float:E_z,
	Text3D:label,
	sold,
	E_Level,
	pickid,
	iconid,
	date
};
enum e_prop_matrix
{
	E_blevel,
	E_bupradecoast,
	E_bearnings
};

// -
// - credits enum
// -
enum e_credits_matrix
{
	E_item_name[32],
	E_item_credits,
	E_item_quantity,
	E_item_duration[32],
	E_item_description[255]
};

// -
// - house type enum
// -
enum e_house_type
{
	interior,
	Float:house_x,
	Float:house_y,
	Float:house_z,
	intname[32],
	price
};

// -
// - pv matrix
// -
enum e_pv_matrix
{
	pv_category,
	pv_modelid,
	pv_price,
	pv_modelname[30]
};

// -
// - derby data
// -
enum e_derby_map1_data
{
	Float:m1sX,
	Float:m1sY,
	Float:m1sZ,
	Float:m1sA,
	bool:m1sUsed
};
enum e_derby_map2_data
{
	Float:m2sX,
	Float:m2sY,
	Float:m2sZ,
	Float:m2sA,
	bool:m2sUsed
};
enum e_derby_map3_data
{
	Float:m3sX,
	Float:m3sY,
	Float:m3sZ,
	Float:m3sA,
	bool:m3sUsed
};
enum e_derby_map4_data
{
	Float:m4sX,
	Float:m4sY,
	Float:m4sZ,
	Float:m4sA,
	bool:m4sUsed
};
enum e_derby_map5_data
{
	Float:m5sX,
	Float:m5sY,
	Float:m5sZ,
	Float:m5sA,
	bool:m5sUsed
};
enum e_derby_map6_data
{
	Float:m6sX,
	Float:m6sY,
	Float:m6sZ,
	Float:m6sA,
	bool:m6sUsed
};
enum e_derby_map7_data
{
	Float:m7sX,
	Float:m7sY,
	Float:m7sZ,
	Float:m7sA,
	bool:m7sUsed
};
enum e_derby_map8_data
{
	Float:m8sX,
	Float:m8sY,
	Float:m8sZ,
	Float:m8sA,
	bool:m8sUsed
};
enum e_derby_map9_data
{
	Float:m9sX,
	Float:m9sY,
	Float:m9sZ,
	Float:m9sA,
	bool:m9sUsed
};

// -
// - fallout data
// -
enum e_fallout_data
{
	I_iShaketimer[101],
	I_iNumberout[101],
	I_iObject[101],
	I_iShake[101],
	I_iTimer[2],
	I_iCount,
	I_iJoin,
	I_tLoseGame
};
enum
{
	e_Fallout_Inactive,
	e_Fallout_Startup,
	e_Fallout_Running,
	e_Fallout_Finish
};

// -
// - GunGame data
// -
enum e_gungame_data
{
	level,
	bool:dead,
	bool:pw
};
enum e_GunGame
{
	GG_iPlayer,
	GG_iLevel
};

// -
// - race data
// -
enum e_race_position
{
	RP_iPlayer,
	RP_iValue
};
enum e_race_data
{
	E_vModel,
	E_rType,
	E_rWorld,
	E_rCPs,
	E_DeployTime
};
enum
{
	RaceStatus_Inactive,
	RaceStatus_StandBy,
	RaceStatus_StartUp,
	RaceStatus_Active
};

// -
// - firework
// -
enum e_firework
{
    FireCracker,
    Firerocket1,
    Firerocket2,
    Crackerroll,
    Fountain1,
    Fountain2,
    Fountain3,
    RocketB,
    DrawDistance,
};

// ===
// global
// ===

new const szRandomInfoTXTs[14][] =
{
	"Don't wanna get killed? Type ~g~~h~~h~/god",
	"Flip your car with key ~g~~h~~h~'2'",
	"Visit our forums! "SVRFORUM"",
	"Get ~p~VIP ~w~today! Go to "SVRURLWWW"/vip",
	"Get some ~y~Gold Credits ~w~at "SVRURLWWW"/credits",
	"Player Control: ~g~~h~~h~/settings",
	"If you see a hacker in game use /report <id> <reason>",
	"Type ~y~/cnr ~w~to join Cops and Robbers game",
	"Use ~y~/m ~w~and select a minigame to play in!",
	"~y~/tune ~w~your vehicle randomly",
	"Join minigames to earn money and score! ~g~~h~~h~/m",
	"Want money and score fast? Read ~g~~h~~h~/help",
	"Go to ~g~~h~~h~/vs ~w~and get a private vehicle which you can tune!",
	"Go to ~g~~h~~h~/vs ~w~and get a private vehicle which you can tune!"
};

new const ServerMSGS[15][] =
{
	""yellow_e"- ServerNPC - "LB2_E"Visit our site: "SVRURLWWW"",
	""yellow_e"- ServerNPC - "LB2_E"Join Minigames for money and score - /help",
	""yellow_e"- ServerNPC - "LB2_E"Player Control: /settings",
	""yellow_e"- ServerNPC - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip",
	""yellow_e"- ServerNPC - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip",
	""yellow_e"- ServerNPC - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/credits",
	""yellow_e"- ServerNPC - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/credits",
	""yellow_e"- ServerNPC - "LB2_E"Join Minigames to earn money and score - /help",
	""yellow_e"- ServerNPC - "LB2_E"Got suggestions? Post them on our forums! ("SVRFORUM")",
	""yellow_e"- ServerNPC - "LB2_E"Use /report to report a player to the admins",
	""yellow_e"- ServerNPC - "LB2_E"Get "SVRSC" Credits (/credits) today! "SVRURLWWW"/credits",
	""yellow_e"- ServerNPC - "LB2_E"Add "SVRSC" to your favlist! samp."SVRURL":7777",
	""yellow_e"- ServerNPC - "LB2_E"Get VIP (/vip) today! "SVRURLWWW"/vip",
	""yellow_e"- ServerNPC - "LB2_E"Get a private vehicle which you can tune! (/vs)",
	""yellow_e"- ServerNPC - "LB2_E"Get a private vehicle which you can tune! (/vs)"
};

new Derby_Map1Spawns[MAX_DERBY_PLAYERS][e_derby_map1_data] =
{
	{-3957.3640, 969.7915, 65.6281, 235.3673, false},
	{-3942.8943, 938.6829, 65.6085, 359.7384, false},
	{-3905.7332, 922.6584, 52.5285, 268.2442, false},
	{-3878.5010, 922.4542, 52.5285, 91.23260, false},
	{-3862.9128, 927.0121, 52.5081, 323.7048, false},
	{-3846.5625, 931.5337, 52.5081, 36.39880, false},
	{-3847.0959, 946.5208, 52.5281, 71.17910, false},
	{-3862.3210, 960.0160, 52.5281, 244.1173, false},
	{-3845.7188, 989.4063, 52.5285, 272.0277, false},
	{-3886.8899, 989.3755, 52.5285, 89.35270, false},
	{-3890.9119, 969.2299, 52.5285, 177.0868, false},
	{-3893.9905, 949.9914, 52.5285, 131.3398, false},
	{-3912.6133, 948.6409, 52.5285, 91.54600, false},
	{-3934.2073, 961.6917, 52.5085, 1.931900, false},
	{-3929.2332, 975.3268, 40.8805, 268.2678, false},
	{-3941.8633, 957.9515, 36.3281, 39.84560, false},
	{-3974.4358, 959.5692, 36.3285, 118.8063, false},
	{-4013.4832, 925.3674, 52.5285, 356.6052, false},
	{-4011.8496, 954.6926, 52.5285, 268.5577, false},
	{-3993.0066, 978.3261, 52.5085, 107.5262, false}
};

new Derby_Map2Spawns[MAX_DERBY_PLAYERS][e_derby_map2_data] =
{
	{3067.4111, 556.9147, 40.7377, 147.9308, false},
	{3050.3350, 531.4977, 40.7381, 147.9308, false},
	{3047.3203, 557.5518, 40.6794, 144.7741, false},
	{3073.9629, 533.7264, 40.9304, 326.5092, false},
	{3030.9526, 501.8501, 40.8286, 145.4242, false},
	{2982.2078, 465.6787, 10.7985, 89.65030, false},
	{2951.7710, 465.3126, 10.7985, 89.65030, false},
	{2943.5374, 454.8485, 10.7985, 181.7712, false},
	{2928.1584, 445.1630, 13.0385, 145.1108, false},
	{2916.7087, 429.5787, 13.0385, 150.1242, false},
	{2930.4187, 408.3071, 17.5582, 234.4117, false},
	{3011.3757, 448.3677, 16.2772, 265.1187, false},
	{3032.5698, 434.8050, 21.3385, 359.4096, false},
	{2991.1526, 439.6288, 39.2401, 358.7829, false},
	{3036.7063, 510.8661, 4.36850, 177.0712, false},
	{3036.4888, 484.0915, 4.36850, 177.0712, false},
	{3009.2834, 478.9747, 4.38850, 90.27710, false},
	{2952.6309, 501.4793, 22.0385, 90.27710, false},
	{2920.8032, 516.9267, 22.0285, 355.9628, false},
	{2946.0103, 526.7934, 22.0185, 86.80700, false}
};

new Derby_Map3Spawns[MAX_DERBY_PLAYERS][e_derby_map3_data] =
{
	{246.3290, 1714.4462, 352.5285, 178.5039, false},
	{222.8298, 1714.9265, 352.5285, 90.14300, false},
	{185.5551, 1714.3876, 343.5285, 181.9506, false},
	{186.1509, 1696.8904, 343.5285, 181.9506, false},
	{186.4787, 1669.7019, 343.5285, 7.445600, false},
	{208.2734, 1657.8409, 352.5285, 178.1905, false},
	{194.5793, 1636.9927, 354.3859, 89.51640, false},
	{186.6167, 1663.1619, 343.5285, 356.8490, false},
	{172.9417, 1637.2440, 357.0097, 180.6972, false},
	{173.0500, 1618.4937, 357.0097, 279.0848, false},
	{210.4522, 1618.9490, 361.8463, 83.32920, false},
	{241.8557, 1617.7828, 363.6497, 300.1908, false},
	{246.1263, 1631.1395, 363.6497, 357.5313, false},
	{246.6167, 1674.6024, 352.5485, 357.5313, false},
	{233.8339, 1689.3091, 352.5285, 89.96550, false},
	{208.1478, 1680.4999, 352.5085, 176.8159, false},
	{226.0559, 1666.7491, 355.5157, 178.3825, false},
	{226.4928, 1635.9159, 361.0836, 357.6671, false},
	{229.3643, 1715.0703, 352.5285, 90.70460, false},
	{170.1862, 1689.3947, 352.5285, 273.0662, false}
};

new Derby_Map4Spawns[MAX_DERBY_PLAYERS][e_derby_map4_data] =
{
	{1487.6512, -1755.2731, 33.4297, 262.8351, false},
	{1506.7178, -1760.9492, 33.4297, 268.7939, false},
	{1511.1926, -1771.6134, 33.4297, 267.3918, false},
	{1532.4257, -1764.9232, 33.4297, 179.4124, false},
	{1542.7130, -1779.0228, 33.4297, 179.0619, false},
	{1532.5718, -1792.3685, 33.4297, 169.9484, false},
	{1519.6860, -1817.5404, 33.4243, 87.9278, false},
	{1489.2483, -1816.4391, 33.4243, 87.9278, false},
	{1470.1770, -1812.2526, 33.4243, 87.9278, false},
	{1456.9327, -1818.6555, 33.4243, 87.9278, false},
	{1441.1545, -1811.5428, 33.4243, 67.5979, false},
	{1425.7040, -1812.7531, 33.4297, 1.3505, false},
	{1418.1497, -1796.1854, 33.4297, 353.2886, false},
	{1429.6094, -1786.4208, 33.4297, 347.6803, false},
	{1425.8998, -1764.4401, 33.4297, 275.1236, false},
	{1444.4971, -1767.0941, 33.4297, 275.1236, false},
	{1459.3033, -1758.2831, 33.4297, 288.0927, false},
	{1478.1750, -1755.6753, 33.4297, 275.4741, false},
	{1457.6566, -1805.7548, 33.4243, 88.9793, false},
	{1502.2307, -1805.2515, 33.4243, 86.8763, false}
};

new Derby_Map5Spawns[MAX_DERBY_PLAYERS][e_derby_map5_data] =
{
	{-1951.3622, -924.9825, 41.5739, 0.4935, false},
	{-1951.3545, -907.4986, 41.3420, 0.8532, false},
	{-1951.3573, -861.6216, 41.4833, 0.8344, false},
	{-1950.2805, -823.5054, 41.1760, 1.0857, false},
	{-1950.8802, -802.3750, 41.2701, 2.0072, false},
	{-1950.5498, -782.8512, 41.2198, 358.4045, false},
	{-1950.5662, -770.9384, 41.2223, 2.5244, false},
	{-1950.4987, -752.6329, 41.2115, 359.5575, false},
	{-1961.9818, -754.6239, 40.4814, 180.7448, false},
	{-1961.7175, -763.6168, 40.5629, 182.1786, false},
	{-1968.2728, -768.7271, 39.3264, 90.9983, false},
	{-1960.7704, -791.6741, 41.5325, 177.1483, false},
	{-1960.9248, -820.2233, 40.7711, 179.9023, false},
	{-1968.1675, -827.4709, 39.3269, 90.9073, false},
	{-1960.7595, -858.5953, 41.5654, 179.5008, false},
	{-1960.5577, -878.2072, 40.8663, 182.2004, false},
	{-1960.8175, -897.6044, 40.7994, 179.1699, false},
	{-1968.1946, -902.1904, 39.3299, 83.8091, false},
	{-1959.5391, -928.6652, 41.3451, 177.8511, false},
	{-1960.3411, -951.4661, 40.9212, 180.5387, false}
};

new Derby_Map6Spawns[MAX_DERBY_PLAYERS][e_derby_map6_data] =
{
	{3873.0828,-75.0219,2.3334,84.3515, false},
	{3872.4290,-55.6568,2.3383,112.0350, false},
	{3867.7134,-42.0787,2.3380,138.8138, false},
	{3853.3616,-29.6537,2.3480,154.4953, false},
	{3843.4478,-21.2739,2.3483,145.6348, false},
	{3825.0579,-17.4116,2.3482,188.3425, false},
	{3798.9045,-36.7079,2.3488,239.5291, false},
	{3782.3035,-51.6286,2.3867,257.4987, false},
	{3782.2983,-66.7195,2.3882,267.7532, false},
	{3782.0959,-91.3813,2.3687,296.6480, false},
	{3794.5774,-106.9509,2.3785,222.5016, false},
	{3811.3721,-116.6408,2.3781,249.0273, false},
	{3825.9817,-130.9541,2.3697,1.4488, false},
	{3844.4924,-124.6570,2.3294,29.5070, false},
	{3856.8303,-123.1470,2.3281,42.7229, false},
	{3875.8503,-97.7704,2.3264,61.1305, false},
	{3880.7490,-84.9508,2.3166,39.3552, false},
	{3850.8860,-74.6005,2.3381,77.7126, false},
	{3822.9360,-91.4808,2.3782,123.4223, false},
	{3812.7500,-73.1342,2.3881,0.9317, false}
};

new Derby_Map7Spawns[MAX_DERBY_PLAYERS][e_derby_map7_data] =
{
	{3960.6386, -1944.5787, 18.4141, 358.5083, false},
	{3980.8674, -1929.7977, 18.4195, 268.1833, false},
	{4022.4838, -1930.0488, 18.4187, 269.7169, false},
	{4045.8247, -1907.4794, 18.4188, 357.8791, false},
	{4030.3295, -1887.8428, 18.4189, 91.7818, false},
	{4016.0778, -1865.5898, 18.4192, 358.0066, false},
	{4035.0522, -1852.3995, 18.4187, 274.9741, false},
	{4061.4140, -1861.6960, 18.4195, 182.9152, false},
	{4021.7668, -1860.1213, 2.3192, 358.7831, false},
	{4010.0903, -1839.4732, 2.3187, 89.5712, false},
	{4000.9663, -1855.6241, 2.3181, 179.8362, false},
	{4000.9157, -1889.3894, 2.3193, 179.4432, false},
	{4002.6320, -1934.3292, 2.3212, 270.4774, false},
	{4055.7233, -1934.5892, 2.3187, 269.3928, false},
	{4078.1877, -1958.6982, 11.8245, 181.6002, false},
	{4075.5852, -1981.8278, 18.5128, 90.4912, false},
	{3970.4362, -1887.3116, 34.5187, 269.4546, false},
	{4055.2961, -1839.7485, 2.3198, 269.8952, false},
	{3987.2399, -1877.1705, 2.3187, 29.7201, false},
	{3949.7727, -1876.2434, 2.3193, 120.9179, false}
};

new Derby_Map8Spawns[MAX_DERBY_PLAYERS][e_derby_map8_data] =
{
	{2877.0895, -3516.3852, 3.8995, 3.6558, false},
	{2876.3090, -3489.0278, 3.7439, 359.1965, false},
	{2862.3476, -3455.2319, 3.7448, 87.9087, false},
	{2822.9160, -3455.1120, 3.7435, 90.5475, false},
	{2810.1420, -3470.2883, 3.7450, 184.3539, false},
	{2811.4875, -3500.8076, 3.7440, 181.9071, false},
	{2837.4123, -3532.7248, 3.7446, 273.5574, false},
	{2914.0532, -3521.1247, 3.7449, 276.6305, false},
	{2939.2919, -3483.3242, 3.7434, 359.0291, false},
	{2810.0517, -3533.5646, 3.6433, 179.0697, false},
	{2806.7663, -3556.5236, 3.6172, 163.5164, false},
	{2823.8247, -3620.4379, 3.6288, 196.9598, false},
	{2874.1066, -3651.7585, 3.6459, 292.5925, false},
	{2897.0979, -3629.5671, 3.6586, 303.1914, false},
	{2929.5373, -3612.1718, 4.0115, 298.3864, false},
	{2931.2968, -3570.4431, 4.4742, 55.9420, false},
	{2903.1877, -3607.6376, 3.7671, 26.7458, false},
	{2922.8671, -3455.3676, 3.7374, 269.1679, false},
	{2940.0532, -3483.3977, 3.7377, 179.7474, false},
	{2906.5222, -3545.7534, 4.8501, 43.4955, false}
};

new Derby_Map9Spawns[MAX_DERBY_PLAYERS][e_derby_map9_data] =
{
	{4564.8662, -1780.7690, 3.4892, 113.5751, false},
	{4537.0317, -1773.2226, 3.5079, 17.6972, false},
	{4532.4731, -1730.4630, 3.5094, 1.5997, false},
	{4528.1772, -1693.3404, 3.5067, 9.8237, false},
	{4509.5317, -1651.5343, 3.5063, 36.9094, false},
	{4476.1191, -1650.5437, 3.5087, 183.0121, false},
	{4478.9091, -1687.5764, 3.5100, 183.2693, false},
	{4479.6303, -1734.8458, 3.5113, 179.2202, false},
	{4496.7563, -1803.1461, 3.5070, 302.3572, false},
	{4553.0380, -1734.8894, 3.5056, 270.5491, false},
	{4539.4926, -1761.5322, 18.3019, 7.2416, false},
	{4525.7851, -1701.7504, 18.2979, 7.8820, false},
	{4496.1748, -1657.7183, 18.3030, 129.2133, false},
	{4543.4536, -1796.9326, 18.3018, 187.9175, false},
	{4505.9531, -1744.8052, 3.5002, 269.9085, false},
	{4515.0185, -1760.6062, 3.5032, 216.3052, false},
	{4565.7241, -1689.1856, 3.4987, 59.0123, false},
	{4540.9121, -1656.6251, 3.5087, 1.8054, false},
	{4558.3378, -1645.2890, 3.4925, 145.0575, false},
	{4507.0502, -1796.4394, 3.5054, 120.5433, false}
};

new const GangPositions[7][e_gang_pos] =
{
	{"None"},
	{"Junior Member"},
	{"Member"},
	{"Senior Member"},
	{"Advisor"},
	{"Leader"},
	{"Founder"}
};

new const PVCategorys[11][] =
{
	/*0*/{"Lowriders"},
	/*1*/{"Sport Vehicles"},
 	/*2*/{"Saloons"},
 	/*3*/{"Bikes"},
 	/*4*/{"Convertibles"},
 	/*5*/{"Off Road"},
 	/*6*/{"Industrial"},
 	/*7*/{"Unique Vehicles"},
 	/*8*/{""nef_yellow"VIP Vehicles"},
 	/*9*/{"Public Service"},
 	/*10*/{"Aircraft"}
};

new const BLevelMatrix[21][e_prop_matrix] =
{
	{1, 0, 1000},
	{2, 5000, 1250},
	{3, 15000, 1550},
	{4, 38000, 1750},
	{5, 50000, 2350},
	{6, 70000, 3000},
	{7, 89950, 3800},
	{8, 100000, 4950},
	{9, 125000, 6350},
	{10, 180000, 8000},
	{11, 210000, 9850},
	{12, 250000, 11500},
	{13, 300000, 12950},
	{14, 350000, 14500},
	{14, 420000, 17450},
	{15, 500000, 19700},
	{16, 650000, 20850},
	{17, 800000, 22600},
	{18, 1000000, 24000},
	{19, 1400000, 27000},
	{20, 2000000, 30000}
};

new const PVMatrix[98][e_pv_matrix] =
{
	{0, 536, 595000, "Blade"},
	{0, 575, 390000, "Broadway"},
	{0, 534, 500000, "Remington"},
	{0, 567, 530000, "Savanna"},
	{0, 535, 390000, "Slamvan"},
	{0, 566, 300000, "Tahoma"},
	{0, 576, 399000, "Tornado"},
	{0, 412, 500000, "Voodoo"},
	{1, 602, 400000, "Alpha"},
	{1, 429, 600000, "Banshee"},
	{1, 402, 450000, "Buffalo"},
	{1, 541, 950000, "Bullet"},
	{1, 415, 498000, "Cheetah"},
	{1, 589, 295000, "Club"},
	{1, 587, 310000, "Euros"},
	{1, 411, 1250000, "Infernus"},
	{1, 559, 1400000, "Jester"},
	{1, 603, 995000, "Phoenix"},
	{1, 475, 495000, "Sabre"},
	{1, 506, 600000, "Super GT"},
	{1, 451, 980000, "Turismo"},
	{1, 558, 450000, "Uranus"},
	{1, 477, 450000, "ZR-350"},
	{1, 565, 470000, "Flash"},
	{1, 494, 550200, "Hotring Racer"},
	{2, 518, 300000, "Buccaneer"},
	{2, 401, 200000, "Bravura"},
	{2, 405, 350000, "Sentinel"},
	{2, 410, 200000, "Manana"},
	{2, 419, 200000, "Esperanto"},
	{2, 421, 350000, "Washington"},
	{2, 426, 400000, "Premier"},
    {2, 445, 300000, "Admiral"},
    {2, 466, 300000, "Glendale"},
    {2, 467, 300000, "Oceanic"},
    {2, 474, 300000, "Hermes"},
    {2, 492, 350000, "Greenwood"},
    {2, 507, 400000, "Elegant"},
    {2, 526, 500000, "Fortune"},
    {2, 542, 400000, "Clover"},
    {2, 549, 250000, "Tampa"},
    {2, 550, 450000, "Sunrise"},
    {2, 560, 550000, "Sultan"},
    {2, 551, 400000, "Merit"},
    {2, 562, 500000, "Elegy"},
    {3, 581, 500000, "BF-400"},
    {3, 586, 200000, "Wayfarer"},
    {3, 461, 340000, "PCJ-600"},
    {3, 462, 100000, "Faggio"},
    {3, 463, 550000, "Freeway"},
    {3, 468, 400000, "Sanchez"},
    {3, 521, 359000, "FCR-900"},
    {3, 522, 780000, "NRG-500"},
    {4, 439, 251000, "Stallion"},
    {4, 480, 400000, "Comet"},
    {4, 533, 680000, "Feltzer"},
    {4, 555, 500000, "Windsor"},
    {5, 400, 300000, "Landstalker"},
    {5, 424, 650000, "BF Injection"},
    {5, 444, 700000, "Monster"},
    {5, 470, 455000, "Patriot"},
    {5, 489, 300000, "Rancher"},
    {5, 495, 500000, "Sandking"},
    {6, 515, 300000, "Roadtrain"},
    {6, 531, 200000, "Tractor"},
    {6, 554, 210000, "Yosemite"},
    {6, 578, 150000, "DFT-30"},
    {6, 609, 50000, "Boxville"},
    {6, 413, 50000, "Pony"},
    {6, 455, 75000, "Flatbed"},
    {6, 414, 50000, "Mule"},
    {6, 478, 50000, "Walton"},
    {7, 574, 50000, "Sweeper"},
    {7, 508, 250000, "Journey"},
    {7, 588, 100000, "Hotdog"},
    {7, 406, 200000, "Dumper"},
    {7, 423, 500000, "Mr Whoopee"},
    {7, 442, 100000, "Romero"},
    {7, 483, 250000, "Camper"},
    {8, 539, 1, "Vortex"},
    {8, 545, 1, "Hustler"},
    {8, 568, 1, "Bandito"},
    {8, 571, 1, "Kart"},
    {8, 572, 1, "Mower"},
    {8, 434, 1, "Hotknife"},
    {8, 601, 1, "S.W.A.T."},
    {9, 497, 450000, "Police Maverick"},
    {9, 596, 300000, "Police Car (LSPD)"},
    {9, 597, 300000, "Police Car (SFPD)"},
    {9, 598, 300000, "Police Car (LVPD)"},
    {9, 599, 350500, "Police Ranger"},
    {9, 470, 490600, "Patriot"},
	{9, 488, 450000, "SAN News Maverick"},
    {10, 511, 402300, "Beagle"},
    {10, 512, 200000, "Cropduster"},
    {10, 513, 1000000, "Stuntplane"},
    {10, 593, 351500, "Dodo"},
    {10, 487, 500000, "Maverick"}
};

// Toy slots, pvs slots, house slots, house obj slots, business slot, instant namechange, medkit x20, medkit x100, money boost x2, money boost x3, scoreboost x2, scoreboost x3
new const CreditsProductMatrix[13][e_credits_matrix] =
{
	{"Toy Slot", 1500, 1, "Permanent", "This item expands your toy slots by 1.You can have 10 toy slots at most."},
    {"Private Vehicle Slot", 2000, 1, "Permanent", "This item expands your private vehicle slots by 1.\nYou can have 8 pv slots at most."},
    {"House Slot", 4000, 1, "Permanent", "This item expands your house slots by 1. You can have 5 house slots at most."},
    {"House Object Slot", 1000, 1, "Permanent", "This item expands your house object slots by 1. You can have 10 house object slots at most."},
    {"Business Slot", 4000, 1, "Permanent", "This item expands your business slots by 1. You can have 5 business slots at most."},
    {"Instant Name Change Access", 2000, 1, "Usable 1 time", "This item grants you instant access to /changename."},
    {"20 Medits", 1000, 20, "Usable 20 times", "This item is usable in minigames only. Use /mk to consume 1 medkit.\nHeals you by 50hp in 10 seconds."},
    {"100 Medits", 2500, 100, "Usable 100 times", "This item is usable in minigames only. Use /mk to consume 1 medkit.\nHeals you by 50hp in 10 seconds."},
    {"Money Boost x2", 1500, 1, "24 Hours", "This item gives an addtitional double money.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Money Boost x3", 2000, 1, "24 Hours", "This item gives an addtitional triple money.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Score Boost x2", 1500, 1, "24 Hours", "This item gives an addtitional double score.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Score Boost x3", 2000, 1, "24 Hours", "This item gives an addtitional triple score.\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"},
    {"Master Boost", 5000, 1, "24 Hours", "The Master Boost gives you an addtitional triple score and money!\nAfter purchase the boost remains active for 24 hours. You can\nonly have 1 of the 5 available boost active at the same time!"}
};

new const HouseIntTypes[14][e_house_type] =
{
    {1, 244.411987, 305.032989, 999.148437, "Barrack", 30000}, //0 			// 7, klein billig aber gut
    {2, 225.756989, 1240.000000, 1082.149902, "Standard", 1000000}, //1 				// 1, billig haus
    {1, 223.043991, 1289.259888, 1082.199951, "Advanced Standard", 250000}, //2			// 2, klein aber fein
    {2, 2454.717041, -1700.871582, 1013.515197, "Ryders House", 300000}, //3				// 13, normal wohnung pic 443
    {8, 2807.619873, -1171.899902, 1025.570312, "Bunker House", 450000}, //4			// 9, muss raus // jetzt ist Colonel Furhberger's drinne
    {4, 302.180999, 300.722991, 999.148437, "Underground", 500000}, 	//5			// 10, nette bude
    {2, 271.884979, 306.631988, 999.148437, "Nice Small Hotel Room", 600000},//6 			// 8, nice one /white
	{3, 2496.049804, -1695.238159, 1014.742187, "CJs House", 750000}, //7			// 4, muss raus exec // jetzt ist CJ drinne
	{3, 235.508994, 1189.169897, 1080.339966, "Luxus House", 900000}, //8			// 0,  schönes haus mit roten boden pic 429
	{2, 1204.809936, -11.586799, 1000.921875, "Strip Club", 1000000}, //9			// 6, mus raus exec // jetzt ist strip club drinne
	{15,2215.454833, -1147.475585, 1025.796875, "Entire Motel", 1200000}, //10					// 12, muss raus // jetzt ist jeff motel drinne
	{12,2324.419921, -1145.568359, 1050.710083, "Small Villa", 1500000}, 	//11			// 11, muss raus // jetzt ist small villa drinne
	{7, 225.630997, 1022.479980, 1084.069946, "Big Villa", 2000000}, //12			// 3, big villa
	{5, 1267.663208, -781.323242, 1091.906250, "Madd Doggs Mansion", 3000000} 	//13		// 5, muss raus exec // jetzt ist maddog drinne
};

new Iterator:RaceJoins<MAX_PLAYERS>,
	Iterator:DerbyVoters<MAX_PLAYERS>,
	Iterator:PlayerIgnore[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:LottoNumbersUsed<75>,
	Iterator:iterGangWar<1000>,
	Float:g_RaceVehCoords[RACE_MAX_PLAYERS][4],
	Float:g_RaceCPs[RACE_MAX_CHECKPOINTS][3],
	bool:CSGSOFT[MAX_PLAYERS] = {false, ...},
	g_SpawnAreas[4],
	g_RaceForceMap = 0,
	g_BuildRace = INVALID_PLAYER_ID,
	g_BuildDeployTime = 0,
	g_BuildRaceType = 1,
	g_BuildVirtualWorld = 0,
	g_BuildCheckPointCount = 0,
	g_BuildVehPosCount = 0,
	g_BuildModeVMID = 0,
	bool:g_BuildTakeCheckpoints = false,
	bool:g_BuildTakeVehPos = false,
	g_BuildVehicle = -1,
	g_RaceArray[e_race_data],
	g_RaceStatus = RaceStatus_Inactive,
	g_RaceCount = 0,
	g_RaceCountDown = COUNT_DOWN_TILL_RACE_START,
	g_RacePlayerCount = 0,
	g_RaceSpawnCount = 0,
	g_tRaceCounter = -1,
	g_tRaceOpenSelection = -1,
	g_RaceTick = 0,
	g_RaceTime = MAX_RACE_TIME,
	g_NextRace,
	g_RaceFinishCount = 0,
	g_iRaceEnd = 0,
	g_rPosition = 0,
	g_CPProgress[MAX_PLAYERS],
	g_RaceVehicle[MAX_PLAYERS],
	g_RacePosition[MAX_PLAYERS],
	gstr[144],
	gstr2[255],
	lotto_number,
	lotto_jackpot,
	bool:lotto_active = false,
	Teleports[MAX_TELE_CATEGORYS][50][26],
	Teleport_Index[MAX_TELE_CATEGORYS],
	TeleportDialogString[MAX_TELE_CATEGORYS][2048],
	wangotto[4],
	Text3D:NPCLabelHandle[5],
	SrvStat[4],
	sPVCategory[512],
	pAch[MAX_PLAYERS][e_player_ach_data],
	mathsAnswered = -1,
	mathsCurrent[14],
	mathsAnswer,
	mathsAward,
	engine,
 	lights,
 	alarm,
 	doors,
 	bonnet,
 	boot,
 	objective,
	bool:IsMellnikGateMoving = false,
	bool:IsMellnikRampMoving = false,
	MellnikGate,
	MellnikRamp,
	LastPlayerText[MAX_PLAYERS][144],
    PlayerToys[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][e_toy_data],
	StartTime,
	hVIPVehObj[MAX_PLAYERS][13],
  	Info[e_fallout_data],
  	g_FalloutStatus,
  	PlayerPVTMP[MAX_PLAYERS][2],
  	PlayerPVTMPPlate[MAX_PLAYERS][13],
 	GunGame_Player[MAX_PLAYERS][e_gungame_data],
  	PlayerText3D:DerbyVehLabel[MAX_PLAYERS],
  	bool:LabelActive[MAX_PLAYERS],
  	bool:PlayerHit[MAX_PLAYERS] = {false, ...},
 	Float:OldHealth[MAX_PLAYERS],
  	Float:OldDamage[MAX_PLAYERS],
 	Float:CDamage[MAX_PLAYERS],
  	DerbyMapVotes[9],
  	CurrentDerbyMap = 1,
  	BGGameTime = DEFAULT_BG_TIME,
  	FalloutGameTime = DEFAULT_FALLOUT_TIME,
  	DerbyGameTime = DEFAULT_DERBY_TIME,
  	tDerbyTimer = -1,
  	tDerbyVoting = -1,
  	tDerbyFallOver = -1,
  	pDerbyCar[MAX_PLAYERS],
  	bool:bDerbyAFK[MAX_PLAYERS],
  	DerbyPlayers = 0,
	bool:IsDerbyRunning = false,
  	bool:DerbyWinner[MAX_PLAYERS],
  	Reports[MAX_REPORTS][144],
  	Adverts[MAX_ADS][144],
  	tBGTimer = -1,
  	tBGVoting = -1,
  	BGMapVotes[5] = {0, ...},
  	BGTeam1Players = 0,
  	BGTeam2Players = 0,
	BGTeam1Kills = 0,
  	BGTeam2Kills = 0,
  	CurrentBGMap,
  	GunGamePlayers = 0,
  	dm1pickup,
  	dm2pickup,
  	VIPLpickup,
  	VIPLpickup2,
  	PreviewTmpVeh[MAX_PLAYERS],
  	gTeam[MAX_PLAYERS],
  	vehiclebuy,
 	aussenrein,
 	innenraus,
  	g_SQL_handle,
  	houseid,
  	propid,
  	gzoneid,
  	Text3D:Label_Elevator,
  	Text3D:Label_Floors[21],
  	PlayerText:DynamicAchTD[MAX_PLAYERS][2],
  	PlayerText:TXTKillerText[MAX_PLAYERS],
  	PlayerText:TXTGunGameInfo[MAX_PLAYERS],
  	PlayerText:TXTPlayerInfo[MAX_PLAYERS],
  	PlayerText:vTD[MAX_PLAYERS],
	PlayerText:TXTRaceInfo[MAX_PLAYERS],
	PlayerText:TXTInfoTD[MAX_PLAYERS],
	PlayerText:TXTWantedsTD[MAX_PLAYERS],
	PlayerText:TXTMoney[MAX_PLAYERS],
	PlayerText:TXTScore[MAX_PLAYERS],
	PlayerText:TXTSpeedo[MAX_PLAYERS],
	Text:TXTSpeedo_Main,
  	Text:TXTGunGameSign,
  	Text:TXTLoading,
  	Text:TXTTeleportInfo,
  	Text:TXTRaceSign,
  	Text:TXTDerbySign,
  	Text:TXTDerbyInfo,
  	Text:TXTTdmSign,
 	Text:TXTTdmInfo,
 	Text:TXTFalloutSign,
	Text:TXTFalloutInfo,
	Text:TXTToyBox,
	Text:TXTToyInfo,
	Text:TXTGodTD,
	Text:CheckTD,
	Text:NewMsgTD,
	Text:ErrorTD,
	Text:TXTFooterBlack,
    Text:AchTD[6],
	Text:TXTWelcome[5],
	Text:JailTD,
	Text:TXTFooter,
	Text:TXTOnJoin[2],
	Text:TXTVersionInfo,
	Text:TXTRandomInfo,
	toyslist = mS_INVALID_LISTID,
	hobjslist = mS_INVALID_LISTID,
	skinlist = mS_INVALID_LISTID,
  	BankPickOut[MAX_BANKS],
  	BankPickInt[MAX_BANKS],
  	BankPickMenu[MAX_BANKS],
  	AmmunationPickOut[MAX_AMMUNATIONS],
  	AmmunationPickInt[MAX_AMMUNATIONS],
  	BurgerPickOut[MAX_BURGERSHOTS],
  	BurgerPickInt[MAX_BURGERSHOTS],
  	CluckinBellPickOut[MAX_CLUCKINBELLS],
  	CluckinBellPickInt[MAX_CLUCKINBELLS],
  	PizzaPickOut[MAX_PIZZASTACKS],
  	PizzaPickInt[MAX_PIZZASTACKS],
  	TFSPickOut[MAX_TFS],
  	TFSPickInt[MAX_TFS],
  	BankMIcon[MAX_BANKS],
  	CluckinBellMIcon[MAX_CLUCKINBELLS],
  	BurgerMIcon[MAX_BURGERSHOTS],
  	AmmunationMIcon[MAX_AMMUNATIONS],
  	PizzaMIcon[MAX_PIZZASTACKS],
  	TFSMIcon[MAX_TFS],
  	bool:ReactionOn,
  	AdminLC,
  	AdminLC2,
  	gLastMap[MAX_PLAYERS],
  	PlayerInfo[MAX_PLAYERS][e_player_data],
  	PlayerPV[MAX_PLAYERS][MAX_PLAYER_PVS][e_player_pv_data],
  	HouseInfo[MAX_HOUSES][e_house_data],
  	GZoneInfo[MAX_GZONES][e_gzone_data],
  	PropInfo[MAX_PROPS][e_property_data],
  	PVSelect[MAX_PLAYERS],
	PVCatSel[MAX_PLAYERS],
	PVVMenuSel[MAX_PLAYERS],
  	pick_chainsaw,
  	pick_life[14],
  	Obj_Elevator,
  	Obj_ElevatorDoors[2],
  	Obj_FloorDoors[21][2],
  	ElevatorState,
  	ElevatorFloor,
  	ElevatorQueue[21],
  	FloorRequestedBy[21],
  	ElevatorBoostTimer,
  	bool:GlobalMain = false,
  	xChars[16] = "",
  	tReactionTimer = -1,
	xCash,
  	xScore,
  	bool:xTestBusy,
  	tickReactionStart,
  	CurrentFalloutPlayers = 0,
  	CurrentDerbyPlayers = 0,
  	iCountdownVIP = 5,
 	bool:IsCountDownRunning = false,
 	tVIPCountdown = -1,
 	randomColors[24] = {6, 7, 126, 128, 130, 152, 158, 228, 181, 229, 205, 1, 6, 243, 3, 175, 137, 155, 158, 79, 161, 162, 192, 3},
 	RobberyTimer[MAX_PLAYERS],
 	RobberyCount[MAX_PLAYERS],
 	veh_cnr[101],
 	Gate[2],
 	pJail[MAX_PLAYERS],
 	pArrests[MAX_PLAYERS],
 	T_RacePlayers = 0,
	T_DerbyPlayers = 0,
	T_GunGamePlayers = 0,
	T_FalloutPlayers = 0,
	T_TDMPlayers = 0,
	T_WarPlayers = 0,
	T_MinigunPlayers = 0,
	T_SniperPlayers = 0,
	T_CNRPlayers = 0,
	IRC_Bots[IRC_MAX_BOTS],
	IRC_GroupID;
	
new Float:FloorZOffsets[21] =
{
    0.0,
    8.5479,
    13.99945,
    19.45100,
    24.90255,
    30.35410,
    35.80565,
    41.25720,
    46.70875,
    52.16030,
    57.61185,
    63.06340,
    68.51495,
    73.96650,
    79.41805,
    84.86960,
    90.32115,
    95.77270,
    101.22425,
    106.67580,
    112.12735
};

new const FloorNames[21][] =
{
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor",
	"Tenth Floor",
	"Eleventh Floor",
	"Twelfth Floor",
	"Thirteenth Floor",
	"Fourteenth Floor",
	"Fifteenth Floor",
	"Sixteenth Floor",
	"Seventeenth Floor",
	"Eighteenth Floor",
	"Admin Headquarter O.o",
	"Penthouse (not really)"
};

new const xCharacters[][] =
{
    "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M",
	"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "m",
	"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
};

new GunGame_Weapons[] =
{
	23,	22, 27, 26, 29, 32, 30, 31, 38, 33, 34, 35, 36, 24
};

new Float:Minigun_Spawns[10][4] =
{
	{38.1505, 1564.5778, 12.7500, 132.2755},
	{8.7437, 1549.5354, 12.7560, 55.1620},
	{-33.0755, 1519.6864, 12.7560, 287.5538},
	{-38.9135, 1488.4835, 12.7500, 315.2241},
	{-16.4189, 1478.1693, 12.7500, 307.5128},
	{4.4626, 1506.1968, 16.5952, 347.8221},
	{28.7336, 1517.8481, 12.7560, 121.7190},
	{9.5176, 1560.8956, 12.7500, 217.7807},
	{16.0684, 1552.2834, 28.2681, 151.2032},
	{-4.4292, 1508.5903, 20.0397, 338.7700}
};
new Float:Sniper_Spawns[14][4] =
{
	{-1528.3020, -330.2366, 267.8116, 182.4561},
	{-1503.6364, -340.5645, 265.9578, 205.9406},
	{-1496.8945, -396.1531, 265.9578, 15.2601},
	{-1526.2155, -444.1110, 265.9578, 5.7962},
	{-1545.0111, -405.7469, 265.9578, 270.0850},
	{-1550.2539, -390.3828, 273.7288, 91.6521},
	{-1607.9478, -392.2644, 267.1663, 74.1264},
	{-1644.1897, -394.3685, 273.4054, 269.7141},
	{-1613.9907, -381.9904, 273.4054, 3.3222},
	{-1619.4110, -397.6560, 273.4254, 272.8892},
	{-1565.0505, -304.0998, 271.3497, 85.3634},
	{-1571.2914, -301.3372, 271.3497, 265.8995},
	{-1550.1138, -307.6401, 270.5767, 52.7860},
	{-1560.4999, -317.0979, 285.0981, 163.2189}
};
new Float:GunGame_Spawns[9][4] =
{
	{133.2702, 2076.2271, 70.1628, 182.0589},
	{157.3591, 2062.8499, 67.4000, 85.6672},
	{134.7271, 2052.1414, 72.1535, 346.4713},
	{128.3802, 2049.6685, 88.4781, 8.9248},
	{110.9025, 2050.5190, 73.0875, 2.9044},
	{115.5225, 2063.9746, 65.2181, 314.8837},
	{130.2743, 2101.7676, 61.6595, 195.0075},
	{135.0822, 2041.0424, 65.1818, 86.6981},
	{121.3894, 2036.3778, 69.1681, 331.7290}
};
new Float:BG_M1_T1_Spawns[4][4] =
{
	{-455.7792, -58.5108, 59.8029, 139.7756},
	{-435.4336, -56.8861, 58.8833, 97.0126},
	{-440.3568, -77.4319, 59.0455, 116.2910},
	{-455.1911, -70.1563, 59.7096, 136.2704}
};
new Float:BG_M1_T2_Spawns[4][4] =
{
	{-578.6148, -180.4718, 78.7617, 320.9920},
	{-583.2191, -170.5733, 79.2114, 320.99205},
	{-571.3069, -183.6573, 78.4063, 251.5899},
	{-557.7114, -181.2337, 78.4047, 339.2187}
};
new Float:BG_M2_T1_Spawns[4][4] =
{
	{566.4445, -2441.1155, 3.2606, 90.0},
	{557.8643, -2439.3618, 3.2606, 90.0},
	{558.2055, -2431.5737, 3.2606, 90.0},
	{566.3401, -2428.1511, 3.2606, 90.0}
};
new Float:BG_M2_T2_Spawns[4][4] =
{
	{692.2197, -2430.2900, 3.2606, 90.0},
	{683.4767, -2429.1997, 3.2606, 90.0},
	{685.1592, -2439.1643, 3.2606, 90.0},
	{691.5789, -2437.9065, 3.2606, 90.0}
};
new Float:BG_M3_T1_Spawns[4][4] =
{
	{-2180.0020, -266.4913, 36.5156, 277.7783},
	{-2180.3604, -260.0984, 36.5156, 281.6340},
	{-2183.8555, -265.5697, 36.5156, 281.6340},
	{-2183.7983, -262.1465, 40.7195, 266.1907}
};
new Float:BG_M3_T2_Spawns[4][4] =
{
	{-2187.3665, -209.5552, 36.5156, 182.4175},
	{-2183.3145, -214.3069, 36.5156, 182.4175},
	{-2188.1506, -223.1832, 36.5156, 182.4175},
	{-2183.5532, -223.9128, 36.5156, 87.0773}
};
new Float:BG_M4_T1_Spawns[4][4] =
{
	{673.8533, -2399.7190, 107.1669, 270.3580},
	{685.6569, -2407.2200, 107.1804, 356.2215},
	{712.4095, -2400.4097, 106.9510, 83.4871},
	{663.0553, -2398.7061, 111.9654, 269.9614}
};
new Float:BG_M4_T2_Spawns[4][4] =
{
	{722.7262, -2304.8560, 107.9041, 130.8066},
	{721.2896, -2319.1465, 107.6767, 84.8891},
	{709.2130, -2304.4978, 107.8904, 194.9510},
	{708.6271, -2315.9961, 107.7215, 160.2499}
};
new Float:BG_M5_T1_Spawns[4][4] =
{
	{1804.2432, -2994.2014, 6.1094, 177.3439},
	{1807.2275, -2998.5554, 6.1044, 133.5295},
	{1794.2000, -2997.5786, 8.7994, 221.8594},
	{1788.9626, -2984.6211, 6.9992, 227.8387}
};
new Float:BG_M5_T2_Spawns[4][4] =
{
	{1844.8651, -3067.3420, 19.2294, 18.9314},
	{1843.7288, -3058.2097, 14.0106, 26.2922},
	{1852.3188, -3045.4287, 6.0944, 34.0036},
	{1826.1392, -3048.5820, 6.1044, 41.0139}
};
new Float:WorldSpawns[4][4] =
{
	{341.8535, -1852.6327, 8.2618, 90.2136}, //beach
	{-1196.3280, -17.4523, 15.8281, 42.5799}, //sfa
	{386.0204, 2541.1179, 19.0953, 181.2326}, // /aa
	{680.2595, -1361.8927, 2551.2214, 90.0} // /speed
};
new Float:DM_MAP_1[2][4] =
{
	{1309.0240, 2110.4265, 11.0156, 316.7284},
	{1383.8239, 2185.6218, 11.0234, 137.8134}
};
new Float:DM_MAP_2[2][4] =
{
	{1144.1377, 1529.8433, 52.4003, 87.1090},
	{1049.4922, 1529.3169, 52.4077, 271.6640}
};
new Float:DM_MAP_3[2][4] =
{
	{1050.2189, 1024.4153, 11.0000, 327.1479},
	{1114.4515, 1097.1134, 10.2734, 141.6762}
};
new const Float:DM_MAP_4[2][4] =
{
	{2609.7583, 2831.2527, 10.8203, 97.2059},
	{2553.1912, 2824.4099, 10.8203, 283.9544}
};

new PlayerColors[511] =
{
	0x000022FF, 0x000044FF, 0x000066FF, 0x000088FF, 0x0000AAFF, 0x0000CCFF, 0x0000EEFF,
	0x002200FF, 0x002222FF, 0x002244FF, 0x002266FF, 0x002288FF, 0x0022AAFF, 0x0022CCFF, 0x0022EEFF,
	0x004400FF, 0x004422FF, 0x004444FF, 0x004466FF, 0x004488FF, 0x0044AAFF, 0x0044CCFF, 0x0044EEFF,
	0x006600FF, 0x006622FF, 0x006644FF, 0x006666FF, 0x006688FF, 0x0066AAFF, 0x0066CCFF, 0x0066EEFF,
	0x008800FF, 0x008822FF, 0x008844FF, 0x008866FF, 0x008888FF, 0x0088AAFF, 0x0088CCFF, 0x0088EEFF,
	0x00AA00FF, 0x00AA22FF, 0x00AA44FF, 0x00AA66FF, 0x00AA88FF, 0x00AAAAFF, 0x00AACCFF, 0x00AAEEFF,
	0x00CC00FF, 0x00CC22FF, 0x00CC44FF, 0x00CC66FF, 0x00CC88FF, 0x00CCAAFF, 0x00CCCCFF, 0x00CCEEFF,
	0x00EE00FF, 0x00EE22FF, 0x00EE44FF, 0x00EE66FF, 0x00EE88FF, 0x00EEAAFF, 0x00EECCFF, 0x00EEEEFF,
	0x220000FF, 0x220022FF, 0x220044FF, 0x220066FF, 0x220088FF, 0x2200AAFF, 0x2200CCFF, 0x2200FFFF,
	0x222200FF, 0x222222FF, 0x222244FF, 0x222266FF, 0x222288FF, 0x2222AAFF, 0x2222CCFF, 0x2222EEFF,
	0x224400FF, 0x224422FF, 0x224444FF, 0x224466FF, 0x224488FF, 0x2244AAFF, 0x2244CCFF, 0x2244EEFF,
	0x226600FF, 0x226622FF, 0x226644FF, 0x226666FF, 0x226688FF, 0x2266AAFF, 0x2266CCFF, 0x2266EEFF,
	0x228800FF, 0x228822FF, 0x228844FF, 0x228866FF, 0x228888FF, 0x2288AAFF, 0x2288CCFF, 0x2288EEFF,
	0x22AA00FF, 0x22AA22FF, 0x22AA44FF, 0x22AA66FF, 0x22AA88FF, 0x22AAAAFF, 0x22AACCFF, 0x22AAEEFF,
	0x22CC00FF, 0x22CC22FF, 0x22CC44FF, 0x22CC66FF, 0x22CC88FF, 0x22CCAAFF, 0x22CCCCFF, 0x22CCEEFF,
	0x22EE00FF, 0x22EE22FF, 0x22EE44FF, 0x22EE66FF, 0x22EE88FF, 0x22EEAAFF, 0x22EECCFF, 0x22EEEEFF,
	0x440000FF, 0x440022FF, 0x440044FF, 0x440066FF, 0x440088FF, 0x4400AAFF, 0x4400CCFF, 0x4400FFFF,
	0x442200FF, 0x442222FF, 0x442244FF, 0x442266FF, 0x442288FF, 0x4422AAFF, 0x4422CCFF, 0x4422EEFF,
	0x444400FF, 0x444422FF, 0x444444FF, 0x444466FF, 0x444488FF, 0x4444AAFF, 0x4444CCFF, 0x4444EEFF,
	0x446600FF, 0x446622FF, 0x446644FF, 0x446666FF, 0x446688FF, 0x4466AAFF, 0x4466CCFF, 0x4466EEFF,
	0x448800FF, 0x448822FF, 0x448844FF, 0x448866FF, 0x448888FF, 0x4488AAFF, 0x4488CCFF, 0x4488EEFF,
	0x44AA00FF, 0x44AA22FF, 0x44AA44FF, 0x44AA66FF, 0x44AA88FF, 0x44AAAAFF, 0x44AACCFF, 0x44AAEEFF,
	0x44CC00FF, 0x44CC22FF, 0x44CC44FF, 0x44CC66FF, 0x44CC88FF, 0x44CCAAFF, 0x44CCCCFF, 0x44CCEEFF,
	0x44EE00FF, 0x44EE22FF, 0x44EE44FF, 0x44EE66FF, 0x44EE88FF, 0x44EEAAFF, 0x44EECCFF, 0x44EEEEFF,
	0x660000FF, 0x660022FF, 0x660044FF, 0x660066FF, 0x660088FF, 0x6600AAFF, 0x6600CCFF, 0x6600FFFF,
	0x662200FF, 0x662222FF, 0x662244FF, 0x662266FF, 0x662288FF, 0x6622AAFF, 0x6622CCFF, 0x6622EEFF,
	0x664400FF, 0x664422FF, 0x664444FF, 0x664466FF, 0x664488FF, 0x6644AAFF, 0x6644CCFF, 0x6644EEFF,
	0x666600FF, 0x666622FF, 0x666644FF, 0x666666FF, 0x666688FF, 0x6666AAFF, 0x6666CCFF, 0x6666EEFF,
	0x668800FF, 0x668822FF, 0x668844FF, 0x668866FF, 0x668888FF, 0x6688AAFF, 0x6688CCFF, 0x6688EEFF,
	0x66AA00FF, 0x66AA22FF, 0x66AA44FF, 0x66AA66FF, 0x66AA88FF, 0x66AAAAFF, 0x66AACCFF, 0x66AAEEFF,
	0x66CC00FF, 0x66CC22FF, 0x66CC44FF, 0x66CC66FF, 0x66CC88FF, 0x66CCAAFF, 0x66CCCCFF, 0x66CCEEFF,
	0x66EE00FF, 0x66EE22FF, 0x66EE44FF, 0x66EE66FF, 0x66EE88FF, 0x66EEAAFF, 0x66EECCFF, 0x66EEEEFF,
	0x880000FF, 0x880022FF, 0x880044FF, 0x880066FF, 0x880088FF, 0x8800AAFF, 0x8800CCFF, 0x8800FFFF,
	0x882200FF, 0x882222FF, 0x882244FF, 0x882266FF, 0x882288FF, 0x8822AAFF, 0x8822CCFF, 0x8822EEFF,
	0x884400FF, 0x884422FF, 0x884444FF, 0x884466FF, 0x884488FF, 0x8844AAFF, 0x8844CCFF, 0x8844EEFF,
	0x886600FF, 0x886622FF, 0x886644FF, 0x886666FF, 0x886688FF, 0x8866AAFF, 0x8866CCFF, 0x8866EEFF,
	0x888800FF, 0x888822FF, 0x888844FF, 0x888866FF, 0x888888FF, 0x8888AAFF, 0x8888CCFF, 0x8888EEFF,
	0x88AA00FF, 0x88AA22FF, 0x88AA44FF, 0x88AA66FF, 0x88AA88FF, 0x88AAAAFF, 0x88AACCFF, 0x88AAEEFF,
	0x88CC00FF, 0x88CC22FF, 0x88CC44FF, 0x88CC66FF, 0x88CC88FF, 0x88CCAAFF, 0x88CCCCFF, 0x88CCEEFF,
	0x88EE00FF, 0x88EE22FF, 0x88EE44FF, 0x88EE66FF, 0x88EE88FF, 0x88EEAAFF, 0x88EECCFF, 0x88EEEEFF,
	0xAA0000FF, 0xAA0022FF, 0xAA0044FF, 0xAA0066FF, 0xAA0088FF, 0xAA00AAFF, 0xAA00CCFF, 0xAA00FFFF,
	0xAA2200FF, 0xAA2222FF, 0xAA2244FF, 0xAA2266FF, 0xAA2288FF, 0xAA22AAFF, 0xAA22CCFF, 0xAA22EEFF,
	0xAA4400FF, 0xAA4422FF, 0xAA4444FF, 0xAA4466FF, 0xAA4488FF, 0xAA44AAFF, 0xAA44CCFF, 0xAA44EEFF,
	0xAA6600FF, 0xAA6622FF, 0xAA6644FF, 0xAA6666FF, 0xAA6688FF, 0xAA66AAFF, 0xAA66CCFF, 0xAA66EEFF,
	0xAA8800FF, 0xAA8822FF, 0xAA8844FF, 0xAA8866FF, 0xAA8888FF, 0xAA88AAFF, 0xAA88CCFF, 0xAA88EEFF,
	0xAAAA00FF, 0xAAAA22FF, 0xAAAA44FF, 0xAAAA66FF, 0xAAAA88FF, 0xAAAAAAFF, 0xAAAACCFF, 0xAAAAEEFF,
	0xAACC00FF, 0xAACC22FF, 0xAACC44FF, 0xAACC66FF, 0xAACC88FF, 0xAACCAAFF, 0xAACCCCFF, 0xAACCEEFF,
	0xAAEE00FF, 0xAAEE22FF, 0xAAEE44FF, 0xAAEE66FF, 0xAAEE88FF, 0xAAEEAAFF, 0xAAEECCFF, 0xAAEEEEFF,
	0xCC0000FF, 0xCC0022FF, 0xCC0044FF, 0xCC0066FF, 0xCC0088FF, 0xCC00AAFF, 0xCC00CCFF, 0xCC00FFFF,
	0xCC2200FF, 0xCC2222FF, 0xCC2244FF, 0xCC2266FF, 0xCC2288FF, 0xCC22AAFF, 0xCC22CCFF, 0xCC22EEFF,
	0xCC4400FF, 0xCC4422FF, 0xCC4444FF, 0xCC4466FF, 0xCC4488FF, 0xCC44AAFF, 0xCC44CCFF, 0xCC44EEFF,
	0xCC6600FF, 0xCC6622FF, 0xCC6644FF, 0xCC6666FF, 0xCC6688FF, 0xCC66AAFF, 0xCC66CCFF, 0xCC66EEFF,
	0xCC8800FF, 0xCC8822FF, 0xCC8844FF, 0xCC8866FF, 0xCC8888FF, 0xCC88AAFF, 0xCC88CCFF, 0xCC88EEFF,
	0xCCAA00FF, 0xCCAA22FF, 0xCCAA44FF, 0xCCAA66FF, 0xCCAA88FF, 0xCCAAAAFF, 0xCCAACCFF, 0xCCAAEEFF,
	0xCCCC00FF, 0xCCCC22FF, 0xCCCC44FF, 0xCCCC66FF, 0xCCCC88FF, 0xCCCCAAFF, 0xCCCCCCFF, 0xCCCCEEFF,
	0xCCEE00FF, 0xCCEE22FF, 0xCCEE44FF, 0xCCEE66FF, 0xCCEE88FF, 0xCCEEAAFF, 0xCCEECCFF, 0xCCEEEEFF,
	0xEE0000FF, 0xEE0022FF, 0xEE0044FF, 0xEE0066FF, 0xEE0088FF, 0xEE00AAFF, 0xEE00CCFF, 0xEE00FFFF,
	0xEE2200FF, 0xEE2222FF, 0xEE2244FF, 0xEE2266FF, 0xEE2288FF, 0xEE22AAFF, 0xEE22CCFF, 0xEE22EEFF,
	0xEE4400FF, 0xEE4422FF, 0xEE4444FF, 0xEE4466FF, 0xEE4488FF, 0xEE44AAFF, 0xEE44CCFF, 0xEE44EEFF,
	0xEE6600FF, 0xEE6622FF, 0xEE6644FF, 0xEE6666FF, 0xEE6688FF, 0xEE66AAFF, 0xEE66CCFF, 0xEE66EEFF,
	0xEE8800FF, 0xEE8822FF, 0xEE8844FF, 0xEE8866FF, 0xEE8888FF, 0xEE88AAFF, 0xEE88CCFF, 0xEE88EEFF,
	0xEEAA00FF, 0xEEAA22FF, 0xEEAA44FF, 0xEEAA66FF, 0xEEAA88FF, 0xEEAAAAFF, 0xEEAACCFF, 0xEEAAEEFF,
	0xEECC00FF, 0xEECC22FF, 0xEECC44FF, 0xEECC66FF, 0xEECC88FF, 0xEECCAAFF, 0xEECCCCFF, 0xEECCEEFF,
	0xEEEE00FF, 0xEEEE22FF, 0xEEEE44FF, 0xEEEE66FF, 0xEEEE88FF, 0xEEEEAAFF, 0xEEEECCFF, 0xEEEEEEFF
};

new const VehicleNames[212][] =
{
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},{"Firetruck"},{"Trashmaster"},{"Stretch"},
	{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},
	{"Washington"},{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Ohdude"},{"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},{"Predator"},{"Bus"},
	{"faggot"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},
	{"Monster"},{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},
	{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
	{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},
	{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},
	{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
	{"Tanker"},{"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Jumpjet"},{"FCR-900"},{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},
	{"Fortune"},{"Cadrona"},{"FBI Truck"},{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},{"Blade"},{"Freight"},
	{"Brownstreak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
	{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},
	{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},{"Broadway"},{"Tornado"},{"AT-400"},
	{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
	{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},
	{"Alpha"},{"Phoenix"},{"Glendale"},{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},{"Utility Trailer"}
};

new pv_spoiler[20][0] =
{
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new pv_nitro[3][0] =
{
    {1008},
    {1009},
    {1010}
};

new pv_fbumper[23][0] =
{
    {1117},
    {1152},
    {1153},
    {1155},
    {1157},
    {1160},
    {1165},
    {1166},
    {1169},
    {1170},
    {1171},
    {1172},
    {1173},
    {1174},
    {1175},
    {1179},
    {1181},
    {1182},
    {1185},
    {1188},
    {1189},
    {1190},
    {1191}
};

new pv_rbumper[22][0] =
{
    {1140},
    {1141},
    {1148},
    {1149},
    {1150},
    {1151},
    {1154},
    {1156},
    {1159},
    {1161},
    {1167},
    {1168},
    {1176},
    {1177},
    {1178},
    {1180},
    {1183},
    {1184},
    {1186},
    {1187},
    {1192},
    {1193}
};

new pv_exhaust[28][0] =
{
    {1018},
    {1019},
    {1020},
    {1021},
    {1022},
    {1028},
    {1029},
    {1037},
    {1043},
    {1044},
    {1045},
    {1046},
    {1059},
    {1064},
    {1065},
    {1066},
    {1089},
    {1092},
    {1104},
    {1105},
    {1113},
    {1114},
    {1126},
    {1127},
    {1129},
    {1132},
    {1135},
    {1136}
};

new pv_bventr[2][0] =
{
    {1142},
    {1144}
};

new pv_bventl[2][0] =
{
    {1143},
    {1145}
};

new pv_bscoop[4][0] =
{
	{1004},
	{1005},
	{1011},
	{1012}
};

new pv_roof[17][0] =
{
    {1006},
    {1032},
    {1033},
    {1035},
    {1038},
    {1053},
    {1054},
    {1055},
    {1061},
    {1067},
    {1068},
    {1088},
    {1091},
    {1103},
    {1128},
    {1130},
    {1131}
};

new pv_lskirt[21][0] =
{
    {1007},
    {1026},
    {1031},
    {1036},
    {1039},
    {1042},
    {1047},
    {1048},
    {1056},
    {1057},
    {1069},
    {1070},
    {1090},
    {1093},
    {1106},
    {1108},
    {1118},
    {1119},
    {1133},
    {1122},
    {1134}
};

new pv_rskirt[21][0] =
{
    {1017},
    {1027},
    {1030},
    {1040},
    {1041},
    {1051},
    {1052},
    {1062},
    {1063},
    {1071},
    {1072},
    {1094},
    {1095},
    {1099},
    {1101},
    {1102},
    {1107},
    {1120},
    {1121},
    {1124},
    {1137}
};

new pv_hydraulics[1][0] =
{
    {1087}
};

new pv_base[1][0] =
{
    {1086}
};

new pv_rbbars[4][0] =
{
    {1109},
    {1110},
    {1123},
    {1125}
};

new pv_fbbars[2][0] =
{
    {1115},
    {1116}
};

new pv_wheels[17][0] =
{
    {1025},
    {1073},
    {1074},
    {1075},
    {1076},
    {1077},
    {1078},
    {1079},
    {1080},
    {1081},
    {1082},
    {1083},
    {1084},
    {1085},
    {1096},
    {1097},
    {1098}
};

new pv_lights[2][0] =
{
	{1013},
	{1024}
};

main()
{

}

// ===
// callbacks
// ===

public OnGameModeInit()
{
	print("====================="SVRNAME" "CURRENT_VERSION"=====================");

	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_TEXT);
    MySQL_Connect();
	MySQL_CleanUp();

	#if INC_ENVIORMENT == true
    BuildServerMap();
    BuildServerMap2();
    BuildServerMap3();
    BuildServerMap4();
    #endif
    
	//For teh npcs
	AddStaticVehicle(537, 1462.0745, 2630.8787, 10.8203, 0.0, -1, -1);
	AddStaticVehicle(538, -2006.5000, 144.8758, 28.8756, 180.0000, -1, -1);
	//npcs end

	ResetElevatorQueue();
	Elevator_Initialize();
	LoadServerStaticMeshes();
	LoadVisualStaticMeshes();
	CreateTextdraws();
    ExecDerbyVotingTimer();
    ExecBGVotingTimer();
    FetchRaces();
    ClearDerbyVotes();
    IRC_SetUp();
	LoadStores();
	LoadGZones();
	LoadHouses();
	LoadProps();

	SetTimer("ProcessTick", 1000, true);
    SetTimer("QueueProcess", 60000, true);
	tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
	g_tRaceOpenSelection = SetTimer("OpenNewRace", 40307, false);
	SetTimer("Maths", 500000, true);
	SetTimer("RandomSvrMsg", SERVERMSGS_TIME, true);
	SetTimer("DoLotto", 100000, false);
	SetTimer("RandomTXTInfo", 30000, true);

    SollIchDirMaEtWatSagen();

	ConnectNPC("["SVRSC"]Floatround", "bot0");
	ConnectNPC("["SVRSC"]Inyaface", "bot1");
	ConnectNPC("["SVRSC"]SS_FatGuy", "bot2");
	ConnectNPC("["SVRSC"]TrainRider", "train_lv");
	ConnectNPC("["SVRSC"]CrazyLilMan", "at400_ls");

    #if INC_ENVIORMENT == true
    LoadServerVehicles();
    #endif

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		SetVehicleNumberPlate(i, "{3399ff}S{FFFFFF}tun{F81414}T");
		SetVehicleToRespawn(i);
		if(IsComponentIdCompatible(GetVehicleModel(i), 1010)) AddVehicleComponent(i, 1010);
		ChangeVehicleColor(i, (random(128) + 127), (random(128) + 127));
	}

	print("====================="SVRNAME" "CURRENT_VERSION"=====================");
	return 1;
}

public OnGameModeExit()
{
	print("Unloading GameMode...");

    MySQL_CleanUp();
    
	mysql_stat(gstr2, g_SQL_handle);
	print(gstr2);

    IRC_QuitBots();
    IRC_DestroyGroup(IRC_GroupID);
	
	DestroyElevator();
    
	DestroyAllDynamicObjects();
	DestroyAllDynamicCPs();
	DestroyAllDynamicRaceCPs();
	DestroyAllDynamicMapIcons();
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicPickups();

 	mysql_close(g_SQL_handle, true);
 	
	print("...GameMode unloaded!");
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	Streamer_UpdateEx(playerid, 1797.5835, -1305.0114, 121.2348, -1, -1);
	SetPlayerPos(playerid, 1797.5835, -1305.0114, 121.2348);
	SetPlayerFacingAngle(playerid, 359.9696);
	SetPlayerCameraPos(playerid, 1797.3688, -1299.8156, 121.4657);
	SetPlayerCameraLookAt(playerid, 1797.3661, -1300.8164, 121.4556);
	
	if(GlobalMain) return 0;

	if(PlayerInfo[playerid][ExitType] == EXIT_FIRST_SPAWNED)
	{
		SCM(playerid, -1, ""er"You are bugged in class selection. Please reconnect.");
		PlayerInfo[playerid][AllowSpawn] = false;
		KickEx(playerid);
	    return 0;
	}

    if(IsPlayerNPC(playerid))
	{
		if(!strcmp(__GetName(playerid), "["SVRSC"]TrainRider", true))
 		{
	        SetSpawnInfo(playerid, NO_TEAM, 255, 1462.0745, 2630.8787, 10.8203, 0.0, -1, -1, -1, -1, -1, -1);
		}
 	 	else if(!strcmp(__GetName(playerid), "["SVRSC"]CrazyLilMan", true))
 		{
	        SetSpawnInfo(playerid, NO_TEAM, 4, -2006.5000, 144.8758, 28.8756, 180.0000, -1, -1, -1, -1, -1, -1);
		}
		return 1;
	}

	TextDrawShowForPlayer(playerid, TXTTeleportInfo);

	HidePlayerInfoTextdraws(playerid);

	ShowPlayerWelcomeTextdraws(playerid);
	TextDrawShowForPlayer(playerid, TXTFooterBlack);
	TextDrawShowForPlayer(playerid, TXTRandomInfo);
	TextDrawShowForPlayer(playerid, TXTVersionInfo);
	TextDrawShowForPlayer(playerid, TXTFooter);

	PlayerInfo[playerid][bFirstSpawn] = true;

	PreloadAnimLib(playerid, "DANCING");

	switch(random(2))
	{
	    case 0:
	    {
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 0, 0, 0, 0); // shit is annoying
		}
		case 1:
		{
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.1, 1, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.1, 1, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.1, 1, 0, 0, 0, 0); // shit is annoying
		}
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;

	if(!PlayerInfo[playerid][AllowSpawn])
	{
	    //SCM(playerid, -1, ""er"You are not logged in!");
	    return 0;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid))
    {
        new botname[MAX_PLAYER_NAME+1];
        GetPlayerName(playerid, botname, sizeof(botname));
        SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);

        if(!strcmp(botname, "["SVRSC"]Floatround", true))
		{
		    format(gstr, sizeof(gstr), ""vgreen"MC public urination\n\n["SVRSC"]Floatround\nID: %i", playerid);
	     	NPCLabelHandle[0] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
			SetPlayerSkin(playerid, 2);
		}
        else if(!strcmp(botname, "["SVRSC"]Inyaface", true))
		{
		    format(gstr, sizeof(gstr), ""vgreen"MC uses time machines irresponsibly\n\n["SVRSC"]Inyaface\nID: %i", playerid);
			NPCLabelHandle[1] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
			SetPlayerSkin(playerid, 3);
		}
        else if(!strcmp(botname, "["SVRSC"]SS_FatGuy", true))
		{
		 	format(gstr, sizeof(gstr), ""vgreen"MC ate to many burgers\n\n["SVRSC"]SS_FatGuy\nID: %i", playerid);
			NPCLabelHandle[2] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
			SetPlayerSkin(playerid, 5);
		}
		else if(!strcmp(botname, "["SVRSC"]TrainRider", true))
		{
		    format(gstr, sizeof(gstr), ""vgreen"MC no MC\n\n["SVRSC"]TrainRider\nID: %i", playerid);
			NPCLabelHandle[3] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
	        PutPlayerInVehicle(playerid, 1, 0);
	 	}
  		else if(!strcmp(botname, "["SVRSC"]CrazyLilMan", true))
		{
		    format(gstr, sizeof(gstr), ""vgreen"MC whose father is a traindriver\n\n["SVRSC"]CrazyLilMan\nID: %i", playerid);
			NPCLabelHandle[4] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
	        PutPlayerInVehicle(playerid, 2, 0);
	 	}
		return 1;
    }

    PlayerTextDrawHide(playerid, TXTKillerText[playerid]);

    if(PlayerInfo[playerid][bShowToys]) AttachPlayerToys(playerid);
    SavePos(playerid);
    
    if(PlayerInfo[playerid][bFirstSpawn])
    {
        PlayerInfo[playerid][bFirstSpawn] = false;
		PlayerInfo[playerid][AllowSpawn] = false;
		StopAudioStreamForPlayer(playerid);
		ResetPlayerWorld(playerid);
		PlayerInfo[playerid][ExitType] = EXIT_FIRST_SPAWNED;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPlayerHealth(playerid, 100.0);
		SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][tickLastChat] = 0;
		StopAudioStreamForPlayer(playerid);
		PlayerPlaySound(playerid, 1184, 0, 0, 0);
		RandomSpawn(playerid);
		RandomWeapon(playerid);
		HidePlayerWelcomeTextdraws(playerid);
		ShowPlayerInfoTextdraws(playerid);
		if(PlayerInfo[playerid][VIP] == 1)
		{
		    SetPlayerArmour(playerid, 100.0);
		}
		
		SyncGangZones(playerid);
    }
    else switch(gTeam[playerid])
    {
        case JAIL:
        {
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 10);
			SetPlayerFacingAngle(playerid, 360.0);
			SetPlayerPos(playerid, 197.5662, 175.4800, 1004.0);
			ResetPlayerWeapons(playerid);
        }
	    case STORE:
	    {
			ResetPlayerWorld(playerid);
			gTeam[playerid] = NORMAL;
   			RandomSpawn(playerid);
   			RandomWeapon(playerid);
	    }
	    case BUYCAR:
	    {
			SetPlayerInterior(playerid, 0);
		    SetPlayerPosEx(playerid, 1798.0952, -1410.8192, floatadd(13.5458, 4.5));
		    RandomWeapon(playerid);
			gTeam[playerid] = NORMAL;

			RandomWeapon(playerid);

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
	    }
        case SPEC:
        {
	    	SetPlayerPos(playerid, PlayerInfo[playerid][SpecX], PlayerInfo[playerid][SpecY], PlayerInfo[playerid][SpecZ]);
			SetPlayerFacingAngle(playerid, PlayerInfo[playerid][SpecA]);
			ResetPlayerWeapons(playerid);
			gTeam[playerid] = NORMAL;
        }
        case NORMAL:
        {
            ResetPlayerWorld(playerid);
            if(PlayerInfo[playerid][bHasSpawn])
            {
        		SetPlayerPos(playerid, PlayerInfo[playerid][CSpawnX], PlayerInfo[playerid][CSpawnY], PlayerInfo[playerid][CSpawnZ]);
			    SetPlayerFacingAngle(playerid, PlayerInfo[playerid][CSpawnA]);
			    SetCameraBehindPlayer(playerid);
            }
            else
            {
                RandomSpawn(playerid);
            }
			SetCameraBehindPlayer(playerid);
			
			if(PlayerInfo[playerid][bGod])
			{
			    SetPlayerHealth(playerid, 99999.0);
			    ResetPlayerWeapons(playerid);
			    TextDrawShowForPlayer(playerid, TXTGodTD);
			}
			else
			{
			    RandomWeapon(playerid);
			}
			
			SyncGangZones(playerid);
			
			if(PlayerInfo[playerid][VIP] == 1)
			{
			    SetPlayerArmour(playerid, 100.0);
			}
		}
		case DERBY:
		{
		    SetPlayerDerbyStaticMeshes(playerid);
		}
		case WAR:
		{
			switch(random(4))
			{
			    case 0: SetPlayerPosition(playerid, 164.9882,1922.3430,18.4712,247.7249);
			    case 1: SetPlayerPosition(playerid, 285.5063,1819.9249,24.4108,1.9556);
			    case 2: SetPlayerPosition(playerid, 291.3683,1918.2693,17.6265,275.6602);
			    case 3: SetPlayerPosition(playerid, 236.5930,1918.7386,17.6446,145.6778);
			}

            ResetPlayerWeapons(playerid);
			SCM(playerid, -1, ""war_sign" You have respawned in War");
   			GivePlayerWeapon(playerid, 3, 1);
    		GivePlayerWeapon(playerid, 24, 9999999);
    		GivePlayerWeapon(playerid, 25, 9999999);
		 	GivePlayerWeapon(playerid, 28, 9999999);
    		GivePlayerWeapon(playerid, 30, 9999999);
    		GivePlayerWeapon(playerid, 33, 9999999);
    		GivePlayerWeapon(playerid, 17, 10);
    		GivePlayerWeapon(playerid, 10, 1);
			SetPlayerHealth(playerid, 100);
			
			SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
		}
		case DM:
		{
		    ResetPlayerWeapons(playerid);
		    SetPlayerHealth(playerid, 100.0);
		    new rand = random(2);
			switch(gLastMap[playerid])
			{
			    case DM_1:
			    {
				  	GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 26, 99999);
					SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
			    }
			    case DM_2:
			    {
				  	GivePlayerWeapon(playerid, 34, 99999);
					GivePlayerWeapon(playerid, 33, 99999);
					SetPlayerPos(playerid, DM_MAP_2[rand][0], DM_MAP_2[rand][1], DM_MAP_2[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_2[rand][3]);
			    }
				case DM_3:
			    {
				   	GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 9, 99999);
					SetPlayerPos(playerid, DM_MAP_3[rand][0], DM_MAP_3[rand][1], DM_MAP_3[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_3[rand][3]);
			    }
				case DM_4:
			    {
		    		GivePlayerWeapon(playerid, 31, 99999);
					GivePlayerWeapon(playerid, 27, 99999);
					GivePlayerWeapon(playerid, 37, 99999);
					SetPlayerPos(playerid, DM_MAP_4[rand][0], DM_MAP_4[rand][1], DM_MAP_4[rand][2]);
					SetPlayerFacingAngle(playerid, DM_MAP_4[rand][3]);
			    }
			}
		}
		case gBG_VOTING:
		{
		    SetPlayerBGStaticMeshes(playerid);
		}
		case gBG_TEAM1:
		{
		    SetPlayerBGTeam1(playerid);

		    SetCameraBehindPlayer(playerid);
		    RandomBGSpawn(playerid, CurrentBGMap, BG_TEAM1);
		    SetPlayerHealth(playerid, 100.0);
		}
		case gBG_TEAM2:
		{
            SetPlayerBGTeam2(playerid);

		    SetCameraBehindPlayer(playerid);
		    RandomBGSpawn(playerid, CurrentBGMap, BG_TEAM2);
		    SetPlayerHealth(playerid, 100.0);
		}
		case SNIPER:
		{
  			ResetPlayerWeapons(playerid);
			SetPlayerVirtualWorld(playerid, SNIPER_WORLD);
			GivePlayerWeapon(playerid, 34, 99999);
			SetPlayerInterior(playerid, 0);

			new rand = random(14);

			SetPlayerPosEx(playerid, Sniper_Spawns[rand][0], Sniper_Spawns[rand][1], floatadd(Sniper_Spawns[rand][2], 2.5));
			SetPlayerFacingAngle(playerid, Sniper_Spawns[rand][3]);
			
			LoadMap(playerid);
		}
		case MINIGUN:
		{
	        ResetPlayerWeapons(playerid);
	        GivePlayerWeapon(playerid, 38, 99999);
	        SetPlayerVirtualWorld(playerid, MINIGUN_WORLD);
			SetPlayerInterior(playerid, 0);

			new rand = random(10);

			SetPlayerPosEx(playerid, Minigun_Spawns[rand][0], Minigun_Spawns[rand][1], floatadd(Minigun_Spawns[rand][2], 0.5));
			SetPlayerFacingAngle(playerid, Minigun_Spawns[rand][3]);
		}
		case HOUSE:
		{
			RandomSpawn(playerid);
  			RandomWeapon(playerid);
			ResetPlayerWorld(playerid);
			gTeam[playerid] = NORMAL;
		}
		case GUNGAME:
  		{
			ResetPlayerWeapons(playerid);

            new rand = random(9);
			SetPlayerPosEx(playerid, GunGame_Spawns[rand][0], GunGame_Spawns[rand][1], floatadd(GunGame_Spawns[rand][2], 2.5));
			SetPlayerFacingAngle(playerid, GunGame_Spawns[rand][3]);
			SetCameraBehindPlayer(playerid);

			LoadMap(playerid);

			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]], 65535);

			GunGame_Player[playerid][dead] = false;
			GunGame_Player[playerid][pw] = true;
			
			if(GunGamePlayers >= 16) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, (25 + 5 * GunGamePlayers));
		}
        case CNR:
        {
			switch(GetPVarInt(playerid, "inCNR"))
			{
				case 1: // Cops
				{
					SetPVarInt(playerid, "Cop", 1);
					SetPVarInt(playerid, "Robber", 0);
					PreloadAnimLib(playerid, "PED");
					SCM(playerid, COLOR_GREY, ""nef" "LB_E"You have respawned as a Cop!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
					SetPlayerColor(playerid, 0x1F75FEFF);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 700); // SMG
					GivePlayerWeapon(playerid, 31, 1000); //M4
					GivePlayerWeapon(playerid, 16, 1); // 1 Nade
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					SetPlayerTeam(playerid, 1);
					switch(random(3))
					{
						case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
						case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
						case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
					}
					switch(random(4))
					{
						case 0: SetPlayerSkin(playerid, 282);
						case 1: SetPlayerSkin(playerid, 283);
						case 2: SetPlayerSkin(playerid, 286);
						case 3: SetPlayerSkin(playerid, 280);
					}
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 1);
				}
				case 2: // Robbers
				{
					SetPVarInt(playerid, "Robber", 1);
					SetPVarInt(playerid, "Cop", 0);
   					SCM(playerid, COLOR_GREY, ""nef" "RED_E"You have respawned as a Robber!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_ORANGE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 5, 500); // Bat
					GivePlayerWeapon(playerid, 29, 800); // SMG
					GivePlayerWeapon(playerid, 30, 1000); //AK
					GivePlayerWeapon(playerid, 27, 200); //Combat
					GivePlayerWeapon(playerid, 16, 1); // 1 Nade
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					SetPlayerTeam(playerid, 2);
					SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
					switch(random(5))
					{
						case 0: SetPlayerSkin(playerid, 125);
						case 1: SetPlayerSkin(playerid, 126);
						case 2: SetPlayerSkin(playerid, 111);
						case 3: SetPlayerSkin(playerid, 112);
						case 4: SetPlayerSkin(playerid, 108);
					}
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 2);
					SetPlayerWantedLevel(playerid, 1);
				}
				case 3: // Swat
				{
					SetPVarInt(playerid, "Robber", 0);
					SetPVarInt(playerid, "Cop", 2);
			    	SCM(playerid, COLOR_GREY, ""nef" "LB_E"You have respawned as a Swat!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 1200); // SMG
					GivePlayerWeapon(playerid, 24, 1000); // Deagle
					GivePlayerWeapon(playerid, 31, 2000); //M4
					GivePlayerWeapon(playerid, 27, 1000); //Combat
					GivePlayerWeapon(playerid, 35, 2); //RPG
					GivePlayerWeapon(playerid, 16, 5); // 5 Nade
					SetPlayerTeam(playerid, 1);
					SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
					SetPlayerSkin(playerid, 285);
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 3);
				}
				case 4: // Pro Robbers
				{
					SetPVarInt(playerid, "Robber", 1);
					SetPVarInt(playerid, "Cop", 0);
					PreloadAnimLib(playerid, "SHOP");
		    		SCM(playerid, COLOR_GREY, ""nef" "RED_E"You have respawned as a Pro Robber!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~r~pro Robbers team~w~!", 4000, 4);
					SetPlayerColor(playerid, 0xFF3200FF);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 5, 500); // Bat
					GivePlayerWeapon(playerid, 29, 800); // SMG
					GivePlayerWeapon(playerid, 30, 1000); //AK
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					GivePlayerWeapon(playerid, 27, 200); //Combat
					GivePlayerWeapon(playerid, 16, 2); // 1 Nade
					SetPlayerTeam(playerid, 2);
					SetPlayerWantedLevel(playerid, 1);
					SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
					SetPlayerSkin(playerid, 113);
					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 4);
    			}
				case 5: // Army
    			{
    				SetPVarInt(playerid, "Robber", 0);
					SetPVarInt(playerid, "Cop", 3);
		    		SCM(playerid, COLOR_GREY, ""nef" "PURPLE_E"You have respawned as an Army Personel!");
		   			SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Type /leave to exit the deathmatch.");
					GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_PURPLE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 3, 500); // Baton
					GivePlayerWeapon(playerid, 29, 1000); // SMG
					GivePlayerWeapon(playerid, 31, 5000); //M4
					GivePlayerWeapon(playerid, 24, 300); // Deagle
					GivePlayerWeapon(playerid, 34, 300); // Sniper
					GivePlayerWeapon(playerid, 27, 1000); //Combat
					GivePlayerWeapon(playerid, 16, 2); // 1 Nade
					SetPlayerTeam(playerid, 1);
					SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
					SetPlayerSkin(playerid, 287);
  					SetPlayerHealth(playerid, 100);
					SetPlayerVirtualWorld(playerid, CNR_WORLD);
					SetPVarInt(playerid, "inCNR", 5);
				}
  			}
 			if(PlayerInfo[playerid][VIP] == 1)
			{
			    SetPlayerArmour(playerid, 100.0);
			}
			SetPVarInt(playerid, "HasEscaped", 0);
        }
    }
    
	if(PlayerInfo[playerid][onduty])
	{
		SetPlayerHealth(playerid, 99999.0);
	}
	
    if(!PlayerInfo[playerid][bFooterEnabled]) Command_ReProcess(playerid, "/hidef", false);
	if(gTeam[playerid] == NORMAL) PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
	
    PlayerInfo[playerid][bIsDead] = false;
	return 1;
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan)
{
    PlayerInfo[playerid][bFloodDect] = false;
    if(IsPlayerNPC(playerid)) return 1;
    
	new p_IP[16];
	GetPlayerIp(playerid, p_IP, 16);
    
    if(iCount > 3 && iTimeSpan < 8500 && !IsWhitelisted(p_IP))
	{
	    PlayerInfo[playerid][bFloodDect] = true;

		new sz_BanCmd[30];
		
		format(sz_BanCmd, sizeof(sz_BanCmd), "banip %s", p_IP);
		SendRconCommand(sz_BanCmd);
		
		Kick(playerid);
    }
    return 1;
}

public OnPlayerConnect(playerid)
{
    gTeam[playerid] = NORMAL;
    
	new sz_IP[16], sz_Name[25];
    
    GetPlayerName(playerid, sz_Name, 25);
	GetPlayerIp(playerid, sz_IP, 16);
	
	PlayerInfo[playerid][sIP][0] = '\0';
	PlayerInfo[playerid][sName][0] = '\0';
	
	strcat(PlayerInfo[playerid][sIP], sz_IP, 16);
	strcat(PlayerInfo[playerid][sName], sz_Name, 25);
	
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][bFloodDect]) return 1;

	new count_t = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	    if(!strcmp(__GetIP(i), sz_IP))
	    {
	        ++count_t;
	    }
	}
	
	if(count_t > 3 && !IsWhitelisted(__GetIP(playerid)))
	{
		Kick(playerid);
		return 1;
	}

	format(gstr, sizeof(gstr), "DELETE FROM `online` WHERE `name` = '%s';", __GetName(playerid));
	mysql_tquery(g_SQL_handle, gstr, "", "");

    RobberyCount[playerid] = 0;
	PlayerInfo[playerid][Level] = 0;
    LabelActive[playerid] = false;
    PlayerHit[playerid] = false;
    PlayerInfo[playerid][tTimerHP] = -1;
	PlayerInfo[playerid][ExitType] = EXIT_NONE;
	PlayerInfo[playerid][AllowSpawn] = false;
	PlayerInfo[playerid][AOnline] = true;
	PlayerInfo[playerid][bCaps] = true;
	PlayerInfo[playerid][bGod] = false;
	PlayerInfo[playerid][bLogged] = false;
	PlayerInfo[playerid][vTDShown] = false;
	PlayerInfo[playerid][KBMarked] = false;
	PlayerInfo[playerid][bLoadMap] = false;
	PlayerInfo[playerid][bShowToys] = true;
	bDerbyAFK[playerid] = false;
	CSGSOFT[playerid] = false;
	PlayerInfo[playerid][GotVIPLInv] = false;
	PlayerInfo[playerid][bGWarMode] = false;
	PlayerInfo[playerid][ConnectTime] = 0;
	PlayerInfo[playerid][iCoolDownCommand] = 0;
	PlayerInfo[playerid][iCoolDownText] = 0;
	PlayerInfo[playerid][iCoolDownDeath] = 0;

	PreparePlayerPV(playerid);
    PreparePlayerToy(playerid);
    
	PlayerInfo[playerid][GangPosition] = GANG_POS_NONE;
	PlayerInfo[playerid][GangID] = 0;
	PlayerInfo[playerid][TmpGangID] = 0;
	PlayerInfo[playerid][GangName][0] = '\0';
	PlayerInfo[playerid][GangTag][0] = '\0';
	PlayerInfo[playerid][GangKickMem][0] = '\0';
	PlayerInfo[playerid][GangAssignRank][0] = '\0';
	
	SetPVarInt(playerid, "doingStunt", 0);
	PlayerInfo[playerid][tickJoin_bmx] = 0;

    strmid(LastPlayerText[playerid], " ", 0, 144, 144);

 	GunGame_Player[playerid][level] = 0;
	GunGame_Player[playerid][dead] = true;
	GunGame_Player[playerid][pw] = true;

	SetPVarInt(playerid, "LastID", -1);
	PlayerInfo[playerid][SpeedBoost] = true;
	PlayerInfo[playerid][SuperJump] = false;
	PlayerInfo[playerid][Frozen] = false;
	PlayerInfo[playerid][SavedPos] = false;
	PlayerInfo[playerid][bFooterEnabled] = true;
	PlayerInfo[playerid][SniperAiming] = false;
	PlayerInfo[playerid][HitmanHit] = 0;
	PlayerInfo[playerid][Deaths] = 0;
	PlayerInfo[playerid][Kills] = 0;
	PlayerInfo[playerid][RaceWins] = 0;
	PlayerInfo[playerid][FalloutWins] = 0;
	PlayerInfo[playerid][GungameWins] = 0;
	PlayerInfo[playerid][DerbyWins] = 0;
	PlayerInfo[playerid][PayDay] = 60;
	PlayerInfo[playerid][BGWins] = 0;
	PlayerInfo[playerid][Reaction] = 0;
	PlayerInfo[playerid][Money] = 0;
	PlayerInfo[playerid][Score] = 0;
	PlayerInfo[playerid][Bank] = 0;
	PlayerInfo[playerid][Warnings] = 0;
	PlayerInfo[playerid][Houses] = 0;
	PlayerInfo[playerid][Props] = 0;
	PlayerInfo[playerid][Wanteds] = 0;
	PlayerInfo[playerid][Boost] = 0;
	PlayerInfo[playerid][Vehicle] = -1;
	PlayerInfo[playerid][TrailerVid] = -1;
	PlayerInfo[playerid][Medkits] = 0;
 	PlayerInfo[playerid][TotalTime] = 0;
 	PlayerInfo[playerid][Credits] = 0;
 	PlayerInfo[playerid][BoostDeplete] = 0;
	PlayerInfo[playerid][AdditionalPVSlots] = 0;
	PlayerInfo[playerid][AdditionalToySlots] = 0;
	PlayerInfo[playerid][AdditionalHouseSlots] = 0;
	PlayerInfo[playerid][AdditionalPropSlots] = 0;
	PlayerInfo[playerid][AdditionalHouseObjSlots] = 0;
    PlayerInfo[playerid][VIPPlayer] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][VIPNameHash] = 0;
    PlayerInfo[playerid][VIPOffer] = 0;
 	PlayerInfo[playerid][GCPlayer] = INVALID_PLAYER_ID;
 	PlayerInfo[playerid][GCNameHash] = 0;
	PlayerInfo[playerid][GCOffer] = 0;
	PlayerInfo[playerid][GCPrice] = 0;
 	PlayerInfo[playerid][EventWins] = 0;
	PlayerInfo[playerid][Muted] = false;
	PlayerInfo[playerid][MuteTimer] = -1;
	PlayerInfo[playerid][VIP] = 0;
	PlayerInfo[playerid][Frozen] = false;
	PlayerInfo[playerid][onduty] = false;
	PlayerInfo[playerid][gInvite] = false;
	PlayerInfo[playerid][FalloutLost] = true;
    PlayerInfo[playerid][bHasSpawn] = false;
    PlayerInfo[playerid][bRainbow] = false;
	PlayerInfo[playerid][ChatWrote] = 0;
	PlayerInfo[playerid][RegDate] = 0;
	PlayerInfo[playerid][DrawnNumber] = -1;
	PlayerInfo[playerid][SavedColor] = 0;
	PlayerInfo[playerid][tickLastHitman] = 0;
	PlayerInfo[playerid][tickLastRob] = 0;
	PlayerInfo[playerid][tickLastMedkit] = 0;
	PlayerInfo[playerid][tickLastGiveCash] = 0;
	PlayerInfo[playerid][tickLastGInvite] = 0;
	PlayerInfo[playerid][tickLastGKick] = 0;
	PlayerInfo[playerid][tickLastGCreate] = 0;
	PlayerInfo[playerid][tickLastPBuy] = 0;
	PlayerInfo[playerid][tickLastBuy] = 0;
	PlayerInfo[playerid][tickLastSell] = 0;
	PlayerInfo[playerid][tickLastPSell] = 0;
    PlayerInfo[playerid][tickLastPW] = 0;
   	PlayerInfo[playerid][tickLastChat] = 0;
   	PlayerInfo[playerid][tickLastReport] = 0;
   	PlayerInfo[playerid][tickLastPM] = 0;
   	PlayerInfo[playerid][tickLastCD] = 0;
	PlayerInfo[playerid][tickLastRefill] = 0;
	PlayerInfo[playerid][tickLastVIPLInv] = 0;
	PlayerInfo[playerid][tickLastBIKEC] = 0;
	PlayerInfo[playerid][tickJoin_bmx] = 0;

	SetPVarInt(playerid, "Cop", 0);
	SetPVarInt(playerid, "Robber", 0);
	SetPVarInt(playerid, "inCNR", 0);
	pJail[playerid] = 0;

	for(new ii = 0; e_player_ach_data:ii < e_player_ach_data; ii++)
	{
	    pAch[playerid][e_player_ach_data:ii] = 0;
	}

    Iter_Clear(PlayerIgnore[playerid]);

	for(new obj = 0; obj < 13; obj++)
	{
	    hVIPVehObj[playerid][obj] = -1;
	}

   	DerbyVehLabel[playerid] = PlayerText3D:-1;
	if(PlayerInfo[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][GangLabel]);
		PlayerInfo[playerid][GangLabel] = Text3D:-1;
	}

    if(PlayerInfo[playerid][VIPLabel] != Text3D:-1)
    {
        DestroyDynamic3DTextLabel(PlayerInfo[playerid][VIPLabel]);
        PlayerInfo[playerid][VIPLabel] = Text3D:-1;
    }
	if(PlayerInfo[playerid][AdminDutyLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][AdminDutyLabel]);
	    PlayerInfo[playerid][AdminDutyLabel] = Text3D:-1;
	}

    PlayerInfo[playerid][toy_selected] = 0;
    PlayerInfo[playerid][SpecID] = INVALID_PLAYER_ID;

    g_RaceVehicle[playerid] = -1;
    pDerbyCar[playerid] = -1;
    PreviewTmpVeh[playerid] = -1;

    ToggleSpeedo(playerid, false);
	SetPlayerScore_(playerid, 0);
	SetPlayerTeam(playerid, NO_TEAM);

	HidePlayerFalloutTextdraws(playerid);
	HidePlayerDerbyTextdraws(playerid);
	HidePlayerBGTextdraws(playerid);
	HidePlayerInfoTextdraws(playerid);
	HidePlayerRaceTextdraws(playerid);

    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);

    DisablePlayerRaceCheckpoint(playerid);

	if(GlobalMain)
	{
	    SCM(playerid, RED, "Server is in going in maintenance mode, please try again later.");
  		KickEx(playerid);
	}
	else
	{
		TextDrawShowForPlayer(playerid, TXTOnJoin[0]);
		TextDrawShowForPlayer(playerid, TXTOnJoin[1]);
		TextDrawHideForPlayer(playerid, TXTTeleportInfo);

        InitSession(playerid);
        PlayerPlaySound(playerid, 1183, 0, 0, 0);

		format(gstr, sizeof(gstr), "SELECT * FROM `bans` WHERE `PlayerName` = '%s';", __GetName(playerid));
		mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_IS_BANNED, playerid, g_SQL_handle);
 	}
 	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	format(gstr, sizeof(gstr), "DELETE FROM `online` WHERE `name` = '%s';", __GetName(playerid));
	mysql_tquery(g_SQL_handle, gstr, "", "");
	
    if(IsPlayerNPC(playerid)) return 1;

    StopAudioStreamForPlayer(playerid);
    
	PlayerInfo[playerid][bLoadMap] = false;

   	if(PlayerInfo[playerid][ExitType] == EXIT_FIRST_SPAWNED && PlayerInfo[playerid][bLogged])
	{
		MySQL_SavePlayer(playerid, true);
        MySQL_SavePlayerToys(playerid);

		switch(gTeam[playerid])
		{
		    case gBUILDRACE:
		    {
			    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
				if(fexist(gstr))
				{
					fremove(gstr);
				}
				RemoveFromRaceBuilder(playerid);
		    }
		    case gRACE:
		    {
		        --g_RacePlayerCount;

				gTeam[playerid] = NORMAL;
				
				if(g_RaceVehicle[playerid] != -1)
				{
					DestroyVehicle_(g_RaceVehicle[playerid]);
					g_RaceVehicle[playerid] = -1;
				}
				
				TogglePlayerControllable(playerid, true);
                SetPlayerVirtualWorld(playerid, 0);
                DisablePlayerRaceCheckpoint(playerid);

				g_CPProgress[playerid] = 0;

				HidePlayerRaceTextdraws(playerid);

			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
			    Streamer_Update(playerid);
			}
		    case gBG_TEAM1:
		    {
			    BGTeam1Players--;
		    }
		    case gBG_TEAM2:
		    {
			    BGTeam2Players--;
		    }
		    case CNR:
		    {
		        Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		        Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		        Streamer_Update(playerid);
		    }
			case FALLOUT:
			{
                PlayerInfo[playerid][FalloutLost] = true;
				gTeam[playerid] = NORMAL;
				CurrentFalloutPlayers--;
			    new count = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(!IsPlayerAvail(i)) continue;
				    if(gTeam[i] == FALLOUT) count++;
				}

				if(count < 2)
				{
				    KillTimer(Info[I_iTimer][1]);

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(gTeam[i] == FALLOUT)
					    {
					    	TogglePlayerControllable(i, true);
						    RandomSpawn(i, true);
						    RandomWeapon(i);
						    HidePlayerFalloutTextdraws(i);
						    ResetPlayerWorld(i);
						    FalloutMSG("Fallout has been canceled!");
						    gTeam[i] = NORMAL;
					    }
					}
					Fallout_Cancel();
				}
			}
			case DERBY:
			{
			    //OPDisc
			    if(DerbyVehLabel[playerid] != PlayerText3D:-1)
			    {
			    	DeletePlayer3DTextLabel(playerid, DerbyVehLabel[playerid]);
			    	DerbyVehLabel[playerid] = PlayerText3D:-1;
			    }

			    if(!bDerbyAFK[playerid])
				{
				    CurrentDerbyPlayers--;
                    gTeam[playerid] = NORMAL;
			 		if(!IsDerbyRunning)
				    {
						if(CurrentDerbyPlayers < 2)
						{
							ExecDerbyVotingTimer();
							ClearDerbyVotes();
						}
					}
					else if(IsDerbyRunning && DerbyWinner[playerid])
					{
					    if(pDerbyCar[playerid] != -1)
					    {
					    	DestroyVehicle_(pDerbyCar[playerid]);
					    	pDerbyCar[playerid] = -1;
						}
					    DerbyWinner[playerid] = false;
	        			DerbyPlayers--;
					    if(DerbyPlayers == 1) Derby();
					}
			    }
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
			    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
			    Streamer_Update(playerid);
			}
			case GUNGAME:
			{
			    GunGamePlayers--;
			}
		}

        if(PlayerInfo[playerid][Muted]) KillTimer(PlayerInfo[playerid][MuteTimer]);

		if(PlayerInfo[playerid][onduty])
		{
		    RemovePlayerAttachedObject(playerid, 9);
        	PlayerInfo[playerid][onduty] = false;
		}
		if(PlayerInfo[playerid][AdminDutyLabel] != Text3D:-1)
		{
		    DestroyDynamic3DTextLabel(PlayerInfo[playerid][AdminDutyLabel]);
		    PlayerInfo[playerid][AdminDutyLabel] = Text3D:-1;
		}

		if(PlayerInfo[playerid][GangLabel] != Text3D:-1)
		{
		    DestroyDynamic3DTextLabel(PlayerInfo[playerid][GangLabel]);
 			PlayerInfo[playerid][GangLabel] = Text3D:-1;
		}

        if(PlayerInfo[playerid][VIPLabel] != Text3D:-1)
        {
            DestroyDynamic3DTextLabel(PlayerInfo[playerid][VIPLabel]);
            PlayerInfo[playerid][VIPLabel] = Text3D:-1;
        }

        for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
        {
			if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			{
				RemovePlayerAttachedObject(playerid, i);
			}
		}

		if(PlayerInfo[playerid][bRainbow])
		{
			KillTimer(PlayerInfo[playerid][tRainbow]);
			PlayerInfo[playerid][bRainbow] = false;
		}

        DestroyPlayerVehicles(playerid);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(gTeam[i] == SPEC && PlayerInfo[i][SpecID] == playerid)
	    	{
	    	    Command_ReProcess(i, "/specoff", false);
				SendInfo(i, "~r~~h~~h~Player disconnected!", 4000);
			}
			
	  		if(Iter_Contains(PlayerIgnore[i], playerid))
		    {
		        Iter_Remove(PlayerIgnore[i], playerid);
		    }
		}
	}

	gTeam[playerid] = NORMAL;

    PlayerInfo[playerid][bFloodDect] = false;
	PlayerInfo[playerid][Level] = 0;
    LabelActive[playerid] = false;
    PlayerInfo[playerid][tTimerHP] = -1;
	PlayerInfo[playerid][ExitType] = EXIT_NONE;
	bDerbyAFK[playerid] = false;
	CSGSOFT[playerid] = false;
	PlayerInfo[playerid][bGWarMode] = false;
	PlayerInfo[playerid][AllowSpawn] = false;
	PlayerInfo[playerid][AOnline] = true;
	PlayerInfo[playerid][ConnectTime] = 0;
	PlayerInfo[playerid][iCoolDownCommand] = 0;
	PlayerInfo[playerid][iCoolDownText] = 0;
	PlayerInfo[playerid][iCoolDownDeath] = 0;

	PreparePlayerPV(playerid);
 	PreparePlayerToy(playerid);
     
	PlayerInfo[playerid][GangPosition] = GANG_POS_NONE;
	PlayerInfo[playerid][GangID] = 0;
	PlayerInfo[playerid][TmpGangID] = 0;
	PlayerInfo[playerid][GangName][0] = '\0';
	PlayerInfo[playerid][GangTag][0] = '\0';
	PlayerInfo[playerid][GangKickMem][0] = '\0';
	PlayerInfo[playerid][GangAssignRank][0] = '\0';

	strmid(LastPlayerText[playerid], " ", 0, 144, 144);

 	GunGame_Player[playerid][level] = 0;
	GunGame_Player[playerid][dead] = true;
	GunGame_Player[playerid][pw] = true;

	SetPVarInt(playerid, "LastID", -1);
	PlayerInfo[playerid][SpeedBoost] = true;
	PlayerInfo[playerid][SuperJump] = false;
	PlayerInfo[playerid][Frozen] = false;
	PlayerInfo[playerid][SavedPos] = false;
	PlayerInfo[playerid][KBMarked] = false;
	PlayerInfo[playerid][HitmanHit] = 0;
	PlayerInfo[playerid][Deaths] = 0;
	PlayerInfo[playerid][Kills] = 0;
	PlayerInfo[playerid][RaceWins] = 0;
	PlayerInfo[playerid][FalloutWins] = 0;
	PlayerInfo[playerid][GungameWins] = 0;
	PlayerInfo[playerid][DerbyWins] = 0;
	PlayerInfo[playerid][PayDay] = 60;
	PlayerInfo[playerid][BGWins] = 0;
	PlayerInfo[playerid][Reaction] = 0;
	PlayerInfo[playerid][SavedColor] = 0;
	PlayerInfo[playerid][Money] = 0;
	PlayerInfo[playerid][Score] = 0;
	PlayerInfo[playerid][Bank] = 0;
	PlayerInfo[playerid][Warnings] = 0;
	PlayerInfo[playerid][Houses] = 0;
	PlayerInfo[playerid][Props] = 0;
	PlayerInfo[playerid][Wanteds] = 0;
	PlayerInfo[playerid][Vehicle] = -1;
	PlayerInfo[playerid][DrawnNumber] = -1;
 	PlayerInfo[playerid][Credits] = 0;
 	PlayerInfo[playerid][BoostDeplete] = 0;
 	PlayerInfo[playerid][AdditionalPVSlots] = 0;
 	PlayerInfo[playerid][AdditionalToySlots] = 0;
	PlayerInfo[playerid][AdditionalHouseSlots] = 0;
	PlayerInfo[playerid][AdditionalPropSlots] = 0;
	PlayerInfo[playerid][AdditionalHouseObjSlots] = 0;
 	PlayerInfo[playerid][EventWins] = 0;
	PlayerInfo[playerid][VIP] = 0;
 	PlayerInfo[playerid][TotalTime] = 0;
	PlayerInfo[playerid][Muted] = false;
	PlayerInfo[playerid][MuteTimer] = -1;
	PlayerInfo[playerid][Frozen] = false;
	PlayerInfo[playerid][onduty] = false;
	PlayerInfo[playerid][gInvite] = false;
	PlayerInfo[playerid][FalloutLost] = true;
 	PlayerInfo[playerid][bHasSpawn] = false;
 	PlayerInfo[playerid][bLogged] = false;
	PlayerInfo[playerid][ChatWrote] = 0;
	PlayerInfo[playerid][RegDate] = 0;
    PlayerInfo[playerid][VIPPlayer] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][VIPNameHash] = 0;
    PlayerInfo[playerid][VIPOffer] = 0;
 	PlayerInfo[playerid][GCPlayer] = INVALID_PLAYER_ID;
 	PlayerInfo[playerid][GCNameHash] = 0;
	PlayerInfo[playerid][GCOffer] = 0;
	PlayerInfo[playerid][GCPrice] = 0;
	PlayerInfo[playerid][tickLastHitman] = 0;
	PlayerInfo[playerid][tickLastGInvite] = 0;
	PlayerInfo[playerid][tickLastGKick] = 0;
	PlayerInfo[playerid][tickLastGCreate] = 0;
	PlayerInfo[playerid][tickLastPBuy] = 0;
	PlayerInfo[playerid][tickLastBuy] = 0;
	PlayerInfo[playerid][tickLastRob] = 0;
	PlayerInfo[playerid][tickLastSell] = 0;
	PlayerInfo[playerid][tickLastPSell] = 0;
    PlayerInfo[playerid][tickLastPW] = 0;
    PlayerInfo[playerid][tickLastRefill] = 0;

    PlayerInfo[playerid][toy_selected] = 0;

    PlayerInfo[playerid][SpecID] = INVALID_PLAYER_ID;

	SetPVarInt(playerid, "Cop", 0);
	SetPVarInt(playerid, "Robber", 0);
	SetPVarInt(playerid, "inCNR", 0);
	pJail[playerid] = 0;

	SetPlayerScore_(playerid, 0);
	SetPlayerTeam(playerid, NO_TEAM);
	
	new leaveMsg[128], reasonMsg[8];
	switch(reason)
	{
		case 0: reasonMsg = "Timeout";
		case 1: reasonMsg = "Leaving";
		case 2: reasonMsg = "Kicked";
	}
	
	format(leaveMsg, sizeof(leaveMsg), "02[%i] 03*** %s has left the server. (%s)", playerid, __GetName(playerid), reasonMsg);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, leaveMsg);
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PlayerInfo[playerid][KBMarked]) return 0;
	
	if(PlayerInfo[playerid][bIsDead])
	{
	    SCM(playerid, -1, ""er"You can´t use commands while being dead!");
	    return 0;
	}
	if(PlayerInfo[playerid][ExitType] != EXIT_FIRST_SPAWNED)
	{
	    SCM(playerid, -1, ""er"You need to spawn to use commands!");
	    return 0;
	}
	if(PlayerInfo[playerid][Frozen])
	{
	    switch(YHash(cmdtext[1], false))
	    {
	        case _I(p,m), _I(r): { }
	        default:
			{
			    SCM(playerid, -1, ""er"You can only use /pm and /r while being frozen!");
				return 0;
   			}
	    }
	}
	if(PlayerInfo[playerid][bLoadMap])
	{
	    SCM(playerid, -1, ""er"You can´t use commands now!");
	    return 0;
	}
	
	CancelEdit(playerid);
	// Closing open dialogs in order to avoid some exploits.
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    new File:lFile = fopen("/Logs/cmdlog.txt", io_append),
        time[3];

    gettime(time[0], time[1], time[2]);

    format(gstr2, sizeof(gstr2), "[%02d:%02d:%02d] [%i]%s USED %s SUCCESS: %i\r\n", time[0], time[1], time[2], playerid, __GetName(playerid), cmdtext, success);
    fwrite(lFile, gstr2);
    fclose(lFile);

    SrvStat[0]++;

	PlayerInfo[playerid][iCoolDownCommand]++;
	SetTimerEx("CoolDownCommand", COOLDOWN_CMD, false, "i", playerid);
	if(PlayerInfo[playerid][iCoolDownCommand] == 8)
	{
	    return GameTextForPlayer(playerid, "~b~~h~stop command spam!", 2000, 3);
	}
	else if(PlayerInfo[playerid][iCoolDownCommand] >= 12 && PlayerInfo[playerid][Level] < 5)
	{
	    new string[100];
		format(string, sizeof(string), "Command-Spam detected! %s(%i) has been kicked!", __GetName(playerid), playerid);
		AdminMSG(RED, string);
		PlayerInfo[playerid][iCoolDownCommand] = 0;
		return Kick(playerid);
	}

	if(!success)
	{
	    format(gstr, sizeof(gstr), "~g~~h~~h~Unknown command: %s!~n~~n~~w~These commands may help you~n~~g~~h~~h~/help /cmds /tele /rules", cmdtext);
	    SendInfo(playerid, gstr, 4000);
 		TextDrawShowForPlayer(playerid, ErrorTD);
		SetTimerEx("hideError", 4000, false, "i", playerid);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(GetPlayerInterior(playerid) == 0) // Crasher
    {
        return 0;
    }

	new vmodel = GetVehicleModel(vehicleid);
	if(!IsComponentIdCompatible(vmodel, componentid)) // Crasher
	{
	    printf("[CHEAT] Bad Vehicle Mod by [%i]%s using vc:%i with cp:%i", playerid, __GetName(playerid), vmodel, componentid);
		return 0;
	}
	
	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPV[playerid][PVSelect[playerid]][PVehicleID] == vehicleid)
	    {
	        SaveVehComponets(playerid, componentid);
	    }
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPV[playerid][PVSelect[playerid]][PVehicleID] == vehicleid)
	    {
	        PlayerPV[playerid][PVSelect[playerid]][PaintJob] = paintjobid;
	    }
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(PVSelect[playerid] != -1)
	{
	    if(PlayerPV[playerid][PVSelect[playerid]][PVehicleID] == vehicleid)
	    {
	        PlayerPV[playerid][PVSelect[playerid]][Color1] = color1;
	        PlayerPV[playerid][PVSelect[playerid]][Color2] = color2;
	    }
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if(damagedid == INVALID_PLAYER_ID || playerid == INVALID_PLAYER_ID) return 1;
	
	if(PlayerInfo[damagedid][bGod])
	{
	    GameTextForPlayer(playerid, "~g~~h~~h~Player has GOD enabled", 2000, 3);
	    SetPlayerHealth(damagedid, 99999.0);
	}
	if(gTeam[playerid] == DM || gTeam[playerid] == SNIPER)
	{
		PlayerPlaySound(playerid, 17802, 0, 0, 0);
	}
	return 1;
}

function:OnQueryFinish(query[], resultid, extraid, connectionHandle)
{
    switch(resultid)
	{
		case THREAD_RACE_FINISH:
		{
			new maxid = cache_insert_id(g_SQL_handle);

			format(gstr2, sizeof(gstr2), "SELECT `id`, `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 6;", g_NextRace); // 6 , da vllt Platz 5 belegt und somit 6 verdrängt // versteh ich nicht // ah warte jetzt hab ichs kapiert
			mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_RACE_LATEST, maxid, extraid);
		}
		case THREAD_RACE_LATEST:
		{
			new rows, fields;
			cache_get_data(rows, fields, g_SQL_handle);
			
			if(rows > 0)
			{
			    new name[25], time, id,
			        minute, sec, msec;
			    
				for(new i = 0; i < rows; i++)
				{
				    name[0] = '\0';
					id = cache_get_row_int(i, 0, g_SQL_handle);
					time = cache_get_row_int(i, 2, g_SQL_handle);
					cache_get_row(i, 1, name, g_SQL_handle, sizeof(name));
					
					if(extraid == id)
					{
					    ConvertTime(var0, time, minute, sec, msec);
					    
					    if(connectionHandle == 1)
					    {
					        format(gstr, sizeof(gstr), ""race_sign" %s hit a new record on %03i with %02i:%02i.%03i", name, g_NextRace, minute, sec, msec);
					        SCMToAll(-1, gstr);
					    }
					    else
					    {
					 	    format(gstr, sizeof(gstr), ""race_sign" %s reached on %03i place %i with %02i:%02i.%03i", name, g_NextRace, connectionHandle, minute, sec, msec);
							SCMToAll(-1, gstr);
					    }
					    
						if(rows > i + 1)
						{
						    new record_sec,
						        record_msec,
						        record_minute,
						        oldtime;

							name[0] = '\0';
							cache_get_row(i + 1, 1, name, g_SQL_handle, sizeof(name));
							oldtime = cache_get_row_int(i + 1, 2, g_SQL_handle);

					 	    ConvertTime(var1, oldtime, minute, sec, msec);
					 	    oldtime -= time;
					 	    ConvertTime(var2, oldtime, record_minute, record_sec, record_msec);

					 	    format(gstr, sizeof(gstr), ""race_sign" The old record by %s with %02i:%02i.%03i has been improved by %02i:%02i.%03i", name, minute, sec, msec, record_minute, record_sec, record_msec);
							SCMToAll(-1, gstr);
                        }
						break;
					}
				}
			}
		}
		case THREAD_RACE_TOPLIST:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

		    if(rows > 0)
		    {
			    new minute,
					sec,
					msec,
					name[25],
					time;

				for(new i = 0; i < rows; i++)
				{
					cache_get_row(i, 0, name, g_SQL_handle, sizeof(name));
					time = cache_get_row_int(i, 1, g_SQL_handle);
					ConvertTime(var, time, minute, sec, msec);
					format(gstr, sizeof(gstr), ""nef_yellow"%i. "green"%s "nef_yellow"- "white"%02i:%02i.%03i", i + 1, name, minute, sec, msec);
					SCM(extraid, -1, gstr);
				}
		    }
		    else
		    {
		        SCM(extraid, -1, ""vgreen"» No race records available");
		    }
		}
	    case THREAD_GANG_DESTROY:
	    {
     		new rows, fields;
	        cache_get_data(rows, fields, g_SQL_handle);
	        
	        if(rows == 1)
	        {
	            new gangname[21], gangid;
	            cache_get_row(0, 1, gangname, g_SQL_handle, sizeof(gangname));
	            gangid = cache_get_row_int(0, 0, g_SQL_handle);
	            
				if(Iter_Contains(iterGangWar, gangid)) return SCM(extraid, -1, ""er"You can't close this gang as they are involved in a Gang War.");
	            
	            new string[255];
				format(string, sizeof(string), "UPDATE `accounts` SET `GangPosition` = 0, `GangID` = 0 WHERE `GangID` = %i;", gangid);
				mysql_tquery(g_SQL_handle, string, "", "");

				for(new i = 0; i < gzoneid; i++)
				{
				    if(GZoneInfo[i][localGang] == gangid)
				    {
						GZoneInfo[i][iTimeLeft] = 0;
						GZoneInfo[i][bUnderAttack] = false;
						GZoneInfo[i][AttackingGang] = 0;
						GZoneInfo[i][DefendingGang] = 0;
						GZoneInfo[i][iLocked] = gettime();
						GZoneInfo[i][localGang] = 0;

						format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneInfo[i][iID], GZoneInfo[i][sZoneName]);
						UpdateDynamic3DTextLabelText(GZoneInfo[i][label], WHITE, gstr);

						MySQL_SaveGangZone(i);
				    }
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
				    {
				        if(PlayerInfo[i][GangID] == gangid || PlayerInfo[i][TmpGangID] == gangid)
				        {
					        PlayerInfo[i][gInvite] = false;
					        PlayerInfo[i][GangID] = 0;
					        PlayerInfo[i][TmpGangID] = 0;
					        PlayerInfo[i][GangPosition] = GANG_POS_NONE;
					        PlayerInfo[i][GangName][0] = '\0';
							PlayerInfo[i][GangTag][0] = '\0';
							MySQL_SavePlayer(i, false);
					 		if(PlayerInfo[i][GangLabel] != Text3D:-1)
							{
							    DestroyDynamic3DTextLabel(PlayerInfo[i][GangLabel]);
					 			PlayerInfo[i][GangLabel] = Text3D:-1;
							}
						}
						
						SyncGangZones(i);
				    }
				}

				format(string, sizeof(string), "DELETE FROM `gangs` WHERE `ID` = %i LIMIT 1;", gangid);
				mysql_tquery(g_SQL_handle, string, "", "");

				format(string, sizeof(string), ""server_sign" "r_besch"Admin %s(%i) has destroyed gang %s", __GetName(extraid), extraid, gangname);
				SCMToAll(-1, string);
	        }
			else SCM(extraid, -1, ""er"This gang does not exist");
	    }
	    case THREAD_CHECK_AUTO_LOGIN:
	    {
	        new rows, fields;
	        cache_get_data(rows, fields, g_SQL_handle);
	        
	        if(rows > 0) // accname with ip found
	        {
	            // Auto Login
				AutoLogin(extraid);
	        }
	        else // ip on account is not the same as current connection
	        {
	            // Login Dialog
	            RequestLogin(extraid);
	        }
	    }
        case THREAD_FETCH_GANG_MEMBER_NAMES:
        {
            new rows, fields;
            cache_get_data(rows, fields, g_SQL_handle);

			if(rows > 0)
			{
			    new tmpstring[2048],
			        count = 0,
			        finstring[sizeof(tmpstring) + 300];

				for(new i = 0; i < rows; i++)
				{
					new result[MAX_PLAYER_NAME+1],
					    tmp[MAX_PLAYER_NAME+1 + 25],
					    rank = 1;

					cache_get_row(i, 0, result, g_SQL_handle, sizeof(result));
					rank = cache_get_row_int(i, 1, g_SQL_handle);

					format(tmp, sizeof(tmp), "\n%i. %s (%s)", count + 1, result, GangPositions[rank][E_gang_pos_name]);
					strcat(tmpstring, tmp);

					if(++count >= 50) break;
				}
				
				format(finstring, sizeof(finstring), "There are "yellow"%i"white" members in this gang\n"green"Displaying %i members below:"white"", rows, count);
				strcat(finstring, tmpstring);

				ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_LIST, ""nef" - Gang Members", finstring, "OK", "");
            }
        }
		case THREAD_FETCH_GANG_INFO:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

		    if(rows > 0)
			{
			    new gangname[MAX_GANG_NAME+1],
	    			gangtag[5],
					score,
					udate,
					count = 0,
					members[1536],
					string[2048];

				cache_get_row(0, 1, gangname, g_SQL_handle, sizeof(gangname));
				cache_get_row(0, 2, gangtag, g_SQL_handle, sizeof(gangtag));
				score = cache_get_row_int(0, 3, g_SQL_handle);
				udate = cache_get_row_int(0, 4, g_SQL_handle);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerNPC(i) || !IsPlayerConnected(i)) continue;
				    if(PlayerInfo[i][GangPosition] == 0) continue;
				    if(PlayerInfo[i][GangID] != PlayerInfo[extraid][GangID]) continue;
				    if(count <= 20)
				    {
				        new tmp[MAX_PLAYER_NAME + 1 + 16];
				        format(tmp, sizeof(tmp), "\n{%06x}%s(%i)", GetColor__(i) >>> 8, __GetName(i), i);
				        strcat(members, tmp);
				    }
				    count++;
				}

				if(count > 20)
				{
					format(string, sizeof(string),
					""white"Gang name:\t"nef_yellow"%s\n"white"Gang tag:\t"nef_yellow"%s\n"white"Gang created:\t"nef_yellow"%s\n"white"Gang score:\t"nef_yellow"%i\n"white"Users online:\t"nef_yellow"%i\n\n"white"Online:%s\n"white"[... to many online]", gangname, gangtag, UnixTimeToDate(udate), score, count, members);
				}
				else
				{
				    format(string, sizeof(string),
					""white"Gang name:\t"nef_yellow"%s\n"white"Gang tag:\t"nef_yellow"%s\n"white"Gang created:\t"nef_yellow"%s\n"white"Gang score:\t"nef_yellow"%i\n"white"Users online:\t"nef_yellow"%i\n\n"white"Online:%s", gangname, gangtag, UnixTimeToDate(udate), score, count, members);
				}

				ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Gang Info", string, "OK", "");
		    }
		}
        case THREAD_CHECK_IP:
        {
            new rows, fields;
            cache_get_data(rows, fields, g_SQL_handle);

            if(rows == 0) // ip not banned
            {
				format(gstr, sizeof(gstr), "SELECT `ID` FROM `accounts` WHERE `Name` = '%s';", __GetName(extraid));
				mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_ACCOUNT_EXIST, extraid, g_SQL_handle); // cehcking if acc exists
            }
            else
			{
	 		   	SCM(extraid, -1, ""server_sign" You have been banned.");
	 		   	TextDrawHideForPlayer(extraid, TXTOnJoin[0]);
	 		   	TextDrawHideForPlayer(extraid, TXTOnJoin[1]);
       			KickEx(extraid);
			}
		}
		case THREAD_CREATE_GANG:
		{
			PlayerInfo[extraid][GangPosition] = GANG_POS_MAIN_LEADER;
			PlayerInfo[extraid][GangID] = cache_insert_id(g_SQL_handle);

            GivePlayerCash(extraid, -1000000);

            MySQL_SavePlayer(extraid, false);

			format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) has created a new gang: '"nef_yellow"%s"white"'", __GetName(extraid), extraid, PlayerInfo[extraid][GangName]);
            SCMToAll(-1, gstr);
            print(gstr);

            ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"Gang created!", ""white"You can now use these commands:\n\n"dl"/gmenu\n"dl"/gcapture\n"dl"/gzones\n"dl"/ginvite\n"dl"/gkick\n"dl"/gwar\n"dl"/gclose\n\nPut "nef_yellow"! "white" before your msg to talk in gang chat", "OK", "");

			format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerInfo[extraid][GangName]);

			if(PlayerInfo[extraid][GangLabel] != Text3D:-1)
			{
			    DestroyDynamic3DTextLabel(PlayerInfo[extraid][GangLabel]);
	 			PlayerInfo[extraid][GangLabel] = Text3D:-1;
			}

			SyncGangZones(extraid);
			PlayerInfo[extraid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, extraid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);
		}
        case THREAD_IS_BANNED:
		{
		    SetPlayerColor(extraid, PlayerColors[random(sizeof(PlayerColors))]);
		    
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);
		    
		    if(rows > 0) // Playername is banned
		    {
		        new string[512],
		            adminname[MAX_PLAYER_NAME + 1],
		            reason[128],
		            udate, lift;

				cache_get_row(0, 2, adminname, g_SQL_handle, sizeof(adminname));
				cache_get_row(0, 3, reason, g_SQL_handle, sizeof(reason));
				lift = cache_get_row_int(0, 4, g_SQL_handle);
				udate = cache_get_row_int(0, 5, g_SQL_handle);

				if(lift == 0) // Perm ban
				{
			        format(string, sizeof(string), ""red"You have been banned!"white"\n\nAdmin:\t%s\nYour name:\t%s\nReason:\t%s\nDate:\t%s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", adminname, __GetName(extraid), reason, UnixTimeToDate(udate));
					ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", string, "OK", "");
                    KickEx(extraid);
				}
				else if(lift < gettime())
				{
				    format(string, sizeof(string), "DELETE FROM `bans` WHERE `PlayerName` = '%s' LIMIT 1;", __GetName(extraid)); // Delete time ban
				    mysql_tquery(g_SQL_handle, string, "", "");
				    
				    SCM(extraid, -1, ""nef" Your time ban expired, you've benn unbanned!");

					format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `IP` = '%s';", __GetIP(extraid));
					mysql_tquery(g_SQL_handle, string, "OnQueryFinish", "siii", string, THREAD_CHECK_IP, extraid, g_SQL_handle); // Continuing with progress
				}
				else
				{
				    format(string, sizeof(string), ""red"You have been time banned!"white"\n\nAdmin:\t%s\nYour name:\t%s\nReason:\t%s\nExpires:\t%s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", adminname, __GetName(extraid), reason, UnixTimeToDate(lift));
					ShowPlayerDialog(extraid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", string, "OK", "");
					KickEx(extraid);
				}
		    }
		    else
		    {
				format(gstr, sizeof(gstr), "SELECT * FROM `blacklist` WHERE `IP` = '%s';", __GetIP(extraid));
				mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_CHECK_IP, extraid, g_SQL_handle);
		    }
		}
	 	case THREAD_ACCOUNT_EXIST:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

			TextDrawHideForPlayer(extraid, TXTOnJoin[0]);
			TextDrawHideForPlayer(extraid, TXTOnJoin[1]);

			Streamer_UpdateEx(extraid, 1797.5835, -1305.0114, 121.2348, -1, -1);
			SetPlayerPos(extraid, 1797.5835, -1305.0114, 121.2348);
			SetPlayerFacingAngle(extraid, 359.9696);
			SetPlayerCameraPos(extraid, 1797.3688, -1299.8156, 121.4657);
			SetPlayerCameraLookAt(extraid, 1797.3661, -1300.8164, 121.4556);

			format(gstr, sizeof(gstr), "INSERT INTO `online` VALUES (NULL, '%s', '%s', UNIX_TIMESTAMP());", __GetName(extraid), __GetIP(extraid));
			mysql_tquery(g_SQL_handle, gstr, "", "");

		    if(rows != 0) // acc exists
		    {
				format(gstr, sizeof(gstr), "SELECT `ID` FROM `accounts` WHERE `Name` = '%s' AND `IP` = '%s';", __GetName(extraid), __GetIP(extraid));
				mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_CHECK_AUTO_LOGIN, extraid, g_SQL_handle); // check auto login
		    }
		    else
		    {
		        RequestRegistration(extraid);
		    }
		}
		case THREAD_LOAD_PLAYER:
		{
		    new rows, fields;
			cache_get_data(rows, fields, g_SQL_handle);
			
			if(rows > 0)
			{
			    PlayerInfo[extraid][GlobalID] = cache_get_row_int(0, 0, g_SQL_handle);
			    PlayerInfo[extraid][SavedColor] = cache_get_row_int(0, 2, g_SQL_handle) != 0 ? cache_get_row_int(0, 2, g_SQL_handle) : 0;
			    PlayerInfo[extraid][Level] = cache_get_row_int(0, 5, g_SQL_handle);
			    PlayerInfo[extraid][Score] = cache_get_row_int(0, 6, g_SQL_handle);
			    PlayerInfo[extraid][Money] = cache_get_row_int(0, 7, g_SQL_handle);
			    PlayerInfo[extraid][Bank] = cache_get_row_int(0, 8, g_SQL_handle);
			    PlayerInfo[extraid][Kills] = cache_get_row_int(0, 9, g_SQL_handle);
			    PlayerInfo[extraid][Deaths] = cache_get_row_int(0, 10, g_SQL_handle);
			    PlayerInfo[extraid][TotalTime] = cache_get_row_int(0, 11, g_SQL_handle);
                PlayerInfo[extraid][Reaction] = cache_get_row_int(0, 12, g_SQL_handle);
                PlayerInfo[extraid][PayDay] = cache_get_row_int(0, 13, g_SQL_handle);
                PlayerInfo[extraid][Houses] = cache_get_row_int(0, 14, g_SQL_handle);
                PlayerInfo[extraid][Props] = cache_get_row_int(0, 15, g_SQL_handle);
                PlayerInfo[extraid][GangPosition] = cache_get_row_int(0, 16, g_SQL_handle);
                PlayerInfo[extraid][GangID] = cache_get_row_int(0, 17, g_SQL_handle);
                PlayerInfo[extraid][AdditionalPVSlots] = cache_get_row_int(0, 18, g_SQL_handle);
                PlayerInfo[extraid][AdditionalToySlots] = cache_get_row_int(0, 19, g_SQL_handle);
                PlayerInfo[extraid][AdditionalHouseSlots] = cache_get_row_int(0, 20, g_SQL_handle);
                PlayerInfo[extraid][AdditionalPropSlots] = cache_get_row_int(0, 21, g_SQL_handle);
                PlayerInfo[extraid][AdditionalHouseObjSlots] = cache_get_row_int(0, 22, g_SQL_handle);
                PlayerInfo[extraid][DerbyWins] = cache_get_row_int(0, 24, g_SQL_handle);
                PlayerInfo[extraid][RaceWins] = cache_get_row_int(0, 25, g_SQL_handle);
                PlayerInfo[extraid][BGWins] = cache_get_row_int(0, 26, g_SQL_handle);
                PlayerInfo[extraid][FalloutWins] = cache_get_row_int(0, 27, g_SQL_handle);
                PlayerInfo[extraid][GungameWins] = cache_get_row_int(0, 28, g_SQL_handle);
                PlayerInfo[extraid][EventWins] = cache_get_row_int(0, 29, g_SQL_handle);
                PlayerInfo[extraid][Wanteds] = cache_get_row_int(0, 30, g_SQL_handle);
                PlayerInfo[extraid][VIP] = cache_get_row_int(0, 31, g_SQL_handle);
                PlayerInfo[extraid][Credits] = cache_get_row_int(0, 32, g_SQL_handle);
                PlayerInfo[extraid][Medkits] = cache_get_row_int(0, 33, g_SQL_handle);
                PlayerInfo[extraid][RegDate] = cache_get_row_int(0, 34, g_SQL_handle);
                PlayerInfo[extraid][LastLogin] = cache_get_row_int(0, 35, g_SQL_handle);
                PlayerInfo[extraid][LastNameChange] = cache_get_row_int(0, 36, g_SQL_handle);
                
				new buffer[255];
				
				cache_get_row(0, 37, buffer, g_SQL_handle, sizeof(buffer));
				sscanf(buffer, "p<,>iiiiiiiiiiiiii",
	                pAch[extraid][E_ach_styler],
	                pAch[extraid][E_ach_grimreaper],
	                pAch[extraid][E_ach_masskiller],
	                pAch[extraid][E_ach_eliteracer],
	                pAch[extraid][E_ach_toofast],
	                pAch[extraid][E_ach_scorewhore],
	                pAch[extraid][E_ach_destroyer],
	                pAch[extraid][E_ach_restinpeace],
	                pAch[extraid][E_ach_silentkiller],
	                pAch[extraid][E_ach_oneshot2kills],
	                pAch[extraid][E_ach_deepimpact],
	                pAch[extraid][E_ach_skydiver],
	                pAch[extraid][E_ach_biker],
					pAch[extraid][E_ach_bmxmaster]);
					
                cache_get_row(0, 38, buffer, g_SQL_handle, sizeof(buffer)); // Slot 0
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][0][toy_model],
				    PlayerToys[extraid][0][toy_bone],
				    PlayerToys[extraid][0][toy_x],
				    PlayerToys[extraid][0][toy_y],
				    PlayerToys[extraid][0][toy_z],
				    PlayerToys[extraid][0][toy_rx],
				    PlayerToys[extraid][0][toy_ry],
				    PlayerToys[extraid][0][toy_rz],
				    PlayerToys[extraid][0][toy_sx],
				    PlayerToys[extraid][0][toy_sy],
				    PlayerToys[extraid][0][toy_sz]);
				    
                cache_get_row(0, 39, buffer, g_SQL_handle, sizeof(buffer)); // Slot 1
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][1][toy_model],
				    PlayerToys[extraid][1][toy_bone],
				    PlayerToys[extraid][1][toy_x],
				    PlayerToys[extraid][1][toy_y],
				    PlayerToys[extraid][1][toy_z],
				    PlayerToys[extraid][1][toy_rx],
				    PlayerToys[extraid][1][toy_ry],
				    PlayerToys[extraid][1][toy_rz],
				    PlayerToys[extraid][1][toy_sx],
				    PlayerToys[extraid][1][toy_sy],
				    PlayerToys[extraid][1][toy_sz]);

                cache_get_row(0, 40, buffer, g_SQL_handle, sizeof(buffer)); // Slot 2
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][2][toy_model],
				    PlayerToys[extraid][2][toy_bone],
				    PlayerToys[extraid][2][toy_x],
				    PlayerToys[extraid][2][toy_y],
				    PlayerToys[extraid][2][toy_z],
				    PlayerToys[extraid][2][toy_rx],
				    PlayerToys[extraid][2][toy_ry],
				    PlayerToys[extraid][2][toy_rz],
				    PlayerToys[extraid][2][toy_sx],
				    PlayerToys[extraid][2][toy_sy],
				    PlayerToys[extraid][2][toy_sz]);
				    
                cache_get_row(0, 41, buffer, g_SQL_handle, sizeof(buffer)); // Slot 3
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][3][toy_model],
				    PlayerToys[extraid][3][toy_bone],
				    PlayerToys[extraid][3][toy_x],
				    PlayerToys[extraid][3][toy_y],
				    PlayerToys[extraid][3][toy_z],
				    PlayerToys[extraid][3][toy_rx],
				    PlayerToys[extraid][3][toy_ry],
				    PlayerToys[extraid][3][toy_rz],
				    PlayerToys[extraid][3][toy_sx],
				    PlayerToys[extraid][3][toy_sy],
				    PlayerToys[extraid][3][toy_sz]);
				    
                cache_get_row(0, 42, buffer, g_SQL_handle, sizeof(buffer)); // Slot 4
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][4][toy_model],
				    PlayerToys[extraid][4][toy_bone],
				    PlayerToys[extraid][4][toy_x],
				    PlayerToys[extraid][4][toy_y],
				    PlayerToys[extraid][4][toy_z],
				    PlayerToys[extraid][4][toy_rx],
				    PlayerToys[extraid][4][toy_ry],
				    PlayerToys[extraid][4][toy_rz],
				    PlayerToys[extraid][4][toy_sx],
				    PlayerToys[extraid][4][toy_sy],
				    PlayerToys[extraid][4][toy_sz]);
				    
                cache_get_row(0, 43, buffer, g_SQL_handle, sizeof(buffer)); // Slot 5
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][5][toy_model],
				    PlayerToys[extraid][5][toy_bone],
				    PlayerToys[extraid][5][toy_x],
				    PlayerToys[extraid][5][toy_y],
				    PlayerToys[extraid][5][toy_z],
				    PlayerToys[extraid][5][toy_rx],
				    PlayerToys[extraid][5][toy_ry],
				    PlayerToys[extraid][5][toy_rz],
				    PlayerToys[extraid][5][toy_sx],
				    PlayerToys[extraid][5][toy_sy],
				    PlayerToys[extraid][5][toy_sz]);
				    
                cache_get_row(0, 44, buffer, g_SQL_handle, sizeof(buffer)); // Slot 6
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][6][toy_model],
				    PlayerToys[extraid][6][toy_bone],
				    PlayerToys[extraid][6][toy_x],
				    PlayerToys[extraid][6][toy_y],
				    PlayerToys[extraid][6][toy_z],
				    PlayerToys[extraid][6][toy_rx],
				    PlayerToys[extraid][6][toy_ry],
				    PlayerToys[extraid][6][toy_rz],
				    PlayerToys[extraid][6][toy_sx],
				    PlayerToys[extraid][6][toy_sy],
				    PlayerToys[extraid][6][toy_sz]);
				    
                cache_get_row(0, 45, buffer, g_SQL_handle, sizeof(buffer)); // Slot 7
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][7][toy_model],
				    PlayerToys[extraid][7][toy_bone],
				    PlayerToys[extraid][7][toy_x],
				    PlayerToys[extraid][7][toy_y],
				    PlayerToys[extraid][7][toy_z],
				    PlayerToys[extraid][7][toy_rx],
				    PlayerToys[extraid][7][toy_ry],
				    PlayerToys[extraid][7][toy_rz],
				    PlayerToys[extraid][7][toy_sx],
				    PlayerToys[extraid][7][toy_sy],
				    PlayerToys[extraid][7][toy_sz]);
				    
                cache_get_row(0, 46, buffer, g_SQL_handle, sizeof(buffer)); // Slot 8
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][8][toy_model],
				    PlayerToys[extraid][8][toy_bone],
				    PlayerToys[extraid][8][toy_x],
				    PlayerToys[extraid][8][toy_y],
				    PlayerToys[extraid][8][toy_z],
				    PlayerToys[extraid][8][toy_rx],
				    PlayerToys[extraid][8][toy_ry],
				    PlayerToys[extraid][8][toy_rz],
				    PlayerToys[extraid][8][toy_sx],
				    PlayerToys[extraid][8][toy_sy],
				    PlayerToys[extraid][8][toy_sz]);
				    
                cache_get_row(0, 47, buffer, g_SQL_handle, sizeof(buffer)); // Slot 9
				sscanf(buffer, "p<,>iifffffffff",
					PlayerToys[extraid][9][toy_model],
				    PlayerToys[extraid][9][toy_bone],
				    PlayerToys[extraid][9][toy_x],
				    PlayerToys[extraid][9][toy_y],
				    PlayerToys[extraid][9][toy_z],
				    PlayerToys[extraid][9][toy_rx],
				    PlayerToys[extraid][9][toy_ry],
				    PlayerToys[extraid][9][toy_rz],
				    PlayerToys[extraid][9][toy_sx],
				    PlayerToys[extraid][9][toy_sy],
				    PlayerToys[extraid][9][toy_sz]);
				    
                cache_get_row(0, 48, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 0
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][0][Model],
				    PlayerPV[extraid][0][PaintJob],
				    PlayerPV[extraid][0][Color1],
				    PlayerPV[extraid][0][Color2],
				    PlayerPV[extraid][0][Mod1],
				    PlayerPV[extraid][0][Mod2],
				    PlayerPV[extraid][0][Mod3],
				    PlayerPV[extraid][0][Mod4],
				    PlayerPV[extraid][0][Mod5],
				    PlayerPV[extraid][0][Mod6],
				    PlayerPV[extraid][0][Mod7],
				    PlayerPV[extraid][0][Mod8],
				    PlayerPV[extraid][0][Mod9],
				    PlayerPV[extraid][0][Mod10],
				    PlayerPV[extraid][0][Mod11],
				    PlayerPV[extraid][0][Mod12],
				    PlayerPV[extraid][0][Mod13],
				    PlayerPV[extraid][0][Mod14],
				    PlayerPV[extraid][0][Mod15],
				    PlayerPV[extraid][0][Mod16],
				    PlayerPV[extraid][0][Mod17],
				    PlayerPV[extraid][0][Plate]);
				    
                cache_get_row(0, 49, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 1
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][1][Model],
				    PlayerPV[extraid][1][PaintJob],
				    PlayerPV[extraid][1][Color1],
				    PlayerPV[extraid][1][Color2],
				    PlayerPV[extraid][1][Mod1],
				    PlayerPV[extraid][1][Mod2],
				    PlayerPV[extraid][1][Mod3],
				    PlayerPV[extraid][1][Mod4],
				    PlayerPV[extraid][1][Mod5],
				    PlayerPV[extraid][1][Mod6],
				    PlayerPV[extraid][1][Mod7],
				    PlayerPV[extraid][1][Mod8],
				    PlayerPV[extraid][1][Mod9],
				    PlayerPV[extraid][1][Mod10],
				    PlayerPV[extraid][1][Mod11],
				    PlayerPV[extraid][1][Mod12],
				    PlayerPV[extraid][1][Mod13],
				    PlayerPV[extraid][1][Mod14],
				    PlayerPV[extraid][1][Mod15],
				    PlayerPV[extraid][1][Mod16],
				    PlayerPV[extraid][1][Mod17],
				    PlayerPV[extraid][1][Plate]);
				    
                cache_get_row(0, 50, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 2
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][2][Model],
				    PlayerPV[extraid][2][PaintJob],
				    PlayerPV[extraid][2][Color1],
				    PlayerPV[extraid][2][Color2],
				    PlayerPV[extraid][2][Mod1],
				    PlayerPV[extraid][2][Mod2],
				    PlayerPV[extraid][2][Mod3],
				    PlayerPV[extraid][2][Mod4],
				    PlayerPV[extraid][2][Mod5],
				    PlayerPV[extraid][2][Mod6],
				    PlayerPV[extraid][2][Mod7],
				    PlayerPV[extraid][2][Mod8],
				    PlayerPV[extraid][2][Mod9],
				    PlayerPV[extraid][2][Mod10],
				    PlayerPV[extraid][2][Mod11],
				    PlayerPV[extraid][2][Mod12],
				    PlayerPV[extraid][2][Mod13],
				    PlayerPV[extraid][2][Mod14],
				    PlayerPV[extraid][2][Mod15],
				    PlayerPV[extraid][2][Mod16],
				    PlayerPV[extraid][2][Mod17],
				    PlayerPV[extraid][2][Plate]);

                cache_get_row(0, 51, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 3
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][3][Model],
				    PlayerPV[extraid][3][PaintJob],
				    PlayerPV[extraid][3][Color1],
				    PlayerPV[extraid][3][Color2],
				    PlayerPV[extraid][3][Mod1],
				    PlayerPV[extraid][3][Mod2],
				    PlayerPV[extraid][3][Mod3],
				    PlayerPV[extraid][3][Mod4],
				    PlayerPV[extraid][3][Mod5],
				    PlayerPV[extraid][3][Mod6],
				    PlayerPV[extraid][3][Mod7],
				    PlayerPV[extraid][3][Mod8],
				    PlayerPV[extraid][3][Mod9],
				    PlayerPV[extraid][3][Mod10],
				    PlayerPV[extraid][3][Mod11],
				    PlayerPV[extraid][3][Mod12],
				    PlayerPV[extraid][3][Mod13],
				    PlayerPV[extraid][3][Mod14],
				    PlayerPV[extraid][3][Mod15],
				    PlayerPV[extraid][3][Mod16],
				    PlayerPV[extraid][3][Mod17],
				    PlayerPV[extraid][3][Plate]);
				    
                cache_get_row(0, 52, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 4
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][4][Model],
				    PlayerPV[extraid][4][PaintJob],
				    PlayerPV[extraid][4][Color1],
				    PlayerPV[extraid][4][Color2],
				    PlayerPV[extraid][4][Mod1],
				    PlayerPV[extraid][4][Mod2],
				    PlayerPV[extraid][4][Mod3],
				    PlayerPV[extraid][4][Mod4],
				    PlayerPV[extraid][4][Mod5],
				    PlayerPV[extraid][4][Mod6],
				    PlayerPV[extraid][4][Mod7],
				    PlayerPV[extraid][4][Mod8],
				    PlayerPV[extraid][4][Mod9],
				    PlayerPV[extraid][4][Mod10],
				    PlayerPV[extraid][4][Mod11],
				    PlayerPV[extraid][4][Mod12],
				    PlayerPV[extraid][4][Mod13],
				    PlayerPV[extraid][4][Mod14],
				    PlayerPV[extraid][4][Mod15],
				    PlayerPV[extraid][4][Mod16],
				    PlayerPV[extraid][4][Mod17],
				    PlayerPV[extraid][4][Plate]);
				    
                cache_get_row(0, 53, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 5
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][5][Model],
				    PlayerPV[extraid][5][PaintJob],
				    PlayerPV[extraid][5][Color1],
				    PlayerPV[extraid][5][Color2],
				    PlayerPV[extraid][5][Mod1],
				    PlayerPV[extraid][5][Mod2],
				    PlayerPV[extraid][5][Mod3],
				    PlayerPV[extraid][5][Mod4],
				    PlayerPV[extraid][5][Mod5],
				    PlayerPV[extraid][5][Mod6],
				    PlayerPV[extraid][5][Mod7],
				    PlayerPV[extraid][5][Mod8],
				    PlayerPV[extraid][5][Mod9],
				    PlayerPV[extraid][5][Mod10],
				    PlayerPV[extraid][5][Mod11],
				    PlayerPV[extraid][5][Mod12],
				    PlayerPV[extraid][5][Mod13],
				    PlayerPV[extraid][5][Mod14],
				    PlayerPV[extraid][5][Mod15],
				    PlayerPV[extraid][5][Mod16],
				    PlayerPV[extraid][5][Mod17],
				    PlayerPV[extraid][5][Plate]);
				    
                cache_get_row(0, 54, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 6
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][6][Model],
				    PlayerPV[extraid][6][PaintJob],
				    PlayerPV[extraid][6][Color1],
				    PlayerPV[extraid][6][Color2],
				    PlayerPV[extraid][6][Mod1],
				    PlayerPV[extraid][6][Mod2],
				    PlayerPV[extraid][6][Mod3],
				    PlayerPV[extraid][6][Mod4],
				    PlayerPV[extraid][6][Mod5],
				    PlayerPV[extraid][6][Mod6],
				    PlayerPV[extraid][6][Mod7],
				    PlayerPV[extraid][6][Mod8],
				    PlayerPV[extraid][6][Mod9],
				    PlayerPV[extraid][6][Mod10],
				    PlayerPV[extraid][6][Mod11],
				    PlayerPV[extraid][6][Mod12],
				    PlayerPV[extraid][6][Mod13],
				    PlayerPV[extraid][6][Mod14],
				    PlayerPV[extraid][6][Mod15],
				    PlayerPV[extraid][6][Mod16],
				    PlayerPV[extraid][6][Mod17],
				    PlayerPV[extraid][6][Plate]);
				    
                cache_get_row(0, 55, buffer, g_SQL_handle, sizeof(buffer)); // PV_Slot 7
				sscanf(buffer, "p<,>iiiiiiiiiiiiiiiiiiiiis[13]",
				    PlayerPV[extraid][7][Model],
				    PlayerPV[extraid][7][PaintJob],
				    PlayerPV[extraid][7][Color1],
				    PlayerPV[extraid][7][Color2],
				    PlayerPV[extraid][7][Mod1],
				    PlayerPV[extraid][7][Mod2],
				    PlayerPV[extraid][7][Mod3],
				    PlayerPV[extraid][7][Mod4],
				    PlayerPV[extraid][7][Mod5],
				    PlayerPV[extraid][7][Mod6],
				    PlayerPV[extraid][7][Mod7],
				    PlayerPV[extraid][7][Mod8],
				    PlayerPV[extraid][7][Mod9],
				    PlayerPV[extraid][7][Mod10],
				    PlayerPV[extraid][7][Mod11],
				    PlayerPV[extraid][7][Mod12],
				    PlayerPV[extraid][7][Mod13],
				    PlayerPV[extraid][7][Mod14],
				    PlayerPV[extraid][7][Mod15],
				    PlayerPV[extraid][7][Mod16],
				    PlayerPV[extraid][7][Mod17],
				    PlayerPV[extraid][7][Plate]);

   				if(PlayerInfo[extraid][GangID] != 0)
				{
				    MySQL_LoadPlayerGang(extraid);
				}
				
  			 	SetPlayerScore_(extraid, PlayerInfo[extraid][Score]);
			 	SetPlayerCash(extraid, PlayerInfo[extraid][Money]);
			 	PlayerInfo[extraid][ConnectTime] = gettime();

				SendWelcomeMSG(extraid);

				format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerInfo[extraid][Wanteds]);
				PlayerTextDrawSetString(extraid, TXTWantedsTD[extraid], gstr);
                
			    format(gstr2, sizeof(gstr2), "INSERT INTO `login_log` VALUES (NULL, %i, '%s', UNIX_TIMESTAMP(), 0);", PlayerInfo[extraid][GlobalID], __GetIP(extraid));
			    mysql_tquery(g_SQL_handle, gstr2, "", "");
                
				if(PlayerInfo[extraid][Level] > 0)
				{
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"Successfully logged in. (Adminlevel %i)", PlayerInfo[extraid][Level]);
					SCM(extraid, -1, gstr2);
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You were last online at %s and registered on %s", UnixTimeToDate(PlayerInfo[extraid][LastLogin]), UnixTimeToDate(PlayerInfo[extraid][RegDate]));
  					SCM(extraid, -1, gstr2);
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You've been online for %s", GetPlayingTimeFormat(extraid));
					SCM(extraid, -1, gstr2);
		   		}
		   		else
		   		{
				   	SCM(extraid, -1, ""server_sign" "r_besch"Successfully logged in!");
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You were last online at %s and registered on %s", UnixTimeToDate(PlayerInfo[extraid][LastLogin]), UnixTimeToDate(PlayerInfo[extraid][RegDate]));
  					SCM(extraid, -1, gstr2);
					format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You've been online for %s", GetPlayingTimeFormat(extraid));
					SCM(extraid, -1, gstr2);
				}
				
				if(PlayerInfo[extraid][VIP] == 1)
				{
                    format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"VIP %s(%i) logged in!", __GetName(extraid), extraid);
                    SCMToAll(-1, gstr2);

					format(gstr2, sizeof(gstr2), "02[%i] 03*** VIP %s has joined the server.", extraid, __GetName(extraid));
					IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr2);
				}
				else
				{
					format(gstr2, sizeof(gstr2), "02[%i] 03*** %s has joined the server.", extraid, __GetName(extraid));
					IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr2);
				}
				
				if(PlayerInfo[extraid][SavedColor] != 0)
				{
				    SetPlayerColor(extraid, PlayerInfo[extraid][SavedColor]);
				    SCM(extraid, -1, ""server_sign" "r_besch"Your saved color has been set.");
				}
				
				format(gstr2, sizeof(gstr2), "SELECT * FROM `queue` WHERE `Extra` = '%s';", __GetName(extraid));
				mysql_tquery(g_SQL_handle, gstr2, "OnBoostReceive", "i", extraid);
			}
		}
		case THREAD_LOAD_PLAYER_GANG:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

		    if(rows > 0)
		    {
		        new buffer[25];

		        cache_get_row(0, 0, buffer, g_SQL_handle, sizeof(buffer));
		        strmid(PlayerInfo[extraid][GangName], buffer, 0, 25, 25);
				cache_get_row(0, 1, buffer, g_SQL_handle, sizeof(buffer));
				strmid(PlayerInfo[extraid][GangTag], buffer, 0, 5, 5);

				if(PlayerInfo[extraid][GangLabel] != Text3D:-1)
				{
				    DestroyDynamic3DTextLabel(PlayerInfo[extraid][GangLabel]);
		 			PlayerInfo[extraid][GangLabel] = Text3D:-1;
				}
				
 			    format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerInfo[extraid][GangName]);
				PlayerInfo[extraid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, extraid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);

			    format(gstr, sizeof(gstr), ""gang_sign" "grey"%s %s(%i) logged in!", GangPositions[PlayerInfo[extraid][GangPosition]][E_gang_pos_name], __GetName(extraid), extraid);
				GangMSG(PlayerInfo[extraid][GangID], gstr);
			}
		}
		case THREAD_ASSIGN_RANK:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

	  		if(rows > 0)
		    {
				rows = cache_get_row_int(0, 0, g_SQL_handle);
				
				if(PlayerInfo[extraid][GangPosition] == GANG_POS_LEADER || PlayerInfo[extraid][GangPosition] == GANG_POS_MAIN_LEADER)
				{
					if(PlayerInfo[extraid][GangPosition] == GANG_POS_LEADER && rows == GANG_POS_LEADER)
					{
					    return SCM(extraid, -1, ""er"Cannot assign!");
					}

			        if(PlayerInfo[extraid][GangPosition] == GANG_POS_LEADER && rows == GANG_POS_MAIN_LEADER)
			        {
			            return SCM(extraid, -1, ""er"You can't set the Founder's rank!");
			        }

					if(rows == PlayerInfo[extraid][RankSelected])
					{
					    return SCM(extraid, -1, ""er"Player is already this rank!");
					}

					MySQL_FinalRankAssign(extraid);
				}
				else
				{
				     return SCM(extraid, -1, ""er"You don't have permission!");
				}
			}
			else
			{
				SCM(extraid, -1, ""er"This player is not in your gang!");
			}
		}
		case THREAD_ASSIGN_RANK_2:
		{
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s´s Rank has been assigned to %s", PlayerInfo[extraid][GangAssignRank], GangPositions[PlayerInfo[extraid][RankSelected]][E_gang_pos_name]);
			GangMSG(PlayerInfo[extraid][GangID], gstr);

			PlayerInfo[extraid][RankSelected] = 0;
			PlayerInfo[extraid][GangAssignRank][0] = '\0';
		}
		case THREAD_KICK_FROM_GANG:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

	  		if(rows > 0)
		    {
				if(cache_get_row_int(0, 0, g_SQL_handle) == GANG_POS_MAIN_LEADER)
				{
				    SCM(extraid, -1, ""er"You cannot kick other the Founder!");
				}
				else
		        {
					MySQL_FinalGangKick(extraid);
				}
			}
			else
			{
				SCM(extraid, -1, ""er"This player is not in your gang!");
				PlayerInfo[extraid][GangKickMem][0] = '\0';
			}
		}
		case THREAD_KICK_FROM_GANG_2:
		{
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s kicked %s out of the gang", __GetName(extraid), PlayerInfo[extraid][GangKickMem]);
			GangMSG(PlayerInfo[extraid][GangID], gstr);

            PlayerInfo[extraid][GangKickMem][0] = '\0';
		}
		case THREAD_CHECK_PLAYER_PASSWD:
		{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

	  		if(rows > 0) // correct password
		    {
		        PlayerInfo[extraid][AllowSpawn] = true;
				PlayerInfo[extraid][bLogged] = true;
                PlayerInfo[extraid][ExitType] = EXIT_LOGGED;
                
		        MySQL_LoadPlayer(extraid);
		        MySQL_UpdateAccount(extraid);
			}
			else
			{
			    SkipLogin(extraid);
			}
		}
		case THREAD_CREATE_ACCOUNT2:
		{
		    PlayerInfo[extraid][bLogged] = true;
		    
			format(gstr, sizeof gstr, "["SVRSC"] %s(%i) "GREEN_E"has registered, making the server have a total of "LB2_E"%i "GREEN_E"players registered.", __GetName(extraid), extraid, cache_insert_id(g_SQL_handle));
			SCMToAll(COLOR_PINK, gstr);
			format(gstr, sizeof(gstr), "5,9- RegServ -3,0 %s(%i) has registered making the server have a total of %i players registered.", __GetName(extraid), extraid, cache_insert_id(g_SQL_handle));
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
			format(gstr, sizeof(gstr), "~b~~h~~h~Welcome to "SVRSC", ~r~~h~~h~%s~b~~h~~h~!~n~~b~~h~~h~You have successfully registered and logged in!", __GetName(extraid));
			InfoTD_MSG(extraid, 5000, gstr);

			SrvStat[2]++;

			MySQL_SavePlayer(extraid, true);
			MySQL_UpdateAccount(extraid);
		}
		case THREAD_CREATE_ACCOUNT:
		{
		    PlayerInfo[extraid][RegDate] = gettime();
			PlayerInfo[extraid][ExitType] = EXIT_LOGGED;
			PlayerInfo[extraid][PayDay] = 60;
			PlayerInfo[extraid][ConnectTime] = gettime();
		    PlayerInfo[extraid][AllowSpawn] = true;
		    PlayerInfo[extraid][Wanteds] = 0;
		    PlayerInfo[extraid][bLogged] = true;
		    
			format(gstr, sizeof gstr, "["SVRSC"] %s(%i) "GREEN_E"has registered, making the server have a total of "LB2_E"%i "GREEN_E"players registered.", __GetName(extraid), extraid, cache_insert_id(g_SQL_handle));
			SCMToAll(COLOR_PINK, gstr);
			format(gstr, sizeof(gstr), "5,9- RegServ -3,0 %s(%i) has registered making the server have a total of %i players registered.", __GetName(extraid), extraid, cache_insert_id(g_SQL_handle));
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
			format(gstr, sizeof(gstr), "~b~~h~~h~Welcome to "SVRSC", ~r~~h~~h~%s~b~~h~~h~!~n~~b~~h~~h~You have successfully registered and logged in!", __GetName(extraid));
			InfoTD_MSG(extraid, 5000, gstr);
		    
			format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerInfo[extraid][Wanteds]);
			PlayerTextDrawSetString(extraid, TXTWantedsTD[extraid], gstr);

			SrvStat[2]++;

		    GameTextForPlayer(extraid, "Welcome", 3000, 4);
	  		GivePlayerCash(extraid, 200000, false);
	    	GameTextForPlayer(extraid, "~n~+$20,000~n~Startcash", 3000, 1);
			SCM(extraid, -1, ""server_sign" "r_besch"You are now registered, and have been logged in!");

			PlayerPlaySound(extraid, 1057, 0.0, 0.0, 0.0);
			
			MySQL_SavePlayer(extraid, true);
			MySQL_UpdateAccount(extraid);
		}
	 	case THREAD_GANG_EXIST:
	 	{
		    new rows, fields;
		    cache_get_data(rows, fields, g_SQL_handle);

			if(rows == 0)
	 		{
				MySQL_CreateGang(extraid);
			}
			else
			{
			    CancelGangCreation(extraid);
			    SCM(extraid, -1, ""er"This Gang already exist, please choose another gangname");
			}
		}
	}
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	printf("[MYSQL ERROR]: %i, %s, %s, %s, %i", errorid, error, callback, query, connectionHandle);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == SPEC && PlayerInfo[i][SpecID] == playerid)
   		{
   		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    new bool:found = false;
		
	if(!success)
 	{
  		printf("[RCON] FAILED LOGIN BY IP %s USING PASSWORD %s", ip, password);

		for(new i = 0; i < MAX_PLAYERS; i++)
    	{
       		if(!strcmp(ip, __GetIP(i), true))
         	{
				format(gstr, sizeof(gstr), ""yellow"*** "red"%s(%i) tried to login to local RCON", __GetName(i), i);
				AdminMSG(RED, gstr);
				found = true;
				break;
			}
   		}
   		if(!found) AdminMSG(RED, ""yellow"*** "red"Bad local RCON login attempt");
   	}
   	else
   	{
  		printf("[RCON] LOGIN BY IP %s", ip);

		for(new i = 0; i < MAX_PLAYERS; i++)
    	{
       		if(!strcmp(ip, __GetIP(i), true))
         	{
				format(gstr, sizeof(gstr), ""yellow"*** "red"%s(%i) logged in to local RCON", __GetName(i), i);
				AdminMSG(RED, gstr);
				found = true;
				break;
			}
   		}
   		if(!found) AdminMSG(RED, ""yellow"*** "red"Bad remote RCON login attempt");
	}
    return 1;
}

public OnPlayerUpdate(playerid)
{
    PlayerInfo[playerid][tickPlayerUpdate] = GetTickCount() + 3600000;

	switch(gTeam[playerid])
	{
	    case GUNGAME:
	    {
			if(!GunGame_Player[playerid][dead])
			{
				if(!GetPlayerWeapon(playerid))
				{
					if(GunGame_Player[playerid][pw])
					{
						SetPlayerArmedWeapon(playerid, 4);
						GunGame_Player[playerid][pw] = false;
					}
					else
					{
					    SetPlayerArmedWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]]);
						GunGame_Player[playerid][pw] = true;
					}
				}
				else
				{
					GunGame_Player[playerid][pw] = (GetPlayerWeapon(playerid) == 4 ? false : true);
				}
			}
	    }
	    case NORMAL:
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 38, 36, 35:
	            {
		            ResetPlayerWeapons(playerid);
		            return 0;
	            }
	        }
	    }
	}
	
    if(PlayerInfo[playerid][bSpeedo])
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
	        new Float:p[3], Float:sspeed, str[12];
	        GetVehicleVelocity(GetPlayerVehicleID(playerid), p[0], p[1], p[2]);
	        sspeed = 150 * (p[0] * p[0] + p[1] * p[1]/*+p[2]*p[2]*/);
	        format(str, sizeof(str), "%.0f", sspeed);

			PlayerTextDrawSetString(playerid, TXTSpeedo[playerid], str);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(gTeam[playerid] == DERBY || gTeam[playerid] == gRACE)
	{
	    new Float:POS[3];
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(PlayerInfo[playerid][KBMarked]) return 0;
    
	PlayerInfo[playerid][iCoolDownText]++;
	SetTimerEx("CoolDownText", COOLDOWN_TEXT, false, "i", playerid);
	if(PlayerInfo[playerid][iCoolDownText] == 6)
	{
	    GameTextForPlayer(playerid, "~b~~h~Do not spam!", 2000, 3);
	    return 0;
	}
	else if(PlayerInfo[playerid][iCoolDownText] >= 15 && PlayerInfo[playerid][Level] < 5)
	{
	    new string[100];
		format(string, sizeof(string), "Chat-Spam detected! %s(%i) has been kicked!", __GetName(playerid), playerid);
		AdminMSG(RED, string);
		PlayerInfo[playerid][iCoolDownText] = 0;
		Kick(playerid);
		return 0;
	}

	if(PlayerInfo[playerid][ExitType] != EXIT_FIRST_SPAWNED)
	{
	    SCM(playerid, -1, ""er"You need to spawn to use the chat!");
	    return 0;
	}

	if(PlayerInfo[playerid][Muted])
	{
	    SCM(playerid, RED, "You are muted! Please wait until the time is over!");
	    return 0;
	}

	if(GlobalMain)
	{
	    SCM(playerid, -1, ""er"Please log out now!");
	    return 0;
	}

	if(!strcmp(text, LastPlayerText[playerid], true))
	{
	    GameTextForPlayer(playerid, "~g~Do not repeat yourself!", 2000, 5);
	    return 0;
	}
	strmid(LastPlayerText[playerid], text, 0, 144, 144);

	if(strfind(text, "/q", true) != -1 || strfind(text, "/ q", true) != -1)
	{
		SCM(playerid, -1, ""er"Please do not type /q in chat!");
  		return 0;
  	}

    new File:lFile = fopen("/Logs/chatlog.txt", io_append),
        time[3];

    gettime(time[0], time[1], time[2]);

    format(gstr2, sizeof(gstr2), "[%02d:%02d:%02d] [%i]%s: %s \r\n", time[0], time[1], time[2], playerid, __GetName(playerid), text);
    fwrite(lFile, gstr2);
    fclose(lFile);

	if(IsAd(text))
	{
	  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
		AdminMSG(RED, gstr2);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 0;
	}

	if(xTestBusy)
	{
		if(!strcmp(xChars, text, false) && ReactionOn)
		{
            ReactionOn = false;

		    new rtime = (GetTickCount() + 3600000) - tickReactionStart,
		        second = rtime / 1000;

			rtime = rtime - second * 1100;

			format(gstr, sizeof(gstr), "["vlila"REACTION"white"]: {%06x}%s(%i) "white"has won the reaction test in %2i.%03i seconds!", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, second, rtime);
		    SCMToAll(WHITE, gstr);

			format(gstr, sizeof(gstr), "3,1ReactionTest:4 %s(%i) has won the reaction test in %2i.%03i seconds!", __GetName(playerid), playerid, second, rtime);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);

		    format(gstr, sizeof(gstr), "» You have earned $%s + %i score.", ToCurrency(xCash), xScore);
		    SCM(playerid, GREEN, gstr);

			format(gstr, sizeof(gstr), "Won the Reaction Test in %2i.%03i seconds!", second, rtime);
			SetPlayerChatBubble(playerid, gstr, NEF_YELLOW, 40.0, 5000);

			GivePlayerCash(playerid, xCash, true, true);

		    PlayerInfo[playerid][Reaction]++;
		    
		    if(pAch[playerid][E_ach_toofast] == 0 && PlayerInfo[playerid][Reaction] >= 10)
		    {
		        GivePlayerAchievement(playerid, "Too Fast", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		        pAch[playerid][E_ach_toofast] = 1;
		    }
		    
			GivePlayerScore_(playerid, xScore, true, true);
			tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
		    xTestBusy = false;
		    return 0;
		}
	}

    SrvStat[1]++;

	if(PlayerInfo[playerid][Level] >= 1 && PlayerInfo[playerid][onduty] && text[0] == '#')
	{
	    format(gstr, sizeof(gstr), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, text[1]);
		AdminMSG(COLOR_RED, gstr);
	    return 0;
	}
	if(text[0] == '#' && PlayerInfo[playerid][Level] >= 1)
	{
		format(gstr, sizeof(gstr), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, text[1]);
		AdminMSG(COLOR_RED, gstr);
		return 0;
	}
	if(text[0] == '@')
	{
	    new string[144 + 3];
	    format(string, sizeof(string), "/r %s", text[1]);
	    Command_ReProcess(playerid, string, false);
		return 0;
	}

    new tick = GetTickCount() + 3600000;

	if((PlayerInfo[playerid][ChatWrote] >= 2) && ((PlayerInfo[playerid][tickLastChat] + COOLDOWN_CHAT) >= tick))
	{
		SCM(playerid, -1, ""er"Wait a bit before chatting again");
	    return 0;
	}
	else if((PlayerInfo[playerid][ChatWrote] >= 2) && ((PlayerInfo[playerid][tickLastChat] + COOLDOWN_CHAT) <= tick))
	{
        PlayerInfo[playerid][ChatWrote] = 0;
        PlayerInfo[playerid][tickLastChat] = tick;
	}
	else
	{
	    PlayerInfo[playerid][ChatWrote]++;
	}

	if(text[0] == '!' && PlayerInfo[playerid][GangPosition] != 0)
	{
	    format(gstr, sizeof(gstr), ""gang_sign" {%06x}%s(%i)"r_besch": %s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, text[1]);
		GangMSG(PlayerInfo[playerid][GangID], gstr);
		
		format(gstr, sizeof(gstr), "[GC] %s(%i): %s", __GetName(playerid), playerid, text[1]);
		AdminMSG(GREY, gstr);
		return 0;
	}

	if(!PlayerInfo[playerid][bCaps])
	{
	    UpperToLower(text);
	}

	format(gstr, sizeof(gstr), "%s", text);
	SetPlayerChatBubble(playerid, gstr, WHITE, 50.0, 7000);

	format(gstr2, sizeof(gstr2), "02[%i] 07%s: %s", playerid, __GetName(playerid), gstr);
    IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr2);

	if(PlayerInfo[playerid][GangPosition] != 0)
	{
	 	if(strlen(text) > 80)
		{
			new pos = strfind(text, " ", true, 60);
			if(pos == -1 || pos > 80)
			{
				pos = 70;
			}

	        new tmp[144];
			tmp[0] = EOS;
			if(PlayerInfo[playerid][Level] != 0) strcat(tmp, "{A8DBFF}");
			strcat(tmp, text[pos]);
			text[pos] = EOS;

			if(PlayerInfo[playerid][Level] == 0)
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): %s", GetColor__(playerid) >>> 8, PlayerInfo[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
				SCMToAll(-1, tmp);
	   		}
			else
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): {A8DBFF}%s", GetColor__(playerid) >>> 8, PlayerInfo[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
				SCMToAll(-1, tmp);
			}
		}
		else
		{
			if(PlayerInfo[playerid][Level] == 0)
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): %s", GetColor__(playerid) >>> 8, PlayerInfo[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
	   		}
			else
			{
				format(gstr, sizeof(gstr), "{%06x}[%s] %s"white"(%i): {A8DBFF}%s", GetColor__(playerid) >>> 8, PlayerInfo[playerid][GangTag], __GetName(playerid), playerid, text);
				SCMToAll(-1, gstr);
			}
		}
		return 0;
	}

	if(strlen(text) > 80)
	{
		new pos = strfind(text, " ", true, 60);
		if(pos == -1 || pos > 80)
		{
			pos = 70;
		}

        new tmp[144];
		tmp[0] = EOS;
		if(PlayerInfo[playerid][Level] != 0) strcat(tmp, "{A8DBFF}");
		strcat(tmp, text[pos]);
		text[pos] = EOS;
		if(PlayerInfo[playerid][Level] == 0)
		{
			format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): %s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
			SCMToAll(-1, tmp);
		}
		else
		{
			format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): {A8DBFF}%s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
			SCMToAll(-1, tmp);
		}
	}
	else
	{
		if(PlayerInfo[playerid][Level] == 0)
		{
	 		format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): %s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
  		}
		else
		{
 	 		format(gstr, sizeof(gstr), "{%06x}%s"white"(%i): {A8DBFF}%s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, text);
			SCMToAll(-1, gstr);
		}
	}
	return 0;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	// Closing open dialogs in order to avoid some exploits.
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	
	PlayerInfo[playerid][bIsDead] = true;
	PlayerInfo[playerid][iCoolDownDeath]++;
	SetTimerEx("CoolDownDeath", COOLDOWN_DEATH, false, "i", playerid);
	if(PlayerInfo[playerid][iCoolDownDeath] >= 3)
	{
		return Kick(playerid);
	}

    PlayerInfo[playerid][SniperAiming] = false;

	if(PlayerInfo[playerid][bLoadMap])
	{
		KillTimer(PlayerInfo[playerid][tLoadMap]);
		PlayerInfo[playerid][tLoadMap] = -1;
		TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][bLoadMap] = false;
		TextDrawHideForPlayer(playerid, TXTLoading);
	}

    SendDeathMessage(killerid, playerid, reason);
	PlayerInfo[playerid][Deaths]++;

	if(reason <= 46 && gTeam[killerid] == NORMAL && IsPlayerConnected(killerid) && PlayerInfo[playerid][HitmanHit] > 0)
	{
		format(gstr, sizeof(gstr), "%s(%i) killed %s(%i) and received $%s for a completed hit!", __GetName(killerid), killerid, __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][HitmanHit]));
		SCMToAll(YELLOW, gstr);
		GivePlayerCash(killerid, PlayerInfo[playerid][HitmanHit]);
		PlayerInfo[playerid][HitmanHit] = 0;
	}

	if(IsPlayerAvail(killerid))
	{
	    SrvStat[3]++;
		PlayerInfo[killerid][Kills]++;
 		GivePlayerCash(playerid, -250);
  		new txt[64];
		format(txt, sizeof(txt), "Killed by~n~~r~%s(%i)", __GetName(killerid), killerid);
		PlayerTextDrawSetString(playerid, TXTKillerText[playerid], txt);
		PlayerTextDrawShow(playerid, TXTKillerText[playerid]);
		
		if(pAch[killerid][E_ach_grimreaper] == 0 && PlayerInfo[killerid][Kills] >= 300)
		{
		    GivePlayerAchievement(killerid, "Grimreaper", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		    pAch[killerid][E_ach_grimreaper] = 1;
		}
		
	 	if(reason == 4 && pAch[killerid][E_ach_silentkiller] == 0)
		{
		    GivePlayerAchievement(killerid, "Silent Killer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	 		pAch[killerid][E_ach_silentkiller] = 1;
		}
	}

	if(PlayerInfo[playerid][Deaths] >= 50 && pAch[playerid][E_ach_restinpeace] == 0)
	{
	    GivePlayerAchievement(playerid, "Rest in Peace", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	    pAch[playerid][E_ach_restinpeace] = 1;
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(gTeam[i] == SPEC && PlayerInfo[i][SpecID] == playerid)
	    {
	        Command_ReProcess(i, "/specoff", false);
	        format(gstr, sizeof(gstr), "~r~~h~~h~Spectated player %s(%i) died!~n~~w~", __GetName(playerid), playerid);
       		SendInfo(i, gstr, 4000);
		}
	}
	
	SetPVarInt(playerid, "doingStunt", 0);
	PlayerInfo[playerid][tickJoin_bmx] = 0;

    TextDrawHideForPlayer(playerid, TXTGodTD);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);

	switch(random(7))
	{
		case 0: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~C~h~L~h~U~h~C~w~K ~b~C~h~L~h~U~h~C~w~K, ~r~Y~h~O~r~U~h~'R~h~E ~r~FU~h~C~r~K~h~E~r~D", 6000, 3);
		case 1: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~I~h~C~h~E~h~D", 6000, 3);
		case 2: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~RE~h~ST ~h~IN ~h~PEA~h~CE", 6000, 3);
		case 3: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~T~h~A~h~S~h~T~h~E ~r~T~h~H~h~E ~r~CO~h~CK", 6000, 3);
		case 4: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~N~h~O ~h~C~h~A~h~K~h~E ~y~F~h~O~h~R ~h~Y~h~O~h~U", 6000, 3);
		case 5: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~C~h~L~h~U~h~C~w~KITY FU~b~~h~~h~~h~C~b~~h~~h~K~b~~h~E~b~D", 6000, 3);
		case 6: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~L~h~O~h~L ~w~U ~b~~h~~h~~h~D~b~~h~I~h~E~b~~h~D", 6000, 3);
	}

	if(PlayerInfo[playerid][Frozen])
	{
    	TogglePlayerControllable(playerid, true);
		PlayerInfo[playerid][Frozen] = false;
	}
	
	switch(gTeam[playerid])
	{
		case gBUILDRACE:
		{
		    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
			if(fexist(gstr))
			{
				fremove(gstr);
			}
		    RemoveFromRaceBuilder(playerid);
		}
	    case NORMAL:
	    {
	        if(IsPlayerAvail(killerid) && (playerid != killerid) && gTeam[killerid] == NORMAL)
     		{
			    PlayerInfo[killerid][Wanteds]++;

				format(gstr2, sizeof(gstr2), "~y~[] ~w~%i", PlayerInfo[killerid][Wanteds]);
				PlayerTextDrawSetString(killerid, TXTWantedsTD[killerid], gstr2);

				switch(PlayerInfo[killerid][Wanteds])
				{
				    case 3:
				    {
            			SendInfo(killerid, "~r~~h~~h~Triple Kill~n~~b~~h~~h~$2,000 and 1 score Bonus!", 4000);
        				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"is on a kill streak with 3 kills!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 1, true, true);
						GivePlayerCash(killerid, 2000, true, true);
				    }
				    case 5:
					{
					    SendInfo(killerid, "~r~~h~~h~MULTI Kill~n~~b~~h~~h~$4,000 and 2 score!", 4000);
        				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"is on a kill streak with 5 kills!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 2, true, true);
						GivePlayerCash(killerid, 4000, true, true);
					}
					case 10:
  					{
					    SendInfo(killerid, "~r~~h~~h~ULTRA Kill~n~~b~~h~~h~$7,000 and 3 score!", 4000);
     					format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"is unstoppable with a 10 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 3, true, true);
						GivePlayerCash(killerid, 7000, true, true);
					}
					case 15:
  					{
					    SendInfo(killerid, "~r~~h~~h~MONSTER Kill~n~~b~~h~~h~$10,000 and 4 score!", 4000);
   						format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"can't be stopped with a 15 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 4, true, true);
						GivePlayerCash(killerid, 10000, true, true);
					}
					case 25:
  					{
					    SendInfo(killerid, "~r~~h~~h~Incredible Kill~n~~b~~h~~h~$15,000 and 5 score!", 4000);
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"can't be stopped with a 25 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 5, true, true);
						GivePlayerCash(killerid, 15000, true, true);
						if(pAch[killerid][E_ach_masskiller] == 0)
						{
						    GivePlayerAchievement(killerid, "Masskiller", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
						    pAch[killerid][E_ach_masskiller] = 1;
						}
					}
					case 30:
  					{
					    SendInfo(killerid, "~r~~h~~h~Unbelievable~n~~b~~h~~h~$20,000 and 6 score!", 4000);
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"can't be stopped with a 30 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 6, true, true);
						GivePlayerCash(killerid, 20000, true, true);
					}
					case 40:
  					{
   						SendInfo(killerid, "~r~~h~~h~MEGA Kill~n~~b~~h~~h~$25,000 and 7 score!", 4000);
          				format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"is godlike with a 40 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 7, true, true);
						GivePlayerCash(killerid, 25000, true, true);
					}
					case 50:
  					{
					    SendInfo(killerid, "~r~~h~~h~Fantastic Kill~n~~b~~h~~h~$30,000 and 8 score!", 4000);
                 		format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"shitting on everyone with a 50 streak kill!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid);
						SCMToAll(COLOR_RED, gstr);
						GivePlayerScore_(killerid, 8, true, true);
						GivePlayerCash(killerid, 30000, true, true);
					}
				}

				if(PlayerInfo[playerid][Wanteds] > 2)
				{
					new money = floatround((1400 * PlayerInfo[playerid][Wanteds]) / 2.6),
						score = floatround((2 * PlayerInfo[playerid][Wanteds]) / 2.5);

					GivePlayerScore_(killerid, score, true, true);
					GivePlayerCash(killerid, money, true, true);
				}
				else
				{
					GivePlayerScore_(killerid, 1, true, true);
					GivePlayerCash(killerid, 1100, true, true);
				}

				if(PlayerInfo[playerid][Wanteds] >= 3)
				{
				    format(gstr, sizeof(gstr), "* {%06x}%s(%i) "RED_E"ended %s's(%i) killstreak of %i kills!", GetColor__(killerid) >>> 8, __GetName(killerid), killerid, __GetName(playerid), playerid, PlayerInfo[playerid][Wanteds]);
				    SCMToAll(COLOR_RED, gstr);
				}

				PlayerInfo[playerid][Wanteds] = 0;
				
				format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerInfo[playerid][Wanteds]);
				PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);
				
			  	// Nur Kills bei NORMAL werten für GangScore
			 	if(PlayerInfo[killerid][GangPosition] > 0 && PlayerInfo[playerid][GangID] != PlayerInfo[killerid][GangID])
				{
				  	MySQL_UpdateGangScore(PlayerInfo[killerid][GangID], 1);
			 	}
	        }
	    }
	    case gRACE:
	    {
     		--g_RacePlayerCount;

	    	format(gstr, sizeof(gstr), "%s(%i) has died!", __GetName(playerid), playerid);
			RaceMSG(gstr);

			gTeam[playerid] = NORMAL;

			if(g_RaceVehicle[playerid] != -1)
			{
				DestroyVehicle_(g_RaceVehicle[playerid]);
				g_RaceVehicle[playerid] = -1;
			}

			TogglePlayerControllable(playerid, true);
            ToggleSpeedo(playerid, false);

			g_CPProgress[playerid] = 0;

			HidePlayerRaceTextdraws(playerid);
            DisablePlayerRaceCheckpoint(playerid);

		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(playerid);

			ResetPlayerWorld(playerid);
	    }
		case DERBY:
		{
		    // OPDeath
		    if(bDerbyAFK[playerid])
			{
		        return 1;
		    }

		    if(IsDerbyRunning && DerbyWinner[playerid])
		    {
			    new string[64];

		    	format(string, sizeof(string), "%s's vehicle has been destroyed!", __GetName(playerid));
				DerbyMSG(string);

		    	DerbyPlayers--;
		    	DerbyWinner[playerid] = false;
			    if(pDerbyCar[playerid] != -1)
			    {
			    	DestroyVehicle_(pDerbyCar[playerid]);
			    	pDerbyCar[playerid] = -1;
				}
			    if(DerbyVehLabel[playerid] != PlayerText3D:-1)
			    {
			    	DeletePlayer3DTextLabel(playerid, DerbyVehLabel[playerid]);
			    	DerbyVehLabel[playerid] = PlayerText3D:-1;
			    }
                SetPlayerDerbyStaticMeshes(playerid);

		    	if(DerbyPlayers == 1) Derby();
			}
			else
			{
			    Command_ReProcess(playerid, "/exit", false);
			}
		}
		case FALLOUT:
		{
			new string[50];

			format(string, sizeof(string), "%s(%i) died!", __GetName(playerid), playerid);
			FalloutMSG(string);

		    TogglePlayerControllable(playerid, true);
		    HidePlayerFalloutTextdraws(playerid);
		    ResetPlayerWorld(playerid);
		    CurrentFalloutPlayers--;
            PlayerInfo[playerid][FalloutLost] = true;
            GameTextForPlayer(playerid, "~p~You lost the Fallout!", 3000, 1);
            gTeam[playerid] = NORMAL;

		    new count = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(!IsPlayerAvail(i)) continue;
			    if(gTeam[i] == FALLOUT) count++;
			}

			if(count < 2)
			{
			    KillTimer(Info[I_iTimer][1]);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(gTeam[i] == FALLOUT)
				    {
				    	TogglePlayerControllable(i, true);
					    RandomSpawn(i, true);
					    RandomWeapon(i);
					    HidePlayerFalloutTextdraws(i);
					    ResetPlayerWorld(i);
					    FalloutMSG("Fallout has been canceled!");
						gTeam[i] = NORMAL;
				    }
				}
				Fallout_Cancel();
			}
	  	}
		case MINIGUN:
		{
		    if(IsPlayerAvail(killerid))
		    {
				GivePlayerScore_(killerid, 1, true, true);
				GivePlayerCash(killerid, 2000, true, true);
		    }
		}
		case SNIPER:
		{
		    if(IsPlayerAvail(killerid))
		    {
				GivePlayerScore_(killerid, 2, true, true);
				GivePlayerCash(killerid, 3000, true, true);
		    }
		}
		case gBG_TEAM1:
		{
  		    if(IsPlayerAvail(killerid))
		    {
		        BGTeam2Kills++;
		        GivePlayerScore_(killerid, 1, true, true);
				GivePlayerCash(killerid, 2500, true, true);
		    }
		}
		case gBG_TEAM2:
		{
  		    if(IsPlayerAvail(killerid))
		    {
		        BGTeam1Kills++;
		        GivePlayerScore_(killerid, 1, true, true);
				GivePlayerCash(killerid, 2500, true, true);
		    }
		}
		case DM, WAR:
		{
  		    if(IsPlayerAvail(killerid))
		    {
		        GivePlayerScore_(killerid, 1, true, true);
				GivePlayerCash(killerid, 2500, true, true);
				
				new Float:health;
				GetPlayerHealth(killerid, health);
				
				if(health < 90)
				{
				    SetPlayerHealth(killerid, health + 5);
                    SetPlayerChatBubble(killerid, ""green"+ 5 HP!", -1, 15.0, 2000);
				}
		    }
		    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		}
		case CNR:
		{
  		    if(IsPlayerAvail(killerid))
		    {
		        GivePlayerScore_(killerid, 2, true, true);
				GivePlayerCash(killerid, 3000, true, true);
		    }
		    
		    if(GetPVarInt(playerid, "Robber") == 1)
		    {
		        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
		    }
		}
		case GUNGAME:
		{
			GunGame_Player[playerid][dead] = true;

			if(IsPlayerAvail(killerid))
			{
		        GivePlayerScore_(killerid, 1, true, true);
				GivePlayerCash(killerid, 2000, true, true);
			}

			if(killerid == INVALID_PLAYER_ID)
			{
				SetPlayerCameraPos(playerid, 179.2239, 2097.3289, 93.4786);
				SetPlayerCameraLookAt(playerid, 178.3643, 2096.8113, 92.8986);
			}
			else
			{
				if(reason == 4)
				{
					if(GunGame_Player[playerid][level] != 0)
					{
						GunGame_Player[playerid][level]--;
     				    GameTextForPlayer(killerid, "~p~Humiliation!~n~~w~Demoted the player by one rank!", 1850, 6);
						GameTextForPlayer(playerid, "~p~Humiliated~n~~w~You got demoted!", 1850, 6);
					}
				}
			    else
				{
				    GameTextForPlayer(killerid, "~p~Player killed!~n~~w~Advanced to the next tier!", 1850, 6);
				}

				GunGame_Player[killerid][level]++;

				if(GunGame_Player[killerid][level] == 14)
				{
					new	c,
						g_WinnerName[3][MAX_PLAYER_NAME+1],
						g_Data[MAX_PLAYERS][e_GunGame];

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    g_Data[i][GG_iPlayer] = i;
						if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
						{
							g_Data[i][GG_iLevel] = GunGame_Player[i][level];
			    		}
						else
						{
						    g_Data[i][GG_iLevel] = -1;
						}
					}
					SortDeepArray(g_Data, GG_iLevel, .order = SORT_DESC);
					for(new i = 0; i < 3; i++)
					{
					    if(g_Data[i][GG_iLevel] == -1)
						{
							g_WinnerName[i] = "----";
					    }
					    else
						{
					        c++;
						    GetPlayerName(g_Data[i][GG_iPlayer], g_WinnerName[i], MAX_PLAYER_NAME+1);
					    }
					}

					new gWinners[3];
					for(new i = 0; i < 3; i++)
					{
					    gWinners[i] = __GetPlayerID(g_WinnerName[i]);
					}

					if(gWinners[0] < MAX_PLAYERS && gWinners[0] != INVALID_PLAYER_ID)
					{
					    PlayerInfo[gWinners[0]][GungameWins]++;

                       	if(pAch[gWinners[0]][E_ach_oneshot2kills] == 0 && PlayerInfo[gWinners[0]][GungameWins] >= 10)
						{
						    GivePlayerAchievement(gWinners[0], "One Shot Two Kills", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
						    pAch[gWinners[0]][E_ach_oneshot2kills] = 1;
						}

						GivePlayerScore_(gWinners[0], 10, true, true);
						GivePlayerCash(gWinners[0], 10000, true, true);
					}
					if(gWinners[1] < MAX_PLAYERS && gWinners[1] != INVALID_PLAYER_ID)
					{
						GivePlayerScore_(gWinners[1], 5, true, true);
						GivePlayerCash(gWinners[1], 7000, true, true);
					}
					if(gWinners[2] < MAX_PLAYERS && gWinners[2] != INVALID_PLAYER_ID)
					{
						GivePlayerScore_(gWinners[2], 3, true, true);
						GivePlayerCash(gWinners[2], 5000, true, true);
					}

     				format(gstr, sizeof(gstr), "~p~~h~The match ended!~n~~g~~h~1. %02i - %s~n~~y~~h~2. %02i - %s~n~~w~3. %02i - %s",
	 					g_Data[0][GG_iLevel],
						g_WinnerName[0],
						g_Data[1][GG_iLevel],
						g_WinnerName[1],
						g_Data[2][GG_iLevel],
						g_WinnerName[2]);

					for(new i = 0; i < MAX_PLAYERS; i++)
				    {
						if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
						{
							GunGame_Player[i][level] = 0;
							ResetPlayerWeapons(i);

							if(i != playerid)
							{
								if(GunGamePlayers >= 16) SetPlayerHealth(i, 100.0);
								else SetPlayerHealth(i, ((25) + (5 * GunGamePlayers)));
								GivePlayerWeapon(i, 4, 1);
								GivePlayerWeapon(i, GunGame_Weapons[GunGame_Player[i][level]], 65535);
								GunGame_Player[i][pw] = true;
							}

							GameTextForPlayer(i, gstr, 4500, 3);
						}
					}
	    	    }
		        else
				{
				    ResetPlayerWeapons(killerid);
				    GivePlayerWeapon(killerid, 4, 1);
					GivePlayerWeapon(killerid, GunGame_Weapons[GunGame_Player[killerid][level]], 65535);

					if(GunGame_Player[killerid][level] == 13)
					{
						new string[64];
						format(string, sizeof string, "%s reached the last level!", __GetName(killerid));
     				    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
							if(IsPlayerAvail(i) && gTeam[i] == GUNGAME)
							{
		                		GameTextForPlayer(i, string, 2500, 3);
							}
						}
					}
				}
			}
		}
	}
	
	new msg[128], killerName[MAX_PLAYER_NAME+1], reasonMsg[32], playerName[MAX_PLAYER_NAME+1];
	GetPlayerName(killerid, killerName, sizeof(killerName));
	GetPlayerName(playerid, playerName, sizeof(playerName));
	if (killerid != INVALID_PLAYER_ID)
	{
		switch (reason)
		{
			case 0: reasonMsg = "Unarmed";
			case 1: reasonMsg = "Brass Knuckles";
			case 2: reasonMsg = "Golf Club";
			case 3: reasonMsg = "Night Stick";
			case 4: reasonMsg = "Knife";
			case 5: reasonMsg = "Baseball Bat";
			case 6: reasonMsg = "Shovel";
			case 7: reasonMsg = "Pool Cue";
			case 8: reasonMsg = "Katana";
			case 9: reasonMsg = "Chainsaw";
			case 10: reasonMsg = "Dildo";
			case 11: reasonMsg = "Dildo";
			case 12: reasonMsg = "Vibrator";
			case 13: reasonMsg = "Vibrator";
			case 14: reasonMsg = "Flowers";
			case 15: reasonMsg = "Cane";
			case 22: reasonMsg = "Pistol";
			case 23: reasonMsg = "Silenced Pistol";
			case 24: reasonMsg = "Desert Eagle";
			case 25: reasonMsg = "Shotgun";
			case 26: reasonMsg = "Sawn-off Shotgun";
			case 27: reasonMsg = "Combat Shotgun";
			case 28: reasonMsg = "MAC-10";
			case 29: reasonMsg = "MP5";
			case 30: reasonMsg = "AK-47";
			case 31: reasonMsg = "M4";
			case 32: reasonMsg = "TEC-9";
			case 33: reasonMsg = "Country Rifle";
			case 34: reasonMsg = "Sniper Rifle";
			case 37: reasonMsg = "Fire";
			case 38: reasonMsg = "Minigun";
			case 41: reasonMsg = "Spray Can";
			case 42: reasonMsg = "Fire Extinguisher";
			case 49: reasonMsg = "Vehicle Collision";
			case 50: reasonMsg = "Vehicle Collision";
			case 51: reasonMsg = "Explosion";
			default: reasonMsg = "Unknown";
		}
		format(msg, sizeof(msg), "04*** %s killed %s. (%s)", killerName, playerName, reasonMsg);
	}
	else
	{
		switch(reason)
		{
			case 53: format(msg, sizeof(msg), "04*** %s died. (Drowned)", playerName);
			case 54: format(msg, sizeof(msg), "04*** %s died. (Collision)", playerName);
			default: format(msg, sizeof(msg), "04*** %s died.", playerName);
		}
	}
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, msg);
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i = 0; i < gzoneid; i++)
	{
	    if(GZoneInfo[i][localGang] == PlayerInfo[playerid][GangID] && GZoneInfo[i][bUnderAttack] && areaid == GZoneInfo[i][zsphere])
	    {
	        // Player entered GWAR
			SCM(playerid, -1, ""orange"You have joined the Gang War! Type /gcapture near the flag when no enemy is around!");
			SetPlayerGWarMode(playerid);
			break;
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	for(new i = 0; i < gzoneid; i++)
	{
	    if(GZoneInfo[i][localGang] == PlayerInfo[playerid][GangID] && GZoneInfo[i][bUnderAttack] && areaid == GZoneInfo[i][zsphere] && PlayerInfo[playerid][bGWarMode])
	    {
	        // Player left GWAR
            SCM(playerid, -1, ""orange"You have left the gang zone! Get back fast and defend it!");
            ResetPlayerGWarMode(playerid, false);
            break;
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return 1;

	new str[255];
	switch(checkpointid)
	{
 		case 1: //BikeChallenge Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 522) return 1;

     			new tick = GetTickCount() + 3600000;
				if((PlayerInfo[playerid][tickLastBIKEC] + COOLDOWN_BIKEC) >= tick)
				{
				    return GameTextForPlayer(playerid, "~r~~h~Please wait before doing this stunt again", 6000, 5);
				}

   				RemovePlayerFromVehicle(playerid);
				new Float:POS[3];
	   			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], 10.0));
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));

				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the bike challenge.", 6000, 5);
				PlayerPlaySound(playerid, 1149, 0, 0, 0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /bikec.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 4, true, true);
				GivePlayerCash(playerid, 7000, true, true);
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the bike challange~n~~r~~h~~h~4 score and $7,000!");
				if(pAch[playerid][E_ach_biker] == 0)
				{
					pAch[playerid][E_ach_biker] = 1;
  					GivePlayerAchievement(playerid, "Biker", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				}
				SetPVarInt(playerid, "doingStunt", 0);
				PlayerInfo[playerid][tickJoin_bmx] = 0;
				PlayerInfo[playerid][tickLastBIKEC] = tick;
	  		}
 		}
 		case 2: //Skydive Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 3, true, true);
				GivePlayerCash(playerid, 5000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerInfo[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the first skydive challange~n~~r~~h~~h~3 score and $5,000!");
				SetPVarInt(playerid, "CompletedSD1", 1);
				if(GetPVarInt(playerid, "CompletedSD1") == 1 && GetPVarInt(playerid, "CompletedSD2") == 1)
				{
					if(pAch[playerid][E_ach_skydiver] == 0)
					{
						pAch[playerid][E_ach_skydiver] = 1;
      					GivePlayerAchievement(playerid, "Skydiver", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}
				}
			}
	 	}
		case 3: //Skydive2 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive2 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive2.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 6, true, true);
				GivePlayerCash(playerid, 10000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerInfo[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the second skydive challange~n~~r~~h~~h~6 score and $10,000!");
				SetPVarInt(playerid, "CompletedSD2", 1);
				if(GetPVarInt(playerid, "CompletedSD1") == 1 && GetPVarInt(playerid, "CompletedSD2") == 1)
				{
					if(pAch[playerid][E_ach_skydiver] == 0)
					{
						pAch[playerid][E_ach_skydiver] = 1;
      					GivePlayerAchievement(playerid, "Skydiver", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					}
				}
			}
	 	}
		case 4: //Skydive3 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive3 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive3.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 7, true, true);
				GivePlayerCash(playerid, 7500, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerInfo[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the third skydive challange~n~~r~~h~~h~7 score and $7,500!");
			}
	 	}
		case 5: //Skydive4 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive4 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive4.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 7, true, true);
				GivePlayerCash(playerid, 8000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerInfo[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the 4th skydive challange~n~~r~~h~~h~7 score and $8,000!");
			}
	 	}
 		case 6: //bmx Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 3 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && ((PlayerInfo[playerid][tickJoin_bmx] + 60000) < GetTickCount() + 3600000))
	  		{
	  		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 481) return 1;

   				RemovePlayerFromVehicle(playerid);
				new Float:POS[3];
	   			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], 10.0));
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));

				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the BMX Parkour.", 6000, 5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /bmx.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 8, true, true);
				GivePlayerCash(playerid, 8000, true, true);
				PlayerInfo[playerid][tickJoin_bmx] = 0;
				InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the BMX Parkour~n~~r~~h~~h~8 score and $8,000!");
				if(pAch[playerid][E_ach_bmxmaster] == 0)
				{
					pAch[playerid][E_ach_bmxmaster] = 1;
  					GivePlayerAchievement(playerid, "BMX Master", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				}
				SetPVarInt(playerid, "doingStunt", 0);
				PlayerInfo[playerid][tickJoin_bmx] = 0;
			}
	 	}
	 	case 7..10: //Refill Stations
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	 		{
	 			ShowPlayerDialog(playerid, REFIL_DIALOG, DIALOG_STYLE_LIST, ""ORANGE_E"Refill Station", ""GREEN_E"Repair Vehicle\t\t"LG_E"$2000\n"LB_E"Add Nitro (x10)\t\t"LG_E"$5000\n"LB_E"Repair and add Nitro\t"LG_E"$6500", "Select", "Exit");
			}
	 	}
	 	case 11: //24/7
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
	 		SetPlayerPosition(playerid, -29.3253,-89.4238,1003.5469,309.1852);
	 		SetPlayerInterior(playerid, 18);
			SetPVarInt(playerid, "InStore", 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
  			{
  				GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			}
	 	}
	 	case 12: //24/7 2
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPlayerPosition(playerid, -25.7717,-185.2310,1003.5469,357.3543);
	 		SetPlayerInterior(playerid, 17);
	 		SetPVarInt(playerid, "InStore", 2);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
	 	}
	 	case 13: //Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 3);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 14: //Ammunation
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 4);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 15: //24/7 Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2096.8403,2218.1736,10.8203,180.3828);
 		}
		case 16: //24/7 2 Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.4414,1989.8256,10.8203,89.8401);
		}
		case 17: //Casino Exit
		{
			if(GetPVarInt(playerid, "InStore") == 8)
	  		{
	  			SetPlayerPosition(playerid, 2087.2427,1518.5631,10.8203,42.2712);
	  		}
	  		else SetPlayerPosition(playerid, 2166.8091,2118.7424,10.8203,2.7188);
	  		SetPVarInt(playerid, "InStore", 0);
		}
		case 18: //Ammunation Exit
		{
			if(GetPVarInt(playerid, "InStore") == 9)
	  		{
	  			SetPlayerPosition(playerid, 2535.6519,2083.6223,10.8203,87.9963);
	  		}
	  		else SetPlayerPosition(playerid, 2152.6311,943.3882,10.8203,86.5536);
			SetPVarInt(playerid, "InStore", 0);
		}
		case 19: //Ammunation Weapons Menu
		{
			if(GetPVarInt(playerid, "inCNR") == 0)
			{
				SCM(playerid, COLOR_YELLOW, ">> "RED_E"You must be in a CNR minigame to purchase weapons from here!");
				return 1;
			}
			ShowDialog(playerid, WEAPON_DIALOG);
		}
  		case 20: //PD Refill
		{
			if(GetPVarInt(playerid, "Cop") != 0)
			{
				ShowPlayerDialog(playerid, COPS_REFILL, DIALOG_STYLE_LIST, ""BLUE_E"LVPD Refill", "Refill Health\nRefill Weapons", "Select", "Cancel");
			}
		}
		case 21: //Robber Refill
		{
			if(GetPVarInt(playerid, "Robber") == 1)
			{
				ShowPlayerDialog(playerid, ROBBER_REFILL, DIALOG_STYLE_LIST, ""ORANGE_E"Robbery Refill", "Refill Health\nRefill Weapons", "Select", "Cancel");
			}
		}
		case 22: //PD Entrance
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPlayerPosition(playerid, 238.2997,143.0537,1003.0234,0.3759, 3);
		}
		case 23: //PD Exit
		{
			SetPlayerPosition(playerid, 2286.9224,2428.6223,10.8203,175.3422);
		}
		case 24: //Roca Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 5);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

 			if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 25: //LV Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 6);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 26: // LV/Roca Bank Exit
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 5: SetPlayerPosition(playerid, 2270.9590,2288.6978,10.8203,180.1512);
				case 6: SetPlayerPosition(playerid, 2354.8496,1540.2738,10.8203,176.5952);
				case 20: SetPlayerPosition(playerid, -1553.1549,1168.3955,7.1875,90.9583);
				case 21: SetPlayerPosition(playerid, -2450.2944,503.9173,30.0857,263.3090);
				case 22: SetPlayerPosition(playerid, 1876.6860,-1741.3016,13.5056,180.8800);
				case 23: SetPlayerPosition(playerid, 1553.6498,-1790.9058,13.5469,265.9901);
				case 24: SetPlayerPosition(playerid, 1462.9047,-1015.3142,26.2472,181.1370);
				case 25: SetPlayerPosition(playerid, 1498.4811,-1584.6191,13.5469,182.4508);
				case 26: SetPlayerPosition(playerid, 369.0442,2576.0688,16.9099,181.6269);
			}
			SetPVarInt(playerid, "InStore", 0);
		}
		case 27: //4D
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 7);
			SetPlayerPosition(playerid, 2015.3188,1018.1863,996.8719,92.0147, 10);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 28: //4D Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2024.8165,1007.8154,10.8203,269.4927);
		}
		case 29: //Royal Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 8);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);

	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 30: //Ammunation 2
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 9);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 31: //Caligulas
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
			SetPVarInt(playerid, "InStore", 10);
			SetPlayerPosition(playerid, 2235.1345,1707.5121,1010.3026,181.5232, 1);
	 		if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 32: //Caligulas Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.1687,1677.7380,11.1118,87.6053);
		}
		case 33, 34: //Robbers Gate
		{
			if(GetPVarInt(playerid, "Robber") == 1)
	  		{
	  			MoveObject(Gate[0], 1397.24, 2688.04, 9.91, 2);
	  			MoveObject(Gate[1], 1397.24, 2701.15, 9.91, 2);

				SetTimer("MoveGate", 3000, false);
				GameTextForPlayer(playerid, "~g~~h~~h~Gate Opening..", 2000, 5);
	  		}
	  		else SCM(playerid, COLOR_RED, ">> "ORANGE_E"Only the Robbers class can open this gate!");
		}
		case 35:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && gTeam[playerid] == NORMAL)
			{
				ShowDialog(playerid, CM_DIALOG);
			}
		}
		case 36:
		{
		    if(GetPVarInt(playerid, "doingStunt") == 0) return SCM(playerid, -1, ""er"You can't use this now");
		    
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				CarSpawner(playerid, 481);
			}
		}
		case 37: //Skydive5 Prize
		{
			if(GetPVarInt(playerid, "doingStunt") == 2)
	  		{
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SCM(playerid, COLOR_YELLOW, ">> "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid, "~r~~h~Congrats!~n~~w~You finished the skydive5 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""nef" {%06x}%s(%i) "PINK_E"has successfully completed /skydive5.", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
				SCMToAll(COLOR_WHITE, str);
				GivePlayerScore_(playerid, 8, true, true);
				GivePlayerCash(playerid, 8000, true, true);
		  		ResetPlayerWeapons(playerid);
		  		SetPVarInt(playerid, "doingStunt", 0);
		  		PlayerInfo[playerid][tickJoin_bmx] = 0;
		  		InfoTD_MSG(playerid, 5000, "~r~~h~~h~Congratulations!~n~~w~You finished the 5th skydive challange~n~~r~~h~~h~8 score and $8,000!");
			}
	 	}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

	if(gTeam[playerid] == gRACE)
	{
	    if(g_CPProgress[playerid] == g_RaceArray[E_rCPs] - 1)
	    {
			new TimeStamp,
			    TotalRaceTime,
				rTime[3],
				Prize[2];

			TimeStamp = GetTickCount() + 3600000;
			TotalRaceTime = TimeStamp - g_RaceTick;
			ConvertTime(var, TotalRaceTime, rTime[0], rTime[1], rTime[2]);
			
			switch(++g_rPosition)
			{
		        case 1:
		        {
					Prize[0] = random(10000);
					Prize[1] = 10;
					PlayerInfo[playerid][RaceWins]++;

					if(pAch[playerid][E_ach_eliteracer] == 0 && PlayerInfo[playerid][RaceWins] >= 10)
					{
					    GivePlayerAchievement(playerid, "Elite Racer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					    pAch[playerid][E_ach_eliteracer] = 1;
					}
		        }
			    case 2:
				{
					Prize[0] = random(9000);
					Prize[1] = 9;
				}
				case 3:
				{
					Prize[0] = random(8000);
					Prize[1] = 8;
				}
				case 4:
				{
					Prize[0] = random(7000);
					Prize[1] = 7;
				}
				case 5:
				{
					Prize[0] = random(6000);
					Prize[1] = 6;
				}
			    case 6:
				{
					Prize[0] = random(5000);
					Prize[1] = 5;
				}
			    case 7:
				{
					Prize[0] = random(4000);
					Prize[1] = 4;
				}
			    case 8:
				{
					Prize[0] = random(3000);
					Prize[1] = 3;
				}
			    case 9:
				{
					Prize[0] = random(2000);
					Prize[1] = 2;
				}
			    default:
				{
					Prize[0] = random(1000);
					Prize[1] = 1;
				}
			}
			
			format(gstr, sizeof(gstr), "» %s(%i) has finished the race %i. in %02i:%02i.%03i", __GetName(playerid), playerid, g_rPosition, rTime[0], rTime[1], rTime[2]);
			SCMToAll(YELLOW, gstr);
			GivePlayerCash(playerid, Prize[0], true, true);
			GivePlayerScore_(playerid, Prize[1], true, true);
			
			if(g_rPosition <= 5 && TotalRaceTime > 40000 && GetPlayerScore_(playerid) > 1000)
			{
			    // Wenn eh nicht unter den TOP 5,wird seine Zeit eh nicht relevant sein.
			    if(islogged(playerid))
			    {
				    format(gstr, sizeof(gstr), "INSERT INTO `race_records` VALUES (NULL, %i, '%s', %i);", g_NextRace, __GetName(playerid), TotalRaceTime);
				    mysql_function_query(g_SQL_handle, gstr, false, "OnQueryFinish", "siii", gstr, THREAD_RACE_FINISH, g_rPosition, g_SQL_handle);
				}
			}
			else if(TotalRaceTime < 40000) // Do not save cheaters time
			{
			  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspect player completed race in %i seconds | Player: %s(%i) | Race", floatround(TotalRaceTime / 1000), __GetName(playerid), playerid);
				AdminMSG(RED, gstr2);
				print(gstr2);
			}

            DisablePlayerRaceCheckpoint(playerid);

		    ++g_RaceFinishCount;
			++g_CPProgress[playerid];
			
			if(g_RacePlayerCount == 1) // Wenn er alleine race fährt
			{
				return StopRace();
			}
			else // Mehr als 1 im race
			{
			    TogglePlayerControllable(playerid, 0);

			    if(g_rPosition == 1)
			    {
				    g_iRaceEnd = 30 + 1;
				    SetTimer("Race_End", 1000, false);
				}
				else
				{
				    if(g_RaceFinishCount >= g_RacePlayerCount)
					{
						return StopRace();
					}
				}
			}
		}
		else
		{
			++g_CPProgress[playerid];
		    SetCP(playerid, g_CPProgress[playerid], g_CPProgress[playerid] + 1, g_RaceArray[E_rCPs], g_RaceArray[E_rType]);
		    PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(gTeam[playerid] == NORMAL)
	{
  		if(pickupid == VIPLpickup)
  		{
  		    if(PlayerInfo[playerid][VIP] == 1 || PlayerInfo[playerid][Level] > 0)
  		    {
	    		SetPlayerPosition(playerid, -3939.1855, 1308.7438, 3.4587, 86.1611, 3);
	  		    gTeam[playerid] = VIPL;
	  		    PlayerPlaySound(playerid, 1068, 0, 0, 0);
	  		    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	  		    LoadMap(playerid);
			}
			else
			{
			    SCM(playerid, -1, ""er"You need to be VIP or have an invite. See /vip");
			}
			return 1;
  		}
  		
  		if(pickupid == wangotto[0] || pickupid == wangotto[1] || pickupid == wangotto[2] || pickupid == wangotto[3])
  		{
  		    Command_ReProcess(playerid, "/vs", false);
  		    return 1;
  		}
  		
	    if(!PlayerInfo[playerid][bGod])
		{
		    for(new i = 0; i < sizeof(pick_life); i++)
		    {
				if(pickupid == pick_life[i])
				{
				    new Float:h;
				    GetPlayerHealth(playerid, h);
				    if(h >= 100.0)
				    {
				        SendInfo(playerid, "~g~~h~~h~You are already at full heatlh!", 2500);
				    }
				    else
				    {
					    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
					    SendInfo(playerid, "~g~~h~~h~Health refueled!", 2500);
						SetPlayerHealth(playerid, 100.0);
					}
					return 1;
				}
		    }
			if(pickupid == pick_chainsaw)
			{
			    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				GivePlayerWeapon(playerid, 9, 1);
				return 1;
	  		}
		}
	}
	else if(gTeam[playerid] == VIPL)
	{
		if(pickupid == VIPLpickup2)
		{
		    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    SetPlayerPosition(playerid, -2622.6589,1406.2648,7.1016,178.5571);
		    ResetPlayerWorld(playerid);
		    PlayerPlaySound(playerid, 1069, 0, 0, 0);
		    gTeam[playerid] = NORMAL;
		    return 1;
		}
	}
	
	if(pickupid == AdminLC2)
	{
		SetPlayerPos(playerid, 1803.2450,-1303.0396,120.2659);
		SetPlayerInterior(playerid, 0);
	}
	else if(pickupid == AdminLC)
	{
	    SetPlayerPos(playerid,-791.0734,497.6924,1376.1953);
	    SetPlayerInterior(playerid, 1);
	}
	else if(pickupid == aussenrein)
	{
	    SetPlayerInterior(playerid, 15);
	    SetPlayerPosEx(playerid, -1405.5538, 989.1526, floatadd(1049.0078, 3.0));
		ResetPlayerWeapons(playerid);
		gTeam[playerid] = BUYCAR;
		LoadMap(playerid);
	}
	else if(pickupid == innenraus)
	{
		SetPlayerInterior(playerid, 0);
	    SetPlayerPosEx(playerid, 1798.0952, -1410.8192, floatadd(13.5458, 3.0));
	    RandomWeapon(playerid);
		gTeam[playerid] = NORMAL;
		LoadMap(playerid);
	}
	else if(pickupid == vehiclebuy)
	{
	    if(!islogged(playerid)) return notlogged(playerid);
		ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		SetPlayerVirtualWorld(playerid, playerid + 101);
		SetPlayerCameraPos(playerid,-1407.6005,1021.9415,1051.4486);
		SetPlayerCameraLookAt(playerid, -1407.9410,1022.4058,1051.1681);
		SetPlayerPos(playerid, -1409.6410, 1032.6376, 1049.0288);
		TogglePlayerControllable(playerid, false);
		ShowDialog(playerid, CARBUY_DIALOG);
	}
	else if(pickupid == dm1pickup)
	{
	    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		new currentveh, Float:angle;
	  	currentveh = GetPlayerVehicleID(playerid);
	  	SetVehiclePos(currentveh, -3945.3562,963.2668,36.3281);
		GetVehicleZAngle(currentveh, angle);
		SetVehicleZAngle(currentveh, angle);
	}
	else if(pickupid == dm2pickup)
	{
	    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		new currentveh, Float:angle;
	  	currentveh = GetPlayerVehicleID(playerid);
	  	SetVehiclePos(currentveh, -3951.6909,968.0073,65.6281);
		GetVehicleZAngle(currentveh, angle);
		SetVehicleZAngle(currentveh, angle);
	}

 	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
	    new file[50];
   		for(new b = 0; b < MAX_BANKS; b++)
   		{
   		    format(file, sizeof(file), "/Store/Banks/%i.ini", b);
  			if(pickupid == BankPickInt[b])
			{
				gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
 		for(new a = 0; a < MAX_AMMUNATIONS; a++)
		{
		    format(file, sizeof(file), "/Store/Ammunations/%i.ini", a);
			if(pickupid == AmmunationPickInt[a])
			{
			    gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new bs = 0; bs < MAX_BURGERSHOTS; bs++)
		{
		    format(file, sizeof(file), "/Store/BurgerShots/%i.ini", bs);
			if(pickupid == BurgerPickInt[bs])
			{
			    gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new cb = 0; cb < MAX_CLUCKINBELLS; cb++)
		{
		    format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cb);
			if(pickupid == CluckinBellPickInt[cb])
			{
			    gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
		for(new ps = 0; ps < MAX_PIZZASTACKS; ps++)
		{
		    format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", ps);
			if(pickupid == PizzaPickInt[ps])
			{
			    gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}
 		for(new tfs = 0; tfs < MAX_TFS; tfs++)
		{
		    format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
			if(pickupid == TFSPickInt[tfs])
			{
			    gTeam[playerid] = NORMAL;
				SetPlayerPos(playerid, dini_Float(file, "SpawnOutX"), dini_Float(file, "SpawnOutY"), dini_Float(file, "SpawnOutZ"));
		        SetPlayerFacingAngle(playerid, dini_Float(file, "SpawnOutAngle"));
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetCameraBehindPlayer(playerid);
		        return 1;
			}
		}

	    // aout
		for(new bo = 0; bo < MAX_BANKS; bo++)
		{
		    if(pickupid == BankPickOut[bo])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		        gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 2307.8840, -15.4403, 26.7496);
				SetPlayerFacingAngle(playerid, 272.2517);
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, (bo + 1000));
                return 1;
			}
		}
		for(new ao = 0; ao < MAX_AMMUNATIONS; ao++)
		{
  			if(pickupid == AmmunationPickOut[ao])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 315.4236, -140.6816, 999.6016);
				SetPlayerFacingAngle(playerid, 1.2109);
		        SetPlayerInterior(playerid, 7);
		        SetPlayerVirtualWorld(playerid, (ao + 1000));
		        return 1;
			}
		}
		for(new bso = 0; bso < MAX_BURGERSHOTS; bso++)
		{
  			if(pickupid == BurgerPickOut[bso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 365.3955, -73.8744, 1001.5078);
				SetPlayerFacingAngle(playerid, 304.0766);
		        SetPlayerInterior(playerid, 10);
		        SetPlayerVirtualWorld(playerid, (bso + 1000));
		        SetPlayerShopName(playerid, "FDBURG");
		        return 1;
			}

		}
		for(new cbo = 0; cbo < MAX_CLUCKINBELLS; cbo++)
		{
  			if(pickupid == CluckinBellPickOut[cbo])
			{
			    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
				gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 365.0724, -8.9202, 1001.8516);
				SetPlayerFacingAngle(playerid, 358.4327);
		        SetPlayerInterior(playerid, 9);
		        SetPlayerVirtualWorld(playerid, (cbo + 1000));
		        SetPlayerShopName(playerid, "FDCHICK");
		        return 1;
			}
		}
		for(new pso = 0; pso < MAX_PIZZASTACKS; pso++)
		{
  			if(pickupid == PizzaPickOut[pso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, 370.6657, -129.9993, 1001.4922);
				SetPlayerFacingAngle(playerid, 358.0357);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, (pso + 1000));
		        SetPlayerShopName(playerid, "FDPIZA");
		        return 1;
			}
		}
		for(new tfso = 0; tfso < MAX_TFS; tfso++)
		{
  			if(pickupid == TFSPickOut[tfso])
		    {
		        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
		    	gTeam[playerid] = STORE;
		        SetPlayerPos(playerid, -22.3658, -185.1534, 1003.5469);
				SetPlayerFacingAngle(playerid, 311.6577);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, (tfso + 1000));
		        return 1;
			}
		}
	}
	return 1;
}

public OnObjectMoved(objectid)
{
    new Float:POS[3];
    
	for(new i = 0; i < sizeof(Obj_FloorDoors); i++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], POS[0], POS[1], POS[2]);

		    if(POS[0] < X_DOOR_L_OPENED - 0.5)
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)
	{
	    KillTimer(ElevatorBoostTimer);

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, POS[0], POS[1], POS[2]);
        Label_Elevator = CreateDynamic3DTextLabel("Press '"vgreen"F"white"' to use elevator", -1, 1784.9822, -1302.0426, floatsub(POS[2], 0.9), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);

	    ElevatorState = ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, false);
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerAvail(playerid))
	{
		new string[30];
		format(string, sizeof(string), "/stats %i", clickedplayerid);
		Command_ReProcess(playerid, string, false);
	}
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == skinlist)
    {
        if(response)
		{
		    SetSpawnInfo(playerid, NO_TEAM, modelid, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
  			SetPlayerSkin(playerid, modelid);
        }
	}
	else if(listid == toyslist)
	{
	    if(response)
	    {
		    if(GetPlayerCash(playerid) < 20000)
		    {
				SCM(playerid, -1, ""er"Each toy costs $20,000");
				return 1;
		    }
		    GivePlayerCash(playerid, -10000);

            PlayerToys[playerid][PlayerInfo[playerid][toy_selected]][toy_model] = modelid;
			SetPlayerAttachedObject(playerid, PlayerInfo[playerid][toy_selected], PlayerToys[playerid][PlayerInfo[playerid][toy_selected]][toy_model], 1);

			EditAttachedObject(playerid, PlayerInfo[playerid][toy_selected]);
		    ShowPlayerToyTextdraws(playerid);
		    SCM(playerid, GREEN, "Successfully bought the toy for $20,000!");
		    
		    if(pAch[playerid][E_ach_styler] == 0)
		    {
		        GivePlayerAchievement(playerid, "Styler", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
		        pAch[playerid][E_ach_styler] = 1;
		    }
	    }
	}
	else if(listid == hobjslist)
	{
	    if(response)
	    {
	        if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"You can not be in a vehicle!");
	        if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");
	        
			new h_id = GetHouseIdByPlayerSlotSel(playerid);

			if(h_id != -1)
			{
			    if(GetPlayerVirtualWorld(playerid) != (HouseInfo[h_id][iID] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
			    
			    if(GetPlayerCash(playerid) < 5000)
			    {
					SCM(playerid, -1, ""er"Each house object costs $5,000");
					return 1;
			    }
			    GivePlayerCash(playerid, -5000);
		    
			    new Float:POS[4], str[128];
			    format(str, sizeof(str), "/hmenu to edit\nSlot ID: %i - Object ID: %i", PlayerInfo[playerid][houseobj_selected] + 1, modelid);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);
				
				POS[0] += (1.2 * floatsin(-POS[3], degrees));
				POS[1] += (1.2 * floatcos(-POS[3], degrees));
			    
			    HouseInfo[h_id][E_Obj_Model][PlayerInfo[playerid][houseobj_selected]] = modelid;
				HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]] = CreateDynamicObject(modelid, POS[0], POS[1], POS[2], 0.0, 0.0, 0.0, HouseInfo[h_id][iID] + 1000, -1, -1);
				HouseInfo[h_id][E_Obj_Label][PlayerInfo[playerid][houseobj_selected]] = CreateDynamic3DTextLabel(str, LIGHT_YELLOW, POS[0], POS[1], POS[2]+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[h_id][iID] + 1000);
				
				EditDynamicObject(playerid, HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]]);

				SCM(playerid, GREEN, "Successfully bought the house object for $5,000!");
			}
			else SendInfo(playerid, "~y~~h~Error couldn't find the house in that slot! Report on forums!", 2500);
	    }
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(gTeam[playerid] == NORMAL && !PlayerInfo[playerid][bGWarMode])
	{
    	SetVehicleHealth(vehicleid, 1000.0);
		RepairVehicle(vehicleid);
		return 1;
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gTeam[playerid] == DERBY)
	{
		new Float:HP,
			veh = GetPlayerVehicleID(playerid);

		GetVehicleHealth(veh, HP);

		if(HP != OldHealth[playerid])
		{
			OldDamage[playerid] = OldHealth[playerid] - HP;
			OldHealth[playerid] = HP;

			if(OldDamage[playerid] > 0)
			{
				new texts[128];
				if(LabelActive[playerid])
				{
					CDamage[playerid] += OldDamage[playerid];
					format(texts, sizeof(texts), "{ffd800}-%.0f\n%s", CDamage[playerid], UpdateString(HP));
					KillTimer(PlayerInfo[playerid][tTimerHP]);
					PlayerInfo[playerid][tTimerHP] = SetTimerEx("DeleteDerbyText", 2000, false, "i", playerid);
				}
				else
				{
					LabelActive[playerid] = true;
					format(texts, sizeof(texts), "{ffd800}-%.0f\n%s",OldDamage[playerid],UpdateString(HP));
					PlayerInfo[playerid][tTimerHP] = SetTimerEx("DeleteDerbyText", 2000, false, "i", playerid);
				}
				UpdatePlayer3DTextLabelText(playerid, DerbyVehLabel[playerid], -1, texts);
			}
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(gTeam[i] == SPEC && PlayerInfo[i][SpecID] == playerid)
	    {
			if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
			{
				PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			}
			else if(newstate == PLAYER_STATE_ONFOOT)
			{
				PlayerSpectatePlayer(i, playerid);
			}
			else if(newstate == PLAYER_STATE_SPECTATING)
			{
			    Command_ReProcess(i, "/specoff", false);
			    SendInfo(i, "~y~~h~Player started spectating someone else!", 4000);
			}
		}
	}
	
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vID = GetPlayerVehicleID(playerid);
	    
		if(PlayerInfo[playerid][vTDShown])
		{
		    KillTimer(PlayerInfo[playerid][tTDhandle]);
		}
		format(gstr, sizeof(gstr), "%s", GetVehicleNameById(vID));
		PlayerTextDrawSetString(playerid, vTD[playerid], gstr);
		PlayerTextDrawShow(playerid, vTD[playerid]);
		PlayerInfo[playerid][tTDhandle] = SetTimerEx("hidevTD", 3000, false, "i", playerid);
	}
	
    if(gTeam[playerid] == DERBY)
	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
		    if(DerbyVehLabel[playerid] != PlayerText3D:-1)
		    {
		    	DeletePlayer3DTextLabel(playerid, DerbyVehLabel[playerid]);
		    	DerbyVehLabel[playerid] = PlayerText3D:-1;
		    }
			DerbyVehLabel[playerid] = CreatePlayer3DTextLabel(playerid, " ", -1, 0, 0, 0.9, 10.0, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid), 1);
			UpdateBar(playerid);
		}
		else if(DerbyVehLabel[playerid] != PlayerText3D:-1)
	    {
	    	DeletePlayer3DTextLabel(playerid, DerbyVehLabel[playerid]);
	    	DerbyVehLabel[playerid] = PlayerText3D:-1;
	    }
	}
	return 1;
}

Float:GetElevatorZCoordForFloor(floorid)
{
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.
}

Float:GetDoorsZCoordForFloor(floorid)
{
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(Key(KEY_SPRINT) && IsPlayerInRangeOfPoint(playerid, 2.2, 2311.63, -3.89, 26.74) && gTeam[playerid] == STORE)
	{
	    if(!islogged(playerid)) return notlogged(playerid);
	    return ShowDialog(playerid, BANK_DIALOG);
	}

    if(HOLDING(KEY_HANDBRAKE))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeapon(playerid) == 34)
        {
			PlayerInfo[playerid][SniperAiming] = true;
		}
	}
    if(RELEASED(KEY_HANDBRAKE))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeapon(playerid) == 34)
        {
			PlayerInfo[playerid][SniperAiming] = false;
		}
	}

	if(GetPVarInt(playerid, "doingStunt") != 0) return 1;

	if(gTeam[playerid] == NORMAL)
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			if(Key(KEY_SUBMISSION))
			{
		 		new currentveh, Float:angle;
			    currentveh = GetPlayerVehicleID(playerid);
			    GetVehicleZAngle(currentveh, angle);
			    SetVehicleZAngle(currentveh, angle);
			    return 1;
			}

			if(Key(KEY_FIRE) && GetPVarInt(playerid, "Ramped") == 1)
			{
			    if(!PlayerInfo[playerid][RampActive])
			    {
				    new vehIDr = GetPlayerVehicleID(playerid), Float:vPOS[4], Float:salttmp;
					GetVehiclePos(vehIDr, vPOS[0], vPOS[1], vPOS[2]);
					GetVehicleZAngle(vehIDr, vPOS[3]);
					salttmp = (floatpower(GetPlayerPing(playerid), 0.25) * 6.0 + 5.0);
					vPOS[0] += (floatsin(-vPOS[3], degrees) * salttmp);
					vPOS[1] += (floatcos(-vPOS[3], degrees) * salttmp);
					SetTimerEx("DestroyRampObject", 3000, false, "ii", CreateDynamicObject(1632, vPOS[0], vPOS[1], vPOS[2], 0, 0, vPOS[3]), playerid);
					PlayerInfo[playerid][RampActive] = true;
				}
			    return 1;
			}
			
		    if(PlayerInfo[playerid][SpeedBoost])
		    {
				if(Key(KEY_FIRE))
				{
					new Float:POS[3], vid = GetPlayerVehicleID(playerid);
					GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
					SetVehicleVelocity(vid, POS[0] * 1.3, POS[1] * 1.3, POS[2] * 1.3);
					if(IsComponentIdCompatible(GetVehicleModel(vid), 1010)) AddVehicleComponent(vid, 1010);
					return 1;
		   		}

				if(Key(KEY_CROUCH))
				{
					new Float:POS[3], vid = GetPlayerVehicleID(playerid);
					GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
					SetVehicleVelocity(vid, POS[0], POS[1], floatadd(POS[2], 0.20));
					SetVehicleHealth(vid, 1000.0);
					return 1;
				}

				if(Key(KEY_YES) || Key(KEY_NO))
				{
					new Float:POS[3], vid = GetPlayerVehicleID(playerid);
					GetVehicleVelocity(vid, POS[0], POS[1], POS[2]);
					SetVehicleVelocity(vid, POS[0] > 0 ? POS[0] * 0.75 : 0.0, POS[1] > 0 ? POS[1] * 0.75 : 0.0, POS[2]);
					SetVehicleHealth(vid, 1000.0);
				    return 1;
				}
			}
		}

		if(Key(KEY_SECONDARY_ATTACK))
		{
		    if(GetNearestHouse(playerid) != -1)
		    {
		        Command_ReProcess(playerid, "/enter", false);
		        return 1;
		    }
		}

		if(PlayerInfo[playerid][SuperJump] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && Key(KEY_JUMP) && !PlayerInfo[playerid][SniperAiming])
		{
		    if(!PlayerInfo[playerid][bGWarMode])
		    {
				new Float:POS[3];
				GetPlayerVelocity(playerid, POS[0], POS[1], POS[2]);
				SetPlayerVelocity(playerid, POS[0], POS[1], floatadd(POS[2], 5.0));
			}
			return 1;
		}

		if(!IsPlayerInAnyVehicle(playerid) && Key(KEY_SECONDARY_ATTACK))
		{
		    new Float:POS[3];
		    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		    if(POS[1] < -1301.4 && POS[1] > -1303.2417 && POS[0] < 1786.2131 && POS[0] > 1784.1555)
		    {
		        ShowElevatorDialog(playerid);
			}
			else
			{
			    if(POS[1] > -1301.4 && POS[1] < -1299.1447 && POS[0] < 1785.6147 && POS[0] > 1781.9902)
			    {
					new i = 20;
					while(POS[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
					{
					    --i;
					}

					if(i == 0 && POS[2] < GetDoorsZCoordForFloor(0) + 2.0)
					{
					    i = -1;
					}

					if(i <= 19)
					{
						CallElevator(playerid, i + 1);
						GameTextForPlayer(playerid, "~r~Elevator called", 3500, 4);
					}
			    }
			}
		}
	}
	else if(gTeam[playerid] == gBUILDRACE && g_BuildRace == playerid)
	{
	    new Float:vPos[4],
	        rFile[32];
	        
	    if(Key(KEY_FIRE))
	    {
		    if(g_BuildTakeVehPos)
		    {
		    	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, RED, ">> You need to be in a vehicle");
				format(rFile, sizeof(rFile), "/Race/%03i.race", g_RaceCount + 1);
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
		        dini_Create(rFile);
				dini_IntSet(rFile, "vModel", g_BuildModeVMID);
				dini_IntSet(rFile, "rType", g_BuildRaceType);
				dini_IntSet(rFile, "rVirtualWorld", g_BuildVirtualWorld);
		        format(gstr, sizeof(gstr), "vPosX_%i", g_BuildVehPosCount);
				dini_FloatSet(rFile, gstr, vPos[0]);
		        format(gstr, sizeof(gstr), "vPosY_%i", g_BuildVehPosCount);
				dini_FloatSet(rFile, gstr, vPos[1]);
		        format(gstr, sizeof(gstr), "vPosZ_%i", g_BuildVehPosCount);
				dini_FloatSet(rFile, gstr, vPos[2]);
		        format(gstr, sizeof(gstr), "vAngle_%i", g_BuildVehPosCount);
				dini_FloatSet(rFile, gstr, vPos[3]);
		        format(gstr, sizeof(gstr), ">> Vehicle Pos '%i' has been taken.", ++g_BuildVehPosCount);
		        SCM(playerid, YELLOW, gstr);
			}

   			if(g_BuildVehPosCount >= RACE_MAX_PLAYERS)
		    {
		        g_BuildVehPosCount = 0;
		        g_BuildTakeVehPos = false;
		        ShowDialog(playerid, DIALOG_RACE_CHECKPOINTS);
		    }

			if(g_BuildTakeCheckpoints)
			{
			    if(g_BuildCheckPointCount > RACE_MAX_CHECKPOINTS) return SCM(playerid, RED, ">> You reached the maximum amount of checkpoints!");
			    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, RED, ">> You need to be in a vehicle");
				format(rFile, sizeof(rFile), "/Race/%03i.race", g_RaceCount + 1);
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				format(gstr, sizeof(gstr), "CP_%i_PosX", g_BuildCheckPointCount);
				dini_FloatSet(rFile, gstr, vPos[0]);
				format(gstr, sizeof(gstr), "CP_%i_PosY", g_BuildCheckPointCount);
				dini_FloatSet(rFile, gstr, vPos[1]);
				format(gstr, sizeof(gstr), "CP_%i_PosZ", g_BuildCheckPointCount);
				dini_FloatSet(rFile, gstr, vPos[2]);
    			format(gstr, sizeof(gstr), ">> Checkpoint '%i' has been set!", ++g_BuildCheckPointCount);
		        SCM(playerid, YELLOW, gstr);
			}
		}

		if(Key(KEY_SECONDARY_ATTACK))
		{
		    if(g_BuildTakeCheckpoints)
		    {
				format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
				dini_IntSet(gstr, "rTotalRaceCPs", g_BuildCheckPointCount);
				dini_IntSet(gstr, "rDeployTime", (gettime() - g_BuildDeployTime) - 1);

				format(gstr, sizeof(gstr), "/Race/Index/Index.ini");
				dini_IntSet(gstr, "TotalRaces", ++g_RaceCount);
				
		        ShowDialog(playerid, DIALOG_RACE_RACERDY);

				RemoveFromRaceBuilder(playerid);
		    }
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(!IsValidDynamicObject(objectid)) return 1;

    if(response == EDIT_RESPONSE_CANCEL)
    {
        SendInfo(playerid, "~r~~h~~h~House object edition canceled!", 2500);
    }
    else if(response == EDIT_RESPONSE_FINAL)
    {
        if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");
		new h_id = GetHouseIdByPlayerSlotSel(playerid);

		if(h_id != -1)
		{
		    if(GetPlayerVirtualWorld(playerid) != (HouseInfo[h_id][iID] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");

	        SendInfo(playerid, "~g~~h~~h~New house object position saved!", 2500);
	        MoveDynamicObject(objectid, x, y, z, 5.0, rx, ry, rz);
	        
	        new str[64];
	        format(str, sizeof(str), "/hmenu to edit\nSlot ID: %i - Object ID: %i", PlayerInfo[playerid][houseobj_selected] + 1, HouseInfo[h_id][E_Obj_Model][PlayerInfo[playerid][houseobj_selected]]);
	        DestroyDynamic3DTextLabel(HouseInfo[h_id][E_Obj_Label][PlayerInfo[playerid][houseobj_selected]]);
	        HouseInfo[h_id][E_Obj_Label][PlayerInfo[playerid][houseobj_selected]] = CreateDynamic3DTextLabel(str, LIGHT_YELLOW, x, y, z+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[h_id][iID] + 1000);
	        
			MySQL_SaveHouse(h_id, true);
		}
		else SendInfo(playerid, "~y~~h~Error couldn't find the house in that slot! Report on forums!", 2500);
    }
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    HidePlayerToyTextdraws(playerid);
    
    if(response)
    {
        SendInfo(playerid, "~g~~h~~h~New Toy position saved!", 2500);

        PlayerToys[playerid][index][toy_x] = fOffsetX;
        PlayerToys[playerid][index][toy_y] = fOffsetY;
        PlayerToys[playerid][index][toy_z] = fOffsetZ;
        PlayerToys[playerid][index][toy_rx] = fRotX;
        PlayerToys[playerid][index][toy_ry] = fRotY;
        PlayerToys[playerid][index][toy_rz] = fRotZ;
        PlayerToys[playerid][index][toy_sx] = fScaleX;
        PlayerToys[playerid][index][toy_sy] = fScaleY;
        PlayerToys[playerid][index][toy_sz] = fScaleZ;
    }
    else
    {
        SendInfo(playerid, "~r~~h~~h~Toy edition canceled!", 2500);

        SetPlayerAttachedObject(playerid,
			index,
			modelid,
			boneid,
			PlayerToys[playerid][index][toy_x],
			PlayerToys[playerid][index][toy_y],
			PlayerToys[playerid][index][toy_z],
			PlayerToys[playerid][index][toy_rx],
			PlayerToys[playerid][index][toy_ry],
			PlayerToys[playerid][index][toy_rz],
			PlayerToys[playerid][index][toy_sx],
			PlayerToys[playerid][index][toy_sy],
			PlayerToys[playerid][index][toy_sz]);
    }
    return 1;
}

// ===
// commands
// ===

#if IRC_CONNECT == true
IRCCMD:say(botid, channel[], user[], host[], params[])
{
	if(IRC_IsVoice(botid, channel, user))
	{
		if(!isnull(params))
		{
			if(IsAd(params)) return 1;

			format(gstr, sizeof(gstr), "02*** %s on IRC: %s", user, params);
			IRC_GroupSay(IRC_GroupID, channel, gstr);
			format(gstr, sizeof(gstr), "*** %s on IRC: %s", user, params);
			SCMToAll(0x0037FFFF, gstr);
			printf("[IRC] (%s)%s(%i): %s", host, user, botid, params);
		}
		else IRC_ReplyCTCP(botid, user, "7Usage: 2!say <message>");
	}
	return 1;
}

IRCCMD:playerlist(botid, channel[], user[], host[], params[])
{
	if(IRC_IsVoice(botid, channel, user))
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
		        format(gstr, sizeof(gstr), "2%s(%i)", __GetName(i), i);
		        IRC_ReplyCTCP(botid, user, gstr);
		    }
		}
	}
	return 1;
}

IRCCMD:cc(botid, channel[], user[], host[], params[])
{
   	if(!IRC_IsHalfop(botid, channel, user)) return 0;

	for(new i = 0; i < 129; i++)
	{
	    SCMToAll(COLOR_SYSTEM, " ");
	}
	format(gstr, sizeof(gstr), "Administrator %s(IRC) has cleared the chat!", user);
	SCMToAll(COLOR_STEELBLUE, gstr);
	format(gstr, sizeof(gstr), "4Server: 2Administrator %s(IRC) cleared the chat", user);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
	return 1;
}
#endif

YCMD:beach(playerid, params[], help)
{
    PortPlayerMap(playerid, 341.8535, -1852.6327, 8.2618, 90.2136, "Los Santos Beach", "beach");
    return 1;
}
YCMD:mc(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2335.2832, -1644.9913, 486.0481, 279.2750, -2308.8811, -1614.4382, 483.8531, 197.2544, "Mount Chiliad", "mc");
    return 1;
}
YCMD:sf(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1990.6650, 136.9297, 27.3110, 0.6588, -1990.6650, 136.9297, 27.3110, 0.6588, "San Fierro", "sf");
    return 1;
}
YCMD:sfa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1196.3280, -17.4523, 15.8281, 42.5799, -1205.9094, 15.8533, 13.9217, 137.6498, "San Fierro Airport", "sfa");
    return 1;
}
YCMD:lsa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2003.1035,-2455.4905,15.8403,125.4882,2000.9854,-2493.9919,13.3126,89.7651, "Los Santos Airport", "lsa");
    return 1;
}
YCMD:ls(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2494.7476, -1666.6097, 13.3438, 88.1632, 2494.7476, -1666.6097, 13.3438, 88.1632, "Los Santos", "ls");
    return 1;
}
YCMD:lspd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1542.5554, -1674.7850, 13.5547, 92.8351,1536.0787,-1671.4823,13.3828,178.0104, "Los Santos Police Department", "lspd");
    return 1;
}
YCMD:lvpd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2290.5759,2421.3708,10.8203,178.5880,2289.8555,2414.7170,10.8222,269.7221, "Las Venturas Police Department", "lvpd");
    return 1;
}
YCMD:sfpd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1624.2128,674.2734,6.9573,219.9653,-1623.9940,674.0118,7.1875,219.9653, "San Fierro Police Department", "sfpd");
    return 1;
}
YCMD:skyroad4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 587.9016,1400.4779,1228.1453,3.2243,587.9016,1400.4779,1228.1453,3.2243, "Skyroad 4", "skyroad4");
    return 1;
}
YCMD:dfun(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 3638.867, 1179.233, 10.214, 0.0,  3638.867, 1179.233, 10.214, 0.0, "Dune Fun", "dfun");
    return 1;
}
YCMD:slide(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1572.9949, -1238.7869, 277.7445, 358.2480, 1572.9949, -1238.7869, 277.7445, 358.2480, "Slide", "slide");
    return 1;
}
YCMD:hp(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2848.1548,-1977.4320,10.6646,271.6942, 2848.1548,-1977.4320,10.6646,271.6942, "HalfPipe", "hp");
    return 1;
}
YCMD:tube(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1254.5294,-2285.2883,1084.8463,333.6016,1254.5294,-2285.2883,1084.8463,333.6016, "Tube", "tube");
    return 1;
}
YCMD:racemap(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2904.3860, -415.5923, 4.6274, 0.3237,-2904.3860, -415.5923, 4.6274, 0.3237, "Racemap", "racemap");
    return 1;
}
YCMD:racemap2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2741.1375,1969.4594,5269.7466,178.2995,2739.9221,1904.8870,5269.4741,180.1579, "Racemap 2", "racemap2");
    return 1;
}
YCMD:hayclimb(playerid, params[], help)
{
    PortPlayerMap(playerid, -1788.4408, 575.2750, 35.1641, 145.6224, "Hayclimb", "hayclimb");
    return 1;
}
YCMD:dfun2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 473.3654,-1883.9589,2.4099,167.1191,473.3654,-1883.9589,2.4099,167.1191, "Dune Fun 2", "dfun2");
    return 1;
}
YCMD:mi(playerid, params[], help)
{
    PortPlayerMap(playerid, -3801.8572, 498.8828, 16.5183, 121.5722, "Mellnik´s Island", "mi");
    return 1;
}
YCMD:mh(playerid, params[], help)
{
	if(PortPlayerMapVeh(playerid,-182.9842,-2245.7412,31.1492,125.6378,-182.9842,-2245.7412,31.1492,125.6378, "Mellnik´s House", "mh"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", -182.9842,-2245.7412,31.1492, 100.0, 1);
	}
	return 1;
}
YCMD:ah(playerid, params[], help)
{
	if(PortPlayerMap(playerid, 3133.7415, -1107.2448, 2.1289, 352.5349, "Adam's House", "ah"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", 3133.7415, -1107.2448, 2.1289, 100.0, 1);
	}
	return 1;
}
YCMD:bikec(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 1102.3887,1355.4951,10.8203,276.7901, "Bike Challange", "bikec"))
    {
        CheckPlayerGod(playerid);
        
		DestroyPlayerVehicles(playerid);
		
		SetPVarInt(playerid, "doingStunt", 1);
    }
    return 1;
}
YCMD:treehouse(playerid, params[], help)
{
    PortPlayerMap(playerid, -804.6822, -2075.3076, 45.1331, 320.1583, "Treehouse", "treehouse");
    return 1;
}
YCMD:trackmania(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1297.3998, -5626.5122, 81.7, 149.0596,1297.3998, -5626.5122, 81.7, 149.0596, "Trackmania", "trackmania");
    return 1;
}
YCMD:trackmania2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1929.1312, 6627.0327, 12.0, 180.0,-1929.1312, 6627.0327, 12.0, 180.0, "Trackmania", "trackmania2");
    return 1;
}
YCMD:ip(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -5051.7461, -2237.2556, 10.9, 359.8096,-5051.7461, -2237.2556, 10.9, 359.8096, "Infernus Paradise", "ip");
    return 1;
}
YCMD:ip2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -297.6044, 3682.8264, 24.0, 0.0, -297.6044, 3682.8264, 24.0, 0.0, "Infernus Paradise 2", "ip2");
    return 1;
}
YCMD:ip3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 4546.4175,655.6476,13.4803,0.0375,4546.4175,655.6476,13.4803,0.0375, "Infernus Paradise 3", "ip3");
    return 1;
}
YCMD:disney(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 400.2232,636.9904,16.8194,136.9245,400.2232,636.9904,16.8194,136.924, "Disney", "disney");
    return 1;
}
YCMD:gd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 551.1603,860.3625,7113.0366,268.0655,551.1603,860.3625,7113.0366,268.0655, "Going Down", "gd");
    return 1;
}
YCMD:skyroad2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2912.3618,-792.8673,10.7623,264.6945,2912.3618,-792.8673,10.7623,264.6945, "Skyroad 2", "skyroad2");
    return 1;
}
YCMD:skyroad3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 205.0412,2481.6416,16.5166,148.2003,205.0412,2481.6416,16.5166,148.2003, "Skyroad 3", "skyroad3");
    return 1;
}
YCMD:skyroad(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,  2999.2258, -1433.3010, 1244.1365, 101.9770, 2954.5017, -1441.2960, 1245.5, 100.9987, "Skyroad", "skyroad");
    return 1;
}
YCMD:wj(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 341.6029,2008.7330,571.1588,174.7883,341.6029,2008.7330,571.1588,174.7883, "Water Jump", "wj");
    return 1;
}
YCMD:snow(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -719.7679,1723.9852,7.0400,255.2436,-719.7679,1723.9852,7.0400,255.2436, "Snow Market", "snow");
    return 1;
}
YCMD:sd(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -793.2972,2230.8733,45.0103,180.8382,-790.9946,2197.6873,42.4100,271.6217, "Sherman Dam", "sd");
    return 1;
}
YCMD:qjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 868.278,245.432,587.522,0.0,868.278,245.432,587.522,0.0, "Quarry Jump", "qjump");
    return 1;
}
YCMD:party(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -377.2038,2131.4634,133.1797,227.9924, "Party", "party"))
	{
	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", -377.2038, 2131.4634, 133.1797, 50.0, 1);
	}
    return 1;
}
YCMD:aa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 386.0204, 2541.1179, 19.0953, 181.2326, 385.7370, 2513.5242, 16.6766, 89.6337, "Abandoned Airport", "aa");
    return 1;
}
YCMD:a51(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 307.2482,2050.7505,17.6406,180.8353,307.2482,2050.7505,17.6406,180.8353, "Area 51", "a51");
    return 1;
}
YCMD:trans(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1034.5165,-1039.7190,31.6651,272.5891,1034.5165,-1039.7190,31.6651,272.5891, "Transfender", "trans");
    return 1;
}
YCMD:trans2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -1932.7380,228.3443,34.1563,88.9975,-1932.7380,228.3443,34.1563,88.9975, "Transfender 2", "trans2");
    return 1;
}
YCMD:trans3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2386.2788,1021.7114,10.8203,356.2733,2386.2788,1021.7114,10.8203,356.2733, "Transfender 3", "trans3");
    return 1;
}
YCMD:lw(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2645.5457,-2004.5851,13.3828,173.3082,2645.5457,-2004.5851,13.3828,173.3082, "Loco Low", "lw");
    return 1;
}
YCMD:arch(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2689.1001,217.8290,3.9509,92.1955,-2689.1001,217.8290,3.9509,92.1955, "Arch Wheel Angels", "arch");
    return 1;
}
YCMD:ee(playerid, params[], help)
{
    PortPlayerMap(playerid, -2678.2119,1594.8811,217.2739,269.7218, "Easter Egg", "ee");
    return 1;
}
YCMD:eej(playerid, params[], help)
{
    PortPlayerMap(playerid, -2662.6877,1595.1354,225.7578,92.7102, "Easter Egg Jump", "eej");
    return 1;
}
YCMD:qp2(playerid, params[], help)
{
    PortPlayerMap(playerid, 2121.9146,2397.7786,51.2586,272.0792, "Quad Parkour 2", "qp2");
    return 1;
}
YCMD:qp(playerid, params[], help)
{
    PortPlayerMap(playerid, -2904.806, 880.312, 5.354, 56.0, "Quad Parkour", "qp");
    return 1;
}
YCMD:plane(playerid, params[], help)
{
    PortPlayerMap(playerid, 1841.8307,-1398.3483,117.0471,66.2874, "Plane", "plane");
    return 1;
}
YCMD:et(playerid, params[], help)
{
    PortPlayerMap(playerid, 956.2977,2441.0171,205.7626,183.3917, "Eiffel Tower", "et");
    return 1;
}
YCMD:lv(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2039.8860,1546.1112,10.4450,180.4970,2039.8860,1546.1112,10.4450,180.4970, "Las Ventuars", "lv");
    return 1;
}
YCMD:lva(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1320.6082,1268.7208,13.5903,2.6780,1338.3005,1275.2460,11.8100,358.8224, "Las Ventuars Airport", "lva");
    return 1;
}
YCMD:bs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1207.7231,-920.2217,43.0507,204.3588,1215.8248,-937.2825,42.4353,97.1190, "Burger Shot", "bs");
    return 1;
}
YCMD:bs2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 810.2364,-1632.6433,13.3906,247.2854,810.2364,-1632.6433,13.3906,247.2854, "Burger Shot 2", "bs2");
    return 1;
}
YCMD:bs3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2447.1104,2024.7499,10.8203,5.7265,2447.1104,2024.7499,10.8203,5.7265, "Burger Shot 3", "bs3");
    return 1;
}
YCMD:bs4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2314.1365,-143.7879,35.3203,178.6881,-2314.1365,-143.7879,35.3203,178.6881, "Burger Shot 4", "bs4");
    return 1;
}
YCMD:bs5(playerid, params[], help)
{
    PortPlayerMap(playerid, -1907.5175,834.4271,35.0156,140.9912, "Burger Shot 5", "bs5");
    return 1;
}
YCMD:film(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 909.7761,-1221.2274,16.9766,271.1224,909.7761,-1221.2274,16.9766,271.1224, "Film Studios", "film");
    return 1;
}
YCMD:bmx(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 3362.586, -1939.724, 43.027, 37.0, "BMX Parkour", "bmx"))
    {
        CheckPlayerGod(playerid);
        
		DestroyPlayerVehicles(playerid);
		
		PlayerInfo[playerid][tickJoin_bmx] = GetTickCount() + 3600000;
		
		SetPVarInt(playerid, "doingStunt", 3);
    }
    return 1;
}
YCMD:glen(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1892.7002,-1165.8480,24.0390,226.6521,1892.7002,-1165.8480,24.0390,226.6521, "Glen Park", "glen");
    return 1;
}
YCMD:sky(playerid, params[], help)
{
    PortPlayerMap(playerid, 1544.1896,-1352.2094,329.4762,182.8083, "Sky", "sky");
    return 1;
}
YCMD:sftj(playerid, params[], help)
{
    PortPlayerMap(playerid, -1753.6401,884.9623,295.8750,358.5666, "San Fierro Tower Jump", "sftj");
    return 1;
}
YCMD:quarry(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 833.0357,851.8098,12.0047,109.5170,833.0357,851.8098,12.0047,109.5170, "Quarry", "quarry");
    return 1;
}
YCMD:bordel(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2682.1389,1344.4447,17.0603,244.5469,-2691.2363,1353.6704,16.7702,240.1605, "Bordel", "bordel");
    return 1;
}
YCMD:bayside(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2227.2446,2326.8723,7.5469,85.6516,-2258.7388,2326.4885,4.8125,180.9058, "Bayside", "bayside");
    return 1;
}
YCMD:vs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1850.7683,-1459.0325,13.3984,43.7119,1850.7683,-1459.0325,13.3984,43.7119, "Vehicle Shop", "vs");
    return 1;
}
YCMD:gc(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1858.1874,-1466.7080,13.3981,322.7839,1858.1874,-1466.7080,13.3981,322.7839, "Gold Credits", "gc");
    return 1;
}
YCMD:ms(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 800.6712,-1330.6608,13.1061,226.2979,800.6712,-1330.6608,13.1061,226.2979, "Market Station", "ms");
    return 1;
}
YCMD:speed(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 680.2595, -1361.8927, 2551.2214, 90.0, 680.2595, -1361.8927, 2551.2214,90.0, "Speed Map", "speed");
    return 1;
}
YCMD:glory(playerid, params[], help)
{
    PortPlayerMap(playerid, 2354.1689, -2067.3284, 22.3832, 90.0, "Glory", "glory");
    return 1;
}
YCMD:maze(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2330.3174, 535.1375, 2.9512, 252.0903, 2330.3174, 535.1375, 2.9512, 252.0903, "Maze", "maze");
    return 1;
}
YCMD:maze2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1458.9336, 1854.9144, 54.7362, 143.3116,1458.9336, 1854.9144, 54.7362, 143.3116, "Maze 2", "maze2");
    return 1;
}
YCMD:maze3(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 836.5298,-2048.2273,12.8672,181.5937,836.5298,-2048.2273,12.8672,181.5937, "Maze 3", "maze3");
    return 1;
}
YCMD:maze4(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 983.0536,2691.7898,10.6925,206.9207,983.0536,2691.7898,10.6925,206.9207, "Maze 4", "maze4");
    return 1;
}
YCMD:loop(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 494.7604,4.7474,704.3844,88.7656,494.7604,4.7474,704.3844,88.7656, "Loop", "loop");
    return 1;
}
YCMD:rect(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 742.8961,533.1397,460.9956,270.0180,742.8961,533.1397,460.9956,270.0180, "RectAngle", "rect");
    return 1;
}
YCMD:nrg(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 442.4455, 816.6687, 9.6865, 90.0, 442.4455, 816.6687, 9.6865, 90.0, "NRG Parkour", "nrg");
    return 1;
}
YCMD:jujump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1387.8517,-2425.5776,525.6338,266.3386,1387.8517,-2425.5776,525.6338,266.3386, "Jubber Jump", "jujump");
    return 1;
}
YCMD:da(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 788.3009,-471.4969,20.5428,52.6863,788.3009,-471.4969,20.5428,52.6863, "Dilimore Airport", "da");
    return 1;
}
YCMD:drag(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -557.0079,-3575.5906,7.0870,30.2946,-557.0079,-3575.5906,7.0870,30.2946, "Drag", "drag");
    return 1;
}
YCMD:lvdrift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2333.8508,1405.8370,42.5904,358.0404,2333.8508,1405.8370,42.5904,358.0404, "Las Venturas Drift", "lvdrift");
    return 1;
}
YCMD:sfdrift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -2410.9963, -600.7848, 132.3277, 127.1357, -2410.9963, -600.7848, 132.3277, 127.1357, "San Fierro Drift", "sfdrift");
    return 1;
}
YCMD:driftcity(playerid, params[], help)
{
	PortPlayerMapVeh(playerid, 3431.8589, 484.3132, 1788.7490, 180, 3431.8589, 484.3132, 1788.7490, 180, "Drift City", "driftcity");
	return 1;
}
YCMD:driftisland(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 3075.9263,-3153.9749,49.1486,3.6277,3075.9263,-3153.9749,49.1486,3.6277, "Drift Island", "df");
    return 1;
}
YCMD:drift(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, -344.308, 1528.474, 75.159, 256.0,-344.308, 1528.474, 75.159, 256.0, "Drift", "drift");
    return 1;
}
YCMD:balloon(playerid, params[], help)
{
    PortPlayerMap(playerid, 295.4890,-1813.5734,52.0518,4.9753, "Balloon", "balloon");
    return 1;
}
YCMD:lsp(playerid, params[], help)
{
    PortPlayerMap(playerid, 2505.2646,-1694.4974,17.9575,182.0808, "Los Santos Parkour", "lsp");
    return 1;
}
YCMD:parkour(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2586.5618,-1346.5614,232.2472,0.0, "Parkour 1", "parkour"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour2(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -787.3710,-2766.3005,2660.3042,0.0, "Parkour 2", "parkour2"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour3(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -783.9699, -3662.0358, 137.3758,0.0, "Parkour 3", "parkour3"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour4(playerid, params[], help)
{
    if(PortPlayerMap(playerid, -2929.4922,-1876.4229,8.3901, 344.1002, "Parkour 4", "parkour4"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour5(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 1441.3851318359, -1700.8812255859, 915.390625, 344.1002, "Parkour 5", "parkour5"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour6(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2768.4343261719,-2743.7131347656,2460.0815429688, 0.0, "Parkour 6", "parkour6"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour7(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 3018.1736,-1879.4410,599.0370,178.1489, "Parkour 7", "parkour7"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:parkour8(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 2246,-1276,942, 0.0, "Parkour 8", "parkour8"))
    {
        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Parkour", ""white"Use /spos and /lpos - very helpful in parkour maps.", "OK", "");
    }
    return 1;
}
YCMD:kk(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 2521.0232, -1504.3864, 25.5929, 180.0, 2521.0232, -1504.3864, 25.5929, 180.0, "Krusty Krab", "kk");
    return 1;
}
YCMD:globe(playerid, params[], help)
{
    PortPlayerMapVeh(playerid, 1954.7849,1915.3772,144.7200,268.1410,1954.7849,1915.3772,144.7200,268.1410, "Globe", "globe1");
    return 1;
}
YCMD:farm(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-1206.7996,-1056.9430,128.3646,310.2706,-1206.7996,-1056.9430,128.3646,310.2706, "Farm", "farm");
    return 1;
}
YCMD:bowl(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-576.6021,421.7149,75.2376,84.2204,-576.6021,421.7149,75.2376,84.2204, "Bowl", "bowl");
    return 1;
}
YCMD:villa(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2006.7003,2434.1331,34.6573,2.1006,-2006.7003,2434.1331,34.6573,2.1006, "Villa", "villa");
    return 1;
}
YCMD:palominocreek(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2343.0247,91.6131,26.3281,179.4676,2343.0247,91.6131,26.3281,179.4676, "Palomino Creek", "palominocreek");
    return 1;
}
YCMD:glassjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2121.4280, 2560.6331, 514.7283, 0.0, 2121.4280, 2560.6331, 514.7283, 0.0, "Glass Jump", "glassjump");
    return 1;
}
YCMD:bj(playerid, params[], help)
{
    PortPlayerMap(playerid,294.3475,-1610.8379,494.6685,174.5567, "Base Jump 1", "bj");
    return 1;
}
YCMD:bikejump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,641.9279,2222.7144,940.5793,93.1221,641.9279,2222.7144,940.5793,93.1221, "Bike Jump", "bikejump");
    return 1;
}
YCMD:tunneljump(playerid, params[], help)
{
    PortPlayerMap(playerid,-494.527, 1600.167, 844.297, 271.0, "Tunnel Jump", "tunneljump");
    return 1;
}
YCMD:hugejump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,863.2654, 2490.4468, 694.3790, 296.0000, 899.6528, 2502.3611, 694.5513, 91.7515, "Huge Jump", "hugejump");
    return 1;
}
YCMD:loopjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-2682.3909, 385.2379, 924.8377, 269.6873, -2682.3909, 385.2379, 924.8377, 269.6873, "Loop Jump", "loopjump");
    return 1;
}
YCMD:xslide(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1862.760, 1337.315, 55.933, 33.0,1862.760, 1337.315, 55.933, 33.0, "XSlide", "xslide");
    return 1;
}
YCMD:drop(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,309.7934, 5461.4546, 3426.6863, 180.0,309.7934, 5461.4546, 3426.6863, 180.0, "Drop", "drop");
    return 1;
}
YCMD:tugfun(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2774.316, -1309.180, 4316.250, 0.0,2774.316, -1309.180, 4316.250, 0.0, "Tugfun", "Tugfun");
    return 1;
}
YCMD:deathjump(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2629.9734,-1029.7679,882.9141,240.2882,2629.9734,-1029.7679,882.9141,240.2882, "Death Jump", "deathjump");
    return 1;
}
YCMD:skydive(playerid, params[], help)
{
    if(PortPlayerMap(playerid,3887.5874,3891.2942,2018.7869,91.8075, "Skydive 1", "skydive"))
    {
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive2(playerid, params[], help)
{
    if(PortPlayerMap(playerid,-1288.0760,-44.0085,4216.4507,93.1578, "Skydive 2", "skydive2"))
    {
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive3(playerid, params[], help)
{
    if(PortPlayerMap(playerid,2875,-3233,3268,0, "Skydive 3", "skydive3"))
    {
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive4(playerid, params[], help)
{
    if(PortPlayerMap(playerid,118.210845,3658.245859,836.183776,266.014678, "Skydive 4", "skydive4"))
    {
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:skydive5(playerid, params[], help)
{
    if(PortPlayerMap(playerid, 239.3282, 3754.8267, 888.9833, 332.5006, "Skydive 5", "skydive5"))
    {
        CheckPlayerGod(playerid);
        Command_ReProcess(playerid, "/parch", false);
        SetPVarInt(playerid, "doingStunt", 2);
    }
    return 1;
}
YCMD:pool(playerid, params[], help)
{
    PortPlayerMap(playerid,4155.7158,2426.9578,1.2054,358.2449, "Pool", "pool");
    return 1;
}
YCMD:docks(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2714.5000,-2711.2676,2.4919,170.7375,2714.5000,-2711.2676,2.4919,170.7375, "Docks", "docks");
    return 1;
}
YCMD:sfs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,-1952.5077,137.8305,26.2813,268.8237,-1952.5077,137.8305,26.2813,268.8237, "SF Station", "sfs");
    return 1;
}
YCMD:lss(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1706.4425,-1943.0046,13.5607,269.2462,1706.4425,-1943.0046,13.5607,269.2462, "LS Station", "lss");
    return 1;
}
YCMD:lvs(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,1433.8182,2606.3877,10.6719,90.1619,1433.8182,2606.3877,10.6719,90.1619, "LV Station", "lvs");
    return 1;
}
YCMD:lvs2(playerid, params[], help)
{
    PortPlayerMapVeh(playerid,2859.3931,1290.5574,10.00,272.3561,2859.3931,1290.5574,10.00,272.3561, "LV Station 2", "lvs2");
    return 1;
}
YCMD:restaurant(playerid, params[], help)
{
    PortPlayerMap(playerid, 370.4659, -1717.2151, 15.0337, 1.9053, "Restaurant", "restaurant");
    return 1;
}
YCMD:247(playerid, params[], help)
{
	switch(random(8))
	{
	    case 0: PortPlayerMap(playerid, 1935.6107,-1774.3682,12.9179,179.1178, "_", "_", false);
	    case 1: PortPlayerMap(playerid, 2867.9910,-1439.5304,10.9656,93.5508, "_", "_", false);
	    case 2: PortPlayerMap(playerid, 1351.7595,-1750.6062,13.3601,182.3361, "_", "_", false);
	    case 3: PortPlayerMap(playerid, 1935.6107,-1774.3682,12.9179,179.1178, "_", "_", false);
	    case 4: PortPlayerMap(playerid, -102.2787,-1188.9490,1.7511,305.8828, "_", "_", false);
	    case 5: PortPlayerMap(playerid, 2273.5652,93.7596,26.3359,179.3487, "_", "_", false);
	    case 6: PortPlayerMap(playerid, 2179.1443,1991.5715,10.8203,268.9681, "_", "_", false);
	    case 7: PortPlayerMap(playerid, -850.5834,1543.7070,22.9045, 133.2283, "_", "_", false);
	}
	return 1;
}
YCMD:bank(playerid, params[], help)
{
	switch(random(3))
	{
	    case 0: PortPlayerMap(playerid, 1480.9403,-1765.3087,18.7958,178.5206, "_", "_", false);
	    case 1: PortPlayerMap(playerid, 1363.5427,215.4744,19.4063,159.8320, "_", "_", false);
	    case 2: PortPlayerMap(playerid, 2383.3401,2471.8391,10.8203,218.4656, "_", "_", false);
	}
	return 1;
}

YCMD:station(playerid, params[], help)
{
	switch(random(4))
	{
	    case 0: Command_ReProcess(playerid, "/lvs2", false);
	    case 1: Command_ReProcess(playerid, "/sfs", false);
	    case 2: Command_ReProcess(playerid, "/lvs", false);
	    case 3: Command_ReProcess(playerid, "/lss", false);
	}
	return 1;
}

YCMD:myskin(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please exit your vehicle first.");

	extract params -> new skin; else
	{
 		return Command_ReProcess(playerid, "/skins", false);
	}

	if(!IsValidSkin(skin)) return SCM(playerid, -1, ""er"Invaild Skin ID");
	SetSpawnInfo(playerid, NO_TEAM, skin, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
    SetPlayerSkin(playerid, skin);
	return 1;
}

YCMD:skins(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please exit your vehicle first.");

    ShowModelSelectionMenu(playerid, skinlist, "Select Skin", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
	return 1;
}

YCMD:mynetstats(playerid, params[], help)
{
	new stats[423];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - My NetworkStats", stats, "OK", "");
	return 1;
}

YCMD:netstats(playerid, params[], help)
{
	new stats[423];
    GetNetworkStats(stats, sizeof(stats));
    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Server Network Stats", stats, "OK", "");
	return 1;
}

YCMD:fallout(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == FALLOUT) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);

	if(g_FalloutStatus == e_Fallout_Inactive)
	{
	    CheckPlayerGod(playerid);
	    Command_ReProcess(playerid, "/stopanims", false);
	    gTeam[playerid] = FALLOUT;
	    ResetFalloutGameTime();
	    Fallout_BuildMap();
	    Fallout_StartGame();
		g_FalloutStatus = e_Fallout_Startup;
		Fallout_SetPlayer(playerid);
        SCMToAll(BLUE, ""fallout_sign" Type /fallout to participate");
        CurrentFalloutPlayers++;
        NewMinigameJoin(playerid, "Fallout", "fallout");
        SetPlayerInterior(playerid, 0);
	}
	else if(g_FalloutStatus == e_Fallout_Startup)
	{
	    CheckPlayerGod(playerid);
	    Command_ReProcess(playerid, "/stopanims", false);
		gTeam[playerid] = FALLOUT;
		format(gstr, sizeof(gstr), "%s(%i) joined Fallout!", __GetName(playerid), playerid);
		FalloutMSG(gstr);
		Fallout_SetPlayer(playerid);
		CurrentFalloutPlayers++;
        NewMinigameJoin(playerid, "Fallout", "fallout");
        SetPlayerInterior(playerid, 0);
	}
	else if(g_FalloutStatus == e_Fallout_Running)
	{
	    SCM(playerid, -1, ""er"Fallout already started!");
	}
	return 1;
}

YCMD:derby(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DERBY) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);
	
	if(CurrentDerbyPlayers == MAX_DERBY_PLAYERS) return SCM(playerid, -1, ""er"Derby reached it's max Players!");

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
    gTeam[playerid] = DERBY;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);

	if(IsDerbyRunning)
	{
        ShowPlayerDerbyTextdraws(playerid);
        SCM(playerid, -1, ""er"Derby already started, please wait till next round!");
	}
	else
	{
		ShowDialog(playerid, DERBY_VOTING_DIALOG);
        SCM(playerid, RED, "You joined Derby. Please vote for a map!");
	}

	SetPlayerDerbyStaticMeshes(playerid);
	ShowPlayerDerbyTextdraws(playerid);
	CurrentDerbyPlayers++;
	SetPlayerVirtualWorld(playerid, DERBY_WORLD);
	SetPlayerInterior(playerid, 0);
	
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);

	NewMinigameJoin(playerid, "Derby", "derby");
	return 1;
}

YCMD:war(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == WAR) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
	
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	
	ResetPlayerWeapons(playerid);
	switch(random(4))
	{
	    case 0: SetPlayerPosition(playerid, 164.9882, 1922.3430, 18.4712 + 1, 247.7249);
	    case 1: SetPlayerPosition(playerid, 285.5063, 1819.9249, 24.4108 + 1, 1.9556);
	    case 2: SetPlayerPosition(playerid, 291.3683, 1918.2693, 17.6265 + 1, 275.6602);
	    case 3: SetPlayerPosition(playerid, 236.5930, 1918.7386, 17.6446 + 1, 145.6778);
	}
	SetPlayerHealth(playerid, 100.0);
	
	ShowPlayerDMTextdraws(playerid);
	
	GivePlayerWeapon(playerid, 3, 1);
	GivePlayerWeapon(playerid, 24, 9999999);
	GivePlayerWeapon(playerid, 25, 9999999);
	GivePlayerWeapon(playerid, 28, 9999999);
	GivePlayerWeapon(playerid, 30, 9999999);
	GivePlayerWeapon(playerid, 33, 9999999);
	GivePlayerWeapon(playerid, 17, 10);
	GivePlayerWeapon(playerid, 10, 1);
	
	Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = WAR;
	
	SetPlayerVirtualWorld(playerid, 5);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
	
	NewMinigameJoin(playerid, "WAR", "war");
	return 1;
}

YCMD:dm(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}

    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
    SetPlayerHealth(playerid, 100.0);
	SetPlayerVirtualWorld(playerid, DM_WORLD);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_1;

	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 26, 99999);

	SetPlayerPos(playerid, DM_MAP_1[rand][0], DM_MAP_1[rand][1], DM_MAP_1[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_1[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch", "dm");
	return 1;
}

YCMD:dm2(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
	Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerHealth(playerid, 100.0);
	SetPlayerVirtualWorld(playerid, DM_WORLD+1);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_2;

	GivePlayerWeapon(playerid, 34, 99999);
	GivePlayerWeapon(playerid, 33, 99999);

	SetPlayerPos(playerid, DM_MAP_2[rand][0], DM_MAP_2[rand][1], DM_MAP_2[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_2[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);

	NewMinigameJoin(playerid, "Deathmatch 2", "dm2");
	return 1;
}

YCMD:dm3(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
    SetPlayerHealth(playerid, 100.0);
	SetPlayerVirtualWorld(playerid, DM_WORLD+2);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_3;

	GivePlayerWeapon(playerid, 16, 99999);
	GivePlayerWeapon(playerid, 9, 99999);

	SetPlayerPos(playerid, DM_MAP_3[rand][0], DM_MAP_3[rand][1], DM_MAP_3[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_3[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch 3", "dm3");
	return 1;
}

YCMD:dm4(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == DM && gLastMap[playerid] == DM_1) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerHealth(playerid, 100.0);
	SetPlayerVirtualWorld(playerid, DM_WORLD+3);
	ResetPlayerWeapons(playerid);
	ShowPlayerDMTextdraws(playerid);
	new rand = random(2);
	gTeam[playerid] = DM;
	gLastMap[playerid] = DM_4;

	GivePlayerWeapon(playerid, 31, 99999);
	GivePlayerWeapon(playerid, 27, 99999);
	GivePlayerWeapon(playerid, 37, 99999);

	SetPlayerPos(playerid, DM_MAP_4[rand][0], DM_MAP_4[rand][1], DM_MAP_4[rand][2]+2);
	SetPlayerFacingAngle(playerid, DM_MAP_4[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	
	NewMinigameJoin(playerid, "Deathmatch 4", "dm4");
	return 1;
}

YCMD:textdraws(playerid, params[], help)
{
	if(PlayerInfo[playerid][bFooterEnabled])
	{
	    Command_ReProcess(playerid, "/hidef", false);
	}
	else Command_ReProcess(playerid, "/showf", false);
	return 1;
}

YCMD:hidef(playerid, params[], help)
{
    PlayerInfo[playerid][bFooterEnabled] = false;
	TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    TextDrawHideForPlayer(playerid, TXTFooter);
    TextDrawHideForPlayer(playerid, TXTFooterBlack);
    TextDrawHideForPlayer(playerid, TXTRandomInfo);
    TextDrawHideForPlayer(playerid, TXTVersionInfo);
    TextDrawHideForPlayer(playerid, TXTGodTD);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
	return 1;
}

YCMD:showf(playerid, params[], help)
{
    PlayerInfo[playerid][bFooterEnabled] = true;
	TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTFooter);
	TextDrawShowForPlayer(playerid, TXTFooterBlack);
    TextDrawShowForPlayer(playerid, TXTRandomInfo);
    TextDrawShowForPlayer(playerid, TXTVersionInfo);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
	if(PlayerInfo[playerid][bGod]) TextDrawShowForPlayer(playerid, TXTGodTD);
	return 1;
}

YCMD:flip(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, ""er"You must be a driver in a vehicle to flip it!");
	new currentveh, Float:angle;
  	currentveh = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(currentveh, angle);
	SetVehicleZAngle(currentveh, angle);
	SCM(playerid, NEF_YELLOW, "You can also press '2' to flip you vehicle");
	return 1;
}

YCMD:s(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't save your position now");
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), PlayerInfo[playerid][sX], PlayerInfo[playerid][sY], PlayerInfo[playerid][sZ]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), PlayerInfo[playerid][sA]);
	}
	else
	{
	   GetPlayerPos(playerid, PlayerInfo[playerid][sX], PlayerInfo[playerid][sY], PlayerInfo[playerid][sZ]);
	   GetPlayerFacingAngle(playerid, PlayerInfo[playerid][sA]);
	}
	PlayerInfo[playerid][SavedPos] = true;
	PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
	SCM(playerid, -1, ""vgreen"Position saved! Load Position with "white"/l");
	return 1;
}

YCMD:l(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't load your position now");
	if(!PlayerInfo[playerid][SavedPos])
	{
		SCM(playerid, -1, ""er"No position saved. Use /s first.");
		return 1;
	}
	
	SetPlayerInterior(playerid, 0);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), PlayerInfo[playerid][sX], PlayerInfo[playerid][sY], PlayerInfo[playerid][sZ]+0.2);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), PlayerInfo[playerid][sA]);
	}
	else
	{
  		SetPlayerPos(playerid, PlayerInfo[playerid][sX], PlayerInfo[playerid][sY], PlayerInfo[playerid][sZ]+2);
		SetPlayerFacingAngle(playerid, PlayerInfo[playerid][sA]);
	}
	
	SCM(playerid, -1, ""vgreen"Saved position loaded");
	PlayerPlaySound(playerid, 1057,0.0,0.0,0.0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

YCMD:tele(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
 	ShowDialog(playerid, TELE_DIALOG);
	return 1;
}

YCMD:parch(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
 	GivePlayerWeapon(playerid, 46, 1);
	return 1;
}

YCMD:colors(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}

	new r, g, b;
	if(sscanf(params, "iii", r, g, b) || !(0 <= r <= 255) || !(0 <= g <= 255) || !(0 <= b <= 255))
	{
		SCM(playerid, -1, ""nef" You can also set your own color using RGB values. /color <0-255> <0-255> <0-255>");
		SCM(playerid, -1, ""nef" Quick color change: /blue /orange /red /yellow /grey /pink /green - /random for a random color");
		ShowPlayerDialog(playerid, COLOR_DIALOG, DIALOG_STYLE_LIST, ""nef" - Colors", ""RED_E"Red\n"BLUE_E"Blue\n"WHITE_E"White\n{FFFF82}Ivory\n"PINK_E"Pink\n"YELLOW_E"Yellow\n"GREEN_E"Green\n"LB_E"Lightblue\n"GREY_E"Grey\n"ORANGE_E"Orange\n"purple"Purple\n"LG_E"Light Green\n{B0C4DE}Steelblue", "Select", "Exit");
	}
	else
	{
		if(r < 30 || g < 30 || b < 30)
		{
   			return SCM(playerid, -1, ""er"Color too dark! RGB values under 30 are not allowed!");
		}
		new col = RGBA(r, g, b, 99);
		SetPlayerColor(playerid, col);

		format(gstr, sizeof(gstr), ""nef" Your nickname color has been changed to %i-%i-%i in RGB", r, g, b);
		SCM(playerid, col, gstr);
	}
	return 1;
}

YCMD:random(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	new rand = random(sizeof(PlayerColors));
	SetPlayerColor(playerid, PlayerColors[rand]);
	format(gstr, sizeof(gstr), "Color set! Your new color: {%06x}Color", GetColor__(playerid) >>> 8);
	SCM(playerid, BLUE, gstr);
	return 1;
}

YCMD:red(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, RED);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:yellow(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, YELLOW);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:grey(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, GREY);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:pink(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, PINK);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:blue(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, BLUE);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:green(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, GREEN);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:white(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, WHITE);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:orange(playerid, params[], help)
{
	if(gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2 || gTeam[playerid] == gBG_VOTING || gTeam[playerid] == CNR)
	{
	    return SCM(playerid, -1, ""er"You can't use this command while being in TDM or CNR!");
	}
	SetPlayerColor(playerid, NEF_YELLOW);
	SCM(playerid, BLUE, "Color set!");
	return 1;
}

YCMD:fs(playerid, params[], help)
{
	SCM(playerid, BLUE, "Fight Styles: /boxing /kungfu /kneehead /grabkick /elbow /normal");
	return 1;
}

YCMD:fightsytles(playerid, params[], help)
{
	SCM(playerid, BLUE, "Fight Styles: /boxing /kungfu /kneehead /grabkick /elbow /normal");
	return 1;
}

YCMD:normal(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	SCM(playerid, BLUE, "You have changed your fighting style to normal!");
	return 1;
}

YCMD:boxing(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	SCM(playerid, BLUE, "You have changed your fighting style to boxing!");
	return 1;
}

YCMD:kungfu(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	SCM(playerid, BLUE, "You have changed your fighting style to kungfu!");
	return 1;
}

YCMD:kneehead(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	SCM(playerid, BLUE, "You have changed your fighting style to kneehead!");
	return 1;
}

YCMD:grabkick(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	SCM(playerid, BLUE, "You have changed your fighting style to grabkick");
	return 1;
}

YCMD:elbow(playerid, params[], help)
{
	SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	SCM(playerid, BLUE, "You have changed your fighting style to elbow");
	return 1;
}

YCMD:sb(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerInfo[playerid][SpeedBoost])
    {
     	SCM(playerid, YELLOW, "SpeedBoost has been disabled!");
	}
	else
	{
	    SCM(playerid, YELLOW, "SpeedBoost has been enabled!");
	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][SpeedBoost] = !PlayerInfo[playerid][SpeedBoost];
	return 1;
}

YCMD:sj(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerInfo[playerid][SuperJump])
    {
     	SCM(playerid, YELLOW, "SuperJump has been disabled!");
	}
	else
	{
	    SCM(playerid, YELLOW, "SuperJump has been enabled!");
	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][SuperJump] = !PlayerInfo[playerid][SuperJump];
	return 1;
}

YCMD:enter(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	new i = -1;
	if((i = GetNearestHouse(playerid)) != -1)
	{
	    if(HouseInfo[i][locked])
		{
			return SCM(playerid, -1, ""er"This house is locked");
		}
		
	    SetPlayerInterior(playerid, HouseIntTypes[HouseInfo[i][interior]][interior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[i][iID] + 1000);
  		SetPlayerPos(playerid, HouseIntTypes[HouseInfo[i][interior]][house_x], HouseIntTypes[HouseInfo[i][interior]][house_y], HouseIntTypes[HouseInfo[i][interior]][house_z]);
		gTeam[playerid] = HOUSE;
		SendInfo(playerid, "~g~~h~~h~House entered!~n~Type /exit to leave", 3000);
		SCM(playerid, -1, ""er"Type /exit to leave the house");
	}
	else
	{
	    SCM(playerid, -1, ""er"You aren't near if any house");
	}
	return 1;
}

YCMD:sellgc(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
	if(PlayerInfo[playerid][Credits] <= 0) return SCM(playerid, -1, ""er"You don't own any GC!");

	new player, gc, money;
	if(sscanf(params, "rii", player, gc, money))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /sellgc <playerid> <gc amount> <money>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(money < 1 || money > 1000000000)
	{
	    return SCM(playerid, -1, ""er"$1 - $1,000,000,000!");
	}
	
	if(gc < 1 || gc > 10000000)
	{
	    return SCM(playerid, -1, ""er"$1 - $10,000,000!");
	}
	
	if(gc > PlayerInfo[playerid][Credits]) return SCM(playerid, -1, ""er"You don't have that much GC.");

	if(IsPlayerAvail(player) && player != playerid)
	{
	    if(PlayerInfo[player][Credits] >= 10000000) return SCM(playerid, -1, ""er"This player reached the max gc limit of 10kk.");

	    PlayerInfo[player][GCPlayer] = playerid;
	    PlayerInfo[player][GCOffer] = gc;
	    PlayerInfo[player][GCPrice] = money;
	    PlayerInfo[player][GCNameHash] = YHash(__GetName(playerid), false);

	    format(gstr, sizeof(gstr), ""blue"You have offered %s(%i) your %sGC for $%s", __GetName(player), player, ToCurrency(gc), ToCurrency(money));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) is offering you their %sGC for $%s, type /buygc to accept", __GetName(playerid), playerid, ToCurrency(gc), ToCurrency(money));
	    SCM(player, -1, gstr);

		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(player, 1057, 0.0, 0.0, 0.0);
	}
	else
	{
		SCM(playerid, -1, ""er"That player is not available or yourself");
	}
	return 1;
}

YCMD:buygc(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(PlayerInfo[playerid][GCPlayer] == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"No one has offered you GC yet.");
    if(PlayerInfo[playerid][Credits] >= 10000000) return SCM(playerid, -1, ""er"You have reached the max gc limit of 10kk.");

	if(IsPlayerAvail(PlayerInfo[playerid][GCPlayer]) && PlayerInfo[PlayerInfo[playerid][GCPlayer]][Credits] >= PlayerInfo[playerid][GCOffer] && PlayerInfo[playerid][GCNameHash] == YHash(__GetName(PlayerInfo[playerid][GCPlayer]), false))
	{
		if(GetPlayerCash(playerid) < PlayerInfo[playerid][GCPrice]) return SCM(playerid, -1, ""er"You do not have enough money!");

		GivePlayerCash(PlayerInfo[playerid][GCPlayer], PlayerInfo[playerid][GCPrice]);
		GivePlayerCash(playerid, -PlayerInfo[playerid][GCPrice]);

        AlterPlayerCredits(playerid, PlayerInfo[playerid][GCOffer]);
        AlterPlayerCredits(PlayerInfo[playerid][GCPlayer], -PlayerInfo[playerid][GCOffer]);

		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(PlayerInfo[playerid][GCPlayer], 1057, 0.0, 0.0, 0.0);

		MySQL_SavePlayer(playerid, false);
		MySQL_SavePlayer(PlayerInfo[playerid][GCPlayer], false);

	    format(gstr, sizeof(gstr), ""blue"You have accepted %s´s offer and bough %sGC for $%s", __GetName(PlayerInfo[playerid][GCPlayer]), ToCurrency(PlayerInfo[playerid][GCOffer]), ToCurrency(PlayerInfo[playerid][GCPrice]));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) has accepted your offer. You sold %sGC for $%s", __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][GCOffer]), ToCurrency(PlayerInfo[playerid][GCPrice]));
	    SCM(PlayerInfo[playerid][GCPlayer], -1, gstr);
        print(gstr);

	    format(gstr, sizeof(gstr), ""orange"[NEF] %s(%i) has sold their %sGC to %s(%i) for $%s", __GetName(PlayerInfo[playerid][GCPlayer]), PlayerInfo[playerid][GCPlayer], ToCurrency(PlayerInfo[playerid][GCOffer]), __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][GCPrice]));
	    SCMToAll(-1, gstr);
	    print(gstr);

		format(gstr, sizeof(gstr), "3,1GC:4 %s(%i) has sold their %sGC to %s(%i) for $%s", __GetName(PlayerInfo[playerid][GCPlayer]), PlayerInfo[playerid][GCPlayer], ToCurrency(PlayerInfo[playerid][GCOffer]), __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][GCPrice]));
		IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);

	    PlayerInfo[playerid][GCPlayer] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][GCOffer] = 0;
	    PlayerInfo[playerid][GCPrice] = 0;
	    PlayerInfo[playerid][GCNameHash] = 0;
	}
	else
	{
		SCM(playerid, -1, ""er"This player has either gone offline or does not have the offered GC anymore.");
	}
	return 1;
}

YCMD:ad(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, ""er"You need $10,000 to make an advertisment");
    
	new ad[144];
	if(sscanf(params, "s[140]", ad))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /ad <text>");
	}

	if(strlen(ad) <= 2 || strlen(ad) > 120) return SCM(playerid, -1, ""er"Invalid text length");
	if(IsAd(ad)) return SCM(playerid, -1, ""er"You may not post server ips");

	GivePlayerCash(playerid, -10000);
	
	for(new i = 1; i < MAX_ADS - 1; i++)
	{
		Adverts[i] = Adverts[i + 1];
	}
	
	Adverts[MAX_ADS - 1] = ad;
	format(gstr, sizeof(gstr), ""nef_green"Advert: %s", ad);
	SCMToAll(-1, gstr);
	print(gstr);
	format(gstr, sizeof(gstr), ""nef_green"Advert by %s(%i), contact ID: /pm %i", __GetName(playerid), playerid, playerid);
    SCMToAll(-1, gstr);
    print(gstr);
	format(gstr, sizeof(gstr), "3,1ADS:4 Advert: %s", ad);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
	format(gstr, sizeof(gstr), "3,1ADS:4 Advert by %s(%i), contact ID: /pm %i", __GetName(playerid), playerid, playerid);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
	return 1;
}

YCMD:ads(playerid, params[], help)
{
    new ReportCount, ass[1024];
	for(new i = 1; i < MAX_ADS; i++)
	{
		if(strcmp(Adverts[i], "<none>", true) != 0)
		{
			ReportCount++;
			strcat(ass, Adverts[i]);
			strcat(ass, "\n");
		}
	}

	if(ReportCount == 0)
	{
		SCM(playerid, WHITE, "There have been no adverts");
	}
	else ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_LIST, "Last Adverts (/ad <text>)", ass, "Close", "");
	return 1;
}

YCMD:sellvip(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
	if(PlayerInfo[playerid][VIP] == 0) return SCM(playerid, -1, ""er"You don't own VIP!");
	
	new player, money;
	if(sscanf(params, "ri", player, money))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /sellvip <playerid> <money>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(money < 1 || money > 1000000000)
	{
	    return SCM(playerid, -1, ""er"$1 - $1,000,000,000!");
	}

	if(IsPlayerAvail(player) && player != playerid)
	{
	    if(PlayerInfo[player][VIP] == 1) return SCM(playerid, -1, ""er"This player already owns VIP!");
	    
	    PlayerInfo[player][VIPPlayer] = playerid;
	    PlayerInfo[player][VIPOffer] = money;
	    PlayerInfo[player][VIPNameHash] = YHash(__GetName(playerid), false);
	    
	    format(gstr, sizeof(gstr), ""blue"You have offered %s(%i) your V.I.P status for $%s", __GetName(player), player, ToCurrency(money));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) is offering you their V.I.P status for $%s, type /buyvip to accept", __GetName(playerid), playerid, ToCurrency(money));
	    SCM(player, -1, gstr);
	    SCM(player, -1, ""red"PLEASE NOTE: "blue"You won't receive $1,000,000 nor the bizz/vehicle slots when buying VIP from a player");
	    
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(player, 1057, 0.0, 0.0, 0.0);
	}
	else
	{
		SCM(playerid, -1, ""er"That player is not available or yourself");
	}
	return 1;
}

YCMD:buyvip(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
	if(PlayerInfo[playerid][VIPPlayer] == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"No one has offered you VIP yet.");
    if(PlayerInfo[playerid][VIP] == 1) return SCM(playerid, -1, ""er"You already have VIP status.");

	if(IsPlayerAvail(PlayerInfo[playerid][VIPPlayer]) && PlayerInfo[PlayerInfo[playerid][VIPPlayer]][VIP] == 1 && PlayerInfo[playerid][VIPNameHash] == YHash(__GetName(PlayerInfo[playerid][VIPPlayer]), false))
	{
		if(GetPlayerCash(playerid) < PlayerInfo[playerid][VIPOffer]) return SCM(playerid, -1, ""er"You do not have enough money!");

		GivePlayerCash(PlayerInfo[playerid][VIPPlayer], PlayerInfo[playerid][VIPOffer]);
		GivePlayerCash(playerid, -PlayerInfo[playerid][VIPOffer]);

		PlayerInfo[playerid][VIP] = 1;
		PlayerInfo[PlayerInfo[playerid][VIPPlayer]][VIP] = 0;

		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		PlayerPlaySound(PlayerInfo[playerid][VIPPlayer], 1057, 0.0, 0.0, 0.0);

		MySQL_SavePlayer(playerid, false);
		MySQL_SavePlayer(PlayerInfo[playerid][VIPPlayer], false);

	    format(gstr, sizeof(gstr), ""blue"You have accepted %s´s offer and bough VIP for $%s", __GetName(PlayerInfo[playerid][VIPPlayer]), ToCurrency(PlayerInfo[playerid][VIPOffer]));
	    SCM(playerid, -1, gstr);
	    format(gstr, sizeof(gstr), ""blue"%s(%i) has accepted your offer. You sold your VIP for $%s", __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][VIPOffer]));
	    SCM(PlayerInfo[playerid][VIPPlayer], -1, gstr);
		print(gstr);
		
	    format(gstr, sizeof(gstr), ""orange"[NEF] %s(%i) has sold his VIP stauts to %s(%i) for $%s", __GetName(PlayerInfo[playerid][VIPPlayer]), PlayerInfo[playerid][VIPPlayer], __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][VIPOffer]));
	    SCMToAll(-1, gstr);
	    print(gstr);
	    
  		format(gstr, sizeof(gstr), "3,1GC:4 %s(%i) has sold his VIP stauts to %s(%i) for $%s", __GetName(PlayerInfo[playerid][VIPPlayer]), PlayerInfo[playerid][VIPPlayer], __GetName(playerid), playerid, ToCurrency(PlayerInfo[playerid][VIPOffer]));
		IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
	    
	    PlayerInfo[playerid][VIPPlayer] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][VIPOffer] = 0;
	    PlayerInfo[playerid][VIPNameHash] = 0;
	}
	else
	{
		SCM(playerid, -1, ""er"This player has either gone offline or does not own VIP stauts.");
	}
	return 1;
}

YCMD:bbuy(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);

	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastPBuy] + COOLDOWN_CMD_PBUY) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}
	}

	new bool:found = false;
	for(new i = 0; i < propid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z])) continue;
	    found = true;

	    if(PropInfo[i][sold])
		{
			SCM(playerid, -1, ""er"Business is not for sale");
			break;
		}
		if(PlayerInfo[playerid][Props] > PlayerInfo[playerid][AdditionalPropSlots])
		{
			SCM(playerid, -1, ""er"You have no free business slot!");
			break;
		}
	    if(GetPlayerScore_(playerid) < 1000)
		{
			SCM(playerid, -1, ""er"You need at least 1000 score to start a business!");
			break;
		}
		if(GetPlayerCash(playerid) < 1000000)
		{
			SCM(playerid, -1, ""er"You need at least $1,000,000 to start a business!");
			break;
		}
		strmid(PropInfo[i][Owner], __GetName(playerid), 0, 25, 25);
	    PropInfo[i][sold] = 1;
	    
	    format(gstr, sizeof(gstr), ""business_mark"\nOwner: %s\nID: %i\nLevel: %i", __GetName(playerid), PropInfo[i][iID], PropInfo[i][E_Level]);
	    UpdateDynamic3DTextLabelText(PropInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(PropInfo[i][iconid]);
	    PropInfo[i][iconid] = CreateDynamicMapIcon(PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z], 36, 1, 0, -1, -1, 150.0);
	    PropInfo[i][date] = gettime();
	    PlayerInfo[playerid][Props]++;
	    SendInfo(playerid, "~g~~h~~h~Business purchased!", 3500);
	    MySQL_SaveProp(i);
	    MySQL_SavePlayer(playerid, false);
	    PlayerInfo[playerid][tickLastPBuy] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) bought the business %i!", __GetName(playerid), playerid, PropInfo[i][iID]);
	    SCMToAll(-1, gstr);
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"Business bought!", ""white"You can now use these commands:\n\n"dl"/bmenu\n"dl"/bsell", "OK", "");
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

YCMD:buy(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastBuy] + COOLDOWN_CMD_BUY) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}
	}
	
	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;
        found = true;

	    if(HouseInfo[i][sold])
		{
			SCM(playerid, -1, ""er"House is not buyable");
			break;
		}
		if(PlayerInfo[playerid][Houses] > PlayerInfo[playerid][AdditionalHouseSlots])
		{
			SCM(playerid, -1, ""er"You have no free house slot!");
			break;
		}
	    if(GetPlayerScore_(playerid) < HouseInfo[i][E_score])
		{
			SCM(playerid, -1, ""er"You need more score for this House!");
			break;
		}
		if(GetPlayerCash(playerid) < HouseInfo[i][price])
		{
			SCM(playerid, -1, ""er"You need more money to buy this House!");
			break;
		}

		strmid(HouseInfo[i][Owner], __GetName(playerid), 0, 25, 25);
	    HouseInfo[i][sold] = 1;

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(HouseInfo[i][iconid]);
	    DestroyDynamicPickup(HouseInfo[i][pickid]);
	    HouseInfo[i][iconid] = CreateDynamicMapIcon(HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], 32, 1, 0, -1, -1, 150.0);
	    HouseInfo[i][pickid] = CreateDynamicPickup(1272, 1, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], -1, -1, -1, 30.0);
	    GivePlayerCash(playerid, -HouseInfo[i][price]);
	    HouseInfo[i][date] = gettime();
	    PlayerInfo[playerid][Houses]++;
	    SendInfo(playerid, "~g~~h~~h~House bought!", 3500);
	    MySQL_SaveHouse(i);
	    MySQL_SavePlayer(playerid, false);
	    PlayerInfo[playerid][tickLastBuy] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) bought the house %i for $%s!", __GetName(playerid), playerid, HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]));
	    SCMToAll(-1, gstr);
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"House bought!", ""white"You can now use these commands:\n\n"dl"/hmenu\n"dl"/lock\n"dl"/enter\n"dl"/exit\n"dl"/sell\n\nCustomize your house´s interior by using /hmenu", "OK", "");
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any house");
	return 1;
}

YCMD:bsell(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastPSell] + COOLDOWN_CMD_PSELL) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}
	}

	new bool:found = false;
	for(new i = 0; i < propid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z])) continue;
	    found = true;

	    if(!PropInfo[i][sold])
		{
			SCM(playerid, -1, ""er"Business can´t be sold!");
			break;
		}
		if(strcmp(PropInfo[i][Owner], __GetName(playerid), true))
		{
			SCM(playerid, -1, ""er"You don´t own this Business!");
			break;
		}
	    strmid(PropInfo[i][Owner], "ForSale", 0, 25, 25);
	    PropInfo[i][sold] = 0;
        PropInfo[i][E_Level] = 1;
        
	    format(gstr, sizeof(gstr), ""business_mark"\nOwner: ---\nID: %i\nLevel: %i", PropInfo[i][iID], PropInfo[i][E_Level]);
	    UpdateDynamic3DTextLabelText(PropInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(PropInfo[i][iconid]);
	    PropInfo[i][iconid] = CreateDynamicMapIcon(PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z], 52, 1, 0, -1, -1, 150.0);
	    PlayerInfo[playerid][Props]--;
	    PropInfo[i][date] = 0;
	    SendInfo(playerid, "~g~~h~~h~Business sold!", 3500);
	    MySQL_SaveProp(i);
	    MySQL_SavePlayer(playerid, false);
	    PlayerInfo[playerid][tickLastPSell] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) sold the business %i!", __GetName(playerid), playerid, PropInfo[i][iID]);
	    SCMToAll(-1, gstr);
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any business");
	return 1;
}

YCMD:sell(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastSell] + COOLDOWN_CMD_SELL) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}
	}
	
    new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;
	    found = true;

	    if(!HouseInfo[i][sold])
		{
			SCM(playerid, -1, ""er"House cannot be sold!");
			break;
		}
	    if(strcmp(HouseInfo[i][Owner], __GetName(playerid), true))
		{
			SCM(playerid, -1, ""er"You don´t own this house!");
			break;
		}
	    strmid(HouseInfo[i][Owner], "ForSale", 0, 25, 25);
	    HouseInfo[i][sold] = 0;
	    HouseInfo[i][locked] = 1;

		for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
		{
			if(HouseInfo[i][E_Obj_Model][ii] != 0)
			{
			    DestroyDynamicObject(HouseInfo[i][E_Obj_ObjectID][ii]);
			    DestroyDynamic3DTextLabel(HouseInfo[i][E_Obj_Label][ii]);
			    HouseInfo[i][E_Obj_Label][ii] = Text3D:-1;
			    HouseInfo[i][E_Obj_ObjectID][ii] = -1;
			    HouseInfo[i][E_Obj_Model][ii] = 0;
			}
		}

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(HouseInfo[i][iconid]);
	    DestroyDynamicPickup(HouseInfo[i][pickid]);
	    HouseInfo[i][iconid] = CreateDynamicMapIcon(HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], 31, 1, 0, -1, -1, 150.0);
	    HouseInfo[i][pickid] = CreateDynamicPickup(1273, 1, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], -1, -1, -1, 30.0);
	    PlayerInfo[playerid][Houses]--;
	    HouseInfo[i][date] = 0;
	    GivePlayerCash(playerid, floatround(HouseInfo[i][price] / 4));
	    SendInfo(playerid, "~g~~h~~h~House sold!", 3500);
	    MySQL_SaveHouse(i, true);
	    MySQL_SavePlayer(playerid, false);
	    PlayerInfo[playerid][tickLastSell] = tick;
	    PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    format(gstr, sizeof(gstr), ""nef" "yellow_e"%s(%i) sold the house %i for $%s!", __GetName(playerid), playerid, HouseInfo[i][iID], ToCurrency(floatround(HouseInfo[i][price] / 4)));
	    SCMToAll(-1, gstr);
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any house");
	return 1;
}

YCMD:unlock(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] == NORMAL)
    {
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(PVSelect[playerid] != -1)
		    {
			    if(GetPlayerVehicleID(playerid) == PlayerPV[playerid][PVSelect[playerid]][PVehicleID])
			    {
	      			for(new i = 0; i < MAX_PLAYERS; i++)
				    {
				        if(i == playerid) continue;
				        SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 0);
				        PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
				    }
				    return SendInfo(playerid, "~r~~h~~h~Unlocked!", 2000);
			    }
			    else SCM(playerid, -1, ""er"You are not in your private vehicle");
			}
			else SCM(playerid, -1, ""er"You are not in your private vehicle");
		}
    }
    else
	{
		SCM(playerid, -1, NOT_AVAIL);
	}
    return 1;
}

YCMD:lock(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] == NORMAL)
    {
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(PVSelect[playerid] != -1)
		    {
			    if(GetPlayerVehicleID(playerid) == PlayerPV[playerid][PVSelect[playerid]][PVehicleID])
			    {
	      			for(new i = 0; i < MAX_PLAYERS; i++)
				    {
				        if(i == playerid) continue;
				        SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 1);
				        PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
				    }
				    return SendInfo(playerid, "~g~~h~~h~Locked!", 2000);
			    }
			}
		}
    }

	if(gTeam[playerid] == NORMAL || gTeam[playerid] == HOUSE)
	{
		new tick = GetTickCount() + 3600000;

		if((PlayerInfo[playerid][tickLastLocked] + COOLDOWN_CMD_LOCK) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}

	    new bool:found = false;
		for(new i = 0; i < houseid; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z]))
			{
				found = true;
				if(strcmp(HouseInfo[i][Owner], __GetName(playerid), true))
				{
					SCM(playerid, -1, ""er"This isn´t your House!");
					break;
				}
				if(!HouseInfo[i][locked])
				{
					GameTextForPlayer(playerid, "~b~House ~r~locked", 2000, 3);
				}
				else GameTextForPlayer(playerid, "~b~House ~g~unlocked", 2000, 3);

	   			HouseInfo[i][locked] = (HouseInfo[i][locked]) ? (0) : (1);
	            PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
	            MySQL_SaveHouse(i);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 100.0, HouseIntTypes[HouseInfo[i][interior]][house_x], HouseIntTypes[HouseInfo[i][interior]][house_y], HouseIntTypes[HouseInfo[i][interior]][house_z]) && GetPlayerInterior(playerid) == HouseIntTypes[HouseInfo[i][interior]][interior] && GetPlayerVirtualWorld(playerid) == (HouseInfo[i][iID] + 1000))
			{
				found = true;
				if(strcmp(HouseInfo[i][Owner], __GetName(playerid), true))
				{
					SCM(playerid, -1, ""er"This isn´t your House!");
					break;
				}
				if(!HouseInfo[i][locked])
				{
					GameTextForPlayer(playerid, "~b~House ~r~locked", 2000, 3);
				}
				else GameTextForPlayer(playerid, "~b~House ~g~unlocked", 2000, 3);

	            HouseInfo[i][locked] = (HouseInfo[i][locked]) ? (0) : (1);
	            PlayerPlaySound(playerid, 1027, 0.0, 0.0, 0.0);
	            MySQL_SaveHouse(i);
			}
			else continue;
		}
		PlayerInfo[playerid][tickLastLocked] = tick;
		if(!found) SCM(playerid, -1, ""er"You aren´t near of any house!");
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:gungame(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == GUNGAME) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	GunGamePlayers++;
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1338);

	GunGame_Player[playerid][level] = 0;
	GunGame_Player[playerid][dead] = true;
	GunGame_Player[playerid][pw] = true;

	gTeam[playerid] = GUNGAME;

	new rand = random(9);
	ResetPlayerWeapons(playerid);

	SetPlayerPosEx(playerid, GunGame_Spawns[rand][0], GunGame_Spawns[rand][1], floatadd(GunGame_Spawns[rand][2], 2.5));
	SetPlayerFacingAngle(playerid, GunGame_Spawns[rand][3]);
	SetCameraBehindPlayer(playerid);

	LoadMap(playerid);

	GivePlayerWeapon(playerid, 4, 1);
	GivePlayerWeapon(playerid, GunGame_Weapons[GunGame_Player[playerid][level]], 65535);

	GunGame_Player[playerid][dead] = false;
	GunGame_Player[playerid][pw] = true;

	if(GunGamePlayers >= 16) SetPlayerHealth(playerid, 100.0);
	else SetPlayerHealth(playerid, ((20) + (5 * GunGamePlayers)));

	ShowPlayerGunGameTextdraws(playerid);

	NewMinigameJoin(playerid, "Gungame", "gungame");
	return 1;
}

YCMD:cnr(playerid, params[], help)
{
    if(gTeam[playerid] == CNR) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);
	
	ShowPlayerDialog(playerid, CNR_DIALOG, DIALOG_STYLE_LIST, ""YELLOW_E"Choose your side", ""LB_E"Cops\t\t"GREY_E"LVPD\n"ORANGE_E"Robbers\t"GREY_E"LV Mafia\n"RED_E"Pro Robbers\t"GREY_E"Mafia Commanders\n"PURPLE_E"Army\t\t"GREY_E"Army Task Force\n"BLUE_E"Swat\t\t"GREY_E"LVPD Commanders", "Select", "Cancel");
	return 1;
}

YCMD:cnrhelp(playerid, params[], help)
{
	new line3[600];
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		strcat(line3, ""LB2_E"You have joined the Las Venturas Police Department!\n\n"BLUE_E"Cop Help:\n"WHITE_E"Your mission is to protect the streets of Las Venturas by eliminating any crime.\nSuspects are shown as "ORANGE_E"orange"WHITE_E" on your map radar. The most wanted suspects are shown in darker orange.");
		strcat(line3, "\nType "RED_E"/ar "WHITE_E"to arrest any criminal nearby, you and the suspect must be on foot.\nYou get more score and money by arresting rather than takedowns.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\n\nType /cnrhelp to open this box up at anytime, Good luck soilders!");
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""BLUE_E"Cop Help", line3, "OK", "");
 	}
 	else if(GetPVarInt(playerid, "Robber") == 1)
	{
		strcat(line3, ""ORANGE_E"You have joined the Las Venturas Mafia!\n\n"BLUE_E"Criminal Help:\n"WHITE_E"Your job is to cause mayam in the streets of Las Venturas\nYou must do your best to evade any cops whila your at it.\nThe cops are marked as "LB_E"blue"WHITE_E" on your map radar.\nThe elite Swat team is marked as "BLUE_E"darkblue on your map radar.\n");
		strcat(line3, "\nYou can enter some shops and "RED_E"/rob "WHITE_E"the store for cash.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\n\nType /cnrhelp to open this box up at anytime, Good luck boys!");
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""RED_E"Criminal Help", line3, "OK", "");
	}
	else SCM(playerid, COLOR_BLUE, ""nef" "YELLOW_E"You must be in a /cnr minigame to use this command!");
	return 1;
}

YCMD:tdm(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}
	
    if(gTeam[playerid] == gBG_VOTING || gTeam[playerid] == gBG_TEAM1 || gTeam[playerid] == gBG_TEAM2) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);
	
    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	SetPlayerVirtualWorld(playerid, BG_WORLD);
	SetPlayerInterior(playerid, 0);
	ResetPlayerWeapons(playerid);

	if(CurrentBGMap == BG_VOTING)
	{
	    SetPlayerBGStaticMeshes(playerid);
		gTeam[playerid] = gBG_VOTING;
		ShowDialog(playerid, BGVOTING_DIALOG);
		ShowPlayerBGTextdraws(playerid);
	}
	else if(CurrentBGMap == BG_MAP1)
	{
		ShowPlayerBGTextdraws(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP1, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP1, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP1, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP2)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP2, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP2, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP2, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP3)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP3, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP3, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP3, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP4)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP4, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP4, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP4, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	else if(CurrentBGMap == BG_MAP5)
	{
	    SetPlayerVirtualWorld(playerid, BG_WORLD);
	    SetPlayerInterior(playerid, 0);

		ShowPlayerBGTextdraws(playerid);
	    ResetPlayerWeapons(playerid);

	    if(BGTeam1Players > BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP5, BG_TEAM2);
	    	BGTeam2Players++;
	    	SetPlayerBGTeam2(playerid);
	    	gTeam[playerid] = gBG_TEAM2;
		}
		else if(BGTeam1Players < BGTeam2Players)
	    {
	    	RandomBGSpawn(playerid, BG_MAP5, BG_TEAM1);
	    	BGTeam1Players++;
	    	SetPlayerBGTeam1(playerid);
	    	gTeam[playerid] = gBG_TEAM1;
		}
		else
		{
		    RandomBGSpawn(playerid, BG_MAP5, BG_TEAM1);
		    BGTeam1Players++;
		    SetPlayerBGTeam1(playerid);
		    gTeam[playerid] = gBG_TEAM1;
		}
	}
	
	NewMinigameJoin(playerid, "TDM", "tdm");
	return 1;
}

YCMD:adminhelp(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    new string[1024];

	    strcat(string, ""yellow_e"Level 1:\n"white"/rplayers /dplayers /asay /warn /slap /reports /spec /specoff /disarm\n/pweaps /getin /gotoxyza /spectators /caps /day /night /dawn\n");
	    strcat(string, "/kick /mute /unmute /adminhq /ncrecords\n\n");
	    strcat(string, ""yellow_e"Level 2:\n"white"/tban /online /offline /onduty /offduty /akill /rv\n/move /ban /ipban /cuff /uncuff /jail /unjail /unfreeze\n\n");
	    strcat(string, ""yellow_e"Level 3:\n"white"/freeze /eject /go /burn /mkick /clearchat\n/giveweapon /announce /connectbots /raceforcemap /deleterecord\n\n");
	    strcat(string, ""yellow_e"Level 4:\n"white"/unban /oban /sethealth /get /getip /healall /armorall /cashfall /scorefall\n/announce2 /iplookup\n\n");
	    strcat(string, ""yellow_e"Level 5:\n"white"/setcash /setbcash /setscore /gdestroy /addcash /addscore\n\n");
	    strcat(string, ""yellow_e"Level 6:\n"white"/resethouse /resetbizz /sethouseprice /sethousescore\n/setbizzlevel /createhouse /createbizz /createstore /gzonecreate");

        ShowPlayerDialog(playerid, ADMIN_CMD_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Admin Commands", string, "OK", "");
	}
  	else
	{
  		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:minigun(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == MINIGUN) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = MINIGUN;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 38, 99999);
   	SetPlayerVirtualWorld(playerid, MINIGUN_WORLD);
	SetPlayerInterior(playerid, 0);

	HidePlayerInfoTextdraws(playerid);

	new rand = random(10);
	SetPlayerPos(playerid, Minigun_Spawns[rand][0], Minigun_Spawns[rand][1], Minigun_Spawns[rand][2]);
	SetPlayerFacingAngle(playerid, Minigun_Spawns[rand][3]);
	
    NewMinigameJoin(playerid, "Minigun", "minigun");
    return 1;
}

YCMD:sniper(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    if(gTeam[playerid] == MINIGUN) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);

    SavePos(playerid);
    CheckPlayerGod(playerid);
    Command_ReProcess(playerid, "/stopanims", false);
	gTeam[playerid] = SNIPER;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 34, 99999);
	SetPlayerVirtualWorld(playerid, SNIPER_WORLD);
	SetPlayerInterior(playerid, 0);

	HidePlayerInfoTextdraws(playerid);

	new rand = random(7);
	SetPlayerPosEx(playerid, Sniper_Spawns[rand][0], Sniper_Spawns[rand][1], Sniper_Spawns[rand][2] + 2.5);
	SetPlayerFacingAngle(playerid, Sniper_Spawns[rand][3]);
    LoadMap(playerid);

	NewMinigameJoin(playerid, "Sniper", "sniper");
   	return 1;
}

YCMD:bounties(playerid, params[], help)
{
	new count = 0;
	SCM(playerid, -1, "================Current bounties=================");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerAvail(i) && PlayerInfo[i][HitmanHit] > 0)
		{
			new string[100];
			format(string, sizeof(string), "- Hit on %s(%i) for $%s", __GetName(i), i, ToCurrency(PlayerInfo[i][HitmanHit]));
			SCM(playerid, GREY, string);
			count++;
		}
	}
	if(count == 0)
	{
		SCM(playerid, GREY, "No bounties at the moment");
	}
	SCM(playerid, -1, "==============================================");
	return 1;
}

YCMD:ff(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	
	new Float:height;
	if(sscanf(params, "f", height))
	{
		new Float:POS[3];
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], 500.0));
	}
	else
	{
	    if(height <= 0) return SCM(playerid, -1, ""er"Height can not be negative or 0");
		new Float:POS[3];
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPos(playerid, POS[0], POS[1], floatadd(POS[2], height));
	}
	return Command_ReProcess(playerid, "/parch", false);
}

YCMD:exit(playerid, params[], help)
{
	if(ExitPlayer(playerid) != 0)
	{
		SCM(playerid, -1, ""er"You can't use this command now!");
	}
	return 1;
}

YCMD:setspawn(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != NORMAL) return SCM(playerid, GREY, NOT_AVAIL);
    if(GetPlayerInterior(playerid) != 0) return SCM(playerid, GREY, ""er"Wrong interior");
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");
    
    GetPlayerPos(playerid, PlayerInfo[playerid][CSpawnX], PlayerInfo[playerid][CSpawnY], PlayerInfo[playerid][CSpawnZ]);
    GetPlayerFacingAngle(playerid, PlayerInfo[playerid][CSpawnA]);
    PlayerInfo[playerid][bHasSpawn] = true;

	SCM(playerid, YELLOW, "You will now spawn here!");
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

YCMD:radio(playerid, params[], help)
{
    ShowDialog(playerid, STREAM_DIALOG);
    return 1;
}

YCMD:streams(playerid, params[], help)
{
    ShowDialog(playerid, STREAM_DIALOG);
    return 1;
}

YCMD:stopstreams(playerid, params[], help)
{
    StopAudioStreamForPlayer(playerid);
    return 1;
}

YCMD:stopstream(playerid, params[], help)
{
    StopAudioStreamForPlayer(playerid);
    return 1;
}

YCMD:hitman(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastHitman] + COOLDOWN_CMD_HITMAN) >= tick) return SCM(playerid, -1, ""er"You have to wait a bit before using it again!");
	
	new amount, player;
	if(sscanf(params, "ri", player, amount))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /hitman <playerid> <amount>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(amount < 5000 || amount > 100000)
	{
	    return SCM(playerid, -1, ""er"$5,000 - $100,000!");
	}

	if(IsPlayerAvail(player) && player != playerid)
	{
		if(GetPlayerCash(playerid) >= amount)
		{
			new zone[MAX_ZONE_NAME];
		    GetPlayer2DZone(player, zone, sizeof(zone));
		    if(PlayerInfo[player][HitmanHit] == 0)
		    {
		        PlayerInfo[player][HitmanHit] += amount;
				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has placed a bounty on %s(%i) for $%s get him!", __GetName(playerid), playerid, __GetName(player), player, ToCurrency(amount));
				SCMToAll(-1, gstr);

				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has been last seen in '%s'", __GetName(player), player, zone);
				SCMToAll(-1, gstr);
				format(gstr, sizeof(gstr), "You´ve placed a bounty on %s(%i) for $%s", __GetName(player), player, ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
		    }
		    else if(PlayerInfo[player][HitmanHit] != 0)
		    {
		        PlayerInfo[player][HitmanHit] += amount;
				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has placed another bounty on %s(%i) for $%s Total: "red"$%s", __GetName(playerid), playerid, __GetName(player), player, ToCurrency(amount), ToCurrency(PlayerInfo[player][HitmanHit]));
				SCMToAll(-1, gstr);

				format(gstr, sizeof(gstr), ""nef" "YELLOW_E"%s(%i) has been last seen in '%s'", __GetName(player), player, zone);
				SCMToAll(-1, gstr);
				format(gstr, sizeof(gstr), "You´ve placed a bounty on %s(%i) for $%s", __GetName(player), player, ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
		    }
			PlayerInfo[playerid][tickLastHitman] = tick;
			GivePlayerCash(playerid, -amount);
		}
		else
		{
			SCM(playerid, -1, ""er"You do not have enough money!");
		}
	}
	else
	{
		SCM(playerid, -1, ""er"That player is not available or yourself");
	}
	return 1;
}

YCMD:akill(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
	    if(sscanf(params, "r", player))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /akill <playerid>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	    if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Can't kill player because he is in a minigame");

 		if(IsPlayerAvail(player))
		{
			format(gstr, sizeof(gstr), "Admin %s(%i) killed you.", __GetName(playerid), playerid);
			SCM(player, YELLOW, gstr);

			SetPlayerHealth(player, 0.0);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:sethealth(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    new player, Float:amount;
	    if(sscanf(params, "rf", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /sethealth <playerid> <health>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
	    if(amount > 100) return SCM(playerid, -1, ""er"Do not set it higher than 100");
	    
 		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your health to %f.", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's health to %f.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your health to %f.", amount);
				SCM(playerid, YELLOW, gstr);
			}
			SetPlayerHealth(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setbcash(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setbcash <playerid> <amount>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 50000000)
		{
			return SCM(playerid, -1, ""er"$0 - $50,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your bank cash to $%s.", __GetName(playerid), playerid, ToCurrency(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's bank cash to $%s.", __GetName(player), ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your bank cash to $%s.", ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given bank $%i by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
			
			PlayerInfo[player][Bank] = amount;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setcash(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setcash <playerid> <amount>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 50000000)
		{
			return SCM(playerid, -1, ""er"$0 - $50,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your cash to $%s.", __GetName(playerid), playerid, ToCurrency(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have set %s's cash to $%s.", __GetName(player), ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your cash to $%s.", ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s's(%i) cash has been set to $%i by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
			
			SetPlayerCash(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:addscore(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /addscore <playerid> <amount>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

    	if(amount < 1 || amount > 100)
		{
			return SCM(playerid, -1, ""er"$1 - 100");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has given you %i score", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have given %s %i score.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have given yourself %i.", amount);
				SCM(playerid, YELLOW, gstr);
			}

			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given %i score by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);

			GivePlayerScore_(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:addcash(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /addcash <playerid> <amount>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

    	if(amount < 1 || amount > 50000000)
		{
			return SCM(playerid, -1, ""er"$1 - $50,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has given you $%s.", __GetName(playerid), playerid, ToCurrency(amount));
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You have given %s $%s.", __GetName(player), ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have given yourself $%s.", ToCurrency(amount));
				SCM(playerid, YELLOW, gstr);
			}

			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given $%s by %s(%i)", __GetName(player), player, ToCurrency(amount), __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);

			GivePlayerCash(player, amount);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:setscore(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    new player, amount;
	    if(sscanf(params, "ri", player, amount))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /setscore <playerid> <score>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
    
    	if(amount < 0 || amount > 1000000)
		{
			return SCM(playerid, -1, ""er"Score: 0 - 1,000,000");
		}

        if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");

		if(IsPlayerAvail(player))
		{
			if(player != playerid)
			{
				format(gstr, sizeof(gstr), "Admin %s(%i) has set your score to %i.", __GetName(playerid), playerid, amount);
				SCM(player, YELLOW, gstr);
				format(gstr, sizeof(gstr), "You set %s's score to %i.", __GetName(player), amount);
				SCM(playerid, YELLOW, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), "You have set your score to %i.", amount);
				SCM(playerid, YELLOW, gstr);
			}
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been given %i Score by %s(%i)", __GetName(player), player, amount, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
			
			SetPlayerScore_(player, amount);
		}
	 	else
	 	{
		 	SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:online(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    SendInfo(playerid, "~g~~h~~h~You will be shown in the list", 2500);
		PlayerInfo[playerid][AOnline] = true;
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:offline(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    SendInfo(playerid, "~r~~h~~h~You won't be shown in the list", 2500);
		PlayerInfo[playerid][AOnline] = false;
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:onduty(playerid, params[], help)
{
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerInfo[playerid][Level] >= 2)
	{
		if(!PlayerInfo[playerid][onduty])
		{
			PlayerInfo[playerid][onduty] = true;
			PlayerInfo[playerid][AdminDutyLabel] = CreateDynamic3DTextLabel("Admin On Duty", ADMIN, 0.0, 0.0, 0.35, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);

	        format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) is now onduty!", __GetName(playerid), playerid);
	        SCMToAll(RED, gstr);
        	SetPlayerHealth(playerid, 99999.0);
		}
		else
		{
			SCM(playerid, -1, ""er"You are already onduty");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:offduty(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
    	if(PlayerInfo[playerid][onduty])
		{
		    PlayerInfo[playerid][onduty] = false;

        	format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) is now offduty!", __GetName(playerid), playerid);
        	SCMToAll(-1, gstr);
        	SetPlayerHealth(playerid, 100.0);
        	RemovePlayerAttachedObject(playerid, 9);
      		if(PlayerInfo[playerid][AdminDutyLabel] != Text3D:-1)
			{
			    DestroyDynamic3DTextLabel(PlayerInfo[playerid][AdminDutyLabel]);
			    PlayerInfo[playerid][AdminDutyLabel] = Text3D:-1;
			}
		}
		else
		{
			SCM(playerid, -1, ""er"You are not onduty");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:eject(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /eject <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerInfo[player][Level] == MAX_ADMIN_LEVEL && PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}

        if(IsPlayerAvail(player) && gTeam[player] == NORMAL)
		{
			if(IsPlayerInAnyVehicle(player))
			{
			    new	Float:POS[3];

				if(player != playerid)
				{
					format(gstr, sizeof(gstr), "Admin %s(%i) has ejected you from your vehicle", __GetName(playerid), playerid);
					SCM(player, YELLOW, gstr);
				}

				format(gstr, sizeof(gstr), "You have ejected %s(%i) from their vehicle", __GetName(player), player);
				SCM(playerid, YELLOW, gstr);
    		   	GetPlayerPos(player, POS[0], POS[1], POS[2]);
    		   	SetPlayerPos(player, POS[0], POS[1], POS[2] + 3);
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not in a vehicle");
			}
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or unavailable");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:burn(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /burn <playerid>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

        if(IsPlayerAvail(player))
		{
			if(PlayerInfo[player][Level] > 0)
			{
				return SCM(playerid, -1, ""er"You cannot use this command on an admin");
			}
		    switch(gTeam[player])
		    {
		        case DERBY, gRACE, BUYCAR, gBG_VOTING, GUNGAME, SPEC, JAIL: return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    }
			if(!DerbyWinner[player] && gTeam[player] == DERBY) return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    
		    new Float:POS[3];

			format(gstr, sizeof(gstr), "You have burnt %s(%i)", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			CreateExplosion(POS[0], POS[1], POS[2] + 3, 1, 10);
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been burnt by %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:getip(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /getip <playerid>");
	  	}

		if(CSGSOFT[playerid]) return SCM(playerid, -1, ""er"Player not connected!");
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerInfo[player][Level] == MAX_ADMIN_LEVEL && PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
        if(IsPlayerAvail(player))
		{
			format(gstr, sizeof(gstr), "%s's ip is %s", __GetName(player), __GetIP(player));
			SCM(playerid, BLUE, gstr);
			
			rdns(__GetIP(player), playerid);
	    }
		else
		{
			SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:iplookup(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    extract params -> new string:ip[144]; else
	    {
			return SCM(playerid, NEF_GREEN, "Usage: /iplookup <ip>");
	    }

		new escape[16];
		mysql_escape_string(ip, escape, g_SQL_handle, sizeof(escape));

	    if(strlen(escape) > 16 || strlen(escape) < 7) return SCM(playerid, -1, ""er"This is not an ip");

	    format(gstr, sizeof(gstr), "SELECT `Name` FROM `accounts` WHERE `IP` = '%s' AND `Level` != 6;", escape);
	    mysql_tquery(g_SQL_handle, gstr, "OnIpLookUp", "is", playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:car(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    
	if(gTeam[playerid] == NORMAL)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	
	    if(IsPlayerInRangeOfPoint(playerid, 65.0, 1797.3141, -1302.0978, 120.2659) && PlayerInfo[playerid][Level] < 1) return SCM(playerid, -1, ""er"Can´t spawn vehicle at this place!");

		CarSpawner(playerid, 415, 120);
	}
	else
	{
   		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:locate(playerid, params[], help)
{
    new player;
 	if(sscanf(params, "r", player))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /locate <playerid>");
  	}
  	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(IsPlayerAvail(player))
	{
        if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Player is a minigame!");

		new zone[MAX_ZONE_NAME];
	    GetPlayer2DZone(player, zone, sizeof(zone));
    	format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has been located in '%s'", __GetName(player), player, zone);
    	SCM(playerid, -1, gstr);
	}
	else
	{
	    SCM(playerid, -1, ""er"Player is not connected");
	}
	return 1;
}

YCMD:id(playerid, params[], help)
{
	if(!strlen(params))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /id <nick/part of nick>");
	}
	
	new found, string[128], playername[MAX_PLAYER_NAME+1];
	format(string, sizeof(string), "Searched for: %s ", params);
	SCM(playerid, GREEN, string);
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerAvail(i))
		{
	  		GetPlayerName(i, playername, MAX_PLAYER_NAME+1);
			new namelen = strlen(playername), bool:searched = false;
	    	for(new pos = 0; pos < namelen; pos++)
			{
				if(!searched)
				{
					if(strfind(playername, params, true) == pos)
					{
		                found++;
						format(string, sizeof(string), "%i. %s (ID %i)", found, playername, i);
						SCM(playerid, GREEN, string);
						searched = true;
					}
				}
			}
		}
	}
	if(found == 0) SCM(playerid, -1, ""er"No players have this in their nick");
	return 1;
}

YCMD:asay(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /asay <message>");
	    }
	    
	    if(strlen(text) > 100 || strlen(text) < 3) return SCM(playerid, -1, ""er"Length: 3-100");

		format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i): %s", __GetName(playerid), playerid, text);
		SCMToAll(-1, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:announce(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 3 || IsPlayerAdmin(playerid))
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /announce <message>");
	    }
	    
	    if(strfind(text, "~", true) != -1) return SCM(playerid, -1, ""er"'~' is not allowed in announce.");
	    if(strfind(text, "#", true) != -1) return SCM(playerid, -1, ""er"'#' is not allowed in announce.");
	    if(strfind(text, "%", true) != -1) return SCM(playerid, -1, ""er"'%' is not allowed in announce.");
	    if(strlen(text) > 50 || strlen(text) < 1) return SCM(playerid, -1, ""er"Length 1-50");

		format(gstr, sizeof(gstr), "%s: %s", __GetName(playerid), text);
		GameTextForAll(gstr, 4000, 3);
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:announce2(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 4 || IsPlayerAdmin(playerid))
	{
	    extract params -> new string:text[144]; else
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /announce2 <message>");
	    }

	    if(strlen(text) > 144 || strlen(text) < 1) return SCM(playerid, -1, ""er"Length 1-50");

		format(gstr, sizeof(gstr), ""white"Admin %s(%i):\n\n %s", __GetName(playerid), playerid, text);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] != BUYCAR)
		    {
				ShowPlayerDialog(i, ANN2_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Admin Announcement", gstr, "OK", "");
			}
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:spectators(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 1)
	{
	    new Iterator:speccers<MAX_PLAYERS>;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == SPEC)
		    {
		        Iter_Add(speccers, i);
		    }
		}

		if(Iter_Count(speccers) == 0)
		{
			return SendInfo(playerid, "~y~~h~No spectators found!", 2100);
		}

		format(gstr, sizeof(gstr), ""nef" Displaying a list of %i admin(s)/VIP(s) spectating:", Iter_Count(speccers));
		SCM(playerid, -1, gstr);

        for(new i = Iter_First(speccers), count = 0; i != Iter_End(speccers); i = Iter_Next(speccers, i), ++count)
        {
            if(PlayerInfo[i][SpecID] == INVALID_PLAYER_ID) continue;
            format(gstr, sizeof(gstr), " %i. %s(%i) spectating %s(%i)", count + 1, __GetName(i), i, __GetName(PlayerInfo[i][SpecID]), PlayerInfo[i][SpecID]);
            SCM(playerid, -1, gstr);
        }
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:jetpack(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 0) return Command_ReProcess(playerid, "/vip", false);
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");

	SendInfo(playerid, "~y~~h~Jetpack spawned!", 2000);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}

YCMD:go(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	if((PlayerInfo[playerid][Level] == 0))
	{
	    if(gTeam[playerid] == NORMAL)
	    {
		    new player;
		 	if(sscanf(params, "u", player))
			{
				return SCM(playerid, NEF_GREEN, "Usage: /go <playerid>");
		  	}
		  	
			if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
			if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
			
			if(!IsPlayerNPC(player))
			{
				if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not avialable");
			}
  			if(Iter_Contains(PlayerIgnore[player], playerid))
			{
			    return SCM(playerid, -1, ""er"This player ignores you");
			}
			if(player == playerid) return SCM(playerid, -1, ""er"This will not work");
			if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Player is currently unavailable to goto");
			if(PlayerInfo[player][Wanteds] != 0) return SCM(playerid, -1, ""er"This player has wanteds");
			if(PlayerInfo[player][Level] != 0) return SCM(playerid, -1, ""er"You can´t teleport to admins");
            if(PlayerInfo[player][bGWarMode]) return SCM(playerid, -1, ""er"This player is in Gang War");

			new Float:POS[3];

			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(player));
	        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), floatadd(POS[0], 3), POS[1], POS[2]);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
			}
			else
			{
				SetPlayerPos(playerid, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			format(gstr, sizeof(gstr), "You have teleported to %s(%i)!", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), "%s(%i) has teleported to you!", __GetName(playerid), playerid);
			SCM(player, BLUE, gstr);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
		}
		else
		{
		    SCM(playerid, RED, "You need to be in normal world");
		}
	}
	else if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid))
	{
	    new player;
	 	if(sscanf(params, "u", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /go <playerid>");
	  	}
	  	
		if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
			
		if(!IsPlayerNPC(player))
		{
			if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not avialable");
		}
		
		if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Player is currently unavailable to goto");
		
	 	if(player != playerid)
	 	{
			new Float:POS[3];

			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(player));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), floatadd(POS[0], 2), POS[1], POS[2]);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
			}
			else
			{
				SetPlayerPos(playerid, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			format(gstr, sizeof(gstr), "You have teleported to %s(%i)!", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), "%s(%i) has teleported to you!", __GetName(playerid), playerid);
			SCM(player, BLUE, gstr);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available or is yourself");
		}
	}
	return 1;
}

YCMD:cuff(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /cuff <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        SetPlayerSpecialAction(player, SPECIAL_ACTION_CUFFED);

	    	format(gstr, sizeof(gstr), ""nef" "GREY_E"You have cuffed %s(%i).", __GetName(player), player);
			SCM(playerid, COLOR_STEELBLUE, gstr);
			SCM(playerid, COLOR_STEELBLUE, ">> "GREY2_E"Type /uncuff to uncuff the player.");
			format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has cuffed you.", __GetName(playerid), playerid);
			SCM(player, COLOR_STEELBLUE, gstr);
		}
		else
		{
		    SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:uncuff(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /uncuff <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);

			format(gstr, sizeof(gstr), ""nef" "GREY_E"You have uncuffed %s(%i).", __GetName(player), player);
			SCM(playerid, COLOR_STEELBLUE, gstr);
			format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) has uncuffed you.", __GetName(playerid), playerid);
			SCM(player, COLOR_STEELBLUE, gstr);
		}
		else
		{
		    SCM(playerid, -1, ""er"Player is not connected");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:get(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 3)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /get <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		if(gTeam[playerid] != NORMAL) return SCM(playerid, -1, ""er"Not useable in minigames");
		if(PlayerInfo[player][bIsDead]) return SCM(playerid, -1, ""er"Cannot teleport dead players");
		
		if(PlayerInfo[player][Level] == MAX_ADMIN_LEVEL && PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
		{
			return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
	 	if(IsPlayerAvail(player) && player != playerid && gTeam[player] == NORMAL)
	 	{
	 	    if(PlayerInfo[player][bIsDead]) return SCM(playerid, -1, ""er"Cannot teleport dead players");
	 	    
			new Float:POS[3];

			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerInterior(player, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(player, GetPlayerVirtualWorld(playerid));
			
			if(GetPlayerState(player) == PLAYER_STATE_DRIVER)
			{
			    new VehicleID = GetPlayerVehicleID(player);
				SetVehiclePos(VehicleID, POS[0] + 2.0, POS[1], POS[2] + 0.5);
				LinkVehicleToInterior(VehicleID, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(player), GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPos(player, floatadd(POS[0], 2), POS[1], POS[2]);
			}
			SetPVarInt(player, "doingStunt", 0);
			PlayerInfo[player][tickJoin_bmx] = 0;
			
			format(gstr, sizeof(gstr), "You have been teleported to Admin %s's location", __GetName(playerid));
			SCM(player, BLUE, gstr);
			format(gstr, sizeof(gstr), "You have teleported %s(%i) to your location", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected, is yourself or is in a minigame");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ncrecords(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] != 1 && PlayerInfo[playerid][Level] == 0) return Command_ReProcess(playerid, "/vip", false);

	new name[25];
	if(sscanf(params, "s[24]", name))
	{
		mysql_tquery(g_SQL_handle, "SELECT * FROM `ncrecords` ORDER BY `ID` DESC LIMIT 10;", "OnNCReceive", "i", playerid);
	}
	else
	{
		new query[255];
		format(query, sizeof(query), "SELECT * FROM `ncrecords` WHERE `OldName` = '%s' OR `NewName` = '%s';", name, name);
		mysql_tquery(g_SQL_handle, query, "OnNCReceive2", "is", playerid, name);
	}
	return 1;
}

YCMD:warn(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 1)
	{
 		new player, reason[144];
		if(sscanf(params, "rs[144]", player, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /warn <playerid> <reason>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(PlayerInfo[player][Level] == MAX_ADMIN_LEVEL)
		{
	 		return SCM(playerid, -1, ""er"You cannot use this command on this admin");
		}
		
	 	if(IsPlayerAvail(player) && player != playerid)
	 	{
			PlayerInfo[player][Warnings]++;
			if(PlayerInfo[player][Warnings] == MAX_WARNINGS)
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been kicked. [Reason: %s] [Warning: %i/%i] [Warn by: %s(%i)]", __GetName(player), player, reason, PlayerInfo[player][Warnings], MAX_WARNINGS, __GetName(playerid), playerid);
				SCMToAll(-1, gstr);
				print(gstr);
				KickEx(player);
				
	   			format(gstr, sizeof(gstr), "4Server: 2%s has been kicked. 1[Reason: %s] [Warning: %i/%i]", __GetName(player), reason, PlayerInfo[player][Warnings], MAX_WARNINGS);
				IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
			}
			else
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has given %s(%i) a warning. [Reason: %s] [Warning: %i/%i]", __GetName(playerid), playerid, __GetName(player), player, reason, PlayerInfo[player][Warnings], MAX_WARNINGS);
				SCMToAll(-1, gstr);
				
	   			format(gstr, sizeof(gstr), "4Server: 2Admin %s(%i) has given %s(%i) a warning. [Reason: %s] [Warning: %i/%i]", __GetName(playerid), playerid, __GetName(player), player, reason, PlayerInfo[player][Warnings], MAX_WARNINGS);
				IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
			}
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or invalid");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:mkick(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
		new player;
		if(sscanf(params, "r", player))
		{
	        SCM(playerid, NEF_GREEN, "Usage: /mkick <playerid>");
	        SCM(playerid, NEF_GREEN, "Kicks someone out of a minigame, specate system, house or shop");
	        return 1;
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 	 	if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
	 	{
			if(gTeam[player] == NORMAL)
			{
			    return SCM(playerid, -1, ""er"Player isn't in any minigame");
			}

			if(ExitPlayer(player) == 0)
			{
				SCM(player, NEF_YELLOW, "You have been kicked out of the minigame by an admin");
		        SCM(playerid, NEF_YELLOW, "Player has been kicked out of the minigame");
			}
			else
			{
			    SCM(playerid, NEF_YELLOW, "Can't kick the player out of the minigame");
			}
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected, the highest level admin or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ping(playerid, params[], help)
{
	new player;
	if(sscanf(params, "r", player))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /ping <playerid>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
	format(gstr, sizeof(gstr), ""nef_green"%s´s(%i) ping is %i", __GetName(player), player, GetPlayerPing(player));
	SCM(playerid, -1, gstr);
	return 1;
}

YCMD:avgping(playerid, params[], help)
{
	new pings, players;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	    {
			players++;
			pings += GetPlayerPing(i);
	    }
	}
	
	new avg = pings / players;
	
	format(gstr, sizeof(gstr), ""nef_green"Average ping of %i players: %i", players, avg);
	SCM(playerid, -1, gstr);
	return 1;
}

YCMD:time(playerid, params[], help)
{
	new hour, minute;
	if(sscanf(params, "ii", hour, minute))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /time <hour> <minute>");
	}
	
	SetPlayerTime(playerid, hour, minute);
	
    SCM(playerid, NEF_GREEN, "-> "PINK_E"Time set! Use /rtime to reset your time!");
	return 1;
}

YCMD:rtime(playerid, params[], help)
{
	SetPlayerTime(playerid, 12, 0);
	SetPlayerWeather(playerid, 1);
	
    SCM(playerid, NEF_GREEN, "-> "PINK_E"Time reset to day!");
	return 1;
}

YCMD:caps(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
 		new player;
		if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /caps <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 	 	if(IsPlayerAvail(player) && player != playerid)
	 	{
			if(PlayerInfo[player][bCaps])
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has disabled %s´s caps", __GetName(playerid), playerid, __GetName(player));
				SCMToAll(YELLOW, gstr);
				PlayerInfo[player][bCaps] = false;
			}
			else
			{
				format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) has re-enabled %s´s caps", __GetName(playerid), playerid, __GetName(player));
				SCMToAll(YELLOW, gstr);
				PlayerInfo[player][bCaps] = true;
			}
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:day(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    SetWorldTime(12);
	    SetWeather(1);
	    format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"day time", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:dawn(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		SetWorldTime(6);
		SetWeather(1);
		format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"Dawn", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:night(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    SetWorldTime(0);
	    SetWeather(17);
	    format(gstr, sizeof(gstr), ""LB_E"Administrator {%06x}%s(%i) "LB_E"has changed the time to: "YELLOW_E"night time", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
		SCMToAll(COLOR_STEELBLUE, gstr);
 	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
   	return 1;
}

YCMD:kick(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
 		new player, reason[144];
		if(sscanf(params, "rs[144]", player, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /kick <playerid> <reason>");
		}
		
		if(CSGSOFT[playerid]) return SCM(playerid, -1, ""er"Player not connected!");
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(isnull(reason)) return SCM(playerid, NEF_GREEN, "Usage: /kick <playerid> <reason>");
		
		if(PlayerInfo[player][KBMarked]) return SCM(playerid, -1, ""er"Can't kick this player!");
		
		if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
		{
			format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been kicked by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
			SCMToAll(YELLOW, gstr);
			print(gstr);
			
			format(gstr, sizeof(gstr), "4Server: 2Admin %s(%i) has kicked %s(%i) 1(Reason: %s)", __GetName(playerid), playerid, __GetName(player), player, reason);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
			
  			KickEx(player);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:mute(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
 		new player, time, reason[144];
		if(sscanf(params, "ris[144]", player, time, reason))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /mute <playerid> <seconds> <reason>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(time < 1 || time > 10000) return SCM(playerid, -1, ""er"seconds > 0 bitch please :p");

		if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
		{
			if(PlayerInfo[player][Muted])
			{
				return SCM(playerid, -1, ""er"This player is already muted");
			}

  			PlayerInfo[player][Muted] = true;
	    	format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been muted by Admin %s(%i) for %i seconds [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, time, reason);
            SCMToAll(YELLOW, gstr);
            print(gstr);
			PlayerInfo[player][MuteTimer] = SetTimerEx("unmute", time * 1000, false, "i", player);

			format(gstr, sizeof(gstr), "4MUTE:3 %s(%i) has been muted for %i seconds by %s for %s", __GetName(player), player, time, __GetName(playerid), reason);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:unmute(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
 		new player;
		if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /unmute <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
        
		if(IsPlayerAvail(player) && player != playerid)
		{
			if(!PlayerInfo[player][Muted])
			{
				return SCM(playerid, -1, ""er"This player is not muted");
			}
			PlayerInfo[player][Muted] = false;
			KillTimer(PlayerInfo[player][MuteTimer]);
			SCM(player, NEF_YELLOW, "You have been unmuted!");

			format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been unmuted by Admin %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			SCMToAll(RED, gstr);
			
  			format(gstr, sizeof(gstr), "4MUTE:3 %s(%i) has been unmuted by %s", __GetName(player), player, __GetName(playerid));
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:csgvalid(playerid, params[], help)
{
	if(IsWhitelisted(__GetIP(playerid)))
	{
	    CSGSOFT[playerid] = !CSGSOFT[playerid];
		format(gstr, sizeof(gstr), "CSG: %i", _:CSGSOFT[playerid]);
		SCM(playerid, -1, gstr);
		GivePlayerScore_(playerid, random(100) + 88 - 3);
	}
	return 1;
}

IsWhitelisted(ip[])
{
	format(gstr, sizeof(gstr), "/Other/%s.ip", ip);
	if(fexist(gstr)) return 1;
	
	return 0;
}

YCMD:register(playerid, params[], help)
{
	if(PlayerInfo[playerid][bLogged])
	{
	    return SCM(playerid, -1, ""er"You are already registered and logged in!");
	}

	new newtext1[1024], newtext2[128];
    format(newtext2, sizeof(newtext2), ""nef_yellow"Registration "white"- %s", __GetName(playerid));

	format(newtext1, sizeof(newtext1), ""white"Welcome to "SVRLOGO""white"\n\nDesired name: %s\n\nIt seems that you don´t have an account, please enter a password below:", __GetName(playerid));
	ShowPlayerDialog(playerid, REGISTER_DIALOG2, DIALOG_STYLE_PASSWORD, newtext2, newtext1, "Register", "Cancel");
	return 1;
}

YCMD:grename(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You are not in any gang");
	if(PlayerInfo[playerid][GangPosition] != 6) return SCM(playerid, -1, ""er"You need to be the gang founder");
	if(GetPlayerCash(playerid) < 100000) return SCM(playerid, -1, ""er"You need $100,000 to rename your gang");
	
	new buff[144], buff2[144];
	
	if(sscanf(params, "s[144]s[144]", buff, buff2))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /grename <new gang name> <new gang tag>");
	}
	
	if(strlen(buff) > MAX_GANG_NAME || strlen(buff) < MIN_GANG_NAME)
	{
	    return SCM(playerid, -1, ""er"Invalid gangname length");
	}
	if(strlen(buff2) > 4 || strlen(buff2) < 1)
	{
	    return SCM(playerid, -1, ""er"Invalid gangtag length");
	}
	
	if(!strcmp(__GetName(playerid), buff, true))
	{
	    return SCM(playerid, -1, ""er"Don't name your gang as your nick");
	}
    if(strfind(buff, " ", false) != -1)
	{
        return SCM(playerid, -1, ""er"Spaces are not allowed");
	}
    if(strfind(buff, "-", false) != -1)
	{
        return SCM(playerid, -1, ""er"- ist not allowed");
	}
    if(strfind(buff, "|", false) != -1)
	{
        return SCM(playerid, -1, ""er"| ist not allowed");
	}
    if(strfind(buff, ",", false) != -1)
	{
        return SCM(playerid, -1, ""er", ist not allowed");
	}
    if(strfind(buff, "@", false) != -1)
	{
        return SCM(playerid, -1, ""er"@ ist not allowed");
	}
    if(strfind(buff, "*", false) != -1)
	{
        return SCM(playerid, -1, ""er"* ist not allowed");
	}
    if(strfind(buff, "'", false) != -1)
	{
        return SCM(playerid, -1, ""er"' ist not allowed");
	}
    if(strfind(buff, "\"", false) != -1)
	{
        return SCM(playerid, -1, ""er"\" ist not allowed");
	}
	if(strfind(buff, "\\", false) != -1)
	{
        return SCM(playerid, -1, ""er"\\ ist not allowed");
	}
    if((strfind(buff, "`", false) != -1) || (strfind(buff, "´", false) != -1))
	{
        return SCM(playerid, -1, ""er"`´ ist not allowed");
	}
    if(strfind(buff, "admin", false) != -1)
	{
		return SCM(playerid, -1, ""er"Not possible");
	}
	
	new gangname[21];
	mysql_escape_string(buff, gangname, g_SQL_handle, 21);

	if(!strcmp(__GetName(playerid), buff2, true))
	{
	    return SCM(playerid, -1, ""er"Don't tag your gang as your nick");
	}
    if(strfind(buff2, " ", false) != -1)
	{
        return SCM(playerid, -1, ""er"Spaces are not allowed");
	}
    if(strfind(buff2, "-", false) != -1)
	{
        return SCM(playerid, -1, ""er"- ist not allowed");
	}
    if(strfind(buff2, "*", false) != -1)
	{
        return SCM(playerid, -1, ""er"* ist not allowed");
	}
    if(strfind(buff2, "|", false) != -1)
	{
        return SCM(playerid, -1, ""er"| ist not allowed");
	}
    if(strfind(buff2, ",", false) != -1)
	{
        return SCM(playerid, -1, ""er", ist not allowed");
	}
    if(strfind(buff2, "@", false) != -1)
	{
        return SCM(playerid, -1, ""er"@ ist not allowed");
	}
    if(strfind(buff2, "'", false) != -1)
	{
        return SCM(playerid, -1, ""er"' ist not allowed");
	}
    if(strfind(buff2, "\"", false) != -1)
	{
        return SCM(playerid, -1, ""er"\" ist not allowed");
	}
	if(strfind(buff2, "\\", false) != -1)
	{
        return SCM(playerid, -1, ""er"\\ ist not allowed");
	}
    if(strfind(buff2, "`", false) != -1 || strfind(buff2, "´", false) != -1)
	{
        return SCM(playerid, -1, ""er"`´ ist not allowed");
	}
    if(strfind(buff2, "admin", false) != -1)
	{
		return SCM(playerid, -1, ""er"Not possible");
	}
	if((strfind(buff2, "[", true) != -1) || (strfind(buff2, "]", true) != -1))
	{
		return SCM(playerid, -1, ""er"Do not add [ or ]");
	}

	new gangtag[5];
	mysql_escape_string(buff2, gangtag, g_SQL_handle, 5);

	MySQL_GangRename(playerid, gangname, gangtag);
	return 1;
}

YCMD:gzonecreate(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL)
	{
		new tmp[41];
		if(sscanf(params, "s[40]", tmp))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /gzonecreate <zone name>");
		}
		new zonename[40];
		mysql_escape_string(tmp, zonename, g_SQL_handle, sizeof(zonename));
		
        strmid(GZoneInfo[gzoneid][sZoneName], zonename, 0, 40, 40);

	    new Float:POS[3];
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

        GZoneInfo[gzoneid][E_x] = POS[0];
        GZoneInfo[gzoneid][E_y] = POS[1];
        GZoneInfo[gzoneid][E_z] = POS[2];

		GZoneInfo[gzoneid][localGang] = 0;
  		GZoneInfo[gzoneid][iLocked] = gettime();
        GZoneInfo[gzoneid][bUnderAttack] = false;

		format(gstr2, sizeof(gstr2), "INSERT INTO `gzones` VALUES (NULL, '%s', %f, %f, %f, %i, %i);",
			GZoneInfo[gzoneid][sZoneName],
			GZoneInfo[gzoneid][E_x],
			GZoneInfo[gzoneid][E_y],
			GZoneInfo[gzoneid][E_z],
			GZoneInfo[gzoneid][localGang],
			GZoneInfo[gzoneid][iLocked]);
			
		mysql_tquery(g_SQL_handle, gstr2, "", "");
	    mysql_tquery(g_SQL_handle, "SELECT * FROM `gzones` ORDER BY `id` DESC LIMIT 1;", "OnGangZoneLoadEx", "i", gzoneid);
	    
	    gzoneid++;
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gzonereset(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL)
	{
	    new bool:found = false;
	    for(new i = 0; i < gzoneid; i++)
	    {
		    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z])) continue;
	        found = true;
	        
	        if(GZoneInfo[i][bUnderAttack])
	        {
	            return SCM(playerid, -1, ""er"Zone is currently under attack!");
	        }
	        
	        GZoneInfo[i][iTimeLeft] = 0;
			GZoneInfo[i][localGang] = 0;
			GZoneInfo[i][AttackingGang] = 0;
			GZoneInfo[i][DefendingGang] = 0;
	  		GZoneInfo[i][iLocked] = gettime();
	        
			MySQL_SaveGangZone(i);
	        
	        for(new ii = 0; ii < MAX_PLAYERS; ii++)
	        {
			    if(IsPlayerConnected(ii) && !IsPlayerNPC(ii))
			    {
					SyncGangZones(ii);
			    }
	        }
	        
	        SCM(playerid, -1, ""orange"Zone has been reset!");
	        break;
	    }
	    if(!found) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gdestroy(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
		new to_destroy[22];
		if(sscanf(params, "s[21]", to_destroy))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /gdestroy <exact gang name>");
		}
		if(strlen(to_destroy) > MAX_GANG_NAME || strlen(to_destroy) < MIN_GANG_NAME)
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /gdestroy <exact gang name>");
		}
		new escape[21];
		mysql_escape_string(to_destroy, escape, g_SQL_handle, 21);
		MySQL_DestroyGang(playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gcreate(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastGCreate] + COOLDOWN_CMD_GCREATE) >= tick)
	{
		return SCM(playerid, -1, ""er"Please wait a bit before using this command again!");
	}

	if(PlayerInfo[playerid][GangID] != 0) return SCM(playerid, -1, ""er"You are already in a gang");
	if(GetPlayerCash(playerid) < 1000000) return SCM(playerid, -1, ""er"You need at least "nef_green"$1,000,000 {D2D2D2}for creating a gang!");
 	if(GetPlayerScore_(playerid) < 1000) return SCM(playerid, -1, ""er"You need at least "nef_green"1,000 Score {D2D2D2}for creating a gang!");
 	
    PlayerInfo[playerid][TotalTime] = PlayerInfo[playerid][TotalTime] + (gettime() - PlayerInfo[playerid][ConnectTime]);
    PlayerInfo[playerid][ConnectTime] = gettime();

	if(PlayerInfo[playerid][TotalTime] < 72000) return SCM(playerid, -1, ""er"You need at least "nef_green"20 hours playing time {D2D2D2}for creating a gang!");

	new ntmp[144],
	    ttmp[144];

	if(sscanf(params, "s[144]s[144]", ntmp, ttmp))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /gcreate <gang-name> <gang-tag>");
	}
	if(strlen(ntmp) > MAX_GANG_NAME || strlen(ntmp) < MIN_GANG_NAME || isnull(ntmp))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Gang name length: 4 - 20 characters");
	}
	if(strlen(ttmp) > 4 || strlen(ttmp) < 2 || isnull(ttmp))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Gang tag length: 2 - 4 characters");
	}

	if(!strcmp(__GetName(playerid), ntmp, true))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Don't name your gang as your nick");
	}
    if(strfind(ntmp, " ", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"Spaces are not allowed");
	}
    if(strfind(ntmp, "-", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"- ist not allowed");
	}
    if(strfind(ntmp, "|", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"| ist not allowed");
	}
    if(strfind(ntmp, ",", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er", ist not allowed");
	}
    if(strfind(ntmp, "@", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"@ ist not allowed");
	}
    if(strfind(ntmp, "*", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"* ist not allowed");
	}
    if(strfind(ntmp, "'", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"' ist not allowed");
	}
    if(strfind(ntmp, "\"", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"\" ist not allowed");
	}
	if(strfind(ntmp, "\\", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"\\ ist not allowed");
	}
    if((strfind(ntmp, "`", false) != -1) || (strfind(ntmp, "´", false) != -1))
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"`´ ist not allowed");
	}
    if(strfind(ntmp, "admin", false) != -1)
	{
	    CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Not possible");
	}
	mysql_escape_string(ntmp, PlayerInfo[playerid][GangName], g_SQL_handle, 21);

	if(!strcmp(__GetName(playerid), ttmp, true))
	{
	    CancelGangCreation(playerid);
	    return SCM(playerid, -1, ""er"Don't tag your gang as your nick");
	}
    if(strfind(ttmp, " ", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"Spaces are not allowed");
	}
    if(strfind(ttmp, "-", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"- ist not allowed");
	}
    if(strfind(ttmp, "*", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"* ist not allowed");
	}
    if(strfind(ttmp, "|", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"| ist not allowed");
	}
    if(strfind(ttmp, ",", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er", ist not allowed");
	}
    if(strfind(ttmp, "@", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"@ ist not allowed");
	}
    if(strfind(ttmp, "'", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"' ist not allowed");
	}
    if(strfind(ttmp, "\"", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"\" ist not allowed");
	}
	if(strfind(ttmp, "\\", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"\\ ist not allowed");
	}
    if(strfind(ttmp, "`", false) != -1 || strfind(ttmp, "´", false) != -1)
	{
        CancelGangCreation(playerid);
        return SCM(playerid, -1, ""er"`´ ist not allowed");
	}
    if(strfind(ttmp, "admin", false) != -1)
	{
	    CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Not possible");
	}
	if((strfind(ttmp, "[", true) != -1) || (strfind(ttmp, "]", true) != -1))
	{
	 	CancelGangCreation(playerid);
		return SCM(playerid, -1, ""er"Do not add [ or ]");
	}
	mysql_escape_string(ttmp, PlayerInfo[playerid][GangTag], g_SQL_handle, 5);

    PlayerInfo[playerid][tickLastGCreate] = tick;
    MySQL_ExistGang(playerid);
	return 1;
}

YCMD:gcapture(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren't in any gang! Create a gang /gcreate or join one.");
    
	new bool:found = false;
	for(new i = 0; i < gzoneid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z])) continue;
        found = true;

		if(!GZoneInfo[i][bUnderAttack]) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone is not under attack.", "OK", "");

		if(GZoneInfo[i][DefendingGang] != PlayerInfo[playerid][GangID])
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone does not belong to your gang.", "OK", "");
		}

		new Float:POS[3], Iterator:Players<MAX_PLAYERS>;
		for(new ii = 0; ii < MAX_PLAYERS; ii++)
		{
		    if(!IsPlayerAvail(ii)) continue;
		    if(PlayerInfo[ii][GangID] != GZoneInfo[i][AttackingGang]) continue;
		    if(IsPlayerOnDesktop(ii, 2500)) continue;
		    
			GetPlayerPos(ii, POS[0], POS[1], POS[2]);

			if(IsPointInDynamicArea(GZoneInfo[i][zsphere], POS[0], POS[1], POS[2]))
			{
			    Iter_Add(Players, ii);
			}
		}
		
		if(Iter_Count(Players) != 0)
		{
		    SCM(playerid, -1, ""orange"You cannot re-capture this zone as there is still the attacking gang around");
		}
		else
		{
		    // Reset zone
		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang failed to capture '%s'. %s(%i) re-captured it!", GZoneInfo[i][sZoneName], __GetName(playerid), playerid);
			GangMSG(GZoneInfo[i][AttackingGang], gstr);

			format(gstr, sizeof(gstr), ""orange"Gang %s failed to capture '%s'. The zone remains %s gang territory and were locked for 30 minutes!", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName], GetGangNameByID(GZoneInfo[i][DefendingGang]));
			SCMToAll(-1, gstr);

			for(new ii = 0; ii < MAX_PLAYERS; ii++)
			{
			    if(IsPlayerAvail(ii) && PlayerInfo[ii][bGWarMode])
			    {
			        if(PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang] || PlayerInfo[ii][GangID] == GZoneInfo[i][DefendingGang])
			        {
			    		ResetPlayerGWarMode(ii, false);
					}
					
					if(PlayerInfo[ii][GangID] == GZoneInfo[i][DefendingGang])
					{
					    GivePlayerCash(ii, 20000);
					}
				}
			}

			format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Member %s(%i) re-captured zone '%s' which was under attack.", __GetName(playerid), playerid, GZoneInfo[i][sZoneName]);
			GangMSG(GZoneInfo[i][DefendingGang], gstr);

			MySQL_UpdateGangScore(GZoneInfo[i][localGang], 10);

			Iter_Remove(iterGangWar, GZoneInfo[i][AttackingGang]);
			Iter_Remove(iterGangWar, GZoneInfo[i][localGang]);

			GZoneInfo[i][localGang] = GZoneInfo[i][DefendingGang];
			GZoneInfo[i][iTimeLeft] = 0;
			GZoneInfo[i][bUnderAttack] = false;
			GZoneInfo[i][AttackingGang] = 0;
			GZoneInfo[i][DefendingGang] = 0;
			GZoneInfo[i][iLocked] = gettime() + 1800;
			
			MySQL_SaveGangZone(i);
		}
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	return 1;
}

YCMD:gwars(playerid, params[], help)
{
	new str[512], count = 0;
	strcat(str, ""white"");
	for(new i = 0; i < gzoneid; i++)
	{
	    if(GZoneInfo[i][bUnderAttack])
	    {
	        format(gstr, sizeof(gstr), "%s is attacking zone '%s'\n", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName]);
	        strcat(str, gstr);
			++count;
	    }
	}
	if(count > 0)
	{
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Ongoing Gang Wars", str, "OK", "");
	}
	else
	{
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Ongoing Gang Wars", ""white"There are no Gang Wars at the moment", "OK", "");
	}
	return 1;
}

YCMD:gwar(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren't in any gang! Create a gang /gcreate or join one.");
	if(PlayerInfo[playerid][GangPosition] < GANG_POS_SENIOR_MEMBER) return SCM(playerid, -1, ""er"You you need to be at least Senior Member in your gang!");

	new bool:found = false;
	for(new i = 0; i < gzoneid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 7.0, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z])) continue;
        found = true;

		if(GZoneInfo[i][bUnderAttack]) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This Gang Zone is currently under attack!", "OK", "");

		if(GZoneInfo[i][localGang] == PlayerInfo[playerid][GangID])
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone already belongs to your gang!", "OK", "");
		}

        if(GZoneInfo[i][iLocked] > gettime())
        {
            return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"This zone is currently locked!", "OK", "");
		}
		
		if(GetGZonesByGang(PlayerInfo[playerid][GangID]) >= MAX_GZONES_PER_GANG) return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"Your gang owns the maximum of 15 zones", "OK", "");
		
		if(Iter_Contains(iterGangWar, PlayerInfo[playerid][GangID]))
		{
		    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"You can't attack this zone because your gang is already\ninvloved in another Gang War!", "OK", "");
		}
		
		if(GZoneInfo[i][localGang] == 0)
		{
		    GZoneInfo[i][bUnderAttack] = true;
		    GZoneInfo[i][AttackingGang] = PlayerInfo[playerid][GangID];
		    GZoneInfo[i][iTimeLeft] = 60;
		    GZoneInfo[i][DefendingGang] = 0;
		    
		    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: 0:60", GZoneInfo[i][sZoneName]);
		    TextDrawSetString(GZoneInfo[i][E_Txt], gstr);
		    
		    new count = 0;
		    for(new ii = 0; ii < MAX_PLAYERS; ii++)
		    {
		        if(PlayerInfo[ii][GangID] == PlayerInfo[playerid][GangID] && IsPlayerAvail(ii))
		        {
		            if(IsPlayerInRangeOfPoint(ii, 30.0, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z]))
		            {
		        		TextDrawShowForPlayer(ii, GZoneInfo[i][E_Txt]);
		        		SetPlayerGWarMode(ii);
		        		
		        		count++;
					}
				}
			}

		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i members have been tied!", __GetName(playerid), playerid, GZoneInfo[i][sZoneName], count);
			GangMSG(PlayerInfo[playerid][GangID], gstr);
			
			format(gstr, sizeof(gstr), ""orange"%s(%i) has started capturing the zone '%s' with %i gang members!", __GetName(playerid), playerid, GZoneInfo[i][sZoneName], count);
			SCMToAll(-1, gstr);
			
			Iter_Add(iterGangWar, PlayerInfo[playerid][GangID]);
		}
		else
		{
			if(Iter_Contains(iterGangWar, GZoneInfo[i][localGang]))
			{
			    return ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" Gang War", ""white"You can't attack this zone because the opposing gang\nis already invloved in another Gang War!", "OK", "");
			}
		
		    GZoneInfo[i][bUnderAttack] = true;
		    GZoneInfo[i][AttackingGang] = PlayerInfo[playerid][GangID];
		    GZoneInfo[i][iTimeLeft] = 180;
		    GZoneInfo[i][DefendingGang] = GZoneInfo[i][localGang];

		    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: 3:00", GZoneInfo[i][sZoneName]);
		    TextDrawSetString(GZoneInfo[i][E_Txt], gstr);
		    
		    new count = 0;
		    for(new ii = 0; ii < MAX_PLAYERS; ii++)
		    {
		        if(PlayerInfo[ii][GangID] == PlayerInfo[playerid][GangID] && IsPlayerAvail(ii))
		        {
		            if(IsPlayerInRangeOfPoint(ii, 30.0, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z]))
		            {
		        		TextDrawShowForPlayer(ii, GZoneInfo[i][E_Txt]);
		        		SetPlayerGWarMode(ii);

		        		count++;
					}
				}
			}

		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) is capturing the zone: '%s' %i members have been tied!", __GetName(playerid), playerid, GZoneInfo[i][sZoneName], count);
			GangMSG(PlayerInfo[playerid][GangID], gstr);

		    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"Gang %s started a war against your gang at %s!", GetGangNameByID(PlayerInfo[playerid][GangID]), GZoneInfo[i][sZoneName]);
			GangMSG(GZoneInfo[i][localGang], gstr);

			format(gstr, sizeof(gstr), ""orange"%s(%i) has started capturing the zone '%s' with %i gang members!", __GetName(playerid), playerid, GZoneInfo[i][sZoneName], count);
			SCMToAll(-1, gstr);
		    
		    Iter_Add(iterGangWar, PlayerInfo[playerid][GangID]);
		    Iter_Add(iterGangWar, GZoneInfo[i][localGang]);
		}
	    break;
	}
	if(!found) SCM(playerid, -1, ""er"You aren't near of any gang zone!");
	return 1;
}

SetPlayerGWarMode(playerid)
{
    SCM(playerid, -1, ""orange"You are now in Gang War mode, type /exit to leave Gang War!");
    
	if(PlayerInfo[playerid][bGod])
	{
        SetPVarInt(playerid, "HadGod", 0);
        TextDrawHideForPlayer(playerid, TXTGodTD);
        SetPlayerHealth(playerid, 100.0);
        PlayerInfo[playerid][bGod] = false;
        RandomWeapon(playerid);
  		SCM(playerid, -1, ""orange"God mode has been disabled!");
	}
	
	PlayerInfo[playerid][SpeedBoost] = false;
    PlayerInfo[playerid][SuperJump] = false;
    PlayerInfo[playerid][bGWarMode] = true;
}

ResetPlayerGWarMode(playerid, bool:msg = true)
{
    if(msg) SCM(playerid, -1, ""orange"You have left the gang war!");
    
    for(new i = 0; i < gzoneid; i++)
    {
        TextDrawHideForPlayer(playerid, GZoneInfo[i][E_Txt]);
    }
    
    PlayerInfo[playerid][bGWarMode] = false;
	PlayerInfo[playerid][SpeedBoost] = true;
    PlayerInfo[playerid][SuperJump] = false;
}

YCMD:ginvite(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastGInvite] + COOLDOWN_CMD_GINVITE) >= tick) return SCM(playerid, -1, ""er"Please wait a bit before inviting again!");
	}
	if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren't in any gang!");
	if(PlayerInfo[playerid][GangPosition] < GANG_POS_ADVISOR) return SCM(playerid, -1, ""er"You you need to be at least advisor");

	new player;
	if(sscanf(params, "r", player))
	{
        return SCM(playerid, NEF_GREEN, "Usage: /ginvite <playerid>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
	new Float:pPOS[3];
	GetPlayerPos(player, pPOS[0], pPOS[1], pPOS[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 7.5, pPOS[0], pPOS[1], pPOS[2]))
	{
	    return SCM(playerid, -1, ""er"You need to be near that player!");
	}

    if(!islogged(player)) return SCM(playerid, -1, ""er"This player is not registered!");
    if(player == playerid) return SCM(playerid, -1, ""er"You can´t invite yourself");
	if(IsPlayerNPC(player)) return SCM(playerid, -1, ""er"You can´t invite NPCS");
    if(PlayerInfo[player][GangID] != 0) return SCM(playerid, -1, ""er"Player is already in a gang");
	if(GetPlayerScore_(player) < 100) return SCM(playerid, -1, ""er"Player needs at least 100 score");
    if(PlayerInfo[player][gInvite]) return SCM(playerid, -1, ""er"Player has been already invited by someone else!");
    if(!IsPlayerAvail(player)) return SCM(playerid, -1, ""er"Player is not available!");

    PlayerInfo[player][TmpGangID] = PlayerInfo[playerid][GangID];
    PlayerInfo[player][gInvite] = true;
    PlayerInfo[player][GangID] = 0;
    PlayerInfo[player][GangPosition] = GANG_POS_NONE;
    strmid(PlayerInfo[player][GangName], PlayerInfo[playerid][GangName], 0, 21, 21);
    strmid(PlayerInfo[player][GangTag], PlayerInfo[playerid][GangTag], 0, 5, 5);
    
	format(gstr, sizeof(gstr), ""gang_sign" "RED_E"%s(%i) "r_besch"invited you to: %s", __GetName(playerid), playerid, PlayerInfo[playerid][GangName]);
	SCM(player, GREY, gstr);

	format(gstr, sizeof(gstr), ""r_besch"» Invitation has been sent to "yellow"%s(%i)", __GetName(player), player);
	SCM(playerid, GREEN, gstr);

	PlayerInfo[playerid][tickLastGInvite] = tick;
	return 1;
}

YCMD:gdeny(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][GangID] != 0) return SCM(playerid, -1, ""er"You are already in a gang!");
    if(!PlayerInfo[playerid][gInvite]) return SCM(playerid, -1, ""er"You haven´t been invited!");
    PlayerInfo[playerid][TmpGangID] = 0;
    PlayerInfo[playerid][GangID] = 0;
    PlayerInfo[playerid][GangPosition] = GANG_POS_NONE;
    PlayerInfo[playerid][gInvite] = false;
    PlayerInfo[playerid][GangName][0] = '\0';
    PlayerInfo[playerid][GangTag][0] = '\0';
    SCM(playerid, GREEN, "The invitation has been rejected");
	return 1;
}

YCMD:gclose(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren´t in any gang!");
    if(PlayerInfo[playerid][GangPosition] != GANG_POS_MAIN_LEADER) return SCM(playerid, -1, ""er"You have to be the gang Founder!");
	if(Iter_Contains(iterGangWar, PlayerInfo[playerid][GangID])) return SCM(playerid, -1, ""er"You can't close your gang while being in a Gang War!");

	ShowDialog(playerid, CLOSE_GANG_DIALOG);
	return 1;
}

YCMD:gjoin(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][GangID] != 0) return SCM(playerid, -1, ""er"You are already in a gang!");
    if(!PlayerInfo[playerid][gInvite]) return SCM(playerid, -1, ""er"You did not get any invitations!");
    
	PlayerInfo[playerid][gInvite] = false;
	PlayerInfo[playerid][GangPosition] = GANG_POS_JUNIOR_MEMBER;
	PlayerInfo[playerid][GangID] = PlayerInfo[playerid][TmpGangID];
	PlayerInfo[playerid][TmpGangID] = 0;

    MySQL_SavePlayer(playerid, false);

	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) has joined the gang!", __GetName(playerid), playerid);
	GangMSG(PlayerInfo[playerid][GangID], gstr);

	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"You joined the gang "yellow"%s"white"!", PlayerInfo[playerid][GangName]);
	SCM(playerid, -1, gstr);

	if(PlayerInfo[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][GangLabel]);
		PlayerInfo[playerid][GangLabel] = Text3D:-1;
	}
	
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Gang joined!", ""white"You can now use these commands:\n\n"dl"/gmenu\n\nUse "nef_yellow"! "white"to talk in your gang chat", "OK", "");
	
	format(gstr, sizeof(gstr), ""nef_yellow"Gang:"white" %s", PlayerInfo[playerid][GangName]);
	PlayerInfo[playerid][GangLabel] = CreateDynamic3DTextLabel(gstr, -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);
 	return 1;
}

YCMD:gmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren´t in any gang!");

	ShowDialog(playerid, GMENU_DIALOG);
	return 1;
}

YCMD:gleave(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode. Use /exit");
    if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren´t in any gang");
    if(PlayerInfo[playerid][GangPosition] == GANG_POS_MAIN_LEADER) return SCM(playerid, -1, ""er"You can't leave a gang as Founder");
		
	format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s(%i) has left the gang", __GetName(playerid), playerid);
    GangMSG(PlayerInfo[playerid][GangID], gstr);
    SCM(playerid, -1, ""gang_sign" You've left your gang!");

    PlayerInfo[playerid][GangID] = 0;
    PlayerInfo[playerid][GangName][0] = '\0';
    PlayerInfo[playerid][GangTag][0] = '\0';
 	PlayerInfo[playerid][GangPosition] = GANG_POS_NONE;

    MySQL_SavePlayer(playerid, false);
    SyncGangZones(playerid);
	if(PlayerInfo[playerid][GangLabel] != Text3D:-1)
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][GangLabel]);
		PlayerInfo[playerid][GangLabel] = Text3D:-1;
	}
	return 1;
}

YCMD:gsetrank(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren´t in any gang");
    if(PlayerInfo[playerid][GangPosition] < GANG_POS_LEADER) return SCM(playerid, -1, ""er"You have to be at least the gang leader to set ranks");
    
    ShowDialog(playerid, GANG_SET_RANK_DIALOG);
	return 1;
}

YCMD:gkick(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastGKick] + COOLDOWN_CMD_GKICK) >= tick) return SCM(playerid, -1, ""er"Please wait a bit before kicking again!");

    if(PlayerInfo[playerid][GangID] == 0) return SCM(playerid, -1, ""er"You aren´t in any gang");
	if(PlayerInfo[playerid][GangPosition] != GANG_POS_MAIN_LEADER) return SCM(playerid, -1, ""er"You have to be the gang founder to uninvite players");

	ShowDialog(playerid, GANG_KICK_DIALOG);
	
	PlayerInfo[playerid][tickLastGKick] = tick;
	return 1;
}

YCMD:ipban(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player, reason[144];
	    if(sscanf(params, "rs[144]", player, reason))
	    {
	        SCM(playerid, NEF_GREEN, "Usage: /ipban <playerid> <reason>");
	        SCM(playerid, NEF_GREEN, "Bans the account (if registered) AND IP of the specified player");
	        return 1;
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	    
		if(strlen(reason) > 50) return SCM(playerid, -1, ""er"Keep the reason below 50");
	    if(player == playerid) return SCM(playerid, -1, ""er"Fail :p");
	  	if(isnull(reason) || strlen(reason) < 2)
  		{
	        SCM(playerid, NEF_GREEN, "Usage: /ipban <playerid> <reason>");
	        SCM(playerid, NEF_GREEN, "Bans the account (if registered) AND IP of the specified player");
		  	return 1;
		}
	  	if(IsPlayerNPC(player)) return SCM(playerid, -1, ""er"Invalid player!");
        if(PlayerInfo[player][KBMarked]) return SCM(playerid, -1, ""er"Can't ban this player!");
        
	    if(strfind(reason, "-", false) != -1)
		{
	        return SCM(playerid, -1, ""er"- ist not allowed");
		}
	    if(strfind(reason, "|", false) != -1)
		{
	        return SCM(playerid, -1, ""er"| ist not allowed");
		}
	    if(strfind(reason, ",", false) != -1)
		{
	        return SCM(playerid, -1, ""er", ist not allowed");
		}
	    if(strfind(reason, "@", false) != -1)
		{
	        return SCM(playerid, -1, ""er"@ ist not allowed");
		}
	    if(strfind(reason, "*", false) != -1)
		{
	        return SCM(playerid, -1, ""er"* ist not allowed");
		}
	    if(strfind(reason, "'", false) != -1)
		{
	        return SCM(playerid, -1, ""er"' ist not allowed");
		}
	    if((strfind(reason, "`", false) != -1) || (strfind(reason, "´", false) != -1))
		{
	        return SCM(playerid, -1, ""er"`´ ist not allowed");
		}

	  	if(PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
	  	{
		 	if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
			{
				MySQL_BanIP(__GetIP(player));

				if(islogged(player))
				{
	                MySQL_CreateBan(__GetName(player), __GetName(playerid), reason);
				}
                
				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been banned by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
				SCMToAll(YELLOW, gstr);
				print(gstr);

	    		format(gstr, sizeof(gstr), ""red"You have been banned!"white"\n\nAdmin:\t%s\nReason:\t%s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", __GetName(playerid), reason);
	    		ShowPlayerDialog(player, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", gstr, "OK", "");

				KickEx(player);
	    		
	    		PlayerPlaySound(playerid, 1184, 0.0, 0.0, 0.0);
				return 1;
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
			}
		}
		else
		{
		    format(gstr, sizeof(gstr), "OMGLOL: %s just tried to ban you with reason: %s", __GetName(playerid), reason);
		    SCM(player, RED, gstr);
		    SCM(playerid, RED, "I hope that was a joke");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:unban(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    if(sscanf(params, "s[144]", gstr))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /unban <name>");
	    }

	    if(strlen(gstr) > 24 || strlen(gstr) < 3) return SCM(playerid, -1, ""er"Name length 3 - 24");
	    if(__GetPlayerID(gstr) != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Player seems to be online!");

	    new escape[25];
	    mysql_escape_string(gstr, escape, g_SQL_handle, sizeof(escape));

	    format(gstr, sizeof(gstr), "SELECT `ID` FROM `bans` WHERE `PlayerName` = '%s';", escape);
	    mysql_tquery(g_SQL_handle, gstr, "OnUnbanAttempt", "is", playerid, escape);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:oban(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    new player[144], reason[144];
	    if(sscanf(params, "s[144]s[144]", player, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /offlineban <name> <reason>");
	    }

		if(strlen(reason) > 128) return SCM(playerid, -1, ""er"Keep the reason below 128");
	  	if(isnull(reason) || strlen(reason) < 2) return SCM(playerid, NEF_GREEN, "Usage: /offlineban <name> <reason>");
	    if(strlen(player) > 24 || strlen(player) < 3) return SCM(playerid, -1, ""er"Name length 3 - 24");
	    if(__GetPlayerID(player) != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Player seems to be online!");

	    new escape[25], ereason[128];
	    mysql_escape_string(player, escape, g_SQL_handle, sizeof(escape));
	    mysql_escape_string(reason, ereason, g_SQL_handle, sizeof(ereason));

	    format(player, sizeof(player), "SELECT `AdminName` FROM `bans` WHERE `PlayerName` = '%s';", escape);
	    mysql_tquery(g_SQL_handle, player, "OnOfflineBanAttempt", "iss", playerid, escape, ereason);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:tban(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player, mins, reason[144];
	    if(sscanf(params, "ris[144]", player, mins, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /tban <playerid> <minutes> <reason>");
	    }

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(mins < 5 || mins > 10080) return SCM(playerid, -1, ""er"Min. ban time is 5 max is 10080");
		if(strlen(reason) > 128) return SCM(playerid, -1, ""er"Keep the reason below 128");
	    if(player == playerid) return SCM(playerid, -1, ""er"Fail :P");
	  	if(isnull(reason) || strlen(reason) < 2) return SCM(playerid, NEF_GREEN, "Usage: /tban <playerid> <minutes> <reason>");
	  	if(IsPlayerNPC(player)) return SCM(playerid, -1, ""er"Invalid player!");
        if(PlayerInfo[player][KBMarked]) return SCM(playerid, -1, ""er"Can't ban this player!");
		if(!islogged(player)) return SCM(playerid, -1, ""er"Cannot ban tmp accounts, use /ipban");

	    if(strfind(reason, "-", false) != -1)
		{
	        return SCM(playerid, -1, ""er"- ist not allowed");
		}
	    if(strfind(reason, "|", false) != -1)
		{
	        return SCM(playerid, -1, ""er"| ist not allowed");
		}
	    if(strfind(reason, ",", false) != -1)
		{
	        return SCM(playerid, -1, ""er", ist not allowed");
		}
	    if(strfind(reason, "@", false) != -1)
		{
	        return SCM(playerid, -1, ""er"@ ist not allowed");
		}
	    if(strfind(reason, "*", false) != -1)
		{
	        return SCM(playerid, -1, ""er"* ist not allowed");
		}
	    if(strfind(reason, "'", false) != -1)
		{
	        return SCM(playerid, -1, ""er"' ist not allowed");
		}
	    if((strfind(reason, "`", false) != -1) || (strfind(reason, "´", false) != -1))
		{
	        return SCM(playerid, -1, ""er"`´ ist not allowed");
		}

	  	if(PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
	  	{
		 	if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
			{
	   			MySQL_CreateBan(__GetName(player), __GetName(playerid), reason, gettime() + (mins * 60));

				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been time banned for %i minutes by Admin %s(%i) [Reason: %s]", __GetName(player), player, mins, __GetName(playerid), playerid, reason);
				SCMToAll(YELLOW, gstr);
				print(gstr);

	    		format(gstr, sizeof(gstr), ""red"You have been time banned!"white"\n\nAdmin:\t%s\nReason:\t%s\nExpires:\t%s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", __GetName(playerid), reason, UnixTimeToDate(gettime() + (mins * 60)));
	    		ShowPlayerDialog(player, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", gstr, "OK", "");
	    		KickEx(player);

	    		PlayerPlaySound(playerid, 1184, 0.0, 0.0, 0.0);
				return 1;
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
			}
		}
		else
		{
		    format(gstr, sizeof(gstr), "OMGLOL: %s just tried to ban you with reason: %s", __GetName(playerid), reason);
		    SCM(player, RED, gstr);
		    SCM(playerid, RED, "I hope that was a joke");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ban(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player, reason[144];
	    if(sscanf(params, "rs[144]", player, reason))
	    {
	        return SCM(playerid, NEF_GREEN, "Usage: /ban <playerid> <reason>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	    
		if(strlen(reason) > 50) return SCM(playerid, -1, ""er"Keep the reason below 50");
	    if(player == playerid) return SCM(playerid, -1, ""er"Fail :P");
	  	if(isnull(reason) || strlen(reason) < 2) return SCM(playerid, NEF_GREEN, "Usage: /ban <playerid> <reason>");
	  	if(IsPlayerNPC(player)) return SCM(playerid, -1, ""er"Invalid player!");
        if(PlayerInfo[player][KBMarked]) return SCM(playerid, -1, ""er"Can't ban this player!");
        
	    if(strfind(reason, "-", false) != -1)
		{
	        return SCM(playerid, -1, ""er"- ist not allowed");
		}
	    if(strfind(reason, "|", false) != -1)
		{
	        return SCM(playerid, -1, ""er"| ist not allowed");
		}
	    if(strfind(reason, ",", false) != -1)
		{
	        return SCM(playerid, -1, ""er", ist not allowed");
		}
	    if(strfind(reason, "@", false) != -1)
		{
	        return SCM(playerid, -1, ""er"@ ist not allowed");
		}
	    if(strfind(reason, "*", false) != -1)
		{
	        return SCM(playerid, -1, ""er"* ist not allowed");
		}
	    if(strfind(reason, "'", false) != -1)
		{
	        return SCM(playerid, -1, ""er"' ist not allowed");
		}
	    if((strfind(reason, "`", false) != -1) || (strfind(reason, "´", false) != -1))
		{
	        return SCM(playerid, -1, ""er"`´ ist not allowed");
		}

	  	if(PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
	  	{
		 	if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
			{
			    if(!islogged(player)) return SCM(playerid, -1, ""er"Use /ipban on not registered players!");
			    
	   			MySQL_CreateBan(__GetName(player), __GetName(playerid), reason);

				format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been banned by Admin %s(%i) [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, reason);
				SCMToAll(YELLOW, gstr);
				print(gstr);

				format(gstr, sizeof(gstr), "4Server: 2Admin %s(%i) has banned %s(%i) 1(Reason: %s)", __GetName(playerid), playerid, __GetName(player), player, reason);
				IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);

	    		format(gstr, sizeof(gstr), ""red"You have been banned!"white"\n\nAdmin:\t%s\nReason:\t%s\n\nIf you think that you have been banned wrongly,\nwrite a ban appeal on "SVRFORUM"", __GetName(playerid), reason);
	    		ShowPlayerDialog(player, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", gstr, "OK", "");

				KickEx(player);
	    		
	    		PlayerPlaySound(playerid, 1184, 0.0, 0.0, 0.0);
			}
			else
			{
				SCM(playerid, -1, ""er"Player is not connected or is yourself or is the highest level admin");
			}
		}
		else
		{
		    format(gstr, sizeof(gstr), "OMGLOL: %s just tried to ban you with reason: %s", __GetName(playerid), reason);
		    SCM(player, RED, gstr);
		    SCM(playerid, RED, "I hope that was a joke");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:deleterecord(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new map;
		if(sscanf(params, "i", map))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /deleterecord <map>");
		}
		
		format(gstr, sizeof(gstr), "/Race/%03i.race", map);
		if(!fexist(gstr))
		{
		    return SCM(playerid, -1, ""er"Map does not exist");
		}
		
		format(gstr, sizeof(gstr), "SELECT `id` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 1;", map);
		mysql_tquery(g_SQL_handle, gstr, "OnRaceRecordPurged", "ii", playerid, map);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:raceforcemap(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    if(g_RaceStatus == RaceStatus_StandBy) return SCM(playerid, -1, ""er"Race is currently in standby mode!");
	    
	    new map;
		if(sscanf(params, "i", map))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /raceforcemap <map>");
		}
		
		format(gstr, sizeof(gstr), "/Race/%03i.race", map);
		if(!fexist(gstr))
		{
		    return SCM(playerid, -1, ""er"Map does not exist");
		}
		
		g_RaceForceMap = map;
		
		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) forced next race map to %03i", __GetName(playerid), playerid, map);
		AdminMSG(-1, gstr);
		print(gstr);
  	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:main(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL && IsPlayerAdmin(playerid))
	{
	    SetTimer("mainmode", 60000, false);
	    GlobalMain = true;
	    for(new i = 0; i < 20; i++)
		{
			SCMToAll(GREEN, " ");
		}
		SCMToAll(RED, "The server is going down in 1 minute. Please logout before that time.");
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Notice", ""white"_______________________________________________________________________\n\nThe Server is going down in 1 minute. Please logout before that time.\n_______________________________________________________________________", "OK", "");
 	}
	return 1;
}

YCMD:giveweapon(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 3)
    {
		new weaponID, weaponName[20], player, ammo_a;

		if(sscanf(params, "rii", player, weaponID, ammo_a))
		{
		    SCM(playerid, NEF_GREEN, "Usage: /giveweapon <playerid> <weaponid> <ammo>");
		    return 1;
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
	        if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Player is in a minigame!");
	        if(PlayerInfo[player][bGod]) return SCM(playerid, -1, ""er"You can't give players weapons who enabled GOD");

			if(ammo_a < 0 || ammo_a > 10000)
			{
			    format(gstr, sizeof(gstr), ""er"Invalid ammo provided!");
			    SCM(playerid, COLOR_RED, gstr);
			    return 1;
			}

	        if(weaponID == 38 || weaponID == 36 || weaponID == 35 || weaponID == 39 || weaponID == 44 || weaponID == 45|| weaponID == 40) return SCM(playerid, -1, ""er"Can't give restriced weapon");

			if(weaponID <= 0 && weaponID >= 47)
			{
			    if(weaponID == 20)
			    {
					SCM(playerid, -1, ""er"Invalid weapon ID provided!");
					return 1;
				}
				SCM(playerid, -1, ""er"Invalid weapon ID provided!");
				return 1;
			}

			GivePlayerWeapon(player, weaponID, ammo_a);
			GetWeaponName(weaponID, weaponName, sizeof(weaponName));

			format(gstr, sizeof(gstr), ""nef" "GREY_E"Administrator %s(%i) gave you a %s(%i) with %i ammo.", __GetName(playerid), playerid, weaponName, weaponID, ammo_a);
			SCM(player, COLOR_STEELBLUE, gstr);
			format(gstr, sizeof(gstr), ""nef" "GREY_E"You gave %s(%i) a %s(%i) with %i ammo.", __GetName(player), player, weaponName, weaponID, ammo_a);
			SCM(playerid, COLOR_STEELBLUE, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available!");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:dplayers(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		new string[512], tmp[50];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] == DERBY)
		    {
				format(tmp, sizeof(tmp), "{%06x}(%i)%s\n", GetColor__(i) >>> 8, i, __GetName(i));
				strcat(string, tmp);
		    }
		}
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Derby Players", string, "OK", "");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:rplayers(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		new string[512], tmp[50];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerAvail(i) && gTeam[i] == gRACE)
		    {
				format(tmp, sizeof(tmp), "{%06x}(%i)%s\n", GetColor__(i) >>> 8, i, __GetName(i));
				strcat(string, tmp);
		    }
		}
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Race Players", string, "OK", "");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:connectbots(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new count = 0;
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerNPC(i))
	        {
	            count++;
	        }
	    }
	    
	    if(count != 5)
	    {
            for(new i = 0; i < 5; i++)
            {
				if(NPCLabelHandle[i] == Text3D:-1)
				{
				    DestroyDynamic3DTextLabel(NPCLabelHandle[i]);
				    NPCLabelHandle[i] = Text3D:-1;
				}
            }
	        if(count != 0)
	        {
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
					if(IsPlayerNPC(i))
					{
					    Kick(i);
					}
				}
	        }
	        
			ConnectNPC("["SVRSC"]Floatround", "bot0");
			ConnectNPC("["SVRSC"]Inyaface", "bot1");
			ConnectNPC("["SVRSC"]SS_FatGuy", "bot2");
			ConnectNPC("["SVRSC"]TrainRider", "train_lv");
			ConnectNPC("["SVRSC"]CrazyLilMan", "at400_ls");
	    }
	    
	    #if IRC_CONNECT == true
		IRC_QuitBots();
		IRC_SetUp(true);
	    #endif
		
		SCM(playerid, -1, ""er"All IRC bots and Server NPCs have been checked and if needed reconnected");
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:jail(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
		new player, time, reason[144];
		if(sscanf(params, "ris[144]", player, time, reason))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /jail <playerid> <seconds> <reason>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
			if(gTeam[player] == JAIL)
			{
			    format(reason, sizeof(reason), "ERROR: "GREY2_E"%s(%i) is already jailed (gets out in %d seconds)", __GetName(player), player, pJail[player]);
			    SCM(playerid, COLOR_RED, reason);
			    SCM(playerid, COLOR_WHITE, "HINT: /unjail <playerid> to unjail.");
			    return 1;
			}

			if(strlen(reason) > 50)
			{
			 	Error(playerid, "Reason too long! Must be smaller than 50 characters!");
			   	return 1;
			}
			if(time < 10 || time > 300)
			{
			    Error(playerid, "Jail time must remain between 10 and 300 seconds");
			    return 1;
			}

			if(gTeam[player] != NORMAL)
			{
				if(ExitPlayer(player) != 0)
				{
				    return 1;
				}
			}

			gTeam[player] = JAIL;
			pJail[player] = time;
			SetPlayerInterior(player, 3);
			SetPlayerVirtualWorld(player, 10);
			SetPlayerFacingAngle(player, 360.0);
			SetPlayerPos(player, 197.5662, 175.4800, 1004.0);
			ResetPlayerWeapons(player);
			SetPVarInt(player, "JailedByAdmin", 1);

			TextDrawShowForPlayer(player, JailTD);
			SetTimerEx("hideJailTD", 5000, false, "i", player);

			format(gstr, sizeof(gstr), ""yellow"** "red"%s(%i) has been jailed by Admin %s(%i) for %i seconds [Reason: %s]", __GetName(player), player, __GetName(playerid), playerid, time, reason);
			SCMToAll(-1, gstr);
			print(gstr);

			format(gstr, sizeof(gstr), "4Server: 2Administrator %s(%i) jailed %s(%i) for %d seconds. (Reason: %s)", __GetName(playerid), playerid, __GetName(player), player, time, reason);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:unjail(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /unjail <playerid>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

 		if(IsPlayerAvail(player) && player != playerid)
		{
			if(gTeam[player] != JAIL)
			{
			    return Error(playerid, "The player isn't in jail!");
			}

			if(GetPVarInt(player, "JailedByAdmin") != 1)
			{
			    return Error(playerid, "Cannot unjail CNR players");
			}

			pJail[player] = 0;
			gTeam[player] = NORMAL;
			ResetPlayerWorld(player);
			SpawnPlayer(player);

			format(gstr, sizeof(gstr), "Administrator %s(%i) has unjailed %s(%i)", __GetName(playerid), playerid, __GetName(player), player);
			SCMToAll(COLOR_STEELBLUE, gstr);
			format(gstr, sizeof(gstr), "4Administrator %s(%i) has unjailed %s(%i)", __GetName(playerid), playerid, __GetName(player), player);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
		}
		else
		{
            SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return true;
}

YCMD:slap(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /slap <playerid>");
	  	}
	  	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player) && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
		{
		    switch(gTeam[player])
		    {
		        case DERBY, gRACE, BUYCAR, gBG_VOTING, GUNGAME, SPEC, JAIL, HOUSE: return SCM(playerid, -1, ""er"You can't use this command on that player now");
		    }
			if(!DerbyWinner[player] && gTeam[player] == DERBY) return SCM(playerid, -1, ""er"You can't use this command on that player now");

  			new Float:Health,
			  	Float:POS[3];

  			GetPlayerHealth(player, Health);
			SetPlayerHealth(player, floatsub(Health, 25.0));
			GetPlayerPos(player, POS[0], POS[1], POS[2]);
			SetPlayerPos(player, POS[0], POS[1], floatadd(POS[2], 10.0));
			format(gstr, sizeof(gstr), "You have slapped %s(%i)", __GetName(player), player);
			SCM(playerid, BLUE, gstr);
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been slapped by %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is the highest level admin or in a minigame");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:gotoxyza(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use this command now");
		new Float:POS[4];
		if(sscanf(params, "ffff", POS[0], POS[1], POS[2], POS[3]))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /gotoxyza <X> <Y> <Z> <Angle>");
		}
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            SetVehiclePos(GetPlayerVehicleID(playerid), POS[0], POS[1], POS[2]);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), POS[3]);
        }
        else
        {
			SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerFacingAngle(playerid, POS[3]);
		}
		SetCameraBehindPlayer(playerid);
		format(gstr, sizeof(gstr), ""nef" You have teleported yourself to %.3f %.3f %.3f %.3f!", POS[0], POS[1], POS[2], POS[3]);
		SCM(playerid, -1, gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:rv(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
	    new reason[50];
	    if(sscanf(params, "s[49]", reason))
	    {
	        SCM(playerid, NEF_GREEN, "Usage: /rv <reason>");
	        SCM(playerid, NEF_GREEN, "Respawns all unoccupied vehicles");
	        return 1;
	    }

		new Iterator:fVehicles<MAX_VEHICLES>, vehid;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerAvail(i))
			{
			    if(IsPlayerInAnyVehicle(i))
			    {
                    vehid = GetPlayerVehicleID(i);
			        if(!Iter_Contains(fVehicles, vehid))
			        {
						Iter_Add(fVehicles, vehid);
			        }
			    }
			}
		}

	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(IsValidVehicle(i))
	        {
	            if(!Iter_Contains(fVehicles, i))
	            {
	                SetVehicleToRespawn(i);
	            }
	        }
	    }
	    
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(!IsPlayerInAnyVehicle(i) && gTeam[i] == NORMAL)
	        {
	            DestroyPlayerVehicles(i);
	        }
	    }

		format(gstr, sizeof(gstr), ""yellow"** "red"Admin %s(%i) respawned all unoccupied vehicles [Reason: %s]", __GetName(playerid), playerid, reason);
		SCMToAll(YELLOW, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:disarm(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /disarm <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player) && PlayerInfo[player][Level] != MAX_ADMIN_LEVEL)
		{
			if(gTeam[player] == GUNGAME) return SCM(playerid, -1, ""er"Cannot disarm player in gungame");
		    if(!IsPlayerAvail(player) || PlayerInfo[player][Level] >= PlayerInfo[playerid][Level]) return SCM(playerid, -1, ""er"Player is not available or is an higher level admin than you");

			ResetPlayerWeapons(player);

			SendInfo(player, "~y~~h~An Admin reset your weapons!", 2500);
			SendInfo(playerid, "~y~~h~Player has been disarmed!", 2500);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not connected or is the highest level admin");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:getin(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		new seat, player;
		if(sscanf(params, "ri", player, seat))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /getin <playerid> <seat id 1-3>");
		}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		if(IsPlayerAvail(player))
		{
			if(player == playerid || gTeam[player] != NORMAL)
			{
			    return SCM(playerid, -1, ""er"Cannot get in that player");
			}

			if(!IsPlayerInAnyVehicle(player))
			{
				format(gstr, sizeof(gstr), ""er"%s(%i) is not in any vehicle!", __GetName(player), player);
				SCM(playerid, -1, gstr);
				return 1;
			}

			if(IsVehicleOneSeater(GetPlayerVehicleID(player)))
			{
				format(gstr, sizeof(gstr), ""er"%s(%i) is currently driving a one seat vehicle!", __GetName(player), player);
				SCM(playerid, -1, gstr);
				return 1;
			}

			if(seat < 0 || seat > 3)
			{
				return SCM(playerid, NEF_GREEN, "Usage: /getin <playerid> <seat id 1-3>");
			}

			new vID = GetPlayerVehicleID(player), vM = GetVehicleModel(vID);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(!IsPlayerInVehicle(i, vID)) continue;
			    if(GetPlayerVehicleSeat(i) == seat)
			    {
					format(gstr, sizeof(gstr), ""er"Seat %i in %s(%i)'s %s is occupied by %s(%i)", seat, __GetName(player), player, VehicleNames[vM - 400], __GetName(i), i);
					SCM(playerid, -1, gstr);
					return 1;
				}
			}

			SetPlayerInterior(playerid, GetPlayerInterior(player));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
			PutPlayerInVehicle(playerid, vID, seat);

			format(gstr, sizeof(gstr), ""nef" %s(%i) teleported into your %s to seat %i", __GetName(playerid), playerid, VehicleNames[vM - 400], seat);
			SCM(player, -1, gstr);
			format(gstr, sizeof(gstr), ""nef" You teleported into %s(%i)'s %s to seat %i.", __GetName(player), player, VehicleNames[vM - 400], seat);
			SCM(playerid, -1, gstr);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:pweaps(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
	    new player;
	    if(sscanf(params, "r", player))
		{
	        return SCM(playerid, NEF_GREEN, "Usage: /pweaps <playerid>");
	    }
	    
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
		    new bullets[12],
		 		weapons[12],
		 		weapname[12][50],
		 		string[512];

			for(new i = 0; i < 12; i++)
			{
			    GetPlayerWeaponData(player, i + 1, weapons[i], bullets[i]);
			}

			for(new i = 0; i < 11; i++)
			{
			    GetWeaponName(weapons[i], weapname[i], 50);
			}

		    format(string, sizeof(string), ""yellow"- - - - -  [ %s's Weapons ] - - - - -", __GetName(player));
		    SCM(playerid, -1, string);
		    format(string, sizeof(string), "%s(0) - %s(%i) - %s(%i) - %s(%i) - %s(%i) - %s(%i)", weapname[0], weapname[1], bullets[1], weapname[2], bullets[2], weapname[3], bullets[3], weapname[4], bullets[4], weapname[5], bullets[5]);
		    SCM(playerid, WHITE, string);
		    format(string, sizeof(string), "%s(%i) - %s(%i) - %s(%i) - %s(0) - %s(0) - %s(0)", weapname[6], bullets[6], weapname[7], bullets[7] ,weapname[8], bullets[8], weapname[9], weapname[10], weapname[11]);
		    SCM(playerid, WHITE, string);
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
    return 1;
}

YCMD:admins(playerid, params[], help)
{
	new tempstring[128], finstring[2048], count = 0;
	format(finstring, sizeof(finstring), ""nef_yellow"Administrators:\n"white"");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerInfo[i][Level] > 0 && PlayerInfo[i][AOnline])
	    {
	        if(IsPlayerOnDesktop(i))
	        {
				format(tempstring, sizeof(tempstring), "%s(%i) | %s | [AFK]\n", __GetName(i), i, GetRankByLevel(PlayerInfo[i][Level]));
			}
			else
			{
			    format(tempstring, sizeof(tempstring), "%s(%i) | %s\n", __GetName(i), i, GetRankByLevel(PlayerInfo[i][Level]));
			}
			strcat(finstring, tempstring);
			count++;
	    }
	}

	strcat(finstring, "\n"nef_yellow"Very Important Players:\n"white"");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerInfo[i][VIP] == 1)
	    {
	        if(IsPlayerOnDesktop(i))
	        {
				format(tempstring, sizeof(tempstring), "%s(%i) | [AFK]\n", __GetName(i), i);
	        }
			else
			{
			    format(tempstring, sizeof(tempstring), "%s(%i)\n", __GetName(i), i);
			}
	        strcat(finstring, tempstring);
			count++;
	    }
	}
	if(count == 0)
	{
	    SendInfo(playerid, "~y~~h~No admins/VIPs online!", 2100);
	}
	else
	{
	    format(tempstring, sizeof(tempstring), "\n"white"Total of "nef_yellow"%i "white"admins/VIPs online!", count);
	    strcat(finstring, tempstring);
		ShowPlayerDialog(playerid, ADMINS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Admins", finstring, "OK", "");
	}
	return 1;
}

YCMD:vips(playerid, params[], help)
{
	new tempstring[128], finstring[1024], count = 0;
	format(finstring, sizeof(finstring), ""yellow"ID:\t\tName:\n"white"");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerInfo[i][VIP] == 1)
	    {
            if(IsPlayerOnDesktop(i))
            {
				format(tempstring, sizeof(tempstring), "%i\t\t%s | [AFK]\n", i, __GetName(i));
			}
			else
			{
			    format(tempstring, sizeof(tempstring), "%i\t\t%s\n", i, __GetName(i));
			}
			strcat(finstring, tempstring);
			count++;
	    }
	}
	if(count == 0)
	{
	    SendInfo(playerid, "~y~~h~No VIPs online!", 2100);
	}
	else
	{
	    format(tempstring, sizeof(tempstring), "\n\n"white"Total of "nef_yellow"%i "white"aVIPs online!", count);
	    strcat(finstring, tempstring);
		ShowPlayerDialog(playerid, ADMINS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - VIPs", finstring, "OK", "");
	}
	return 1;
}

YCMD:a(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] == 0) return SCM(playerid, -1, NO_PERM);
    
	if(sscanf(params, "s[144]", gstr))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /a <text>");
	}

    format(gstr2, sizeof(gstr2), "[ADMIN CHAT] "LG_E"%s(%i): "LB_E"%s", __GetName(playerid), playerid, gstr);
	AdminMSG(COLOR_RED, gstr2);
	return 1;
}

YCMD:p(playerid, params[], help)
{
	if(PlayerInfo[playerid][VIP] != 1 && PlayerInfo[playerid][Level] == 0) return Command_ReProcess(playerid, "/vip", false);

	if(sscanf(params, "s[144]", gstr))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /p <text>");
	}

	if(IsAd(gstr))
	{
	  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, gstr, __GetIP(playerid));
		AdminMSG(RED, gstr2);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}

	format(gstr2, sizeof(gstr2), ""white"["lb_e"VIP CHAT"white"] {%06x}%s"lb_e"(%i): %s", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, gstr);
	VIPMSG(-1, gstr2);
	return 1;
}

YCMD:vipli(playerid, params[], help)
{
	if(PlayerInfo[playerid][VIP] == 1)
	{
		new tick = GetTickCount() + 3600000;
	 	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
		{
			if((PlayerInfo[playerid][tickLastVIPLInv] + COOLDOWN_CMD_VIPLI) >= tick)
			{
			    return SCM(playerid, -1, ""nef" Please wait before using this command again again");
			}
		}
		
		new player;
		if(sscanf(params, "r", player))
		{
		    return SCM(playerid, NEF_GREEN, "Usage: /vipli <playerid>");
		}
		
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
 		if(IsPlayerAvail(player))
		{
			if(PlayerInfo[player][VIP] == 1) return SCM(playerid, -1, ""er"You cannot invite this player");
			if(PlayerInfo[player][Level] > 0) return SCM(playerid, -1, ""er"You cannot invite this player");

			PlayerInfo[player][GotVIPLInv] = true;

			format(gstr, sizeof(gstr), ""yellow_e"%s(%i) invited you to the VIP Lounge. Type /accept to join.", __GetName(playerid), playerid);
			SCM(player, -1, gstr);

			format(gstr, sizeof(gstr), ""yellow_e"Invitation sent to %s(%i)", __GetName(player), player);
			SCM(playerid, -1, gstr);

		    PlayerInfo[playerid][tickLastVIPLInv] = tick;
		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:accept(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1) return SCM(playerid, -1, ""er"You can't use this command as VIP");
    
	if(!PlayerInfo[playerid][GotVIPLInv])
	{
	    return SCM(playerid, -1, ""er"You got no invitation");
	}
	
	if(gTeam[playerid] != NORMAL)
	{
	    Command_ReProcess(playerid, "/exit", false);
	}
	
	SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
	SetPlayerInterior(playerid, 3);
    gTeam[playerid] = VIPL;
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

	SCM(playerid, -1, ""yellow_e"You've used your invitation");

	PlayerInfo[playerid][GotVIPLInv] = false;
	return 1;
}

YCMD:viplounge(playerid, params[], help)
{
    PortPlayerMap(playerid, -2622.3103,1403.3483,7.1016,12.389, "VIP Lounge", "vipl");
	return 1;
}

YCMD:vip(playerid, params[], help)
{
	new string[2048];
	
	strcat(string, ""nef_yellow"Very Important Player (VIP)\n\n"yellow_e"Features:"white"\n"dl" Access to VIP vehicles in /v\n"dl" $1,000,000 to your bank (/bank)\n");
	strcat(string, ""dl" 2 PV slots + 1 house/bizz slot\n");
	strcat(string, ""dl" VIP Chat (/p)\n"dl" 100\% Armor On Spawn\n"dl" Jetpack Spawn (/jetpack)\n"dl" Hydra Spawn (/hydra)\n");
	strcat(string, ""dl" Countdown command (/cd)\n"dl" Namechange all 30 days (/changename)\n"dl" Open/Close Mellnik´s Gate (/opengate /closegate)");
	strcat(string, "\n"dl" Spectate Players (/spec)\n"dl" More interest each PayDay\n"dl" Access to VIP Forums\n"dl" Access to Beta Changelogs\n"dl" Rainbow effect (/rainbow)\n"dl" Custom Label (/label)\n");
	strcat(string, ""dl" Get listed in /vips and /admins\n"dl" Namechange lookup (/ncrecords)\n"dl" Play as "BLUE_E"SWAT "white"in CNR");
	strcat(string, "\n"dl" Message to all players when joining the server\n"dl" Vehicle Control System (/vcs)\n"dl" VIP Lounge (/vipl)\n"dl" VIP Lounge Invite (/vipli)\n"dl" Direct Spawn in /adminhq\n"dl" Access to VIP Private Vehicles");
	strcat(string, "\n"dl" Attach Trailers to your truck (/trailer)\n"dl" Create Ramps (/ramp)\n"dl" Health and Armor (/harefill)");
	strcat(string, "\n\n"nef_yellow"Get VIP today! Go To:\n");
	strcat(string, ""red"-> "yellow_e""SVRURLWWW"/vip");
    ShowPlayerDialog(playerid, VIP_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Very Important Player (VIP)", string, "OK", "");
	return 1;
}

YCMD:hydra(playerid, params[], help)
{
	if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	    if(IsPlayerInRangeOfPoint(playerid, 65.0, 1797.3141, -1302.0978, 120.2659) && PlayerInfo[playerid][Level] < 1) return SCM(playerid, -1, ""er"Can´t spawn vehicle at this place!");
		
		CarSpawner(playerid, 520, 120);
	}
	else
	{
		Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:god(playerid, params[], help)
{
	if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	
	new mode[30], bool:silent = false;
	if(!sscanf(params, "s[30]", mode))
	{
	    if(!strcmp(mode, "silent", true))
	    {
	        silent = true;
	    }
	}
	if(gTeam[playerid] == NORMAL)
	{
		if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't use god now");
	    if(PlayerInfo[playerid][bGod])
	    {
	        SetPVarInt(playerid, "HadGod", 0);
	 		SCM(playerid, COLOR_RED, ""nef" "GREY_E"You have disabled god-mode. You can now lose health in stunt zones.");
			SCM(playerid, COLOR_RED, "> "YELLOW_E"You can now freely use weapons.");
	        TextDrawHideForPlayer(playerid, TXTGodTD);
	        SetPlayerHealth(playerid, 100.0);
	        PlayerInfo[playerid][bGod] = false;
	        RandomWeapon(playerid);
	    }
	    else
	    {
	        new Float:HP;
	        GetPlayerHealth(playerid, HP);
			if(HP < 40 && !silent) return GameTextForPlayer(playerid, "~b~~h~~h~Your health may not be below 40!", 2000, 3);
	        SetPVarInt(playerid, "HadGod", 1);
		    SCM(playerid, COLOR_RED, ""nef" "GREY_E"You have enabled god-mode. You will now have infinith health in stunt zones.");
			SCM(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
	        TextDrawShowForPlayer(playerid, TXTGodTD);
	        ResetPlayerWeapons(playerid);
	        SetPlayerHealth(playerid, 999999.0);
	        PlayerInfo[playerid][bGod] = true;
	    }
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:v70(playerid, params[], help) // Cheetah
{
	if(PlayerInfo[playerid][VIP] == 0) return 1;

    CarSpawner(playerid, 415);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.450000,0.824999,-0.599999,-27.000003,-0.000000,-269.999877);

	hVIPVehObj[playerid][1] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.524999,0.824999,-0.674999,21.599998,-0.000000,-269.999877);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.000000,2.100000,0.000000,67.500007,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(19314,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, -0.000000,0.000000,0.599999,70.200004,89.099983,0.000000);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Cheetah!");
	return 1;
}

YCMD:v71(playerid, params[], help)// Infernus
{
	if(PlayerInfo[playerid][VIP] == 0) return 1;

    CarSpawner(playerid, 411);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, 0.000000,-2.100000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.000000,-1.725000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.449999,0.000000,0.749999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, -0.000000,2.175000,0.075000,70.200004,-0.000001,-0.000001);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Infurnes!");
	return 1;
}

YCMD:v72(playerid, params[], help) // Huntley
{
	if(PlayerInfo[playerid][VIP] == 0) return 1;

    CarSpawner(playerid, 579);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(2985,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.000000,1.725000,-0.225000,0.000001,0.000000,91.799980);

	hVIPVehObj[playerid][1]= CreateDynamicObject(19314,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.000000,0.225000,1.200000,91.799980,-89.099983,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -0.600000,-1.049999,1.200000,-0.000001,-0.000001,89.099983);

	hVIPVehObj[playerid][3] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 0.674999,-1.049999,1.200000,-0.000001,-0.000001,89.099983);

	hVIPVehObj[playerid][4] = CreateDynamicObject(18652,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][5] = CreateDynamicObject(18652,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][6] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, -1.125000,0.899999,0.150000,-5.399999,0.000000,89.099983);

	hVIPVehObj[playerid][7] = CreateDynamicObject(1247,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, 1.124999,0.899999,0.150000,-5.399999,0.000000,89.099983);

    hVIPVehObj[playerid][8] = CreateDynamicObject(1318,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][8], vID, 0.000000,-0.899999,1.350000,-264.599853,-359.100280,-359.100280);

	hVIPVehObj[playerid][9] = CreateDynamicObject(954,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][9], vID, -0.000000,-2.700001,0.749999,-21.600002,-0.000000,-0.000000);

	hVIPVehObj[playerid][10] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][10], vID, 0.000000,2.400000,0.225000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][11] = CreateDynamicObject(19419,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][11], vID, -0.000000,-2.250000,1.125000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][12] = CreateDynamicObject(1248,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][12], vID, -0.000000,-2.775001,0.000000,0.000000,0.000000,0.000000);

	ChangeVehicleColor(vID, 0, 0);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Huntley!");
	return 1;
}

YCMD:v73(playerid, params[], help) // Bullet
{
	if(PlayerInfo[playerid][VIP] == 0) return 1;

    CarSpawner(playerid, 541);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, -0.000000,1.950000,0.075000,72.900001,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, -0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][2] = CreateDynamicObject(18647,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, 0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18749,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, -0.000000,-1.800000,0.375000,-78.299995,-0.000001,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.300000,0.000000,0.599999,-0.000002,0.000000,89.099960);

	hVIPVehObj[playerid][5] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 0.374999,0.000000,0.599999,-0.000002,0.000000,89.099960);

	hVIPVehObj[playerid][6] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, -0.000000,0.000000,0.674999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][7] = CreateDynamicObject(355,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, -0.149999,-2.324999,0.000000,5.399998,-16.200000,5.400000);

	ChangeVehicleColor(vID, 0, 3);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom Bullet!");
	return 1;
}

YCMD:v74(playerid, params[], help) // NRG
{
	if(PlayerInfo[playerid][VIP] == 0) return 1;

    CarSpawner(playerid, 522);

    new vID = GetPlayerVehicleID(playerid);

	hVIPVehObj[playerid][0] = CreateDynamicObject(18650,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][0], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][1] = CreateDynamicObject(362,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][1], vID, 0.075000,0.600000,0.675000,5.399998,24.300001,99.899971);

	hVIPVehObj[playerid][2] = CreateDynamicObject(1254,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][2], vID, -0.150000,1.800000,0.524999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][3] = CreateDynamicObject(18646,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][3], vID, 0.000000,-0.899999,0.599999,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][4] = CreateDynamicObject(19130,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][4], vID, -0.675000,0.000000,0.824999,40.500003,0.000002,-80.999992);

	hVIPVehObj[playerid][5] = CreateDynamicObject(19130,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][5], vID, 0.824999,0.000000,0.824999,40.500003,0.000002,-269.999877);

	hVIPVehObj[playerid][6] = CreateDynamicObject(18749,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][6], vID, 0.000000,-1.125000,0.300000,0.000000,0.000000,0.000000);

	hVIPVehObj[playerid][7] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][7], vID, -0.375000,0.000000,0.000000,0.000000,0.000000,89.099983);

	hVIPVehObj[playerid][8] = CreateDynamicObject(359,0,0,-1000,0,0,0);
	AttachDynamicObjectToVehicle(hVIPVehObj[playerid][8], vID, 0.449999,0.000000,0.000000,0.000000,0.000000,89.099983);

	ChangeVehicleColor(vID, 0, 6);
	SCM(playerid, -1, ""nef" "LB2_E"You have spawned a custom NRG!");
	return 1;
}

YCMD:adminhq(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

	if(PlayerInfo[playerid][Level] > 0)
	{
		SetPlayerPos(playerid, 1797.4270,-1300.9581,120.2656);
		format(gstr, sizeof(gstr), ""nef" Admin %s(%i) teleported to Admin´s Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	 	ResetPlayerWorld(playerid);
	 	PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	else if(PlayerInfo[playerid][VIP] == 1)
	{
		SetPlayerPos(playerid, 1797.4270,-1300.9581,120.2656);
		format(gstr, sizeof(gstr), ""nef" VIP %s(%i) teleported to Admin´s Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	 	ResetPlayerWorld(playerid);
	 	PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	else
	{
	    SetPlayerPos(playerid, 1786.5049,-1298.0465,120.2656);
		format(gstr, sizeof(gstr), ""nef" Player %s(%i) teleported to Admin´s Headquarter! (/adminhq)", __GetName(playerid), playerid);
		SCMToAll(-1, gstr);
	    ResetPlayerWorld(playerid);
		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", 1797.3141, -1302.0978, 120.2659, 50.0, 1);
	}
	return 1;
}

YCMD:cd(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 0) return Command_ReProcess(playerid, "/vip", false);
    
   	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastCD] + COOLDOWN_CMD_CD) >= tick)
	{
	    return SCM(playerid, -1, ""nef" Please wait before sending a message again");
	}
    if(IsCountDownRunning) return SCM(playerid, -1, ""er"Countdown is already running");
    
    iCountdownVIP = 5;
    IsCountDownRunning = true;
    
    tVIPCountdown = SetTimer("CountdownVIP", 1000, true);
    
    new str[255];
   	format(str, sizeof(str), ""nef" VIP {%06x}%s(%i) "white"has started a countdown!", GetColor__(playerid) >>> 8, __GetName(playerid), playerid);
	SCMToAll(-1, str);
	
	PlayerInfo[playerid][tickLastCD] = tick;
	return 1;
}

function:CountdownVIP()
{
	switch(iCountdownVIP)
	{
	    case 5:
	    {
			GameTextForAll("~r~~h~~h~- 5 -", 1000, 3);
	    }
	    case 4:
	    {
	        GameTextForAll("~p~~h~~h~- 4 -", 1000, 3);
	    }
	    case 3:
	    {
	        GameTextForAll("~b~~h~~h~- 3 -", 1000, 3);
	    }
	    case 2:
	    {
	        GameTextForAll("~g~~h~~h~- 2 -", 1000, 3);
	    }
	    case 1:
	    {
	        GameTextForAll("~y~~h~- 1 -", 1000, 3);
	    }
 	    case 0:
	    {
	        GameTextForAll("~g~~h~~h~GO GO GO", 1000, 3);
	        KillTimer(tVIPCountdown);
         	IsCountDownRunning = false;
	    }
	    default:
	    {
	        GameTextForAll("~g~~h~~h~GO GO GO", 1000, 3);
	        KillTimer(tVIPCountdown);
         	IsCountDownRunning = false;
	    }
	}
	iCountdownVIP--;
	return 1;
}

YCMD:rainbow(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 0) return Command_ReProcess(playerid, "/vip", false);
    
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use the rainbow feature!");
	}

	if(PVSelect[playerid] != -1)
	{
	    if(GetPlayerVehicleID(playerid) == PlayerPV[playerid][PVSelect[playerid]][PVehicleID]) return SCM(playerid, -1, ""er"Not possible in PVs!");
	}

	if(!PlayerInfo[playerid][bRainbow])
	{
		PlayerInfo[playerid][tRainbow] = SetTimerEx("ChangeColors", 500, true, "i", playerid);
		PlayerInfo[playerid][bRainbow] = true;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned on");
	}
	else
	{
		KillTimer(PlayerInfo[playerid][tRainbow]);
		PlayerInfo[playerid][bRainbow] = false;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned off");
	}
	return true;
}

YCMD:headsetlevel(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
		switch(YHash(__GetName(playerid), false))
		{
		    case _I(c,h,r,i,s), _I(a,d,a,m): { }
			default: return SCM(playerid, -1, ""er"You may not use this command!");
		}
	    
	    new player, alevel;
	 	if(sscanf(params, "ri", player, alevel))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /headsetlevel <playerid> <level>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
			if(alevel > MAX_ADMIN_LEVEL)
			{
				return SCM(playerid, -1, ""er"Incorrect Level");
			}
			if(alevel == PlayerInfo[player][Level])
			{
				return SCM(playerid, -1, ""er"Player is already this level");
			}
			if(alevel >= 5)
			{
			    return SCM(playerid, -1, ""er"Level: 0-4");
			}
			if(PlayerInfo[player][Level] >= 5)
			{
			    return SCM(playerid, -1, ""er"You may not set this admin");
			}
			
  			new time[3];
   			gettime(time[0], time[1], time[2]);

			if(alevel > 0)
			{
				format(gstr, sizeof(gstr), "Head Admin %s has set you to Admin Status [level %i]", __GetName(playerid), alevel);
			}
			else
			{
				format(gstr, sizeof(gstr), "Head Admin %s has set you to Player Status [level %i]", __GetName(playerid), alevel);
			}
			SCM(player, BLUE, gstr);

			if(alevel > PlayerInfo[player][Level])
			{
				GameTextForPlayer(player, "Promoted", 5000, 3);
			}
			else
			{
				GameTextForPlayer(player, "Demoted", 5000, 3);
			}
			MySQL_SavePlayer(player, false);
			format(gstr, sizeof(gstr), "You have made %s Level %i at %i:%i:%i", __GetName(player), alevel, time[0], time[1], time[2]);
			SCM(playerid, BLUE, gstr);
			format(gstr, sizeof(gstr), "Head Admin %s has made %s Level %i at %i:%i:%i", __GetName(playerid), __GetName(player), alevel, time[0], time[1], time[2]);
            SCM(player, BLUE, gstr);
            print(gstr);
			PlayerInfo[player][Level] = alevel;
		}
		else
		{
			SCM(playerid, -1, ""er"Cannot assign permissions");
		}
	}
	return 1;
}

YCMD:setadminlevel(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL || IsPlayerAdmin(playerid))
	{
	    new player, alevel;
	 	if(sscanf(params, "ri", player, alevel))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /setadminlevel <playerid> <level>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

		if(IsPlayerAvail(player))
		{
			if(alevel > MAX_ADMIN_LEVEL)
			{
				return SCM(playerid, -1, ""er"Incorrect Level");
			}
			if(alevel == PlayerInfo[player][Level])
			{
				return SCM(playerid, -1, ""er"Player is already this level");
			}
  			new time[3], string[128];
   			gettime(time[0], time[1], time[2]);

			if(alevel > 0)
			{
				format(string, sizeof(string), "Admin %s has set you to Admin Status [level %i]", __GetName(playerid), alevel);
			}
			else
			{
				format(string, sizeof(string), "Admin %s has set you to Player Status [level %i]", __GetName(playerid), alevel);
			}
			SCM(player, BLUE, string);

			if(alevel > PlayerInfo[player][Level])
			{
				GameTextForPlayer(player, "Promoted", 5000, 3);
			}
			else
			{
				GameTextForPlayer(player, "Demoted", 5000, 3);
			}
			MySQL_SavePlayer(player, false);
			format(string, sizeof(string), "You have made %s Level %i at %i:%i:%i", __GetName(player), alevel, time[0], time[1], time[2]);
			SCM(playerid, BLUE, string);
			format(string, sizeof(string), "Admin %s has made %s Level %i at %i:%i:%i", __GetName(playerid), __GetName(player), alevel, time[0], time[1], time[2]);
            SCM(player, BLUE, string);
            print(string);
			PlayerInfo[player][Level] = alevel;
		}
		else
		{
			SCM(playerid, -1, ""er"Cannot assign permissions");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:report(playerid, params[], help)
{
	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastReport] + COOLDOWN_CMD_REPORT) >= tick)
	{
    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
	}

	new	player, reason[144];
	if(sscanf(params, "rs[144]", player, reason))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /report <playerid> <reason>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
 	if(IsPlayerAvail(player) && player != playerid && PlayerInfo[player][Level] == 0)
	{
		if(strlen(reason) < 4) return SCM(playerid, -1, ""er"Please write a proper reason");

		new time[3];

		gettime(time[0], time[1], time[2]);

		format(gstr, sizeof(gstr), ""YELLOW_E"Report(%02i:%02i:%02i) "RED_E"%s(%i) -> %s(%i) -> %s", time[0], time[1], time[2], __GetName(playerid), playerid, __GetName(player), player, reason);
		for(new i = 1; i < MAX_REPORTS - 1; i++)
		{
			Reports[i] = Reports[i + 1];
		}
		Reports[MAX_REPORTS - 1] = gstr;

        AdminMSG(-1, gstr);

		SCM(playerid, YELLOW, "Your report has been sent to online Admins");
		PlayerInfo[playerid][tickLastReport] = tick;
	}
	else
	{
		SCM(playerid, -1, ""er"You cannot report this player!");
	}
	return 1;
}

YCMD:reports(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 1)
	{
        new ReportCount;
		for(new i = 1; i < MAX_REPORTS; i++)
		{
			if(strcmp(Reports[i], "<none>", true) != 0)
			{
				ReportCount++;
				SCM(playerid, WHITE, Reports[i]);
			}
		}
		
		if(ReportCount == 0)
		{
			SCM(playerid, WHITE, "There have been no reports");
		}
    }
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:race(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't join minigames while being in a Gang War, type /exit");
    
	switch(gTeam[playerid])
	{
	    case STORE, BUYCAR, SPEC, VIPL, gBUILDRACE, HOUSE, JAIL: return SCM(playerid, RED, NOT_AVAIL);
	}

    if(gTeam[playerid] == gRACE) return SCM(playerid, -1, ""er"You are already in this minigame!");
    if(gTeam[playerid] != NORMAL) return GameTextForPlayer(playerid, "~w~Type ~p~/exit ~w~to leave first!", 4000, 4);
    
    SavePos(playerid);
    
    switch(g_RaceStatus)
    {
        case RaceStatus_StandBy:
        {
            Iter_Clear(RaceJoins);
            g_RaceStatus = RaceStatus_StartUp;
            g_tRaceCounter = SetTimer("CountTillRace", 1000, true);
        }
        case RaceStatus_Inactive:
        {
            SCM(playerid, -1, ""er"No Race active!");
        }
        case RaceStatus_Active:
        {
            SCM(playerid, -1, ""er"Sorry, race already started");
        }
    }
    
    if(g_RaceStatus == RaceStatus_StartUp)
    {
		if(Iter_Contains(RaceJoins, playerid))
		{
			SCM(playerid, -1, ""er"You already joined this race round!");
		}
		else
		{
		    if(g_RacePlayerCount == RACE_MAX_PLAYERS) return SCM(playerid, -1, ""er"Race reached it's max players");
		    
		    CheckPlayerGod(playerid);

			Command_ReProcess(playerid, "/stopanims", false);
			Iter_Add(RaceJoins, playerid);
			SetupRaceForPlayer(playerid);
			NewMinigameJoin(playerid, "Race", "race");
		}
    }
	return 1;
}

YCMD:sethouseprice(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new hprice; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /sethouseprice <price>");
	}

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;
	    found = true;

	    if(HouseInfo[i][sold] == 1) return SCM(playerid, -1, ""er"House connot be sold");

	    HouseInfo[i][price] = hprice;

 	   	format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, gstr);
	    MySQL_SaveHouse(i);

		SendInfo(playerid, "~g~~h~~h~House price has been set!", 2000);
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:sethousescore(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new hscore; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /sethousescore <score>");
	}

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;
	    found = true;

	    if(HouseInfo[i][sold] == 1) return SCM(playerid, -1, ""er"House connot be sold");

	    HouseInfo[i][E_score] = hscore;

 	   	format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, gstr);
	    MySQL_SaveHouse(i);

		SendInfo(playerid, "~g~~h~~h~House score has been set!", 2000);
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:resethouse(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

 	new bool:found = false;
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;
	    found = true;

		if(HouseInfo[i][sold] == 0) return SCM(playerid, -1, ""er"House is not sold");

		new player = __GetPlayerID(HouseInfo[i][Owner]);
		if(player != INVALID_PLAYER_ID)
		{
	        PlayerInfo[player][Houses]--;
	        SCM(player, -1, "An admin destroyed your house!");
			MySQL_SavePlayer(player, false);
		}
		else
		{
			format(gstr, sizeof(gstr), "UPDATE `accounts` SET `Houses` = `Houses` - 1 WHERE `Name` = '%s' LIMIT 1;", HouseInfo[i][Owner]);
			mysql_tquery(g_SQL_handle, gstr, "", "");
		}
		
	    strmid(HouseInfo[i][Owner], "ForSale", 0, 25, 25);
	    HouseInfo[i][sold] = 0;
        HouseInfo[i][locked] = 1;
        HouseInfo[i][date] = 0;
		for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
		{
			if(HouseInfo[i][E_Obj_Model][ii] != 0)
			{
			    DestroyDynamicObject(HouseInfo[i][E_Obj_ObjectID][ii]);
			    DestroyDynamic3DTextLabel(HouseInfo[i][E_Obj_Label][ii]);
			    HouseInfo[i][E_Obj_Label][ii] = Text3D:-1;
			    HouseInfo[i][E_Obj_ObjectID][ii] = -1;
			    HouseInfo[i][E_Obj_Model][ii] = 0;
			}
		}
        
		MySQL_SaveHouse(i, true);

	    format(gstr, sizeof(gstr), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
	    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(HouseInfo[i][iconid]);
	    DestroyDynamicPickup(HouseInfo[i][pickid]);
	    HouseInfo[i][iconid] = CreateDynamicMapIcon(HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], 31, 1, 0, -1, -1, 150.0);
	    HouseInfo[i][pickid] = CreateDynamicPickup(1273, 1, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z], -1, -1, -1, 30.0);

		SendInfo(playerid, "~g~~h~~h~The house has been reset!", 2000);
  		break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the house pickup (Entrance)");
	return 1;
}

YCMD:setbizzlevel(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

	extract params -> new plevel; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /setbizzlevel <level>");
	}
	if(plevel > 20 || plevel < 1) return SCM(playerid, -1, ""er"Business level 1 - 20");
	
 	new bool:found = false;
	for(new i = 0; i < propid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z])) continue;
	    found = true;

        PropInfo[i][E_Level] = plevel;

		if(PropInfo[i][sold] == 1)
		{
		    format(gstr, sizeof(gstr), ""business_mark"\nOwner: %s\nID: %i\nLevel: %i", PropInfo[i][Owner], PropInfo[i][iID], PropInfo[i][E_Level]);
		}
		else
		{
		    format(gstr, sizeof(gstr), ""business_mark"\nOwner: ---\nID: %i\nLevel: %i", PropInfo[i][iID], PropInfo[i][E_Level]);
		}
		
		UpdateDynamic3DTextLabelText(PropInfo[i][label], -1, gstr);
	    MySQL_SaveProp(i);

		SendInfo(playerid, "~g~~h~~h~Business level has been set!", 2000);
	    break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the business pickup (Entrance)");
	return 1;
}

YCMD:resetbizz(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL) return SCM(playerid, -1, NO_PERM);

 	new bool:found = false;
	for(new i = 0; i < propid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z])) continue;
	    found = true;

		if(PropInfo[i][sold] == 0) return SCM(playerid, -1, ""er"Business is not sold");

		new bool:pfound = false;
		for(new pid = 0; pid < MAX_PLAYERS; pid++)
		{
		    if(!strcmp(PropInfo[i][Owner], __GetName(pid), true) && IsPlayerConnected(pid))
		    {
				pfound = true;
		        PlayerInfo[pid][Props]--;
		        SCM(pid, -1, "An admin destroyed your business!");
				MySQL_SavePlayer(pid, false);
				break;
		   	}
		}
		if(!pfound)
		{
			format(gstr, sizeof(gstr), "UPDATE `accounts` SET `Props` = `Props` - 1 WHERE `Name` = '%s' LIMIT 1;", PropInfo[i][Owner]);
			mysql_tquery(g_SQL_handle, gstr, "", "");
		}
	    strmid(PropInfo[i][Owner], "ForSale", 0, 25, 25);
	    PropInfo[i][sold] = 0;
        PropInfo[i][date] = 0;
        PropInfo[i][E_Level] = 1;
		MySQL_SaveProp(i);

	    format(gstr, sizeof(gstr), ""business_mark"\nOwner: ---\nID: %i\nLevel: %i", PropInfo[i][iID], PropInfo[i][E_Level]);
	    UpdateDynamic3DTextLabelText(PropInfo[i][label], -1, gstr);
	    DestroyDynamicMapIcon(PropInfo[i][iconid]);
	    PropInfo[i][iconid] = CreateDynamicMapIcon(PropInfo[i][E_x], PropInfo[i][E_y], PropInfo[i][E_z], 52, 1, 0, -1, -1, 150.0);

        SendInfo(playerid, "~g~~h~~h~The business has been reset!", 2000);
  		break;
	}
    if(!found) SCM(playerid, -1, ""er"You need to stand in the business pickup (Entrance)");
	return 1;
}

#if IS_RELEASE_BUILD == false
YCMD:createrace(playerid, params[], help)
{
	if(IsPlayerAdmin(playerid) && PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL)
	{
		if(g_BuildRace != INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"There's already someone building a race!");
		if(g_RaceStatus == RaceStatus_Active) return SCM(playerid, -1, ""er"Wait first till race ends!");
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please leave your vehicle first!");
		g_BuildRace = playerid;
		g_BuildDeployTime = gettime();
		
		ShowDialog(playerid, DIALOG_RACE_RACETYPE);
		gTeam[playerid] = gBUILDRACE;

		DestroyPlayerVehicles(playerid);
	
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
	    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 0);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}
#endif

YCMD:createbizz(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}
	
  	new Float:POS[3];
  	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

	PropInfo[propid][E_x] = POS[0];
	PropInfo[propid][E_y] = POS[1];
	PropInfo[propid][E_z] = POS[2];
	PropInfo[propid][E_Level] = 1;
	PropInfo[propid][sold] = 0;

	strmid(PropInfo[propid][Owner], "ForSale", 0, 25, 25);

	new query[356];
	format(query, sizeof(query), "INSERT INTO `props` VALUES (NULL, '%s', %.2f, %.2f, %.2f, 1, 0, 0);",
		PropInfo[propid][Owner],
		PropInfo[propid][E_x],
	 	PropInfo[propid][E_y],
		PropInfo[propid][E_z]);

    mysql_tquery(g_SQL_handle, query, "", "");
    mysql_tquery(g_SQL_handle, "SELECT * FROM `props` ORDER BY `ID` DESC LIMIT 1;", "OnPropLoadEx", "i", propid);

    propid++;
    return 1;
}

YCMD:createhouse(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}

	extract params -> new h_price, h_score, h_int; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /createhouse <price> <score> <int id>");
	}

	if(h_int > 13 || h_int < 0) return SCM(playerid, -1, ""er"Interior 0-13");
	if(h_score > 1000000 || h_score < 1) return SCM(playerid, -1, ""er"Score 1 - 1,000,000");
	if(h_price > 1000000000 || h_price < 1) return SCM(playerid, -1, ""er"Price 1 - 1,000,000,000");

	new Float:POS[3];

	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

	HouseInfo[houseid][E_x] = POS[0];
	HouseInfo[houseid][E_y] = POS[1];
	HouseInfo[houseid][E_z] = POS[2];
	HouseInfo[houseid][E_score] = h_score;
	HouseInfo[houseid][price] = h_price;
	HouseInfo[houseid][interior] = h_int;
	HouseInfo[houseid][locked] = 1;
	HouseInfo[houseid][sold] = 0;
	HouseInfo[houseid][date] = 0;

	strmid(HouseInfo[houseid][Owner], "ForSale", 0, 25, 25);

	new query[255];
	
	format(query, sizeof(query), "INSERT INTO `houses` (`ID`, `Owner`, `XPos`, `YPos`, `ZPos`, `Interior`, `Price`, `Score`, `Sold`, `Locked`, `Date`) VALUES (NULL, '%s', %.2f, %.2f, %.2f, %i, %i, %i, %i, %i, %i);",
	    HouseInfo[houseid][Owner],
		HouseInfo[houseid][E_x],
		HouseInfo[houseid][E_y],
		HouseInfo[houseid][E_z],
	    HouseInfo[houseid][interior],
	    HouseInfo[houseid][price],
	    HouseInfo[houseid][E_score],
	    HouseInfo[houseid][sold],
	    HouseInfo[houseid][locked],
		HouseInfo[houseid][date]);

    mysql_tquery(g_SQL_handle, query, "", "");
    mysql_tquery(g_SQL_handle, "SELECT * FROM `houses` ORDER BY `ID` DESC LIMIT 1;", "OnHouseLoadEx", "i", houseid);

    houseid++;
    return 1;
}

YCMD:createstore(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		return SCM(playerid, -1, NO_PERM);
	}

	new string[80],
		file[50],
		labeltext[50],
		Float:POS[4];

	extract params -> new string:store[144]; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}

	if(strlen(store) < 3 || strlen(store) > 11)
	{
		return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}

    if(strcmp(store, "bank", true) && strcmp(store, "ammunation", true) && strcmp(store, "burger", true) && strcmp(store, "cluckinbell", true) && strcmp(store, "pizza", true) && strcmp(store, "247", true))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /createstore (bank/ammunation/burger/cluckinbell/pizza/247)");
	}
	else
	{
	    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(playerid, POS[3]);
		dini_Create("/Store/Index.ini");
		dini_IntSet("/Store/Index.ini", "TotalStores", (dini_Int("/Store/Index.ini", "TotalStores") + 1));

	    if(!strcmp(store, "bank", true))
	    {
	        new bankid = dini_Int("/Store/Index.ini", "CurrentBankID");
	        if(bankid >= MAX_BANKS)
			{
				return SCM(playerid, -1, ""er"Unable to create more banks. There are already "#MAX_BANKS" created");
			}
	        else
	        {
		        format(string, sizeof(string), "Bank ID %i created.", bankid);
		        format(labeltext, sizeof(labeltext), "Bank");
		    	format(file, sizeof(file), "/Store/Banks/%i.ini", bankid);
 				if(dini_Create(file))
 				{
			    	dini_IntSet("/Store/Index.ini", "CurrentBankID", (bankid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentBankWorld", (bankid + 1000));
			    	BankPickOut[bankid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 30.0);
		   			BankPickInt[bankid] = CreateDynamicPickup(1559, 1, 2304.69, -16.19, 26.74, (bankid + 1000), -1, -1, 50.0);
					BankPickMenu[bankid] = CreateDynamicPickup(1559, 1, 2311.63, -3.89, 26.74, (bankid + 1000), -1, -1, 50.0);
				    BankMIcon[bankid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 25, -1, 0, 0, -1, 300.0);
				}
		    }
	    }
	    if(!strcmp(store, "ammunation", true))
	    {
	        new ammunationid = dini_Int("/Store/Index.ini", "CurrentAmmunationID");
	        if(ammunationid >= MAX_AMMUNATIONS)
			{
				return SCM(playerid, -1, ""er"Unable to create more banks. There are already "#MAX_AMMUNATIONS" created");
			}
			else
			{
		        format(string, sizeof(string), "Ammunation ID %i Created.", ammunationid);
		        format(labeltext, sizeof(labeltext), "Ammunation");
		    	format(file, sizeof(file), "/Store/Ammunations/%i.ini", ammunationid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentAmmunationID", (ammunationid + 1));
	    			dini_IntSet("/Store/Index.ini", "CurrentAmmunationWorld", (ammunationid + 1000));
			    	AmmunationPickOut[ammunationid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					AmmunationPickInt[ammunationid] = CreateDynamicPickup(1559, 1, 315.81, -143.65, 999.60, (ammunationid + 1000), 7, -1, 50.0);
					AmmunationMIcon[ammunationid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 6, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "burger", true))
	    {
	        new burgerid = dini_Int("/Store/Index.ini", "CurrentBurgerID");
	        if(burgerid >= MAX_BURGERSHOTS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_BURGERSHOTS" created");
			}
            else
			{
			    format(string, sizeof(string), "Burger Shot ID %i Created.", burgerid);
		        format(labeltext, sizeof(labeltext), "Burger Shot");
		    	format(file, sizeof(file), "/Store/BurgerShots/%i.ini", burgerid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentBurgerID", (burgerid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentBurgerWorld", (burgerid + 1000));
					BurgerPickOut[burgerid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					BurgerPickInt[burgerid] = CreateDynamicPickup(1559, 1, 362.87, -75.17, 1001.50, (burgerid + 1000), 10, -1, 50.0);
					BurgerMIcon[burgerid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 10, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "cluckinbell", true))
	    {
	        new cluckinbellid = dini_Int("/Store/Index.ini", "CurrentCluckinBellID");
	        if(cluckinbellid >= MAX_CLUCKINBELLS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_CLUCKINBELLS" created");
			}
            else
			{
				format(string, sizeof(string), "Cluckin Bell ID %i Created", cluckinbellid);
		        format(labeltext, sizeof(labeltext), "Cluckin' Bell");
		    	format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cluckinbellid);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentCluckinBellID", (cluckinbellid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentCluckinBellWorld", (cluckinbellid + 1000));
					CluckinBellPickOut[cluckinbellid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					CluckinBellPickInt[cluckinbellid] = CreateDynamicPickup(1559, 1, 364.87, -11.74, 1001.85, (cluckinbellid + 1000), 9, -1, 50.0);
					CluckinBellMIcon[cluckinbellid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 14, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "pizza", true))
	    {
	        new pizzaid = dini_Int("/Store/Index.ini", "CurrentPizzaID");
	        if(pizzaid >= MAX_PIZZASTACKS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_PIZZASTACKS" created");
			}
			else
			{
				format(string, sizeof(string), "Well Stacked Pizza & Co. ID %i Created.", pizzaid);
		        format(labeltext, sizeof(labeltext), "Well Stacked Pizza & Co.");
		    	format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", pizzaid);
		    	if(dini_Create(file))
				{
	   		    	dini_IntSet("/Store/Index.ini", "CurrentPizzaID", (pizzaid + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentPizzaWorld", (pizzaid + 1000));
					PizzaPickOut[pizzaid] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					PizzaPickInt[pizzaid] = CreateDynamicPickup(1559, 1, 372.36, -133.50, 1001.49, (pizzaid + 1000), 5, -1, 50.0);
					PizzaMIcon[pizzaid] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 29, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    if(!strcmp(store, "247", true))
	    {
	        new tfs = dini_Int("/Store/Index.ini", "CurrentTFSID");
	        if(tfs >= MAX_TFS)
			{
				return SCM(playerid, -1, ""er"There are already "#MAX_TFS" created");
			}
			else
			{
				format(string, sizeof(string), "24/7 ID %i Created.", tfs);
		        format(labeltext, sizeof(labeltext), "24/7");
		    	format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
		    	if(dini_Create(file))
				{
			    	dini_IntSet("/Store/Index.ini", "CurrentTFSID", (tfs + 1));
			    	dini_IntSet("/Store/Index.ini", "CurrentTFSWorld", (tfs + 1000));
					TFSPickOut[tfs] = CreateDynamicPickup(1559, 1, POS[0], POS[1], POS[2], 0, 0, -1, 50.0);
					TFSPickInt[tfs] = CreateDynamicPickup(1559, 1,  -25.884, -185.868, 1003.546, (tfs + 1000), 17, -1, 50.0);
					TFSMIcon[tfs] = CreateDynamicMapIcon(POS[0], POS[1], POS[2], 17, -1, 0, 0, -1, 300.0);
				}
			}
	    }
	    new lstring[128];
	    format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", labeltext);
		CreateDynamic3DTextLabel(lstring, YELLOW, POS[0], POS[1], floatadd(POS[2], 0.7), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		dini_Set(file, "StoreName", labeltext);
		dini_FloatSet(file, "PickOutX", POS[0]);
		dini_FloatSet(file, "PickOutY", POS[1]);
		dini_FloatSet(file, "PickOutZ", POS[2]);
		GetPosInFrontOfPlayer(playerid, POS[0], POS[1], -2.5);
		dini_FloatSet(file, "SpawnOutX", POS[0]);
		dini_FloatSet(file, "SpawnOutY", POS[1]);
		dini_FloatSet(file, "SpawnOutZ", POS[2]);
		dini_FloatSet(file, "SpawnOutAngle", floatround((floatadd(180.0, POS[3])), floatround_ceil));
		dini_IntSet(file, "StoreID", dini_Int("/Store/Index.ini", "TotalStores"));
		SCM(playerid, YELLOW, string);
	}
    return 1;
}

YCMD:rules(playerid, params[], help)
{
	new rules[700];

	strcat(rules, ""white"- No cheating of any kind\n- Do not ask others to gift you money\n- No mods that affect other player's gameplay\n- No insults\n- No advertising of any kind\n- No (command)spamming\n");
	strcat(rules, "- No abusing bugs/glitches/commands\n- Do not share your account\n- No AFK in minigames\n- Do not ask for an unban ingame\n- Do not ask for an admin level/free VIP\n- Do not use Vortex to driveby players\n- Do not driveby at Hotspots/Spawnareas");
	strcat(rules, "\n- No score/money farming\n- Do not use joypad\n- No impersonating\n\nNever give your password to anyone!");

    ShowPlayerDialog(playerid, RULES_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Rules", rules, "OK", "");
	return 1;
}

YCMD:gungames(playerid, params[], help)
{
	new gungames[MAX_PLAYERS][e_top_gungame],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        gungames[i][E_playerid] = i;
	        gungames[i][E_gungame] = PlayerInfo[i][GungameWins];
	    }
	    else
	    {
	        gungames[i][E_playerid] = -1;
	        gungames[i][E_gungame] = -1;
	    }
	}

	SortDeepArray(gungames, E_gungame, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(gungames[i][E_gungame] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Gungame Wins: %i\n", (GetColor__(gungames[i][E_playerid]) >>> 8), i + 1, __GetName(gungames[i][E_playerid]), gungames[i][E_playerid], gungames[i][E_gungame]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Gungame Wins", finstring, "OK", "");
	return 1;
}

YCMD:fallouts(playerid, params[], help)
{
	new fallouts[MAX_PLAYERS][e_top_fallout],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        fallouts[i][E_playerid] = i;
	        fallouts[i][E_fallout] = PlayerInfo[i][FalloutWins];
	    }
	    else
	    {
	        fallouts[i][E_playerid] = -1;
	        fallouts[i][E_fallout] = -1;
	    }
	}

	SortDeepArray(fallouts, E_fallout, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(fallouts[i][E_fallout] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Fallout Wins: %i\n", (GetColor__(fallouts[i][E_playerid]) >>> 8), i + 1, __GetName(fallouts[i][E_playerid]), fallouts[i][E_playerid], fallouts[i][E_fallout]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Fallout Wins", finstring, "OK", "");
	return 1;
}

YCMD:derbys(playerid, params[], help)
{
	new derbys[MAX_PLAYERS][e_top_derby],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        derbys[i][E_playerid] = i;
	        derbys[i][E_derby] = PlayerInfo[i][DerbyWins];
	    }
	    else
	    {
	        derbys[i][E_playerid] = -1;
	        derbys[i][E_derby] = -1;
	    }
	}

	SortDeepArray(derbys, E_derby, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(derbys[i][E_derby] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Derby Wins: %i\n", (GetColor__(derbys[i][E_playerid]) >>> 8), i + 1, __GetName(derbys[i][E_playerid]), derbys[i][E_playerid], derbys[i][E_derby]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Derby Wins", finstring, "OK", "");
	return 1;
}

YCMD:races(playerid, params[], help)
{
	new races[MAX_PLAYERS][e_top_race],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        races[i][E_playerid] = i;
	        races[i][E_race] = PlayerInfo[i][RaceWins];
	    }
	    else
	    {
	        races[i][E_playerid] = -1;
	        races[i][E_race] = -1;
	    }
	}

	SortDeepArray(races, E_race, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(races[i][E_race] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Race Wins: %i\n", (GetColor__(races[i][E_playerid]) >>> 8), i + 1, __GetName(races[i][E_playerid]), races[i][E_playerid], races[i][E_race]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Race Wins", finstring, "OK", "");
	return 1;
}

YCMD:rtests(playerid, params[], help)
{
	new tests[MAX_PLAYERS][e_top_rtests],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        tests[i][E_playerid] = i;
	        tests[i][E_test] = PlayerInfo[i][Reaction];
	    }
	    else
	    {
	        tests[i][E_playerid] = -1;
	        tests[i][E_test] = -1;
	    }
	}

	SortDeepArray(tests, E_test, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(tests[i][E_test] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Reaction Wins: %i\n", (GetColor__(tests[i][E_playerid]) >>> 8), i + 1, __GetName(tests[i][E_playerid]), tests[i][E_playerid], tests[i][E_test]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Reaction Wins", finstring, "OK", "");
	return 1;
}

YCMD:kills(playerid, params[], help)
{
	new kills[MAX_PLAYERS][e_top_kills],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        kills[i][E_playerid] = i;
	        kills[i][E_kills] = PlayerInfo[i][Kills];
	    }
	    else
	    {
	        kills[i][E_playerid] = -1;
	        kills[i][E_kills] = -1;
	    }
	}

	SortDeepArray(kills, E_kills, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(kills[i][E_kills] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Kills: %i\n", (GetColor__(kills[i][E_playerid]) >>> 8), i + 1, __GetName(kills[i][E_playerid]), kills[i][E_playerid], kills[i][E_kills]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_KILLS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Kills", finstring, "OK", "");
	return 1;
}

YCMD:deaths(playerid, params[], help)
{
	new deaths[MAX_PLAYERS][e_top_deaths],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        deaths[i][E_playerid] = i;
	        deaths[i][E_deaths] = PlayerInfo[i][Deaths];
	    }
	    else
	    {
	        deaths[i][E_playerid] = -1;
	        deaths[i][E_deaths] = -1;
	    }
	}

	SortDeepArray(deaths, E_deaths, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(deaths[i][E_deaths] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Deaths: %i\n", (GetColor__(deaths[i][E_playerid]) >>> 8), i + 1, __GetName(deaths[i][E_playerid]), deaths[i][E_playerid], deaths[i][E_deaths]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_DEATHS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Deaths", finstring, "OK", "");
	return 1;
}

YCMD:toptime(playerid, params[], help)
{
	new playingtime[MAX_PLAYERS][e_top_time],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        playingtime[i][E_playerid] = i;
		    PlayerInfo[i][TotalTime] = PlayerInfo[i][TotalTime] + (gettime() - PlayerInfo[i][ConnectTime]);
		    PlayerInfo[i][ConnectTime] = gettime();
	        playingtime[i][E_time] = PlayerInfo[i][TotalTime];
	    }
	    else
	    {
	        playingtime[i][E_playerid] = -1;
	        playingtime[i][E_time] = -1;
	    }
	}

	SortDeepArray(playingtime, E_time, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(playingtime[i][E_time] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Time: %s\n", (GetColor__(playingtime[i][E_playerid]) >>> 8), i + 1, __GetName(playingtime[i][E_playerid]), playingtime[i][E_playerid], GetPlayingTimeFormat(playingtime[i][E_playerid]));
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, MOST_PLAYING_TIME_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most Playing Time", finstring, "OK", "");
	return 1;
}

YCMD:richlist(playerid, params[], help)
{
	new richlist[MAX_PLAYERS][e_top_richlist],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        richlist[i][E_playerid] = i;
	        richlist[i][E_money] = PlayerInfo[i][Money] + PlayerInfo[i][Bank];
	    }
	    else
	    {
	        richlist[i][E_playerid] = -1;
	        richlist[i][E_money] = -1;
	    }
	}

	SortDeepArray(richlist, E_money, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(richlist[i][E_money] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Money: $%s\n", (GetColor__(richlist[i][E_playerid]) >>> 8), i + 1, __GetName(richlist[i][E_playerid]), richlist[i][E_playerid], ToCurrency(richlist[i][E_money]));
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}

    ShowPlayerDialog(playerid, RICHLIST_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Richlist", finstring, "OK", "");
	return 1;
}

YCMD:wanteds(playerid, params[], help)
{
	new wanteds[MAX_PLAYERS][e_top_wanteds],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        wanteds[i][E_playerid] = i;
	        wanteds[i][E_wanteds] = PlayerInfo[i][Wanteds];
	    }
	    else
	    {
	        wanteds[i][E_playerid] = -1;
	        wanteds[i][E_wanteds] = -1;
	    }
	}

	SortDeepArray(wanteds, E_wanteds, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(wanteds[i][E_wanteds] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Wanteds: %i\n", (GetColor__(wanteds[i][E_playerid]) >>> 8), i + 1, __GetName(wanteds[i][E_playerid]), wanteds[i][E_playerid], wanteds[i][E_wanteds]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}
	ShowPlayerDialog(playerid, WANTEDS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Most wanteds", finstring, "OK", "");
	return 1;
}

YCMD:score(playerid, params[], help)
{
	new score[MAX_PLAYERS][e_top_score],
		finstring[2048],
		tmpstring[68];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
	        score[i][E_playerid] = i;
	        score[i][E_pscore] = GetPlayerScore_(i);
	    }
	    else
	    {
	        score[i][E_playerid] = -1;
	        score[i][E_pscore] = -1;
	    }
	}

	SortDeepArray(score, E_pscore, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(score[i][E_pscore] != -1)
	    {
		    format(tmpstring, sizeof(tmpstring), "{%06x}%i - %s(%i) - Score: %i\n", (GetColor__(score[i][E_playerid]) >>> 8), i + 1, __GetName(score[i][E_playerid]), score[i][E_playerid], score[i][E_pscore]);
		    strcat(finstring, tmpstring);
		}
		else
		{
		    format(tmpstring, sizeof(tmpstring), ""white"%i - ---\n", i + 1);
		    strcat(finstring, tmpstring);
		}
	}
	ShowPlayerDialog(playerid, SCORE_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Score", finstring, "OK", "");
	return 1;
}

YCMD:gangs(playerid, params[], help)
{
	new Iterator:Gangs[2]<MAX_PLAYERS>,
		finstring[1500],
		tmpstring[35];

	Iter_Init(Gangs);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
        if(PlayerInfo[i][GangID] > 0 && !Iter_Contains(Gangs[0], PlayerInfo[i][GangID]))
        {
            Iter_Add(Gangs[0], PlayerInfo[i][GangID]);
            Iter_Add(Gangs[1], i);
        }
	}

	if(Iter_Count(Gangs[1]) > 0)
	{
	    format(tmpstring, sizeof(tmpstring), ""white"%i gang(s) online:\n", Iter_Count(Gangs[1]));
	    strcat(finstring, tmpstring);

	    for(new i = Iter_First(Gangs[1]), count = 0; i != Iter_End(Gangs[1]); i = Iter_Next(Gangs[1], i), ++count)
	    {
	        if(count <= 40)
	        {
	        	format(tmpstring, sizeof(tmpstring), "\n%i - [%s] %s", count + 1, PlayerInfo[i][GangTag], PlayerInfo[i][GangName]);
	        	strcat(finstring, tmpstring);
			}
			else
			{
			    format(tmpstring, sizeof(tmpstring), "\n[... to many online]");
			    strcat(finstring, tmpstring);
			    break;
			}
	    }
		ShowPlayerDialog(playerid, GANGS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Online Gangs", finstring, "OK", "");
	}
	else
	{
	    SendInfo(playerid, "~r~~h~~h~No Gangs Online!", 2100);
	}
	return 1;
}

YCMD:gtop(playerid, params[], help)
{
	mysql_tquery(g_SQL_handle, "SELECT `GangName`, `GangTag`, `GangScore` FROM `gangs` ORDER BY `GangScore` DESC LIMIT 30;", "OnGTopReceived", "i", playerid);
	return 1;
}

function:OnGTopReceived(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
	    new tmp[21], tmp2[5], finstring[1024], tmpstring[40];
	    strcat(finstring, ""white"");
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 0, tmp, g_SQL_handle, sizeof(tmp));
	        cache_get_row(i, 1, tmp2, g_SQL_handle, sizeof(tmp2));
	        format(tmpstring, sizeof(tmpstring), "%i - [%s]%s [%i]\n", i + 1, tmp2, tmp, cache_get_row_int(i, 2, g_SQL_handle));
	        strcat(finstring, tmpstring);
	    }
	    ShowPlayerDialog(playerid, TOP_GANGS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Top Gangs", finstring, "OK", "");
	}
	return 1;
}

YCMD:top(playerid, params[], help)
{
	new string[1024];
	strcat(string, ""dl"Richlist (/richlist)\n"dl"Most Wanteds (/wanteds)\n"dl"Score (/score)\n"dl"Most Kills (/kills)\n"dl"Most Deaths (/deaths)\n"dl"Most playing time (/toptime)\n"dl"Online Gangs (/gangs)\n"dl"Top Gangs (/gtop)");
	strcat(string, "\n"dl"Most Reaction Wins (/rtests)\n"dl"Most Race Wins (/races)\n"dl"Most Derby Wins (/derbys)\n"dl"Most Fallout Wins (/fallouts)\n"dl"Most Gungame Wins (/gungames)");
	
	ShowPlayerDialog(playerid, TOPLIST_DIALOG, DIALOG_STYLE_LIST, ""nef" - Toplists", string, "Select", "Cancel");
	return 1;
}

YCMD:vcontrol(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
		}

		ShowDialog(playerid, VCONTROL_DIALOG);
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:label(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(PlayerInfo[playerid][VIPLabel] == Text3D:-1)
	    {
	        ShowDialog(playerid, LABEL_DIALOG);
	    }
	    else
	    {
			SCM(playerid, -1, ""er"You already got a label. Tpye /elabel to edit or /dlabel to detach it.");
		}
	}
	else
	{
		Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:elabel(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(PlayerInfo[playerid][VIPLabel] != Text3D:-1)
	    {
	        ShowDialog(playerid, LABEL_DIALOG + 1);
	    }
	    else
	    {
		    SCM(playerid, -1, ""er"No label attached");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:dlabel(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(PlayerInfo[playerid][VIPLabel] != Text3D:-1)
	    {
	        DestroyDynamic3DTextLabel(PlayerInfo[playerid][VIPLabel]);
	        PlayerInfo[playerid][VIPLabel] = Text3D:-1;
	        SCM(playerid, -1, ""er"Label removed!");
	    }
	    else
	    {
			SCM(playerid, -1, ""er"No label attached");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:trailer(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	    
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to attach a trailer!");
		}
		
		new vid = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vid);
		
		if(model == 403 || model == 514 || model == 515)
		{
			if(PlayerInfo[playerid][TrailerVid] != -1)
			{
			    DetachTrailerFromVehicle(PlayerInfo[playerid][TrailerVid]);
				DestroyVehicle_(PlayerInfo[playerid][TrailerVid]);
				PlayerInfo[playerid][TrailerVid] = -1;
			}
		
		    new Float:p[4];
		    
			GetVehiclePos(vid, p[0], p[1], p[2]);
			GetVehicleZAngle(vid, p[3]);
			
			p[0] += (floatsin(-p[3], degrees) * -9);
			p[1] += (floatcos(-p[3], degrees) * -9);
			
			PlayerInfo[playerid][TrailerVid] = CreateVehicle_(435, p[0], p[1], p[2], p[3], 0, 0, -1);
			
			AttachTrailerToVehicle(PlayerInfo[playerid][TrailerVid], vid);
			
			SendInfo(playerid, "~g~~h~~h~Trailer attached", 2000);
		}
		else
		{
		    SCM(playerid, -1, ""er"You need to be in a truck!");
		}
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:ramp(playerid, params[], help)
{
    if(PlayerInfo[playerid][VIP] == 1)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
		}

		if(GetPVarInt(playerid, "Ramped") == 0)
		{
			SetPVarInt(playerid, "Ramped", 1);
			SCM(playerid, GREEN, "You have turned ramp spawning ON!");
	  		SCM(playerid, YELLOW, "Press 'FIRE' (CTRL) key in a vehicle to spawn a ramp");
	    	SCM(playerid, YELLOW, "To disable ramp spawning, type /ramp again");
		}
		else
		{
			SetPVarInt(playerid, "Ramped", 0);
	 		SCM(playerid, GREEN, "You have turned ramp spawning OFF!");
		}
	}
	else
	{
        Command_ReProcess(playerid, "/vip", false);
	}
    return 1;
}

YCMD:vmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
    
   	ShowDialog(playerid, VMENU_DIALOG);
	return 1;
}

YCMD:harefill(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(PlayerInfo[playerid][VIP] == 1)
	{
	    if(PlayerInfo[playerid][bGod]) return SCM(playerid, -1, ""er"You need to disable GodMode first. (/god)");
	    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
	    ShowDialog(playerid, HAREFILL_DIALOG);
	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:spec(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid) || PlayerInfo[playerid][VIP] == 1)
	{
        if(gTeam[playerid] == SPEC) return SCM(playerid, -1, ""er"You are already spectating!");
        
	    new player;
	 	if(sscanf(params, "r", player))
		{
			return SCM(playerid, NEF_GREEN, "Usage: /spec <playerid>");
	  	}

	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

 		if(IsPlayerAvail(player) && player != playerid)
		{
			if(PlayerInfo[playerid][Level] == 0 && PlayerInfo[playerid][VIP] == 1 && PlayerInfo[player][Level] > 0)
			{
				return SCM(playerid, -1, ""er"You cannot spectate admins");
			}

			if(PlayerInfo[player][Level] == MAX_ADMIN_LEVEL && PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
			{
				return SCM(playerid, -1, ""er"You cannot use this command on this admin");
			}

			if(gTeam[player] == SPEC)
			{
				return SCM(playerid, -1, ""er"Player is spectating someone else");
			}
			
			if(PlayerInfo[player][bIsDead])
			{
				return SCM(playerid, -1, ""er"Player is dead");
			}

			if(gTeam[playerid] != NORMAL)
			{
				return GameTextForPlayer(playerid, "~b~~h~~h~Type /exit to leave first!", 2000, 3);
			}

			SavePos(playerid);
			CheckPlayerGod(playerid);

  			new Float:hp,
				Float:ar,
				count = 0;

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == SPEC && PlayerInfo[i][SpecID] == player)
			    {
			        count++;
			    }
			}

			gTeam[playerid] = SPEC;

			GetPlayerPos(playerid, PlayerInfo[playerid][SpecX], PlayerInfo[playerid][SpecY], PlayerInfo[playerid][SpecZ]);
			GetPlayerFacingAngle(playerid, PlayerInfo[playerid][SpecA]);

			SetPlayerInterior(playerid, GetPlayerInterior(player));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player));
			TogglePlayerSpectating(playerid, true);

			if(IsPlayerInAnyVehicle(player))
			{
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(player));
			}
			else
			{
				PlayerSpectatePlayer(playerid, player);
			}

            PlayerInfo[playerid][SpecID] = player;

			if(count == 1)
			{
				format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) is also spectated by another admin/VIP (/spectators)", __GetName(player), player);
                SCM(playerid, -1, gstr);
			}
			else if(count > 1)
			{
			    format(gstr, sizeof(gstr), ""nef" "GREY_E"%s(%i) is also spectated by %i other admins/VIPs (/spectators)", __GetName(player), player, count);
                SCM(playerid, -1, gstr);
			}

			GetPlayerHealth(player, hp);
			GetPlayerArmour(player, ar);

			format(gstr, sizeof(gstr), "~n~~n~~n~~n~~n~~n~~n~~w~%s - id:%i~n~hp:%0.1f ar:%0.1f $%s~n~Godmode: %s", __GetName(player), player, hp, ar, ToCurrency((GetPlayerCash(player) + PlayerInfo[player][Bank])), PlayerInfo[player][bGod] ? ("Yes") : ("No"));

			GameTextForPlayer(playerid, gstr, 30000, 3);

			SendInfo(playerid, "~y~~h~Now spectating!", 2500);
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:specoff(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid) || PlayerInfo[playerid][VIP] == 1)
	{
        if(gTeam[playerid] == SPEC)
		{
		    ResetPlayerWorld(playerid);
		    PlayerInfo[playerid][SpecID] = INVALID_PLAYER_ID;
			TogglePlayerSpectating(playerid, false);
			GameTextForPlayer(playerid, "~n~~n~~n~~w~Spectate mode ended", 1000, 3);
			SendInfo(playerid, "~y~~h~No longer spectating!", 2500);
			gTeam[playerid] = NORMAL;
			
			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		}
		else
		{
			SendInfo(playerid, "~r~~h~~h~You are not spectating!", 2500);
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:freeze(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
		new player;
		if(sscanf(params, "r", player))
		{
			SCM(playerid, NEF_GREEN, "Usage: /freeze <playerid>");
			return 1;
	 	}
	 	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	 	
        if(IsPlayerAvail(player) && player != playerid)
		{
			if(PlayerInfo[player][Level] > 0)
			{
				return SCM(playerid, -1, ""er"You cannot use this command on an admin");
			}
			if(gTeam[player] != NORMAL) return SCM(playerid, -1, ""er"Player is a minigame");

			SCM(player, RED, "You have been frozen by an admin");
			SCM(playerid, RED, "Player has been frozen");
			TogglePlayerControllable(player, false);
			PlayerInfo[player][Frozen] = true;
			
			format(gstr, sizeof(gstr), ""red"Adm: %s(%i) has been frozen by %s(%i)", __GetName(player), player, __GetName(playerid), playerid);
			AdminMSG(-1, gstr);
			print(gstr);
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available or yourself");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:unfreeze(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 2)
	{
		new player;
		if(sscanf(params, "r", player))
		{
			SCM(playerid, NEF_GREEN, "Usage: /unfreeze <playerid>");
			return 1;
	 	}
	 	
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	 	
   		if(IsPlayerAvail(player))
		{
		 	if(PlayerInfo[player][Frozen])
	 		{
				TogglePlayerControllable(player, true);
				PlayerInfo[player][Frozen] = false;
				SCM(player, GREEN, "You have been unfrozen by an admin");
				SCM(playerid, RED, "Player has been unfrozen");
			}
			else
			{
			    SCM(playerid, -1, ""er"Not possible to unfreeze him now");
			}
 		}
		else
		{
			SCM(playerid, -1, ""er"Player is not available");
		}
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:clearchat(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
		for(new i = 0; i < 129; i++)
		{
			SCMToAll(GREEN, " ");
		}
 	}
 	else
 	{
	 	SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:move(playerid, params[], help)
{
	if(gTeam[playerid] == NORMAL)
	{
	    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You cant use this command now!");
		if(PlayerInfo[playerid][Level] >= 2)
		{
		    if(!strlen(params))
			{
				SCM(playerid, NEF_GREEN, "Usage: /move <up / down / +x / -x / +y / -y / off>");
				return 1;
			}
			new Float:POS[3];
			if(strcmp(params, "up", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]+5);
				SetCameraBehindPlayer(playerid);
			}
			else if(strcmp(params, "down", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]-5);
				SetCameraBehindPlayer(playerid);
				}
			else if(strcmp(params, "+x", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0]+5, POS[1], POS[2]);
			}
			else if(strcmp(params, "-x", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0]-5, POS[1], POS[2]);
			}
			else if(strcmp(params, "+y", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1]+5, POS[2]);
			}
			else if(strcmp(params, "-y", true) == 0)
			{
				TogglePlayerControllable(playerid, false);
				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1]-5, POS[2]);
			}
		    else if(!strcmp(params, "off", true))
			{
				TogglePlayerControllable(playerid, true);
			}
			else
			{
				SCM(playerid, NEF_GREEN, "Usage: /move <up / down / +x / -x / +y / -y / off>");
			}
		}
		else
		{
			SCM(playerid, -1, NO_PERM);
		}
	}
	else
	{
 		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:cc(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, ""er"You have to be in a vehicle");

    new color1, color2;
    if(sscanf(params, "ii", color1, color2))
    {
        return SCM(playerid, NEF_GREEN, "Usage: /cc <color1 id> <color2 id>");
    }

	if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0)
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /cc <color1 id> <color2 id>");
	}

	if(PVSelect[playerid] != -1)
	{
	    if(GetPlayerVehicleID(playerid) == PlayerPV[playerid][PVSelect[playerid]][PVehicleID])
	    {
	        PlayerPV[playerid][PVSelect[playerid]][Color1] = color1;
	        PlayerPV[playerid][PVSelect[playerid]][Color2] = color2;
	        GivePlayerCash(playerid, -500);
		}
	}

	ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendInfo(playerid, "~y~~h~Changed Vehicle Color", 2000);
	return 1;
}

YCMD:changename(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);

	format(gstr, sizeof(gstr), "SELECT `ip` FROM `sessions` WHERE `user_name` = '%s';", __GetName(playerid));
	mysql_tquery(g_SQL_handle, gstr, "OnSessionCheck", "i", playerid);
	return 1;
}

YCMD:changepass(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);
	
    new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastPW] + COOLDOWN_CMD_CHANGEPASS) >= tick)
	{
    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
	}

	if(sscanf(params, "s[144]", gstr))
	{
		SCM(playerid, NEF_GREEN, "Usage: /changepass <new pass>");
	    return 1;
	}
	if(strlen(gstr) < 4 || strlen(gstr) > 32)
	{
		SCM(playerid, -1, ""er"Incorrect password length. (4 - 32)");
		return 1;
	}

    MySQL_UpdatePlayerPass(playerid, gstr);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You have successfully changed your password to %s", gstr);
	SCM(playerid, -1, gstr2);
	PlayerInfo[playerid][tickLastPW] = tick;
	return 1;
}

YCMD:serverstats(playerid, params[], help)
{
	ShowDialog(playerid, SERVERSTATS_DIALOG);
	return 1;
}

YCMD:mk(playerid, params[], help)
{
	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastMedkit] + COOLDOWN_CMD_MEDKIT) >= tick)
	{
    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
	}
	if(PlayerInfo[playerid][Medkits] <= 0)
	{
	    return SCM(playerid, -1, ""er"You don't own any medkits!");
	}
	if(PlayerInfo[playerid][bGod]) return SCM(playerid, -1, ""er"You can't use medkits with godmode!");
	
	new Float:Health;
	GetPlayerHealth(playerid, Health);
	if(Health >= 100.0)
	{
	    return SCM(playerid, -1, ""er"You are already at full health");
	}
	
	PlayerInfo[playerid][MedkitTime] = 50;
	PlayerInfo[playerid][Medkits]--;
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	
	PlayerInfo[playerid][tMedkit] = SetTimerEx("p_medkit", 200, true, "i", playerid);
	
	InfoTD_MSG(playerid, 2500, "~y~~h~Medkit used!");
	PlayerInfo[playerid][tickLastMedkit] = tick;
	return 1;
}

YCMD:credits(playerid, params[], help)
{
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Gold Credits information", ""white"GC is a virtual currency used throughout all "SVRNAME" gameservers.\nGC can be used to buy in-game items and to add new features. It's a great way to enhance\nyour gaming experience.\n\n"nef_green"Go to "SVRURLWWW"/credits", "OK", "");
	return 1;
}

YCMD:info(playerid, params[], help)
{
	new string[512];
	strcat(string, ""white"Foundation\t"grey"Mellnik\n\t\tEpixel\n\n"white"Scripting\t"grey"Mellnik");
	strcat(string, "\n\n"white"Mapping\t"grey"Tuoppi\n\t\tMellnik\n\t\tAventator\n\t\tMicka\n\t\tLuggi\n\t\tImpulse");
	strcat(string, "\n\n"white"Web Dev.\t"grey"Epixel\n\t\tMellnik");
	strcat(string, "\n\n"white"Special Thanks\t"grey"Goldkiller");
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Credits/Info", string, "OK", "");
	return 1;
}

YCMD:stats(playerid, params[], help)
{
	new player1,
		player;

	if(sscanf(params, "r", player))
	{
		player1 = playerid;
	}
	else
	{
	    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
		player1 = player;
	}

	if(IsPlayerAvail(player1))
	{
		new gangnam[21],
			string1[500],
			string2[355],
			string3[400],
			vip[5],
			pDeaths,
			finstring[sizeof(string1) + sizeof(string2) + sizeof(string3) + sizeof(vip) + 35];

 		if(PlayerInfo[player1][Deaths] == 0)
	 	{
	 		pDeaths = 1;
	 	}
	 	else
	 	{
	 		pDeaths = PlayerInfo[player1][Deaths];
	 	}

		if(PlayerInfo[player1][GangPosition] == 0)
		{
			strcat(gangnam, "- None -");
		}
		else strcat(gangnam, PlayerInfo[player1][GangName]);

		if(PlayerInfo[player1][VIP] != 0)
		{
		    strmid(vip, "Yes", 0, 5, 5);
		}
		else strmid(vip, "No", 0, 5, 5);

 		format(string1, sizeof(string1), ""nef_green"Stats of the player: "white"%s\n\n\
	 	Kills: "LB_E"%i\n"white"Deaths: "LB_E"%i\n"white"K/D: "LB_E"%0.2f\n"white"Score: "LB_E"%i\n"white"Money: "LB_E"$%s\n"white"Bank: "LB_E"$%s\n"white"Gold Credits: "LB_E"%sGC\n",
   			__GetName(player1),
	 		PlayerInfo[player1][Kills],
        	PlayerInfo[player1][Deaths],
        	Float:PlayerInfo[player1][Kills] / Float:pDeaths,
        	GetPlayerScore_(player1),
        	ToCurrency(GetPlayerCash(player1)),
        	ToCurrency(PlayerInfo[player1][Bank]),
			ToCurrency(PlayerInfo[player1][Credits]));

		format(string2, sizeof(string2), ""white"Race wins: "LB_E"%i\n"white"Derby wins: "LB_E"%i\n"white"Reaction wins: "LB_E"%i\n"white"TDM wins: "LB_E"%i\n"white"Fallout wins: "LB_E"%i\n"white"Gungame wins: "LB_E"%i\n"white"Event wins: "LB_E"%i\n"white"Time until PayDay: "LB_E"%i minutes\n",
	   		PlayerInfo[player1][RaceWins],
	   		PlayerInfo[player1][DerbyWins],
	   		PlayerInfo[player1][Reaction],
	   		PlayerInfo[player1][BGWins],
	   		PlayerInfo[player1][FalloutWins],
	   		PlayerInfo[player1][GungameWins],
	   		PlayerInfo[player1][EventWins],
	   		PlayerInfo[player1][PayDay]);

        format(string3, sizeof(string3), ""white"Playing Time: "LB_E"%s\n"white"Gang: "LB_E"%s\n"white"VIP: "LB_E"%s\n"white"Medkits: "LB_E"%i\n"white"Houses: "LB_E"%i\n"white"Business: "LB_E"%i\n"white"Wanteds: "LB_E"%i\n"white"Last log in: "LB_E"%s",
            GetPlayingTimeFormat(player1),
			gangnam,
			vip,
			PlayerInfo[player1][Medkits],
			PlayerInfo[player1][Houses],
			PlayerInfo[player1][Props],
			PlayerInfo[player1][Wanteds],
			UnixTimeToDate(PlayerInfo[player1][LastLogin]));
			
		if(islogged(player1))
		{
			strcat(string3, "\n"white"Register Date: "LB_E"");
			strcat(string3, UnixTimeToDate(PlayerInfo[player1][RegDate]));
		}
			
		if(PlayerInfo[player1][BoostDeplete] != 0)
		{
		    strcat(string3, "\n"white"Boost will end on: "LB_E"");
		    strcat(string3, UnixTimeToDate(PlayerInfo[player1][BoostDeplete]));
		}
			
		strcat(finstring, string1);
		strcat(finstring, string2);
		strcat(finstring, string3);

		if(!islogged(playerid))
		{
		    strcat(finstring, "\n\n"nef_yellow"You are not registered!\nType /register to crate an account.");
		}

		ShowPlayerDialog(playerid, STATS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Player Statistics", finstring, "OK", "");
	}
	else
	{
		SCM(playerid, -1, ""er"Player is not available!");
	}
	return 1;
}

YCMD:healall(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	   	for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if((IsPlayerAvail(i)) && (i != playerid) && (i != MAX_ADMIN_LEVEL) && (gTeam[i] == NORMAL))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				SetPlayerHealth(i, 100.0);
			}
		}
		new string[64];
		format(string, sizeof(string), "Admin %s(%i) healed all players", __GetName(playerid), playerid);
		SCMToAll(BLUE, string);
		GameTextForAll("Health for all!", 3000, 3);
		SetPlayerHealth(playerid, 100.0);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:armourall(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	   	for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if((IsPlayerAvail(i)) && (i != playerid) && (i != MAX_ADMIN_LEVEL) && (gTeam[i] == NORMAL))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				SetPlayerArmour(i, 100.0);
			}
		}
		new string[64];
		format(string, sizeof(string), "Admin %s(%i) restored all players armour", __GetName(playerid), playerid);
		SCMToAll(BLUE, string);
		GameTextForAll("Armour for all!", 3000, 3);
		SetPlayerArmour(playerid, 100.0);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:pornos(playerid, params[], help)
{
    SCM(playerid, RED, "Du kannst mir mal fett ein kauen, kein Godfather.");
	return 1;
}

YCMD:hmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE) return SCM(playerid, RED, NOT_AVAIL);
    new string[512], tmp[64];
    
    for(new i = 0; i < MAX_PLAYER_HOUSES; i++)
    {
        if(i > PlayerInfo[playerid][AdditionalHouseSlots])
        {
            format(tmp, sizeof(tmp), ""dl"House Slot %i "red"(Locked)\n", i + 1);
        }
        else
		{
		    if(i < PlayerInfo[playerid][Houses])
		    {
			    format(tmp, sizeof(tmp), ""dl"House Slot %i "green2"(Used)\n", i + 1);
		    }
		    else
		    {
			    format(tmp, sizeof(tmp), ""dl"House Slot %i\n", i + 1);
		    }
		}
		strcat(string, tmp);
    }

    ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG, DIALOG_STYLE_LIST, ""nef" - House Menu", string, "Select", "Cancel");
	return 1;
}

YCMD:bmenu(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE) return SCM(playerid, RED, NOT_AVAIL);
    new string[512], tmp[64];

    for(new i = 0; i < MAX_PLAYER_PROPS; i++)
    {
        if(i > PlayerInfo[playerid][AdditionalPropSlots])
        {
            format(tmp, sizeof(tmp), ""dl"Business Slot %i "red"(Locked)\n", i + 1);
        }
        else
		{
		    if(i < PlayerInfo[playerid][Props])
		    {
			    format(tmp, sizeof(tmp), ""dl"Business Slot %i "green2"(Used)\n", i + 1);
		    }
		    else
		    {
			    format(tmp, sizeof(tmp), ""dl"Business Slot %i\n", i + 1);
		    }
		}
		strcat(string, tmp);
    }

    ShowPlayerDialog(playerid, PROP_MENU_DIALOG, DIALOG_STYLE_LIST, ""nef" - Business Menu", string, "Select", "Cancel");
	return 1;
}

YCMD:settings(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(gTeam[playerid] != NORMAL) return SCM(playerid, RED, NOT_AVAIL);
    ShowDialog(playerid, SETTINGS_DIALOG);
	return 1;
}

YCMD:advsave(playerid, params[], help)
{
    if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL && IsPlayerAdmin(playerid))
    {
	    new File:lFile = fopen("/Other/advsave.txt", io_append),
	     	logData[255],
	        Float:POS[4];

		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), POS[3]);

	    format(logData, sizeof(logData), "{%.4f, %.4f, %.4f, %.4f, false},\r\n", POS[0], POS[1], POS[2], POS[3]);
	    fwrite(lFile, logData);
	    fclose(lFile);
	}
	return 1;
}

YCMD:minigames(playerid, params[], help)
{
	ShowPlayerDialog(playerid, HELP_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" - Minigames", ""dl"Race (/race)\n"dl"Derby (/derby)\n"dl"Fallout (/fallout)\n"dl"Gungame (/gungame)\n"dl"Minigun (/minigun)\n"dl"Sniper (/sniper)\n"dl"Death Match (/dm1-4)\n"dl"Team Death Match (/tdm)\n"dl"WAR (/war)", "Select", "");
	return 1;
}

YCMD:opengate(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL || PlayerInfo[playerid][VIP] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, -205.68774, -2285.10693, 30.65776)) return SCM(playerid, -1, ""er"You need to be closer");
		if(IsMellnikGateMoving) return SCM(playerid, -1, ""er"Gate is currently working");
		IsMellnikGateMoving = true;
		MoveDynamicObject(MellnikGate, -211.60184, -2275.91821, 30.65776, 1.50);
  	}
	else
	{
        Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:closegate(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL || PlayerInfo[playerid][VIP] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, -205.68774, -2285.10693, 30.65776)) return SCM(playerid, -1, ""er"You need to be closer");
		if(IsMellnikGateMoving) return SCM(playerid, -1, ""er"Gate is currently working");
		IsMellnikGateMoving = true;
		MoveDynamicObject(MellnikGate, -205.68774, -2285.10693, 30.65776, 1.50);
  	}
	else
	{
	    Command_ReProcess(playerid, "/vip", false);
	}
	return 1;
}

YCMD:rampup(playerid, params[], help)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, -153.74190, -2210.68457, 2.17288)) return SCM(playerid, -1, ""er"You need to be closer");
    if(IsMellnikRampMoving) return SCM(playerid, -1, ""er"Ramp is currently working");
    IsMellnikRampMoving = true;
    MoveDynamicObject(MellnikRamp, -153.74190, -2210.68457, 27.16690, 2.50);
	return 1;
}

YCMD:rampdown(playerid, params[], help)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, -153.74190, -2210.68457, 27.16690)) return SCM(playerid, -1, ""er"You need to be closer");
    if(IsMellnikRampMoving) return SCM(playerid, -1, ""er"Ramp is currently working");
    IsMellnikRampMoving = true;
    MoveDynamicObject(MellnikRamp, -153.74190, -2210.68457, 2.17288, 2.50);
	return 1;
}

YCMD:mellnik(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] == MAX_ADMIN_LEVEL)
	{
		switch(YHash(__GetName(playerid), false))
		{
		    case _I(m,e,l,l,n,i,k):
		    {
				SetPlayerSkin(playerid, 295);
			    SetSpawnInfo(playerid, NO_TEAM, 295, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
			    SCM(playerid, -1, "{FFE600}Yes, Sir!");
		    }
		    default: SCM(playerid, -1, NO_PERM);
		}
  	}
	else
	{
	    SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:savecolor(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);
	
	PlayerInfo[playerid][SavedColor] = GetPlayerColor(playerid);
	if(PlayerInfo[playerid][SavedColor] == 0)
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Color saved! It will be loaded on next login. Use /deletecolor to remove it");
	}
	else
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Saved color overwritten! It will be loaded on next login. Use /deletecolor to remove it");
	}
	return 1;
}

YCMD:deletecolor(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);

	if(PlayerInfo[playerid][SavedColor] == 0)
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"You have no saved color yet!");
	}
	else
	{
	    SCM(playerid, COLOR_GREY, ""nef" "GREY2_E"Color has been deleted!");
	}
    PlayerInfo[playerid][SavedColor] = 0;
	return 1;
}

YCMD:new(playerid, params[], help)
{
	mysql_tquery(g_SQL_handle, "SELECT * FROM `news` ORDER BY `date` DESC LIMIT 1;", "OnNewsReceived", "i", playerid);
	return 1;
}

YCMD:lotto(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	if(!lotto_active) return SCM(playerid, -1, ""er"No lottery active!");
	if(GetPlayerInterior(playerid) != 17) return SCM(playerid, -1, ""er"You need to be in a 24/7 shop!");
	if(PlayerInfo[playerid][DrawnNumber] != -1) return SCM(playerid, -1, ""er"You already got a lotto!");
	if(GetPlayerCash(playerid) < 500) return SCM(playerid, -1, ""er"A lotto costs $500!");
	
	new lotto;
	if(sscanf(params, "i", lotto))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /lotto <1-75>");
	}
	
	if(Iter_Contains(LottoNumbersUsed, lotto)) return SCM(playerid, -1, ""er"This lotto number is already in use!");
	
	PlayerInfo[playerid][DrawnNumber] = lotto;
	Iter_Add(LottoNumbersUsed, PlayerInfo[playerid][DrawnNumber]);
	
	GivePlayerCash(playerid, -500);
	
	new str[50];
	format(str, sizeof(str), "~g~~h~~h~Your lotto number: %i", PlayerInfo[playerid][DrawnNumber]);
	SendInfo(playerid, str, 5000);
	return 1;
}

YCMD:answer(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new answer;
	if(sscanf(params, "i", answer))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /answer <answer>");
	}
	
	new str[255];
	if(mathsAnswered == -1)
	{
	    SCM(playerid, -1, ""RED_E"[MATHS] "white"Sorry, no maths is in progress!");
	    return true;
	}

	if(mathsAnswered == 1 && answer == mathsAnswer)
	{
	    if(answer == mathsAnswer)
	    {
	    	format(str, sizeof(str), ""RED_E"[MATHS] "white"Sorry, you're too late, although your answer(%i) would have been right!", answer);
		}
		else
		{
		    format(str, sizeof(str), ""RED_E"[MATHS] "white"Sorry, you're too late, even though your answer(%i) would have been wrong!", answer);
		}
		SCM(playerid, -1, str);
	    return true;
	}

	if(answer > mathsAnswer || answer < mathsAnswer)
	{
	    format(str, sizeof(str), ""RED_E"[MATHS] "white"Sorry, your answer(%i) to %s is wrong!", answer, mathsCurrent);
	    SCM(playerid, -1, str);
		return true;
	}

	format(str, sizeof(str), ""RED_E"[MATHS] :: {%06x}%s(%i) "white"has correctly answered %s (answer: %i) winning 4 score and $%s!", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, mathsCurrent, answer, ToCurrency(mathsAward));
	SCMToAll(-1, str);

	GivePlayerScore_(playerid, 4, true, true);
	GivePlayerCash(playerid, mathsAward, true, true);

	mathsAnswered = 1;
	SendInfo(playerid, "~p~Congratulations!~n~~r~You gave the right maths answer!", 4000);

	format(str, sizeof(str), "Won a math challenge.\n%s", mathsCurrent, answer);
	SetPlayerChatBubble(playerid, str, NEF_GREEN, 40.0, 12000);
	return true;
}

YCMD:weather(playerid, params[], help)
{
	extract params -> new weather; else
	{
		return SCM(playerid, NEF_GREEN, "Usage: /weather <weather id>");
	}

	SetPlayerWeather(playerid, weather);

	new string[64];
	format(string, sizeof(string), "You've set your weather to '%i'", weather);
	SCM(playerid, BLUE, string);
	return 1;
}

YCMD:cashfall(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
		extract params -> new money; else
		{
			return SCM(playerid, NEF_GREEN, "Usage: /cashfall <cash>");
		}

		if(money > 25000 || money < 1000) return SCM(playerid, -1, ""er"Cash: $1,000 - $25,000");

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerAvail(i))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GivePlayerCash(i, money, true, true);
			}
		}

		format(gstr, sizeof(gstr), "Admin %s(%i) has given all players $%s", __GetName(playerid), playerid, ToCurrency(money));
		SCMToAll(YELLOW, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:scorefall(playerid, params[], help)
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
		extract params -> new score; else
		{
			return SCM(playerid, NEF_GREEN, "Usage: /scorefall <score>");
		}

		if(score > 100 || score < 1) return SCM(playerid, -1, ""er"Score: 1 - 100");

		new string[100];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerAvail(i))
			{
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GivePlayerScore_(i, score, true, true);
			}
		}
		format(string, sizeof(string), "~g~~h~%i Score ~w~for all!", score);
		GameTextForAll(string, 5000, 0);
		format(string, sizeof(string), "Admin %s(%i) has given all players %i Score", __GetName(playerid), playerid, score);
		SCMToAll(YELLOW, string);
		print(string);
	}
	else
	{
		SCM(playerid, -1, NO_PERM);
	}
	return 1;
}

YCMD:ignore(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    new player;
	if(sscanf(params, "r", player))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /ignore <playerid>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
		
	if(player == playerid) return SCM(playerid, -1, ""er"You cannot ignore yourself!");
	if(PlayerInfo[player][Level] > 0) return SCM(playerid, -1, ""er"You cannot ignore Admins!");

	if(Iter_Contains(PlayerIgnore[playerid], player))
	{
		format(gstr, sizeof(gstr), ""er"You are already ignoring %s(%i)! Use /unignore to unignore.", __GetName(player), player);
		SCM(playerid, -1, gstr);
		return 1;
	}

	Iter_Add(PlayerIgnore[playerid], player);

	format(gstr, sizeof(gstr), "[IGNORE] %s(%i) is now ignored by you.", __GetName(player), player);
	SCM(playerid, YELLOW, gstr);
	SCM(playerid, -1, ""er"Type /unignore to recieve PMs from this player.");
	return 1;
}

YCMD:unignore(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
	new player;
   	if(sscanf(params, "r", player))
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /unignore <playerid>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(!Iter_Contains(PlayerIgnore[playerid], player))
	{
		format(gstr, sizeof(gstr), ""er"You aren't ignoring %s(%i)! Use /ignore to ignore.", __GetName(player), player);
		SCM(playerid, -1, gstr);
		return 1;
	}

	Iter_Remove(PlayerIgnore[playerid], player);

	format(gstr, sizeof(gstr), "[IGNORE] %s(%i) is not ignored by you anymore.", __GetName(player), player);
	SCM(playerid, YELLOW, gstr);
	return true;
}

YCMD:irc(playerid, params[], help)
{
	new msg[144];
	if(sscanf(params, "s[144]", msg))
	{
	    SCM(playerid, NEF_GREEN, "Usage: /irc <message>");
        SCM(playerid, NEF_GREEN, "Sends a message to IRC");
		return 1;
	}
	
	if(IsAd(msg))
	{
	    SCM(playerid, RED, "Advertising is not allowed!");
	    return 1;
	}
	
	format(gstr, sizeof(gstr), "3*** %s(%i) to IRC: 4%s", __GetName(playerid), playerid, msg);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
	format(gstr, sizeof(gstr), "Message sent to IRC: "YELLOW_E"%s", msg);
	SCM(playerid, COLOR_RED, gstr);
	return 1;
}

YCMD:tpm(playerid, params[], help)
{
	if(GetPVarInt(playerid, "inCNR") == 0)
	{
		SCM(playerid, COLOR_YELLOW, "ERROR: "GREY2_E"You must be in a CNR minigame to use this command!");
		return true;
	}

	if(isnull(params))
    {
	    SCM(playerid, NEF_GREEN, "Usage: /tpm <message>");
	    return true;
	}
	
	if(IsAd(params))
	{
		new string[255];
	  	format(string, sizeof(string), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, params, __GetIP(playerid));
		AdminMSG(RED, string);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}
	
	if(GetPVarInt(playerid, "Cop") != 0)
	{
	    format(gstr, sizeof(gstr), "[TPM] "LB_E"%s(%d): "YELLOW_E"%s", __GetName(playerid), playerid, params);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPVarInt(i, "Cop") != 0)
			{
				SCM(i, COLOR_BLUE, gstr);
			}
		}
 	}
 	else if(GetPVarInt(playerid, "Robber") != 0)
 	{
 	    format(gstr, sizeof(gstr), "[TPM] "ORANGE_E"%s(%d): "YELLOW_E"%s", __GetName(playerid), playerid, params);
 		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPVarInt(i, "Robber") != 0)
			{
				SCM(i, COLOR_BLUE, gstr);
			}
		}
 	}
 	return true;
}

YCMD:givecash(playerid, params[], help)
{
	new tick = GetTickCount() + 3600000;
	if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	{
		if((PlayerInfo[playerid][tickLastGiveCash] + COOLDOWN_CMD_GIVECASH) >= tick)
		{
	    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
		}
	}
	
	if(GetPlayerScore(playerid) < 500) return SCM(playerid, -1, ""er"You need at least 500 score to share cash.");
	
	new player, cash, reason[100];
	if(sscanf(params, "ris", player, cash, reason))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /givecash <playerid> <money> <reason>");
	}

    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");

	if(IsPlayerAvail(player))
	{
    	if(GetPlayerCash(playerid) < cash)
		{
			return SCM(playerid, RED, "You don't have that much!");
		}
    	if(cash < 1000 || cash > 100000)
		{
			return SCM(playerid, YELLOW, "Info: $1,000 - $100,000");
		}
    	if(player == playerid)
		{
			return SCM(playerid, RED, "You can't pay yourself");
		}

		if(!strcmp(__GetIP(playerid), __GetIP(player), true))
		{
		    return SCM(playerid, RED, "The player has the same ip as you");
		}

      	GivePlayerCash(playerid, -cash);
      	GivePlayerCash(player, cash);
        format(gstr, sizeof(gstr), "Info: %s(%i) paid you $%s reason: %s", __GetName(playerid), playerid, ToCurrency(cash), reason);
        SCM(player, YELLOW, gstr);
        SCM(playerid, YELLOW, "Successfully paid the money!");
		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) paid $%s to %s reason: %s", __GetName(playerid), playerid, ToCurrency(cash), __GetName(player), reason);
		AdminMSG(-1, gstr);
		print(gstr);
    }
    else
    {
        SCM(playerid, -1, ""er"Player is not connected");
    }
    
    PlayerInfo[playerid][tickLastGiveCash] = tick;
	return 1;
}

YCMD:pm(playerid, params[], help)
{
	if(PlayerInfo[playerid][Muted])
	{
	    SCM(playerid, RED, "You are muted! Please wait until the time is over!");
	    return 0;
	}

	new player, msg[144];
	if(sscanf(params, "rs[144]", player, msg))
	{
		return SCM(playerid, NEF_GREEN, "Usage: /pm <playerid> <message>");
	}
	
    if(player == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, ""er"Player not connected!");
	
	new tick = GetTickCount() + 3600000;
	if((PlayerInfo[playerid][tickLastPM] + COOLDOWN_CMD_PM) >= tick)
	{
	    return SCM(playerid, -1, ""nef" Please wait before sending a message again");
	}
    PlayerInfo[playerid][tickLastPM] = tick;

	if(IsAd(msg))
	{
	  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, msg, __GetIP(playerid));
		AdminMSG(RED, gstr);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}

	if(!IsPlayerAvail(player))
	{
		return SCM(playerid, -1, ""er"Player is not connected!");
	}
	if(player == playerid)
	{
	    return SCM(playerid, -1, ""er"You can´t pm yourself");
	}
	if(Iter_Contains(PlayerIgnore[player], playerid))
	{
	    return SCM(playerid, -1, ""er"This player has blocked you from PMing him");
	}
	
	TextDrawShowForPlayer(playerid, CheckTD);
	TextDrawShowForPlayer(player, NewMsgTD);
	SetTimerEx("hideMsgTD", 3000, false, "i", player);
	SetTimerEx("hideCheck", 3000, false, "i", playerid);
	
	format(gstr, sizeof(gstr), "***[PM] from %s(%i): %s", __GetName(playerid), playerid, msg);
    SCM(player, YELLOW, gstr);
	format(gstr, sizeof(gstr), ">>>[PM] to %s(%i): %s", __GetName(player), player, msg);
	SCM(playerid, YELLOW, gstr);
	SetPVarInt(player, "LastID", playerid);

   	format(gstr, sizeof(gstr), "~g~~h~~h~PM from ~y~~h~%s(%i)", __GetName(playerid), playerid);
	InfoTD_MSG(player, 3500, gstr);
	format(gstr, sizeof(gstr), "~g~~h~~h~PM sent to ~b~~h~~h~%s(%i)!", __GetName(player), player);
	InfoTD_MSG(playerid, 3500, gstr);

	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerPlaySound(player, 1057, 0.0, 0.0, 0.0);

	format(gstr, sizeof(gstr), "[PM] from %s(%i) to %s(%i): %s", __GetName(playerid), playerid, __GetName(player), player, msg);
	AdminMSG(GREY, gstr);
	return 1;
}

YCMD:r(playerid, params[], help)
{
    if(GetPVarInt(playerid, "LastID") == -1)
	{
		return SCM(playerid, -1, ""er"Noone has send you a message yet");
	}

	extract params -> new string:msg[128]; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /r <message>");
	}

	if(IsAd(msg))
	{
	  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, msg, __GetIP(playerid));
		AdminMSG(RED, gstr);

        SCM(playerid, RED, "Advertising is not allowed!");
        return 1;
	}
	
	new lID = GetPVarInt(playerid, "LastID");
	if(!IsPlayerAvail(lID))
	{
		return SCM(playerid, -1, ""er"Player is not connected!");
	}
	if(Iter_Contains(PlayerIgnore[lID], playerid))
	{
	    return SCM(playerid, -1, ""er"This player has blocked you from PMing him");
	}
	format(gstr, sizeof(gstr), "***[PM] from %s(%i): %s", __GetName(playerid), playerid, msg);
    SCM(lID, YELLOW, gstr);
	format(gstr, sizeof(gstr), ">>>[PM] to %s(%i): %s", __GetName(lID), lID, msg);
	SCM(playerid, YELLOW, gstr);
	SetPVarInt(lID, "LastID", playerid);

	TextDrawShowForPlayer(playerid, CheckTD);
	TextDrawShowForPlayer(lID, NewMsgTD);
	SetTimerEx("hideMsgTD", 3000, false, "i", lID);
	SetTimerEx("hideCheck", 3000, false, "i", playerid);

   	format(gstr, sizeof(gstr), "~g~~h~~h~PM from ~y~~h~%s(%i)", __GetName(playerid), playerid);
	InfoTD_MSG(lID, 3500, gstr);
	format(gstr, sizeof(gstr), "~g~~h~~h~PM sent to ~b~~h~~h~%s(%i)!", __GetName(lID), lID);
	InfoTD_MSG(playerid, 3500, gstr);

	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerPlaySound(lID, 1057, 0.0, 0.0, 0.0);

	format(gstr, sizeof(gstr), ""grey"[PM] from %s(%i) to %s(%i): %s", __GetName(playerid), playerid, __GetName(lID), lID, msg);
	AdminMSG(GREY, gstr);
	return 1;
}

YCMD:toggletoys(playerid, params[], help)
{
	if(!islogged(playerid)) return notlogged(playerid);
	
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	SCM(playerid, -1, ""LB2_E"Toggled toys!");

	if(PlayerInfo[playerid][bShowToys])
	{
	    RemovePlayerToys(playerid);
	}
	else if(!PlayerInfo[playerid][bShowToys])
	{
	    AttachPlayerToys(playerid);
	}

	PlayerInfo[playerid][bShowToys] = !PlayerInfo[playerid][bShowToys];
	return 1;
}

YCMD:toys(playerid, params[], help)
{
    if(!islogged(playerid)) return notlogged(playerid);
    
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, ""er"Please exit your vehicle first.");

	new string[512], tmp[64];

	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(i > PlayerInfo[playerid][AdditionalToySlots] + 4)
	    {
		    format(tmp, sizeof(tmp), ""dl"Slot %i "red"(Locked)\n", i + 1);
	    }
	    else
	    {
		    if(PlayerToys[playerid][i][toy_model] == 0)
			{
			    format(tmp, sizeof(tmp), ""dl"Slot %i\n", i + 1);
			}
			else
			{
			    format(tmp, sizeof(tmp), ""dl"Slot %i "green2"(Used)\n", i + 1);
			}
		}
		strcat(string, tmp);
	}

	ShowPlayerDialog(playerid, TOY_DIALOG, DIALOG_STYLE_LIST, ""nef" - Player Toys", string, "Select", "Cancel");
	return 1;
}

YCMD:achs(playerid, params[], help)
{
	new otherplayer, player;
	if(sscanf(params, "r", otherplayer))
	{
	    player = playerid;
	}
	else
	{
	    if(otherplayer == INVALID_PLAYER_ID) return SCM(playerid, -1, ""er"Invalid player!");
		if(!IsPlayerConnected(otherplayer)) return SCM(playerid, -1, ""er"Player not connected!");
	
		player = otherplayer;
	}

	if(IsPlayerAvail(player))
	{
		new tmp[e_player_ach_data][10],
			finstring[2048];
			
		for(new i = 0; e_player_ach_data:i < e_player_ach_data; i++)
		{
		    if(pAch[player][e_player_ach_data:i] == 1)
		    {
		        tmp[e_player_ach_data:i] = ""GREEN_E"•";
		    }
		    else
		    {
		        tmp[e_player_ach_data:i] = ""RED_E"•";
		    }
		}

	    format(gstr, sizeof(gstr), ""white"[%s"white"] Styler "LB2_E"-> Buy a toy\n", tmp[E_ach_styler]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Grim Reaper "LB2_E"-> Make 300 kills\n", tmp[E_ach_grimreaper]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Mass Killer "LB2_E"-> Do a 25 Kill Streak\n", tmp[E_ach_masskiller]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Elite Racer "LB2_E"-> Win 10 races\n", tmp[E_ach_eliteracer]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Too Fast "LB2_E"-> Win 10 Reaction Tests\n", tmp[E_ach_toofast]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Score Whore "LB2_E"-> Get 2000 score\n", tmp[E_ach_scorewhore]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Destroyer "LB2_E"-> Win 20 derbys\n", tmp[E_ach_destroyer]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Rest in Peace "LB2_E"-> Die 50 times\n", tmp[E_ach_restinpeace]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Silent Killer "LB2_E"-> Kill someone with a Knife\n", tmp[E_ach_silentkiller]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] One Shot Two Kills "LB2_E"-> Win 10 gungames\n", tmp[E_ach_oneshot2kills]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Deep Impact "LB2_E"-> Win 10 Fallout games\n", tmp[E_ach_deepimpact]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Skydiver "LB2_E"-> Win /skydive and /skydive2 in a row\n", tmp[E_ach_skydiver]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] Biker "LB2_E"-> Win /bikec\n", tmp[E_ach_biker]);
	    strcat(finstring, gstr);
	    format(gstr, sizeof(gstr), ""white"[%s"white"] BMX Master "LB2_E"-> Win /bmx\n", tmp[E_ach_bmxmaster]);
	    strcat(finstring, gstr);

	    strcat(finstring, "\n\n"white"Use /achs <playerid> to see someone else's achievements");

		ShowPlayerDialog(playerid, ACHS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Achievements", finstring, "OK", "");
	}
	else
	{
		SCM(playerid, -1, ""er"Player is not available");
	}
	return 1;
}

YCMD:cmds(playerid, params[], help)
{
    ShowDialog(playerid, CMDS_DIALOG);
	return 1;
}

YCMD:help(playerid, params[], help)
{
	ShowDialog(playerid, HELP_DIALOG);
    return 1;
}

YCMD:anims(playerid, params[], help)
{
    new cstring[1024];
    strcat(cstring, ""nef_yellow"All animations are listed below:\n");
    strcat(cstring, ""white"/piss - /wank - /dance - /vomit\n/drunk - /sit - /wave - /lay - /smoke - /crossarms\n/rob - /cigar - /laugh - /handsup - /fucku - /carry\n\n");
	strcat(cstring, ""nef_yellow"To stop an animation:");
	strcat(cstring, "\n"white"Type: /stopanim or press: [SHIFT], [ENTER], [LMB]");

	ShowPlayerDialog(playerid, ANIMS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Animations", cstring, "OK", "");
	return 1;
}

YCMD:stopanims(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    ClearAnimations(playerid);
	return 1;
}

YCMD:handsup(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

YCMD:cigar(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

YCMD:carry(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

YCMD:piss(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "PAULNMAC", "Piss_loop", 4.1, 1, 0, 0, 0, 0);
    SetPlayerSpecialAction(playerid, 68);
	return 1;
}

YCMD:wank(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:crossarms(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);

	extract params -> new crossarms; else
	{
	    return SCM(playerid, NEF_GREEN, "Usage: /crossarms <1-2>");
	}

    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);

	switch(crossarms)
	{
		case 1: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		default: SCM(playerid, NEF_GREEN, "Usage: /crossarms <1-2>");
 	}
	return 1;
}

YCMD:sit(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);

    extract params -> new sit; else
    {
        return SCM(playerid, NEF_GREEN, "Usage: /sit <1-6>");
    }

    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);

	switch(sit)
	{
  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
  		default: SCM(playerid, NEF_GREEN, "Usage: /sit <1-6>");
 	}
	return 1;
}

YCMD:dance(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);

    extract params -> new dance; else
    {
        return SCM(playerid, NEF_GREEN, "Usage: /dance <1-5>");
    }

    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
  	if(dance == 1)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
  	}
  	else if(dance == 2)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
  	}
  	else if(dance == 3)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
  	}
  	else if(dance == 4)
  	{
  	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
  	}
  	else if(dance == 5)
  	{
		ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 0, 0, 0, 0);
  	}
  	else
  	{
  	    SCM(playerid, NEF_GREEN, "Usage: /dance <1-4>");
  	}
	return 1;
}

YCMD:vomit(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:drunk(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);

    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:wave(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:lay(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:smoke(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
    
    ApplyAnimation(playerid, "SHOP", "Smoke_RYD", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:laugh(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);

    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:fucku(playerid, params[], help)
{
    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
    Command_ReProcess(playerid, "/stopanims", false);
    GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);

    ApplyAnimation(playerid, "PED", "fucku", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

YCMD:rob(playerid, params[], help)
{
	if(gTeam[playerid] == CNR)
	{
		new tick = GetTickCount() + 3600000;
		if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
		{
			if((PlayerInfo[playerid][tickLastRob] + COOLDOWN_CMD_ROB) >= tick)
			{
		    	return SCM(playerid, -1, ""er"Please wait a bit before using this cmd again!");
			}
		}
		
		new str[255];
		if(GetPVarInt(playerid, "Robber") == 1)
		{
			if(GetPVarInt(playerid, "InStore") != 0)
			{
				if(GetPVarInt(playerid, "HasRobbed") == 0)
				{
                    if(GetCNRCops() < GetCNRRobbers() - 1)
                    {
                        return SCM(playerid, -1, ""er"There aren't enough cops in CNR to attempt a robbery!");
                    }
				    SetPVarInt(playerid, "HasRobbed", 1);
				    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
				    if(GetPlayerWantedLevel(playerid) >= 4)
					{
						SetPlayerColor(playerid, COLOR_ORANGE2);
					}
				    SetTimerEx("ResetRobbery", 250000, false, "ii", playerid, YHash(__GetName(playerid), false));
				    RobberyCount[playerid] = 20;
				    RobberyTimer[playerid] = SetTimerEx("StartRobbery", 1000, true, "ii", playerid, YHash(__GetName(playerid), false));
					SCM(playerid, COLOR_BLUE, ">> "ORANGE_E"You have started a robbery, the cops have been notified!");
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);

                    PlayerInfo[playerid][tickLastRob] = tick;

                    format(str, sizeof(str), "COP RADIO: "LB_E"Suspect %s(%i) has started a robbery at the %s!", __GetName(playerid), playerid, GetStoreName(playerid));
					for(new i = 0; i < MAX_PLAYERS; i++)
				   	{
			     		if(GetPVarInt(i, "Cop") != 0)
						{
							SCM(i, COLOR_BLUE, str);
		  				}
	  				}
				}
				else
				{
					SCM(playerid, COLOR_BLUE, ">> "RED_E"You have recently robbed a shop, you can only rob a store once every 3 minutes.");
				}
			}
	  		else // Robing players.
	  		{
				new Float:x, Float:y, Float:z, rangepass;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
		    		if(i == playerid) continue;
		    		if(IsPlayerInAnyVehicle(i)) continue;
					GetPlayerPos(i, x, y, z);
	   		 		if(IsPlayerInRangeOfPoint(playerid, 3.2, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	    			{
	    				rangepass++;

	    				if(gTeam[i] == CNR) // Make sure the other player is in CNR.
						{
							GameTextForPlayer(i, "~w~Someone has robbed you!~r~-$5,000~w~!", 4000, 5);
							GivePlayerCash(i, -5000);
							GivePlayerCash(playerid, 5000);
					    	GameTextForPlayer(playerid, "~w~Robbed him~n~~g~+$5,000", 4000, 5);
	  					}
					}
				}
				if(rangepass == 0)
				{
					SCM(playerid, COLOR_RED, "Server: "GREY2_E"No players to rob near you.");
				}
				else PlayerInfo[playerid][tickLastRob] = tick;
			}
		}
		else
		{
			Error(playerid, "You can't rob as a enforcement");
		}
	}
	else
	{
	    if(gTeam[playerid] != NORMAL && gTeam[playerid] != HOUSE && gTeam[playerid] != VIPL) return SCM(playerid, RED, NOT_AVAIL);
		Command_ReProcess(playerid, "/stopanims", false);
		GameTextForPlayer(playerid, "~w~Type /stopanim to quit anims!", 4000, 4);
	    
	    ApplyAnimation(playerid, "SHOP", "ROB_Loop", 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

YCMD:ar(playerid, params[], help)
{
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		if(IsPlayerInAnyVehicle(playerid)) return 1;
		if(IsPlayerInRangeOfPoint(playerid, 75.0, 1312.5220, 2672.7532, 11.2392) || IsPlayerInRangeOfPoint(playerid, 75.0, 1276.4218, 2670.2009, 10.8203))
		{
			SCM(playerid, COLOR_RED, "Server: "GREY2_E"You can't make arrests near the criminal spawn zone!");
	        return 1;
		}

		new Float:x, Float:y, Float:z, rangepass, str[255];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(i == playerid) continue;
      		if(IsPlayerInAnyVehicle(i)) continue;
			GetPlayerPos(i, x, y, z);
   		 	if(IsPlayerInRangeOfPoint(playerid, 3.8, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    		{
    			if(GetPVarInt(i, "Robber") == 1 && GetPVarInt(i, "Cop") == 0)
				{
					rangepass++;
					pArrests[playerid]++;
    				SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
    				SetPVarInt(i, "InStore", 0);
				    ApplyAnimation(playerid, "PED", "ARRESTgun", 4.0, 0, 0, 0, 0, 0);
				    format(str, sizeof(str), "Server: "GREY2_E"Suspect %s(%d) has been arrested by Officer %s(%d).", __GetName(i), i, __GetName(playerid), playerid);
					SCMToAll(COLOR_RED, str);
					gTeam[i] = JAIL;
				    pJail[i] = 30;
				    SetPVarInt(i, "JailedByAdmin", 0);
				    SetTimerEx("JailPlayer", 1200, false, "ii", i, YHash(__GetName(i), false));
				    KillTimer(RobberyTimer[i]);
				    SCM(i, COLOR_BLUE, ""nef" "RED_E"You have been cuffed and arrested!");
				    SCM(i, COLOR_BLUE, ""nef" "RED_E"You will serve 30 seconds in jail.");
				    GameTextForPlayer(i, "~r~arrested~w~!", 4000, 5);
				    GameTextForPlayer(playerid, "~w~Suspect ~g~Arrested.", 4000, 5);
				    GivePlayerCash(playerid, 10000, true, true);
					GivePlayerScore_(playerid, 5, true, true);
				    SCM(playerid, COLOR_BLUE, ""nef" "RED_E"You have received 5 score and $10,000 for catching a criminal!");
				    
				 	if(PlayerInfo[i][GangPosition] > 0 && PlayerInfo[i][GangID] != PlayerInfo[playerid][GangID])
					{
					  	MySQL_UpdateGangScore(PlayerInfo[playerid][GangID], 1);
				 	}
	    		}
    		}
  		}
  		if(rangepass == 0)
		{
			SCM(playerid, COLOR_RED, "Server: "GREY2_E"No criminals near your range.");
		}
	}
	else
	{
		Error(playerid, "You must be a cop while in a /CNR minigame to use this command!");
	}
	return true;
}

YCMD:escape(playerid, params[], help)
{
	if(GetPVarInt(playerid, "HasEscaped") == 1)
 		return Error(playerid, "You have already attempted to escape!");

	if(GetPVarInt(playerid, "JailedByAdmin") == 1)
 		return Error(playerid, "You can't attempt to escape as you've been jailed by an admin.");

	if(pJail[playerid] == 0 || gTeam[playerid] != JAIL)
		return Error(playerid, "You are not in jail");

	SetPVarInt(playerid, "HasEscaped", 1);
	new str[255];
	switch(random(5))
	{
	    case 0, 1:
		{
			pJail[playerid] = 0;
			GameTextForPlayer(playerid, "~b~escaped", 5000, 3);
			SCM(playerid, COLOR_ORANGE, "*** "RED_E"You have escaped from jail, the cops have been notified!");
			SetPlayerPosition(playerid, 2290.6777,2423.7139,10.8203,181.2573);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 20);

            format(str, sizeof(str), "COP RADIO: "LB_E"Suspect %s(%d) has escaped from prision, units respond!", __GetName(playerid), playerid);
			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
    			if(GetPVarInt(i, "Cop") != 0)
				{
					SCM(i, COLOR_BLUE, str);
				}
			}

			SetPVarInt(playerid, "Robber", 1);
			SetPVarInt(playerid, "HasEscaped", 0);
			GivePlayerWeapon(playerid, 5, 500); // Bat
			GivePlayerWeapon(playerid, 29, 800); // SMG
			GivePlayerWeapon(playerid, 30, 1000); //AK
			GivePlayerWeapon(playerid, 24, 300); // Deagle
			GivePlayerWeapon(playerid, 27, 200); //Combat
			GivePlayerWeapon(playerid, 16, 1); // 1 Nade
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		case 2..4:
		{
			pJail[playerid] += 20;
			GameTextForPlayer(playerid, "~r~escaped failed", 5000, 3);
			SCM(playerid, COLOR_WHITE, "*** "RED_E"Your escape has failed, 20 seconds added to your jail sentence!");

            format(str, sizeof(str), "COP RADIO: "GREY_E"Suspect %s(%d) has failed an attempt escape from jail.", __GetName(playerid), playerid);
            for(new i = 0; i < MAX_PLAYERS; i++)
   			{
    			if(GetPVarInt(i, "Cop") != 0)
				{
					SCM(i, COLOR_BLUE, str);
				}
			}
		}
	}
	return true;
}

YCMD:w(playerid, params[], help)
{
	if(PlayerInfo[playerid][bGod]) return SCM(playerid, -1, ""er"You need to disable GodMode first. (/god)");
	if(gTeam[playerid] == NORMAL)
	{
		ShowDialog(playerid, WEAPON_DIALOG);
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

YCMD:nos(playerid, params[], help)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gTeam[playerid] == NORMAL)
    {
		if(PVSelect[playerid] != -1)
		{
		    if(GetPlayerVehicleID(playerid) == PlayerPV[playerid][PVSelect[playerid]][PVehicleID]) return SCM(playerid, -1, ""er"Not useable in private vehicles");
		}

        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		if(IsComponentIdCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)), 1010)) AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	}
	else
	{
		SCM(playerid, GREY, NOT_AVAIL);
	}
	return 1;
}

YCMD:v(playerid, params[], help)
{
    if(PlayerInfo[playerid][bGWarMode]) return SCM(playerid, -1, ""er"You can't use this command in Gang War mode, use /exit");
    if(GetPVarInt(playerid, "doingStunt") != 0) return SCM(playerid, -1, ""er"You can't spawn a car now");
	if(IsPlayerInRangeOfPoint(playerid, 70.0, 1786.5049, -1298.0465, 120.2656) && PlayerInfo[playerid][Level] < 2) return SCM(playerid, -1, ""er"Can´t spawn vehicle at this place!");
	if(IsPlayerInRangeOfPoint(playerid, 50.0, -377.2038, 2131.4634, 133.1797) && PlayerInfo[playerid][Level] < 2) return SCM(playerid, -1, ""er"Can´t spawn vehicle at this place!");
	if(strlen(params) > 29) return SCM(playerid, NEF_GREEN, "I don´t know that vehicle...");

	if(gTeam[playerid] == NORMAL)
	{
	    if(IsNumeric(params))
	    {
			if(!IsValidVehicleModel(strval(params)))
			{
				return SCM(playerid, NEF_YELLOW, "I don´t know that vehicle...");
			}

	        CarSpawner(playerid, strval(params), 120);
	    }
	    else
	    {
			if(!sscanf(params, "s[144]", gstr))
			{
				new veh = GetVehicleModelID(gstr);
				if(!IsValidVehicleModel(veh))
				{
					return SCM(playerid, NEF_YELLOW, "I don´t know that vehicle...");
				}
				
		        CarSpawner(playerid, veh, 120);
			}
			else
			{
				ShowDialog(playerid, VEHICLE_DIALOG);
			}
		}
	}
	else
	{
  		SCM(playerid, RED, NOT_AVAIL);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && PVSelect[i] != -1)
		{
		    if(PlayerPV[i][PVSelect[i]][PVehicleID] == vehicleid)
			{
				ModVehicleColor(i);
				ModVehiclePaintJob(i);
				ModVehicleComponents(i);
				break;
		    }
		}
	}
	return 1;
}

function:OnPlayerNameChangeRequest(newname[], playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
	    SCM(playerid, -1, ""er"Your name is already in use or contains invalid characters");
	}
	else
	{
	    new oldname[MAX_PLAYER_NAME+1], query[255];
	    strmid(oldname, __GetName(playerid), 0, sizeof(oldname), sizeof(oldname));
	    
		if(SetPlayerName(playerid, newname) == 1) // If successfull
        {
			new cname[25];
		    GetPlayerName(playerid, cname, 25);
			PlayerInfo[playerid][sName][0] = '\0';
			strcat(PlayerInfo[playerid][sName], cname, 25);
        
            if(PlayerInfo[playerid][Houses] > 0)
            {
				for(new i = 0; i < houseid; i++)
				{
    				if(strcmp(HouseInfo[i][Owner], oldname, true)) continue;

                    strmid(HouseInfo[i][Owner], newname, 0, 25, 25);

				    format(query, sizeof(query), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseInfo[i][iID], ToCurrency(HouseInfo[i][price]), HouseInfo[i][E_score], HouseIntTypes[HouseInfo[i][interior]][intname]);
				    UpdateDynamic3DTextLabelText(HouseInfo[i][label], -1, query);
				    MySQL_SaveHouse(i);
				}
            }

            if(PlayerInfo[playerid][Props] > 0)
            {
				for(new i = 0; i < propid; i++)
				{
    				if(strcmp(PropInfo[i][Owner], oldname, true)) continue;

                    strmid(PropInfo[i][Owner], newname, 0, 25, 25);

				    format(query, sizeof(query), ""business_mark"\nOwner: %s\nID: %i\nLevel: %i", __GetName(playerid), PropInfo[i][iID], PropInfo[i][E_Level]);
				    UpdateDynamic3DTextLabelText(PropInfo[i][label], -1, query);
				    MySQL_SaveProp(i);
				}
            }
            
            format(query, sizeof(query), "UPDATE `accounts` SET `Name` = '%s' WHERE `Name` = '%s' LIMIT 1;", newname, oldname);
            mysql_tquery(g_SQL_handle, query, "", "");
            
            format(query, sizeof(query), "UPDATE `race_records` SET `name` = '%s' WHERE `name` = '%s';", newname, oldname);
            mysql_tquery(g_SQL_handle, query, "", "");
            
            format(query, sizeof(query), "INSERT INTO `ncrecords` VALUES (NULL, '%s', '%s', %i);", oldname, newname, gettime());
            mysql_tquery(g_SQL_handle, query, "", "");
            
            format(query, sizeof(query), "UPDATE `queue` SET `Extra` = '%s' WHERE `Extra` = '%s';", newname, oldname);
            mysql_tquery(g_SQL_handle, query, "", "");

            format(query, sizeof(query), "UPDATE `online` SET `name` = '%s' WHERE `name` = '%s';", newname, oldname);
            mysql_tquery(g_SQL_handle, query, "", "");

			PlayerInfo[playerid][LastNameChange] = gettime();
			
			DestroyPlayerVehicles(playerid);
			
			new nextnc = (PlayerInfo[playerid][LastNameChange] + ((PlayerInfo[playerid][VIP] == 1) ? (2592000) : (7776000)));
			
			format(query, sizeof(query), ""white"You have successfully changed your name.\n\nNew name: %s\nOld name: %s\nNext namechange available: %s", newname, oldname, UnixTimeToDate(nextnc));
			ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""nef" - Namechange", query, "OK", "");
			
			format(query, sizeof(query), ""nef" %s(%i) has changed their name to %s", oldname, playerid, newname);
			SCMToAll(-1, query);
			
			format(query, sizeof(query), "2Server: 3 %s(%i)4 has changed their name to %s", oldname, playerid, newname);
			IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, query),
			
			MySQL_SavePlayer(playerid, true);
			MySQL_SavePlayerToys(playerid);
        }
        else
        {
            SCM(playerid, -1, ""er"Your name is already in use or contains invalid characters");
        }
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	// Fixing dialog exploit
	for(new i = 0; i < strlen(inputtext); i++)
	{
		if(inputtext[i] == '%')
		{
			inputtext[i] = '#';
		}
	}
	
	if(response)
	{
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0); //1054

	    switch(dialogid)
	    {
	 	    case DIALOG_RACE_RACETYPE:
		    {
		        switch(listitem)
		        {
		        	case 0: g_BuildRaceType = 1;
		        	case 1: g_BuildRaceType = 2;
				}
				ShowDialog(playerid, DIALOG_RACE_RACEVW);
				return true;
		    }
    	    case DIALOG_RACE_RACEVW:
		    {
		        if(!strlen(inputtext)) return ShowDialog(playerid, DIALOG_RACE_RACEVW);
		        if(strval(inputtext) <= 0) return ShowDialog(playerid, DIALOG_RACE_RACEVW);
		        g_BuildVirtualWorld = strval(inputtext);
		        ShowDialog(playerid, DIALOG_RACE_RACEVEH);
				return true;
		    }
	 	    case DIALOG_RACE_RACEVEH:
		    {
		        if(!strlen(inputtext)) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
		        if(IsNumeric(inputtext))
		        {
		            if(!IsValidVehicleModel(strval(inputtext))) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
					new Float:POS[4];
					GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					GetPlayerFacingAngle(playerid, POS[3]);
					g_BuildModeVMID = strval(inputtext);
					if(g_BuildVehicle != -1)
					{
					    DestroyVehicle_(g_BuildVehicle);
					    g_BuildVehicle = -1;
					}
		            g_BuildVehicle = CreateVehicle_(g_BuildModeVMID, POS[0], POS[1], POS[2], POS[3], (random(128) + 127), (random(128) + 127), -1);
		            PutPlayerInVehicle(playerid, g_BuildVehicle, 0);
					ShowDialog(playerid, DIALOG_RACE_RACESTARTPOS);
				}
		        else
		        {
		            if(!IsValidVehicleModel(GetVehicleModelID(inputtext))) return ShowDialog(playerid, DIALOG_RACE_RACEVEH);
					new Float:POS[4];
					GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					GetPlayerFacingAngle(playerid, POS[3]);
					g_BuildModeVMID = GetVehicleModelID(inputtext);
					if(g_BuildVehicle != -1)
					{
					    DestroyVehicle_(g_BuildVehicle);
					    g_BuildVehicle = -1;
					}
		            g_BuildVehicle = CreateVehicle_(g_BuildModeVMID, POS[0], POS[1], POS[2], POS[3], (random(128) + 127), (random(128) + 127), -1);
		            PutPlayerInVehicle(playerid, g_BuildVehicle, 0);
					ShowDialog(playerid, DIALOG_RACE_RACESTARTPOS);
		        }
		        return true;
		    }
		    case DIALOG_RACE_RACESTARTPOS:
		    {
				SCM(playerid, GREEN, ">> Go to the start line on the left road and press 'KEY_FIRE' and do the same with the right road block.");
				SCM(playerid, GREEN, ">> When this is done, you will see a dialog to continue.");
				g_BuildVehPosCount = 0;
		        g_BuildTakeVehPos = true;
		        return true;
		    }
    	    case DIALOG_RACE_CHECKPOINTS:
		    {
		        SCM(playerid, GREEN, ">> Start taking checkpoints now by clicking 'KEY_FIRE'.");
		        SCM(playerid, GREEN, ">> IMPORTANT: Press 'ENTER' when you're done with the checkpoints! If it doesn't react press again and again.");
		        g_BuildCheckPointCount = 0;
		        g_BuildTakeCheckpoints = true;
				return true;
		    }
	        case PROP_MENU_DIALOG:
	        {
				format(gstr, sizeof(gstr), ""nef" - Business Menu > Slot: %i", listitem + 1);

	            PlayerInfo[playerid][PropSlotSelected] = listitem;

		        if(listitem > PlayerInfo[playerid][AdditionalPropSlots])
		        {
		            ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This business slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
		        }
		        else
				{
				    if(listitem >= PlayerInfo[playerid][Props])
				    {
				        SendInfo(playerid, "This business slot is currently not in use!", 2500);
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, PROP_MENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, ""dl"Goto This Business\n"dl"Upgrade Business Level", "Select", "Cancel");
				    }
				}
	            return true;
	        }
	        case PROP_MENU_DIALOG + 1:
	        {
		        if(gTeam[playerid] != NORMAL)
				{
					SendInfo(playerid, "~y~~h~You can't perform this action now!", 2500);
					return 1;
				}
						
				switch(listitem)
				{
				    case 0:
				    {
						new p_id = GetPropIdByPlayerSlotSel(playerid);

						if(p_id != -1)
						{
				   			SetPlayerPos(playerid, PropInfo[p_id][E_x], PropInfo[p_id][E_y], PropInfo[p_id][E_z]);
				   			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				   			SetPVarInt(playerid, "doingStunt", 0);
				   			PlayerInfo[playerid][tickJoin_bmx] = 0;
						}
						else SendInfo(playerid, "Error couldn't find the business in that slot! Report on forums!", 2500);
				    }
				    case 1:
				    {
				        ShowDialog(playerid, PROP_LEVEL_UPGRADE_DIALOG);
				    }
				}
	            return true;
	        }
	        case PROP_LEVEL_UPGRADE_DIALOG:
	        {
	            new p_id = GetPropIdByPlayerSlotSel(playerid), string[255], tmp[140];
			    
				if(p_id != -1)
				{
		            if(PropInfo[p_id][E_Level] >= MAX_PROP_LEVEL)
		            {
						Command_ReProcess(playerid, "/bmenu", false);
						return 1;
		            }
                
		            if(GetPlayerCash(playerid) < BLevelMatrix[PropInfo[p_id][E_Level]][E_bupradecoast])
		            {
		                return SCM(playerid, -1, ""er"You don't have enough money!");
		            }

                    GivePlayerCash(playerid, -BLevelMatrix[PropInfo[p_id][E_Level]][E_bupradecoast]);
                    PropInfo[p_id][E_Level]++;

					strcat(string, ""white"You have successfully upgraded your business's level!\n\nCurrent Business Level: ");
                 	format(tmp, sizeof(tmp), "%i\nCurrent Business Earnings: $%s", PropInfo[p_id][E_Level], ToCurrency(GetPropEearnings(p_id)));
                 	
                 	strcat(string, tmp);
                 	
				    format(tmp, sizeof(tmp), ""business_mark"\nOwner: %s\nID: %i\nLevel: %i", __GetName(playerid), PropInfo[p_id][iID], PropInfo[p_id][E_Level]);
				    UpdateDynamic3DTextLabelText(PropInfo[p_id][label], -1, tmp);
				    
					MySQL_SaveProp(p_id);
				}
				else return SendInfo(playerid, "~y~~h~Error couldn't find the business in that slot! Report on forums!", 2500);

                format(tmp, sizeof(tmp), ""nef" - Business Level Upgrade > Slot: %i", PlayerInfo[playerid][PropSlotSelected] + 1);
				ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, tmp, string, "OK", "");
	            return true;
	        }
	        case CM_DIALOG:
	        {
				// How to get credits, Toy slots, pvs slots, house slots, house obj slots, business slot, instant namechange, medkit x20, medkit x100, money boost x2, money boost x3, scoreboost x2, scoreboost x3, master boost
				new string[1024];
	            switch(listitem)
	            {
	                case 0:
	                {
	                    strcat(string, ""white"Gold Credits is a virtual currency which can be used to buy \nin-game items and add new features.");
	                    strcat(string, "\n\nGoto "SVRURLWWW"/credits to learn more about Gold Credits");
	                    ShowPlayerDialog(playerid, CM_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" Gold Credits", string, "Back", "");
	                }
	                case 1..13:
	                {
	                    ShowPlayerDialog(playerid, CM_DIALOG + 1 + listitem, DIALOG_STYLE_MSGBOX, ""nef" Gold Credits", GetItem(listitem - 1), "Buy", "Back");
	                }
	            }
	            return true;
	        }
	        case CM_DIALOG + 1:
	        {
	            ShowDialog(playerid, CM_DIALOG);
	            return true;
	        }
	        case CM_DIALOG + 2: // toy slot
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[0][E_item_credits])
	            {
        			SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }
	        
				if(PlayerInfo[playerid][AdditionalToySlots] >= 5)
				{
				    SCM(playerid, -1, ""er"You already have 5 additional toy slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}
				
				PlayerInfo[playerid][AdditionalToySlots]++;
				
				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[0][E_item_name], ToCurrency(CreditsProductMatrix[0][E_item_credits]));
				SendInfo(playerid, string, 5000);
				
				AlterPlayerCredits(playerid, -CreditsProductMatrix[0][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
				return true;
	        }
	        case CM_DIALOG + 3: // pv slot
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[1][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][AdditionalPVSlots] >= 7)
				{
				    SCM(playerid, -1, ""er"You already have 7 additional private vehicle slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][AdditionalPVSlots]++;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[1][E_item_name], ToCurrency(CreditsProductMatrix[1][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[1][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 4: // house slot
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[2][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][AdditionalHouseSlots] >= 4)
				{
				    SCM(playerid, -1, ""er"You already have 4 additional house slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][AdditionalHouseSlots]++;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[2][E_item_name], ToCurrency(CreditsProductMatrix[2][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[2][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 5: // house obj slot
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[3][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][AdditionalHouseObjSlots] >= 7)
				{
				    SCM(playerid, -1, ""er"You already have 7 additional house object slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][AdditionalHouseObjSlots]++;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%s", CreditsProductMatrix[3][E_item_name], ToCurrency(CreditsProductMatrix[3][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[3][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 6: // business slot
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[4][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][AdditionalPropSlots] >= 4)
				{
				    SCM(playerid, -1, ""er"You already have 4 additional business slots!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][AdditionalPropSlots]++;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[4][E_item_name], ToCurrency(CreditsProductMatrix[4][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[4][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 7: // instant nc
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[5][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(((PlayerInfo[playerid][VIP] == 1) ? (PlayerInfo[playerid][LastNameChange] + 2592000) : (PlayerInfo[playerid][LastNameChange] + 7776000)) < gettime())
				{
				    SCM(playerid, -1, ""er"You can already change your name!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][LastNameChange] = 0;
                
				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[5][E_item_name], ToCurrency(CreditsProductMatrix[5][E_item_credits]));
                SendInfo(playerid, string, 5000);

				AlterPlayerCredits(playerid, -CreditsProductMatrix[5][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 8: // 20 medkit
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[6][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				PlayerInfo[playerid][Medkits] += 20;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[6][E_item_name], ToCurrency(CreditsProductMatrix[6][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[6][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 9: // 100 medkits
	        {
	            if(GetCredits(playerid) < CreditsProductMatrix[7][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				PlayerInfo[playerid][Medkits] += 100;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[7][E_item_name], ToCurrency(CreditsProductMatrix[7][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[7][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 10: // mb x2
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[8][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x2 || PlayerInfo[playerid][Boost] & BOOST_MONEY_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][Boost] |= BOOST_MONEY_x2;

				format(gstr, sizeof(gstr), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[8][E_item_name], ToCurrency(CreditsProductMatrix[8][E_item_credits]));
                SendInfo(playerid, gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 2, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(g_SQL_handle, gstr, "", "");
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[8][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 11: // mb x3
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[9][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x2 || PlayerInfo[playerid][Boost] & BOOST_MONEY_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][Boost] |= BOOST_MONEY_x3;

				format(gstr, sizeof(gstr), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[9][E_item_name], ToCurrency(CreditsProductMatrix[9][E_item_credits]));
                SendInfo(playerid, gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 3, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(g_SQL_handle, gstr, "", "");
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[9][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 12: // sb x2
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[10][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x2 || PlayerInfo[playerid][Boost] & BOOST_SCORE_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][Boost] |= BOOST_SCORE_x2;

				format(gstr, sizeof(gstr), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[10][E_item_name], ToCurrency(CreditsProductMatrix[10][E_item_credits]));
                SendInfo(playerid, gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 4, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(g_SQL_handle, gstr, "", "");
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[10][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 13: // sb x3
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[11][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x2 || PlayerInfo[playerid][Boost] & BOOST_SCORE_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][Boost] |= BOOST_SCORE_x3;

				format(gstr, sizeof(gstr), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[11][E_item_name], ToCurrency(CreditsProductMatrix[11][E_item_credits]));
                SendInfo(playerid, gstr, 5000);
                
                format(gstr, sizeof(gstr), "INSERT INTO `queue` VALUES (NULL, 5, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(g_SQL_handle, gstr, "", "");
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[11][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case CM_DIALOG + 14: // masterb
	        {
	            if(!islogged(playerid)) return notlogged(playerid);
	            if(GetCredits(playerid) < CreditsProductMatrix[12][E_item_credits])
	            {
				    SCM(playerid, -1, ""er"You don't have enough Gold Credits!");
				    ShowDialog(playerid, CM_DIALOG);
	                return 1;
	            }

				if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x2 || PlayerInfo[playerid][Boost] & BOOST_SCORE_x3 || PlayerInfo[playerid][Boost] & BOOST_MONEY_x2 || PlayerInfo[playerid][Boost] & BOOST_MONEY_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
				{
				    SCM(playerid, -1, ""er"You already have a money or master boost running!");
				    ShowDialog(playerid, CM_DIALOG);
				    return 1;
				}

				PlayerInfo[playerid][Boost] |= BOOST_MASTER;

				new string[128];
				format(string, sizeof(string), "Item purchased!~n~~b~~h~Item: ~w~%s~n~~b~~h~Gold Credits: ~w~-%sGC", CreditsProductMatrix[12][E_item_name], ToCurrency(CreditsProductMatrix[12][E_item_credits]));
                SendInfo(playerid, string, 5000);
                
                format(string, sizeof(string), "INSERT INTO `queue` VALUES (NULL, 6, UNIX_TIMESTAMP() + 86400, '%s');", __GetName(playerid));
                mysql_tquery(g_SQL_handle, string, "", "");
                
				AlterPlayerCredits(playerid, -CreditsProductMatrix[12][E_item_credits]);

				MySQL_SavePlayer(playerid, false);
	            return true;
	        }
	        case COPS_REFILL:
	        {
 				switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    			    SetPlayerHealth(playerid, 100);
  	    				SCM(playerid, COLOR_RED, ">> "LB2_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 700); // SMG
						GivePlayerWeapon(playerid, 31, 1000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
  	    				SCM(playerid, COLOR_RED, ">> "LB2_E"You have refilled your weapons!");
  	    			}
   				}
	            return true;
	        }
	        case ROBBER_REFILL:
	        {
       			switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    				SetPlayerHealth(playerid, 100);
  	    				SCM(playerid, COLOR_RED, ">> "ORANGE_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);
  	    				GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
  	    				SCM(playerid, COLOR_RED, ">> "ORANGE_E"You have refilled your weapons!");
  	    			}
   				}
	        }
	        case CNR_DIALOG:
	        {
	            SavePos(playerid);
	            SetPVarInt(playerid, "dSkin", GetPlayerSkin(playerid));
	            new string[255];
	            SetPVarInt(playerid, "oldColor", GetColor__(playerid));
				switch(listitem)
  				{
  					case 0: // Cops
  	    			{
  	    			    gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 1);

  						format(string, sizeof(string), "4CNR3 %s(%i) has joined the Cops in the cops and robbers minigame.", __GetName(playerid), playerid);
						IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, string);
  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "LB_E"Cops "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the LVPD!");
			    		SCM(playerid, -1, ""nef" Your mission is to arrests any robbers and keep the steets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_CNR_COP);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 700); // SMG
						GivePlayerWeapon(playerid, 31, 1000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 1);
						switch(random(3))
	  					{
	  						case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
							case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
							case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
						}
						switch(random(4))
	  					{
	  						case 0: SetPlayerSkin(playerid, 282);
	  						case 1: SetPlayerSkin(playerid, 283);
	  						case 2: SetPlayerSkin(playerid, 286);
	  						case 3: SetPlayerSkin(playerid, 280);
	  					}
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						Command_ReProcess(playerid, "/cnrhelp", false);
						SetPVarInt(playerid, "inCNR", 1);
					}
    				case 1: //ROBBERS
  	    			{
                        if(GetCNRCops() < GetCNRRobbers() - 1)
                        {
                            return SCM(playerid, -1, ""er"There aren't enough cops in CNR!");
                        }
                        
   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);

  						format(string, sizeof(string), "4CNR3 %s(%i) has joined the Robbers in the cops and robbers minigame.", __GetName(playerid), playerid);
						IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, string);
  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "LB_E"Robbers "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
						PreloadAnimLib(playerid, "SHOP");
			    		SCM(playerid, COLOR_GREY, ""nef" You have joined the Robbers!");
			    		SCM(playerid, COLOR_GREY, ""nef" Your mission is create mayham in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_ORANGE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 1);
						SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
						switch(random(5))
						{
							case 0: SetPlayerSkin(playerid, 125);
							case 1: SetPlayerSkin(playerid, 126);
							case 2: SetPlayerSkin(playerid, 111);
							case 3: SetPlayerSkin(playerid, 112);
							case 4: SetPlayerSkin(playerid, 108);
						}
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						Command_ReProcess(playerid, "/cnrhelp", false);
						SetPVarInt(playerid, "inCNR", 2);
					}
					case 2: // Professional Robbers
  	    			{
  	    				if(GetPlayerScore_(playerid) < 500)
						{
							SCM(playerid, COLOR_GREY, "Server: "RED_E"You need at least 500 score to choose this class!");
							Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

                        if(GetCNRCops() < GetCNRRobbers() - 1)
                        {
                            return SCM(playerid, -1, ""er"There aren't enough cops in CNR!");
                        }

   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);

  						format(string, sizeof(string), "4CNR3 %s(%i) has joined the Pro Robbers in the cops and robbers minigame.", __GetName(playerid), playerid);
						IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, string);
  	    				format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "RED_E"Pro Robbers "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
						PreloadAnimLib(playerid, "SHOP");
			    		SCM(playerid, -1, ""nef" You have joined the MOB!");
			    		SCM(playerid, -1, ""nef" This is the elite version of the robbers, Your mission is create mayham in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~pro Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_CNR_PRO_ROBBER);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // SMG
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 2); // 2 Nade
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 1);
						SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
						SetPlayerSkin(playerid, 113);
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 4);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
 					case 3: // Army
  	    			{
           				if(GetPlayerScore_(playerid) < 500)
						{
							SCM(playerid, COLOR_GREY, "Server: "PURPLE_E"You need at least 500 score to choose this class!");
							Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

   			    		gTeam[playerid] = CNR;

						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 3);

  						format(string, sizeof(string), "4CNR3 %s(%i) has joined the Army in the cops and robbers minigame.", __GetName(playerid), playerid);
						IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, string);
						format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "PURPLE_E"Army "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the Army Task Force!");
			    		SCM(playerid, -1, ""nef" Your mission is to arrests any robbers and keep the steets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_PURPLE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1000); // SMG
						GivePlayerWeapon(playerid, 31, 5000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 34, 300); // Sniper
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 16, 2); // 2 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 287);
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 5);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
					case 4: // Swat
  	    			{
  	    				if(PlayerInfo[playerid][VIP] == 0)
						{
							SCM(playerid, COLOR_GREY, "Server: "RED_E"You must be VIP to use the swat feature! Check /vip for more info.");
                            Command_ReProcess(playerid, "/cnr", false);
							return true;
						}

    					gTeam[playerid] = CNR;

  	    				SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 2);

  						format(string, sizeof(string), "4CNR3 %s(%i) has joined the Swat in the cops and robbers minigame.", __GetName(playerid), playerid);
						IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, string);
						format(string, sizeof(string), ""cnr_sign" "ORANGE_E"%s(%i) has joined the "BLUE_E"Swat "ORANGE_E"in the /CNR minigame.", __GetName(playerid), playerid);
  	    				SCMToAll(-1, string);
			    		SCM(playerid, -1, ""nef" You have joined the SWAT TEAM!");
			    		SCM(playerid, -1, ""nef" This is an elite team higher ranked than cops, do your job well!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_BLUE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1200); // SMG
						GivePlayerWeapon(playerid, 24, 1000); // Deagle
						GivePlayerWeapon(playerid, 31, 2000); //M4
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 35, 2); //RPG
						GivePlayerWeapon(playerid, 16, 5); // 5 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 285);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						SetPlayerVirtualWorld(playerid, CNR_WORLD);
						SetPVarInt(playerid, "inCNR", 3);
						Command_ReProcess(playerid, "/cnrhelp", false);
  	    			}
				}
				CheckPlayerGod(playerid);
                ShowPlayerCNRTextdraws(playerid);
                
                Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
                Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
				Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
				Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
				
				SetPlayerHealth(playerid, 100);
				SetPlayerWorldBounds(playerid, 20000.0, -20000.0, 20000.0, -20000.0);
	            return true;
	        }
	        case REFIL_DIALOG:
	        {
     			new vID = GetPlayerVehicleID(playerid);
				switch(listitem)
  				{
   					case 0: //Repair Car
  	    			{
  	    			    if(GetPlayerCash(playerid) < 2000)
							return Error(playerid, "You don't have enough money to purchase this item.");

						GivePlayerCash(playerid, -2000);
						PlayerPlaySound(playerid, 1057, 0, 0, 0);
						RepairVehicle(vID);
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have repaired your vehicle!");
  	    			}
  	    			case 1: //Add Nos
  	    			{
  	    				if(GetPlayerCash(playerid) < 5000)
							return Error(playerid, "You don't have enough money to purchase this item.");
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have added nitro to your vehicle!");
						if(IsComponentIdCompatible(GetVehicleModel(vID), 1010)) AddVehicleComponent(vID, 1010);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						GivePlayerCash(playerid, -5000);
  	    			}
  	    			case 2: //Repair and Add nos
  	    			{
  	    				if(GetPlayerCash(playerid) < 6500)
							return Error(playerid, "You don't have enough money to purchase this item.");
						GivePlayerCash(playerid, -6500);
						if(IsComponentIdCompatible(GetVehicleModel(vID), 1010)) AddVehicleComponent(vID, 1010);
						RepairVehicle(vID);
						SCM(playerid, COLOR_RED, ">> "WHITE_E"You have repaired and added nitro to your vehicle!");
						PlayerPlaySound(playerid, 1057, 0, 0, 0);
  	    			}
   				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG:
	        {
				new string[128];
				format(string, sizeof(string), ""nef" - House Menu > Slot: %i", listitem + 1);
				
	            PlayerInfo[playerid][HouseSlotSelected] = listitem;
	            
		        if(listitem > PlayerInfo[playerid][AdditionalHouseSlots])
		        {
		            ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, ""nef_green"This house slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
		        }
		        else
				{
				    if(listitem >= PlayerInfo[playerid][Houses])
				    {
				        SendInfo(playerid, "This house slot is currently not in use!", 2500);
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 1, DIALOG_STYLE_LIST, string, ""dl"Goto This House\n"dl"Upgrade Interior\n"dl"Manage House Items", "Select", "Cancel");
				    }
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 1:
	        {
				switch(listitem)
				{
				    case 0:
				    {
				        if(gTeam[playerid] != NORMAL)
						{
							SendInfo(playerid, "~y~~h~You can't perform this action now!", 2500);
							return 1;
						}
						
						new h_id = GetHouseIdByPlayerSlotSel(playerid);
						
						if(h_id != -1)
						{
				   			SetPlayerPos(playerid, HouseInfo[h_id][E_x], HouseInfo[h_id][E_y], HouseInfo[h_id][E_z]);
				   			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				   			SetPVarInt(playerid, "doingStunt", 0);
				   			PlayerInfo[playerid][tickJoin_bmx] = 0;
						}
						else SendInfo(playerid, "Error couldn't find the house in that slot! Report on forums!", 2500);
				    }
				    case 1:
				    {
				        if(gTeam[playerid] != NORMAL)
						{
							SendInfo(playerid, "~y~~h~You can't perform this action now!", 2500);
							return 1;
						}
						
				        ShowDialog(playerid, HOUSE_UPGRADE_DIALOG);
				    }
				    case 2:
				    {
				        if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");

						new h_id = GetHouseIdByPlayerSlotSel(playerid);

						if(h_id != -1)
						{
                            if(GetPlayerVirtualWorld(playerid) != (HouseInfo[h_id][iID] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
                            
							new string[128], string2[1024], tmp[128];
							format(string, sizeof(string), ""nef" - House Menu > Slot: %i > House Items", PlayerInfo[playerid][HouseSlotSelected] + 1);

							for(new i = 0; i < MAX_HOUSE_OBJECTS; i++)
							{
								if(i > PlayerInfo[playerid][AdditionalHouseObjSlots] + 2)
								{
								    format(tmp, sizeof(tmp), ""dl"House Object Slot %i "red"(Locked)\n", i + 1);
								}
							    else
							    {
								    if(HouseInfo[h_id][E_Obj_Model][i] == 0)
									{
									    format(tmp, sizeof(tmp), ""dl"House Object Slot %i\n", i + 1);
									}
									else
									{
									    format(tmp, sizeof(tmp), ""dl"House Object Slot %i "green2"(Used)\n", i + 1);
									}
								}
								strcat(string2, tmp);
							}

							ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 2, DIALOG_STYLE_LIST, string, string2, "Select", "Cancel");
						}
						else SendInfo(playerid, "Error couldn't find the house in that slot! Report on forums!", 2500);
				    }
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 2:
	        {
	            if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");

				new string[128];
				format(string, sizeof(string), ""nef" - House Menu > Slot: %i > House Object Slot %i", PlayerInfo[playerid][HouseSlotSelected] + 1, listitem + 1);

				if(listitem > PlayerInfo[playerid][AdditionalHouseObjSlots] + 2)
				{
				    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, ""nef_green"This house object slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
				}
				else
				{
		        	PlayerInfo[playerid][houseobj_selected] = listitem;

	                new h_id = GetHouseIdByPlayerSlotSel(playerid);

					if(h_id != -1)
					{
					    if(GetPlayerVirtualWorld(playerid) != (HouseInfo[h_id][iID] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
					    
	                    if(HouseInfo[h_id][E_Obj_Model][listitem] == 0)
	                    {
	                        ShowModelSelectionMenu(playerid, hobjslist, "Select House Object", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
	                    }
	                    else
	                    {
	                        ShowPlayerDialog(playerid, HOUSE_MENU_DIALOG + 3, DIALOG_STYLE_LIST, string, ""dl"Edit House Object Position\n"dl""grey"Remove House Object", "Select", "Cancel");
	                    }
					}
					else SendInfo(playerid, "Error couldn't find the house in that slot! Report on forums!", 2500);
				}
	            return true;
	        }
	        case HOUSE_MENU_DIALOG + 3:
	        {
	            if(gTeam[playerid] != HOUSE) return SCM(playerid, -1, ""er"You need to be in your house!");

                new h_id = GetHouseIdByPlayerSlotSel(playerid);

				if(h_id != -1)
				{
				    if(GetPlayerVirtualWorld(playerid) != (HouseInfo[h_id][iID] + 1000)) return SCM(playerid, -1, ""er"You need to be in the house you selected!");
				    
		            switch(listitem)
		            {
		                case 0:
		                {
		                    new Float:POS[3];
		                    GetDynamicObjectPos(HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]], POS[0], POS[1], POS[2]);
		                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, POS[0], POS[1], POS[2]))
		                    {
		                        return SCM(playerid, -1, ""er"You need to be closer to the object!");
		                    }
		                    EditDynamicObject(playerid, HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]]);
		                }
		                case 1:
		                {
		                    HouseInfo[h_id][E_Obj_Model][PlayerInfo[playerid][houseobj_selected]] = 0;
		                    DestroyDynamicObject(HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]]);
		                    DestroyDynamic3DTextLabel(HouseInfo[h_id][E_Obj_Label][PlayerInfo[playerid][houseobj_selected]]);
		                    HouseInfo[h_id][E_Obj_Label][PlayerInfo[playerid][houseobj_selected]] = Text3D:-1;
		                    HouseInfo[h_id][E_Obj_ObjectID][PlayerInfo[playerid][houseobj_selected]] = -1;
		                    SendInfo(playerid, "~y~~h~House object has been removed!", 2500);
		                }
		            }
				}
				else SendInfo(playerid, "Error couldn't find the house in that slot! Report on forums!", 2500);
	            return true;
	        }
	        case PV_SLOT_SELECT_DIALOG:
	        {
				if(listitem == 0) return PVSlotSelect(playerid);

                listitem--;
			    
	            CreateFinalCar(playerid, listitem);
	            return true;
	        }
	        case COLOR_DIALOG:
	        {
    			switch(listitem)
	    		{
	    			case 0:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_RED);
	    	    		SCM(playerid, COLOR_RED, ">> Your nick color has been changed to RED.");
	    	    	}
    	    		case 1:
	    	    	{
						SetPlayerColor(playerid, COLOR_BLUE);
						SCM(playerid, COLOR_BLUE, ">> Your nick color has been changed to BLUE.");
	    	    	}
    	    		case 2:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_WHITE);
	    	    		SCM(playerid, COLOR_WHITE, ">> Your nick color has been changed to WHITE.");
					}
					case 3:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_IVORY);
	    	    		SCM(playerid, COLOR_IVORY, ">> Your nick color has been changed to IVORY.");
					}
					case 4:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PINK);
	    	    		SCM(playerid, COLOR_PINK, ">> Your nick color has been changed to PINK.");
					}
					case 5:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_YELLOW);
	    	    		SCM(playerid, COLOR_YELLOW, ">> Your nick color has been changed to YELLOW.");
					}
					case 6:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREEN);
	    	    		SCM(playerid, COLOR_GREEN, ">> Your nick color has been changed to GREEN.");
					}
					case 7:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_LIGHTBLUE);
	    	    		SCM(playerid, COLOR_LIGHTBLUE, ">> Your nick color has been changed to LIGHTBLUE.");
					}
					case 8:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREY);
	    	    		SCM(playerid, COLOR_GREY, ">> Your nick color has been changed to GREY.");
					}
					case 9:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_ORANGE);
	    	    		SCM(playerid, COLOR_ORANGE, ">> Your nick color has been changed to ORANGE.");
					}
					case 10:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PURPLE);
	    	    		SCM(playerid, PURPLE, ">> Your nick color has been changed to PURPLE.");
					}
					case 11:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_LIGHTGREEN);
	    	    		SCM(playerid, COLOR_LIGHTGREEN, ">> Your nick color has been changed to LIGHTGREEN.");
					}
					case 12:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_STEELBLUE);
	    	    		SCM(playerid, COLOR_STEELBLUE, ">> Your nick color has been changed to STEELBLUE.");
					}
				}
				return true;
			}
	        case LABEL_DIALOG:
	        {
	            if(strlen(inputtext) > 35 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Inputlength: 3-35");
	            
	            new text[36];
	            sscanf(inputtext, "s[36]", text);

				if(IsAd(text))
				{
				  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
					AdminMSG(RED, gstr);

			        SCM(playerid, RED, "Advertising is not allowed!");
			        return 1;
				}
	            
	            if(!strcmp("admin", text, true) || !strcmp("staff", text, true) || !strcmp("mod", text, true))
	            {
	                return SCM(playerid, -1, ""er"Don't enter following words: admin, staff, mod");
	            }
	            
	            PlayerInfo[playerid][VIPLabel] = CreateDynamic3DTextLabel(text, -1, 0.0, 0.0, 0.65, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);

                SCM(playerid, -1, ""er"Label attached! Note: You can't see the label yourself");
				return true;
	        }
	        case LABEL_DIALOG + 1:
	        {
	            if(strlen(inputtext) > 35 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Inputlength: 3-35");

	            new text[36];
	            sscanf(inputtext, "s[36]", text);

				if(IsAd(text))
				{
				  	format(gstr, sizeof(gstr), ""yellow"** "red"Suspicion advertising | Player: %s(%i) Advertised IP: %s - PlayerIP: %s", __GetName(playerid), playerid, text, __GetIP(playerid));
					AdminMSG(RED, gstr);

			        SCM(playerid, RED, "Advertising is not allowed!");
			        return 1;
				}
				
	            if(!strcmp("admin", text, true) || !strcmp("staff", text, true) || !strcmp("mod", text, true))
	            {
	                return SCM(playerid, -1, ""er"Don't enter following words: admin, staff, mod");
	            }
				
				UpdateDynamic3DTextLabelText(PlayerInfo[playerid][VIPLabel], -1, text);
	            SCM(playerid, -1, ""er"Label text changed!");
	            return true;
	        }
	        case VCONTROL_DIALOG:
	        {
	            switch(listitem) // "Engine control\nLight control\nAlarm\nBonnet\nBoot"
	            {
					case 0: ShowPlayerDialog(playerid, VCONTROL_DIALOG+1, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle engine", ""white"Do you want to start or stop your engine?", "Start", "Stop");
                    case 1: ShowPlayerDialog(playerid, VCONTROL_DIALOG+2, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle lights", ""white"Do you want to enable or disable your lights?\n\nNOTE: Lights are only visible at night.", "Enable", "Disable");
                    case 2: ShowPlayerDialog(playerid, VCONTROL_DIALOG+3, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle alarm", ""white"Do you want to enable or disable your alarm?\n\nNOTE: The alarm will not reset itself when it's over,\nyou'll need to reset it by yourself.", "Enable", "Disable");
                    case 3: ShowPlayerDialog(playerid, VCONTROL_DIALOG+4, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle bonnet", ""white"Do you want to open or close your bonnet?", "Open", "Close");
                    case 4: ShowPlayerDialog(playerid, VCONTROL_DIALOG+5, DIALOG_STYLE_MSGBOX, ""white"VCS > Toggle boot", ""white"Do you want to open or close your boot?", "Open", "Close");
	            }
	            return true;
	        }
	        case VCONTROL_DIALOG+1:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
     			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
            	SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+2:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+3:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, 1, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+4:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 1, boot, objective);
	        }
	        case VCONTROL_DIALOG+5:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 1, objective);
	        }
	        case NAME_CHANGE_DIALOG:
	        {
	            if(strlen(inputtext) > 21 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Name length: 3-21");
                if(!strcmp(inputtext, __GetName(playerid), false)) return SCM(playerid, -1, ""er"You are already using that name");
	            if(!strcmp(inputtext, __GetName(playerid), true)) return SCM(playerid, -1, ""er"The name only differs in case. Just relog with that.");

				new newname[MAX_PLAYER_NAME+1], query[255];
				mysql_escape_string(inputtext, newname, g_SQL_handle, MAX_PLAYER_NAME+1);
				
                format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Name` = '%s';", newname);
                mysql_tquery(g_SQL_handle, query, "OnPlayerNameChangeRequest", "si", newname, playerid);
	            return true;
	        }
	        case HAREFILL_DIALOG:
	        {
	            if(listitem == 0)
	            {
	                SetPlayerHealth(playerid, 100.0);
	                SetPlayerChatBubble(playerid, "Refilled "red"Health "white"using VIP rights", -1, 40.0, 5000);
	                SendInfo(playerid, "~g~~h~~h~Health refilled", 2000);
             	    GivePlayerCash(playerid, -5000);
	            }
	            else
	            {
	                SetPlayerArmour(playerid, 100.0);
	                SetPlayerChatBubble(playerid, "Refilled "nef_yellow"Armor "white"using VIP rights", -1, 40.0, 5000);
					SendInfo(playerid, "~g~~h~~h~Armor refilled", 2000);
	    			GivePlayerCash(playerid, -2500);
	            }
				PlayerInfo[playerid][tickLastRefill] = GetTickCount() + 3600000;
	            return 1;
	        }
	        case GANG_SET_RANK_DIALOG:
	        {
				if(listitem == 0) return ShowDialog(playerid, GANG_SET_RANK_DIALOG);
				
				PlayerInfo[playerid][RankSelected] = listitem;
				
				new string[128];
				format(string, sizeof(string), ""white"Now enter the name of the player who should get the rank:\n\nSelected Rank: %s", GangPositions[listitem][E_gang_pos_name]);
				
				ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG + 1, DIALOG_STYLE_INPUT, ""nef" - Gang Rank Menu", string, "Next", "Cancel");
	            return true;
	        }
	        case GANG_SET_RANK_DIALOG + 1:
	        {
			    if(!strcmp(__GetName(playerid), inputtext, true))
			    {
			        return SCM(playerid, -1, ""er"You can't assign your own rank");
			    }
			    
	            if(strlen(inputtext) > MAX_PLAYER_NAME+1 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Player doesn't exist");
	            if(sscanf(inputtext, "s[26]", PlayerInfo[playerid][GangAssignRank])) return SCM(playerid, -1, ""er"Player doesn't exist");
	            mysql_escape_string(PlayerInfo[playerid][GangAssignRank], PlayerInfo[playerid][GangAssignRank], g_SQL_handle, MAX_PLAYER_NAME+1);

				new ID = __GetPlayerID(PlayerInfo[playerid][GangAssignRank]);
				
		  		if(ID != INVALID_PLAYER_ID)
		  		{
					if(!IsPlayerAvail(ID)) return SCM(playerid, -1, ""er"Spieler ist not available");
		        	if(PlayerInfo[ID][GangID] != PlayerInfo[playerid][GangID]) return SCM(playerid, -1, ""er"This player is not in your gang!");
		        	if(PlayerInfo[ID][GangPosition] == PlayerInfo[playerid][RankSelected]) return SCM(playerid, -1, ""er"Player is already this rank!");
		        	if(PlayerInfo[ID][GangPosition] >= PlayerInfo[playerid][GangPosition]) return SCM(playerid, -1, ""er"You can't assign this rank to this player!");

			  		PlayerInfo[ID][GangPosition] = PlayerInfo[playerid][RankSelected];

		  			MySQL_SavePlayer(ID, false);

				    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s set %s´s rank to %s", __GetName(playerid), __GetName(ID), GangPositions[PlayerInfo[playerid][RankSelected]][E_gang_pos_name]);
					GangMSG(PlayerInfo[playerid][GangID], gstr);
					
					PlayerInfo[playerid][RankSelected] = 0;
				}
				else
				{
				    MySQL_AssignRankIfExist(playerid);
	            }
	            return true;
	        }
	        case CLOSE_GANG_DIALOG:
	        {
	            new query[255];
				format(query, sizeof(query), "UPDATE `accounts` SET `GangPosition` = 0, `GangID` = 0 WHERE `GangID` = %i;", PlayerInfo[playerid][GangID]);
				mysql_tquery(g_SQL_handle, query, "", "");

				GangMSG(PlayerInfo[playerid][GangID], ""gang_sign" "r_besch"The gang has been closed by it's Leader");

				for(new i = 0; i < gzoneid; i++)
				{
				    if(GZoneInfo[i][localGang] == PlayerInfo[playerid][GangID])
				    {
						GZoneInfo[i][iTimeLeft] = 0;
						GZoneInfo[i][bUnderAttack] = false;
						GZoneInfo[i][AttackingGang] = 0;
						GZoneInfo[i][DefendingGang] = 0;
						GZoneInfo[i][iLocked] = gettime();
						GZoneInfo[i][localGang] = 0;

						format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneInfo[i][iID], GZoneInfo[i][sZoneName]);
						UpdateDynamic3DTextLabelText(GZoneInfo[i][label], WHITE, gstr);

						MySQL_SaveGangZone(i);
				    }
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && i != playerid)
				    {
				        if(PlayerInfo[i][GangID] == PlayerInfo[playerid][GangID] || PlayerInfo[i][TmpGangID] == PlayerInfo[playerid][GangID])
				        {
					        PlayerInfo[i][gInvite] = false;
					        PlayerInfo[i][GangID] = 0;
					        PlayerInfo[i][TmpGangID] = 0;
					        PlayerInfo[i][GangPosition] = GANG_POS_NONE;
					        PlayerInfo[i][GangName][0] = '\0';
							PlayerInfo[i][GangTag][0] = '\0';
							MySQL_SavePlayer(i, false);
					 		if(PlayerInfo[i][GangLabel] != Text3D:-1)
							{
							    DestroyDynamic3DTextLabel(PlayerInfo[i][GangLabel]);
					 			PlayerInfo[i][GangLabel] = Text3D:-1;
							}
						}
						
						SyncGangZones(i);
				    }
				}

				format(query, sizeof(query), "DELETE FROM `gangs` WHERE `ID` = %i LIMIT 1;", PlayerInfo[playerid][GangID]);
				mysql_tquery(g_SQL_handle, query, "", "");

			    PlayerInfo[playerid][gInvite] = false;
			    PlayerInfo[playerid][GangID] = 0;
			    PlayerInfo[playerid][TmpGangID] = 0;
			    PlayerInfo[playerid][GangPosition] = GANG_POS_NONE;
			    PlayerInfo[playerid][GangName][0] = '\0';
				PlayerInfo[playerid][GangTag][0] = '\0';
				MySQL_SavePlayer(playerid, false);

                SyncGangZones(playerid);

				if(PlayerInfo[playerid][GangLabel] != Text3D:-1)
				{
				    DestroyDynamic3DTextLabel(PlayerInfo[playerid][GangLabel]);
					PlayerInfo[playerid][GangLabel] = Text3D:-1;
				}
				SCM(playerid, -1, ""gang_sign" The gang has been closed!");
	            return true;
	        }
	        case GANG_KICK_DIALOG:
	        {
			    if(!strcmp(__GetName(playerid), inputtext, true))
			    {
			        return SCM(playerid, -1, ""er"You can't kick yourself");
			    }
	        
	            if(strlen(inputtext) > MAX_PLAYER_NAME+1 || strlen(inputtext) < 3) return SCM(playerid, -1, ""er"Player doesn't exist");
	            if(sscanf(inputtext, "s[26]", PlayerInfo[playerid][GangKickMem])) return SCM(playerid, -1, ""er"Player doesn't exist");
	            mysql_escape_string(PlayerInfo[playerid][GangKickMem], PlayerInfo[playerid][GangKickMem], g_SQL_handle, MAX_PLAYER_NAME+1);

		  		new ID = __GetPlayerID(PlayerInfo[playerid][GangKickMem]);

		  		if(ID != INVALID_PLAYER_ID)
		  		{
					if(!IsPlayerAvail(ID)) return SCM(playerid, -1, ""er"Spieler ist not available");
		        	if(PlayerInfo[ID][GangID] != PlayerInfo[playerid][GangID]) return SCM(playerid, -1, ""er"This player is not in your gang!");
		        	if(PlayerInfo[ID][GangPosition] == GANG_POS_MAIN_LEADER) return SCM(playerid, -1, ""er"You cannot kick other leaders!");

                    PlayerInfo[ID][GangName][0] = '\0';
                    PlayerInfo[ID][GangTag][0] = '\0';
					PlayerInfo[ID][GangID] = 0;
			  		PlayerInfo[ID][GangPosition] = 0;

		  			MySQL_SavePlayer(ID, false);

					if(PlayerInfo[ID][GangLabel] != Text3D:-1)
					{
					    DestroyDynamic3DTextLabel(PlayerInfo[ID][GangLabel]);
						PlayerInfo[ID][GangLabel] = Text3D:-1;
					}
					
				    format(gstr, sizeof(gstr), ""gang_sign" "r_besch"%s kicked %s out of the gang", __GetName(playerid), PlayerInfo[playerid][GangKickMem]);
					GangMSG(PlayerInfo[playerid][GangID], gstr);

			        SCM(ID, -1, ""gang_sign" You have been kicked out of your gang!");
			        
			        PlayerInfo[playerid][GangKickMem][0] = '\0';
			  	}
			  	else
			  	{
					MySQL_KickFromGangIfExist(playerid);
				}
				return true;
	        }
	        case SETTINGS_DIALOG:
	        {
	            switch(listitem)
	            {
					case 0:
					{
					    Command_ReProcess(playerid, "/sb", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 1:
					{
					    Command_ReProcess(playerid, "/sj", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 2:
					{
					    if(PlayerInfo[playerid][bFooterEnabled]) Command_ReProcess(playerid, "/hidef", false);
					    else Command_ReProcess(playerid, "/showf", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 3:
					{
					    Command_ReProcess(playerid, "/random", false);
					    ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 4:
					{
					    if(PlayerInfo[playerid][bHasSpawn])
					    {
					        PlayerInfo[playerid][bHasSpawn] = false;
					    }
					    else
					    {
					    	Command_ReProcess(playerid, "/setspawn", false);
						}
						ShowDialog(playerid, SETTINGS_DIALOG);
					}
					case 5:
					{
					    Command_ReProcess(playerid, "/changepass", false);
					}
					case 6:
					{
					    Command_ReProcess(playerid, "/stats", false);
					}
					case 7:
					{
					    Command_ReProcess(playerid, "/help", false);
					}
					case 8:
					{
					    Command_ReProcess(playerid, "/mynetstats", false);
					}
	            }
	            return true;
	        }
	        case HELP_DIALOG:
	        {
	            switch(listitem)
	            {
	                case 0: // General Help
	                {
						new cstring[2048];

						strcat(cstring, ""red"» "nef_yellow"Commands:\n");
						strcat(cstring, ""white"There are many commands, to get an overview use "yellow"/cmds\n\n");

						strcat(cstring, ""red"» "nef_yellow"Minigames\n");
						strcat(cstring, ""white"Available minigames:\n");
						strcat(cstring, ""yellow"/derby /race /gungame /fallout /tdm /minigun /sniper /dm[1-4]\n\n");

						strcat(cstring, ""red"» "nef_yellow"Admins\n");
						strcat(cstring, ""white"Admins are here to help, use "yellow"/report "white"if you want to report a player or if you have a question\n\n");

						strcat(cstring, ""red"» "nef_yellow"Gangs\n");
						strcat(cstring, ""white"Gangs are groups which have been created by players\n\n");

						strcat(cstring, ""red"» "nef_yellow"Houses/Business\n");
						strcat(cstring, ""white"Houses and business are for sale around San Andreas. Use "yellow"/cmds "white"for more infos");

						ShowPlayerDialog(playerid, HELP_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" - General Help", cstring, "OK", "Back");
	                }
	                case 1: // Commands
	                {
                        Command_ReProcess(playerid, "/cmds", false);
	                }
	                case 2: // shortcuts
	                {
						new cstring[512];

						strcat(cstring, ""red"» "nef_yellow"LMB (Left Mice Button)\n");
						strcat(cstring, ""white"Speedboost for vehicles\n\n");

						strcat(cstring, ""red"» "nef_yellow"2\n");
						strcat(cstring, ""white"Flip your vehicle\n\n");

						strcat(cstring, ""red"» "nef_yellow"H\n");
						strcat(cstring, ""white"Jump with your vehicle\n\n");

						ShowPlayerDialog(playerid, HELP_DIALOG + 2, DIALOG_STYLE_MSGBOX, ""nef" - Shortcuts", cstring, "OK", "Back");
	                }
	                case 3: // Minigames
	                {
	                    ShowPlayerDialog(playerid, HELP_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" - Minigames", ""dl"Race (/race)\n"dl"Derby (/derby)\n"dl"Fallout (/fallout)\n"dl"Gungame (/gungame)\n"dl"Minigun (/minigun)\n"dl"Sniper (/sniper)\n"dl"Death Match (/dm1-4)", "Select", "");
	                }
	                case 4: // Maps
	                {
	                    Command_ReProcess(playerid, "/tele", false);
	                }
	                case 5: // settings
	                {
						Command_ReProcess(playerid, "/settings", false);
	                }
	                case 6: // how to earn score
	                {
						new cstring[255];

						strcat(cstring, ""white"To earn score and money you can join various minigames. For each kill or objective\nyou will receive a certain amount of money and score.\nCheck /minigames for a list of all minigames.\n\nYou can also freeroam and kill people for money and score.");

						ShowPlayerDialog(playerid, HELP_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""nef" - How to earn score and money", cstring, "OK", "Back");
	                }
	                case 7: // what to do here
	                {
						new cstring[255];

						strcat(cstring, ""white"On "SVRNAME" you will never be bored. If you like to play with and\nagainst others join a minigame (/minigames).\nExplore our map and teleports (/t)\nYou can design your character with our toy system (/toy).");

						ShowPlayerDialog(playerid, HELP_DIALOG + 6, DIALOG_STYLE_MSGBOX, ""nef" - What to do here", cstring, "OK", "Back");
	                }
	                case 8: Command_ReProcess(playerid, "/credits", false);
	                case 9: Command_ReProcess(playerid, "/vip", false);
	            }
	            return true;
	        }
	        case HELP_DIALOG + 3:
	        {
	            switch(listitem)
	            {
	                case 0: Command_ReProcess(playerid, "/race", false);
	                case 1: Command_ReProcess(playerid, "/derby", false);
	                case 2: Command_ReProcess(playerid, "/fallout", false);
	                case 3: Command_ReProcess(playerid, "/gungame", false);
	                case 4: Command_ReProcess(playerid, "/minigun", false);
	                case 5: Command_ReProcess(playerid, "/sniper", false);
	                case 6: ShowPlayerDialog(playerid, HELP_DIALOG + 4, DIALOG_STYLE_MSGBOX, ""nef" - Minigames", ""white"Death Match (/dm1-4)", "OK", "Back");
	                case 7: Command_ReProcess(playerid, "/tdm", false);
	                case 8: Command_ReProcess(playerid, "/war", false);
	            }
	            return true;
	        }
		    case CMDS_DIALOG:
		    {
		        new cstring[2048];
		        
		        switch(listitem)
		        {
		            case 0: // General
		            {
		                strcat(cstring, ""yellow"/toys "white"- player toys\n");
		                strcat(cstring, ""yellow"/help "white"- small usefull explanations\n");
		                strcat(cstring, ""yellow"/god "white"- infinite health\n");
						strcat(cstring, ""yellow"/pm "white"- write a personal message to a player\n");
						strcat(cstring, ""yellow"/r "white"- reply to your last pm\n");
						strcat(cstring, ""yellow"/t "white"- list of all teleport\n");
						strcat(cstring, ""yellow"/w "white"- free weapons\n");
						strcat(cstring, ""yellow"/v "white"- list of all vehicles also /v <vehicle name>\n");
						strcat(cstring, ""yellow"/id "white"- get the id of a player\n");
						strcat(cstring, ""yellow"/go "white"- goto a desired player\n");
						strcat(cstring, ""yellow"/time "white"- set your time\n");
						strcat(cstring, ""yellow"/rtime "white"- reset your time\n");
						strcat(cstring, ""yellow"/admins "white"- a list of all online admins\n");
						strcat(cstring, ""yellow"/car "white"- quick spawn a car\n");
						strcat(cstring, ""yellow"/top "white"- top list selection\n");
						strcat(cstring, ""yellow"/report "white"- report a player to admins\n");
				        strcat(cstring, ""yellow"/streams "white"- listen to audio streams\n");
						strcat(cstring, ""yellow"/sb "white"- toggle speedboost\n");
						strcat(cstring, ""yellow"/sj "white"- toggle superjump\n");
		                strcat(cstring, ""yellow"/fs "white"- fightstyles\n");
		                strcat(cstring, ""yellow"/tune "white"- randomly tune your car\n");
		            }
		            case 1: // Account
		            {
		                strcat(cstring, ""yellow"/settings "white"- player control panel\n");
		                strcat(cstring, ""yellow"/achs "white"- achievements\n");
		                strcat(cstring, ""yellow"/changename "white"- change your account's nickname\n");
		                strcat(cstring, ""yellow"/changepass "white"- change your account's password\n");
		                strcat(cstring, ""yellow"/sellvip "white"- sell your vip status\n");
		                strcat(cstring, ""yellow"/sellgc "white"- sell gold credits\n");
		                strcat(cstring, ""yellow"/stats "white"- stats of a player also /stats <playerid>\n");
		                strcat(cstring, ""yellow"/savecolor "white"- save a color for you next visit\n");
		                strcat(cstring, ""yellow"/deletecolor "white"- delete a saved color\n");
		                strcat(cstring, ""yellow"/ad "white"- place a global ad\n");
		            }
		            case 2: // Gang
		            {
						strcat(cstring, ""yellow"/gcreate "white"- create a gang\n");
						strcat(cstring, ""yellow"/gwar "white"- start a war against another gang\n");
						strcat(cstring, ""yellow"/gzones "white"- view your zones\n");
						strcat(cstring, ""yellow"/gcapture "white"- recapture a zone while it is begin attacked\n");
						strcat(cstring, ""yellow"/gmenu "white"- gang menu\n");
						strcat(cstring, ""yellow"/gsetrank "white"- set a players rank\n");
						strcat(cstring, ""yellow"/ginvite "white"- invite someone to your gang\n");
						strcat(cstring, ""yellow"/gkick "white"- kick someone off your gang\n");
						strcat(cstring, ""yellow"/gjoin "white"- join a gang\n");
						strcat(cstring, ""yellow"/gleave "white"- leave the gang you are in\n");
						strcat(cstring, ""yellow"/gclose "white"- destroy your gang\n");
						strcat(cstring, ""yellow"/gdeny "white"- deny an invitation\n");
						strcat(cstring, ""yellow"/gangs "white"- online gangs\n");
		            }
		            case 3: // House/Business
		            {
		                strcat(cstring, ""yellow"/upgrade "white"- upgrade your house interior\n");
						strcat(cstring, ""yellow"/enter "white"- enter a unlocked house\n");
						strcat(cstring, ""yellow"/buy "white"- buy a house\n");
						strcat(cstring, ""yellow"/exit "white"- exit your house\n");
						strcat(cstring, ""yellow"/sell "white"- sell your house\n");
						strcat(cstring, ""yellow"/lock "white"- lock or unlock your house\n");
						strcat(cstring, ""yellow"/gotomyhouse "white"- goto your house\n");
						strcat(cstring, ""yellow"/gotomybizz "white"- goto your business\n");
						strcat(cstring, ""yellow"/bbuy "white"- buy a business\n");
						strcat(cstring, ""yellow"/bsell "white"- sell your business\n");
		            }
		            case 4: // Private Vehicle
		            {
                        strcat(cstring, ""yellow"/pv "white"- private vehicle control\n");
                        strcat(cstring, ""yellow"/lock "white"- lock your vehicle\n");
                        strcat(cstring, ""yellow"/unlock "white"- unlock your vehicle\n");
                        strcat(cstring, ""yellow"/vcolor "white"- dye your vehicle\n");
		            }
		            case 5: // Other
		            {
		                strcat(cstring, ""yellow"/color "white"- change your color\n");
		   				strcat(cstring, ""yellow"/uptime "white"- see the uptime of the server\n");
						strcat(cstring, ""yellow"/hidef "white"- hide the footer\n");
						strcat(cstring, ""yellow"/showf "white"- show the footer\n");
						strcat(cstring, ""yellow"/hitman "white"- set a bounty on someones head\n");
						strcat(cstring, ""yellow"/bounties "white"- see current bounties\n");
						strcat(cstring, ""yellow"/para "white"- gives you a parachute\n");
						strcat(cstring, ""yellow"/info "white"- Credits\n");
						strcat(cstring, ""yellow"/s "white"- save your current position\n");
						strcat(cstring, ""yellow"/l "white"- lave your saved position\n");
						strcat(cstring, ""yellow"/weather "white"- change your weather\n");
						strcat(cstring, ""yellow"/anims "white"- a lsit of all animations\n");
						strcat(cstring, ""yellow"/stopanims "white"- stop animation\n");
						strcat(cstring, ""yellow"/247 "white"- random teleport to a 24/7 shop\n");
						strcat(cstring, ""yellow"/bank "white"- random teleport to a bank\n");
						strcat(cstring, ""yellow"/skin "white"- change your current skin\n");
						strcat(cstring, ""yellow"/netstats "white"- servers network stats\n");
						strcat(cstring, ""yellow"/mynetstats "white"- your network stats\n");
						strcat(cstring, ""yellow"/ping "white"- check somebody´s ping\n");
						strcat(cstring, ""yellow"/toggletoys "white"- hide/show your toys\n");
					}
					case 6: return Command_ReProcess(playerid, "/vip", false);
					case 7: return Command_ReProcess(playerid, "/credits", false);
		        }

				ShowPlayerDialog(playerid, CMDS_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" - Commands", cstring, "OK", "Back");
				return true;
		    }
	        case HOUSE_UPGRADE_DIALOG:
	        {
				PlayerInfo[playerid][HouseIntSelected] = listitem;
				new string[255];
				format(string, sizeof(string), ""white"House Upgrade\n\n- Interior: %s\n- Price: $%s\n\nClick \"Upgrade\" in order to apply the new interior.\n"green"* "white"All House Items will be removed in this slot!", HouseIntTypes[listitem][intname], ToCurrency(HouseIntTypes[listitem][price]));
				ShowPlayerDialog(playerid, HOUSE_UPGRADE_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" - House Upgrade", string, "Upgrade", "Cancel");
				return true;
	        }
	        case HOUSE_UPGRADE_DIALOG + 1:
	        {
		        if(gTeam[playerid] != NORMAL)
				{
					SendInfo(playerid, "~y~~h~You can't perform this action now!", 2500);
					return 1;
				}
	            if(GetPlayerCash(playerid) < HouseIntTypes[PlayerInfo[playerid][HouseIntSelected]][price])
	            {
	                return SCM(playerid, -1, ""er"You can't afford that interior");
	            }

				new h_id = GetHouseIdByPlayerSlotSel(playerid);
				
				if(h_id != -1)
				{
	  	            if(PlayerInfo[playerid][HouseIntSelected] == HouseInfo[h_id][interior])
		            {
	         			return SCM(playerid, -1, ""er"This house already got the interior");
		            }

                    HouseInfo[h_id][locked] = 1;

		            for(new pid = 0; pid < MAX_PLAYERS; pid++)
		            {
		                if(gTeam[pid] == HOUSE && GetPlayerInterior(pid) == HouseIntTypes[HouseInfo[h_id][interior]][interior] && GetPlayerVirtualWorld(pid) == (HouseInfo[h_id][iID] + 1000))
		                {
		                    gTeam[pid] = NORMAL;
		                    SetPlayerPos(pid, HouseInfo[h_id][E_x], HouseInfo[h_id][E_y], HouseInfo[h_id][E_z]);
							ResetPlayerWorld(pid);
		                }
		            }

					for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
					{
						if(HouseInfo[h_id][E_Obj_Model][ii] != 0)
						{
						    DestroyDynamicObject(HouseInfo[h_id][E_Obj_ObjectID][ii]);
						    DestroyDynamic3DTextLabel(HouseInfo[h_id][E_Obj_Label][ii]);
						    HouseInfo[h_id][E_Obj_Label][ii] = Text3D:-1;
						    HouseInfo[h_id][E_Obj_ObjectID][ii] = -1;
						    HouseInfo[h_id][E_Obj_Model][ii] = 0;
						}
					}
					
	                GivePlayerCash(playerid, -HouseIntTypes[PlayerInfo[playerid][HouseIntSelected]][price]);
	                HouseInfo[h_id][interior] = PlayerInfo[playerid][HouseIntSelected];
	       			SetPlayerPos(playerid, HouseInfo[h_id][E_x], HouseInfo[h_id][E_y], HouseInfo[h_id][E_z]);
					ResetPlayerWorld(playerid);
					gTeam[playerid] = NORMAL;
	      		    format(gstr, sizeof(gstr), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", __GetName(playerid), HouseInfo[h_id][iID], ToCurrency(HouseInfo[h_id][price]), HouseInfo[h_id][E_score], HouseIntTypes[PlayerInfo[playerid][HouseIntSelected]][intname]);
	    			UpdateDynamic3DTextLabelText(HouseInfo[h_id][label], -1, gstr);
	                MySQL_SaveHouse(h_id, true);
	                MySQL_SavePlayer(playerid, false);
	                SCM(playerid, GREEN, "Successfully upgraded the interior!");
                }
                else SendInfo(playerid, "~y~~h~Error couldn't find the house in that slot!~n~Report on forums!", 2500);
	            return true;
	        }
	        case TOPLIST_DIALOG:
	        {
	            switch(listitem)
	            {
	                case 0: Command_ReProcess(playerid, "/richlist", false);
	                case 1: Command_ReProcess(playerid, "/wanteds", false);
	                case 2: Command_ReProcess(playerid, "/score", false);
	                case 3: Command_ReProcess(playerid, "/kills", false);
	                case 4: Command_ReProcess(playerid, "/deaths", false);
	                case 5: Command_ReProcess(playerid, "/toptime", false);
	                case 6: Command_ReProcess(playerid, "/gangs", false);
	                case 7: Command_ReProcess(playerid, "/gtop", false);
	                case 8: Command_ReProcess(playerid, "/rtests", false);
	                case 9: Command_ReProcess(playerid, "/races", false);
	                case 10: Command_ReProcess(playerid, "/derbys", false);
	                case 11: Command_ReProcess(playerid, "/fallouts", false);
					case 12: Command_ReProcess(playerid, "/gungames", false);
	            }
	            return true;
	        }
		    case TELE_DIALOG:
		    {
		        switch(listitem)
		        {
		            case 0: // Parkours
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 1, DIALOG_STYLE_LIST, ""nef" - Teleports > Parkours", TeleportDialogString[0], "Select", "Back");
		            }
		            case 1: // Stunting
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 2, DIALOG_STYLE_LIST, ""nef" - Teleports > Stunts", TeleportDialogString[1], "Select", "Back");
					}
		            case 2: // basejump
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" - Teleports > Basejump/Skydive", TeleportDialogString[2], "Select", "Back");
					}
		            case 3: // vehicle jumps
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 4, DIALOG_STYLE_LIST, ""nef" - Teleports > Vehicle Jumps", TeleportDialogString[3], "Select", "Back");
					}
		            case 4: // fun maps
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 5, DIALOG_STYLE_LIST, ""nef" - Teleports > Fun Maps", TeleportDialogString[4], "Select", "Back");
					}
		            case 5: // specials
		            {
						ShowPlayerDialog(playerid, TELE_DIALOG + 6, DIALOG_STYLE_LIST, ""nef" - Teleports > Specials", TeleportDialogString[5], "Select", "Back");
					}
					case 6: // Vehicle Tuning
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 7, DIALOG_STYLE_LIST, ""nef" - Teleports > Vehicle Tuning", TeleportDialogString[6], "Select", "Back");
					}
					case 7: // Cities
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 8, DIALOG_STYLE_LIST, ""nef" - Teleports > Cities", TeleportDialogString[7], "Select", "Back");
					}
					case 8: // Hotspots
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 9, DIALOG_STYLE_LIST, ""nef" - Teleports > Hotspots", TeleportDialogString[8], "Select", "Back");
					}
					case 9: // Drifts
					{
					    ShowPlayerDialog(playerid, TELE_DIALOG + 10, DIALOG_STYLE_LIST, ""nef" - Teleports > Drifts", TeleportDialogString[9], "Select", "Back");
					}
		        }
		    }
		    case TELE_DIALOG +1: // parkours
		    {
		        PushTeleportIntput(playerid, 0, listitem);
		    }
		    case TELE_DIALOG +2: // Stunting
		    {
		        PushTeleportIntput(playerid, 1, listitem);
		    }
		    case TELE_DIALOG +3: //base jumps
		    {
		        PushTeleportIntput(playerid, 2, listitem);
		    }
		    case TELE_DIALOG +4: // vehicle jumps
		    {
		        PushTeleportIntput(playerid, 3, listitem);
		    }
		    case TELE_DIALOG +5: // other fun maps
		    {
		        PushTeleportIntput(playerid, 4, listitem);
		    }
		    case TELE_DIALOG +6: // specials
		    {
		        PushTeleportIntput(playerid, 5, listitem);
		    }
		    case TELE_DIALOG +7: // Vehicle Tuning
		    {
		        PushTeleportIntput(playerid, 6, listitem);
		    }
		    case TELE_DIALOG +8: // Cities
		    {
		        PushTeleportIntput(playerid, 7, listitem);
		    }
		    case TELE_DIALOG +9: // Hotspots
		    {
		        PushTeleportIntput(playerid, 8, listitem);
		    }
		    case TELE_DIALOG +10: // Hotspots
		    {
		        PushTeleportIntput(playerid, 9, listitem);
		    }
	        case GMENU_DIALOG:
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
						MySQL_FetchGangInfo(playerid, PlayerInfo[playerid][GangID]);
		            }
		            case 1:
		            {
		                MySQL_FetchGangMemberNames(playerid, PlayerInfo[playerid][GangID]);
		            }
		            case 2:
		            {
						new cstring[512];
						
						strcat(cstring, ""yellow"/gcreate "white"- create a gang\n");
						strcat(cstring, ""yellow"/gmenu "white"- gang menu\n");
						strcat(cstring, ""yellow"/gsetrank "white"- set a players rank\n");
						strcat(cstring, ""yellow"/ginvite "white"- invite someone to your gang\n");
						strcat(cstring, ""yellow"/gkick "white"- kick someone off your gang\n");
						strcat(cstring, ""yellow"/gjoin "white"- join a gang\n");
						strcat(cstring, ""yellow"/gleave "white"- leave the gang you are in\n");
						strcat(cstring, ""yellow"/gclose "white"- destroy your gang\n");
						strcat(cstring, ""yellow"/gdeny "white"- deny an invitation\n");
						strcat(cstring, ""yellow"/gangs "white"- online gangs\n");
		            
		                ShowPlayerDialog(playerid, GMENU_DIALOG + 1, DIALOG_STYLE_MSGBOX, ""nef" - Gang commands", cstring, "OK", "Back");
		            }
		            case 3: // edit rank
		            {
		                Command_ReProcess(playerid, "/gsetrank", false);
		            }
		            case 4: // kick player
					{
						Command_ReProcess(playerid, "/gkick", false);
					}
		        }
		        return true;
	        }
	        case DERBY_VOTING_DIALOG:
	        {
				if(!IsDerbyRunning)
				{
				    if(Iter_Contains(DerbyVoters, playerid)) return SCM(playerid, -1, ""er"You already voted this round");
				    
				    Iter_Add(DerbyVoters, playerid);
				
				    new string[100];

				    switch(listitem)
				    {
						case 0:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'SilverGround'", __GetName(playerid), playerid);
							DerbyMapVotes[6]++;
							DerbyMSG(string);
						}
						case 1:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Anubis'", __GetName(playerid), playerid);
							DerbyMapVotes[7]++;
							DerbyMSG(string);
						}
						case 2:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Confusing'", __GetName(playerid), playerid);
							DerbyMapVotes[8]++;
							DerbyMSG(string);
						}
				        case 3:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Lighthouse'", __GetName(playerid), playerid);
							DerbyMapVotes[0]++;
							DerbyMSG(string);
						}
						case 4:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Truncat'", __GetName(playerid), playerid);
							DerbyMapVotes[1]++;
							DerbyMSG(string);
						}
						case 5:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Sky Skiing'", __GetName(playerid), playerid);
							DerbyMapVotes[2]++;
							DerbyMSG(string);
						}
						case 6:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Townhall'", __GetName(playerid), playerid);
							DerbyMapVotes[3]++;
							DerbyMSG(string);
						}
						case 7:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Glazz'", __GetName(playerid), playerid);
							DerbyMapVotes[4]++;
							DerbyMSG(string);
						}
						case 8:
						{
						    format(string, sizeof(string), "%s(%i) has voted for Map 'Rambo'", __GetName(playerid), playerid);
							DerbyMapVotes[5]++;
							DerbyMSG(string);
						}
					}
				}
				else
				{
					SCM(playerid, BLUE, "No voting time now!");
				}
				return true;
			}
			case BANK_DIALOG:
			{
			    new string[130];
			    switch(listitem)
			    {
				    case 0: // Deposit
				    {
				        format(string, sizeof(string), ""white"» You got "yellow"$%s"white" in your bank account.\n\nType in the amount you want to deposit below:", ToCurrency(PlayerInfo[playerid][Bank]));
				        ShowPlayerDialog(playerid, BANK_DIALOG+1, DIALOG_STYLE_INPUT, ""nef" - Bank > Deposit", string, "Deposit", "Cancel");
				    }
				    case 1: // Withdraw
				    {
				        format(string, sizeof(string), ""white"» You got "yellow"$%s"white" in your bank account.\n\nType in the amount you want to withdraw below:", ToCurrency(PlayerInfo[playerid][Bank]));
				        ShowPlayerDialog(playerid, BANK_DIALOG+2, DIALOG_STYLE_INPUT, ""nef" - Bank > Withdraw", string, "Withdraw", "Cancel");
				    }
				    case 2: // Check Balance
				    {
				        format(string, sizeof(string), ""white"» You got "yellow"$%s"white" in your bank account.", ToCurrency(PlayerInfo[playerid][Bank]));
				        ShowPlayerDialog(playerid, 11231, DIALOG_STYLE_MSGBOX, ""nef" - Bank > Balance", string, "OK", "");
				    }
			    }
			    return true;
			}
			case BANK_DIALOG + 1:
			{
			    new string[100];

				extract inputtext -> new inamount; else
				{
				    return SCM(playerid, WHITE, ""er"Invalid amount");
				}

				if(inamount > GetPlayerCash(playerid))
				{
					SCM(playerid, WHITE, ""er"You don't have that much money!");
				}
				else if(inamount < 1)
				{
					SCM(playerid, WHITE, ""er"Invalid amount");
				}
				else
				{
					GivePlayerCash(playerid, -inamount);
					PlayerInfo[playerid][Bank] += inamount;
					format(string, sizeof(string), "» You have deposited {FF7800}$%s"white" into your bank account", ToCurrency(inamount));
					SCM(playerid, WHITE, string);
				}
				return true;
			}
			case BANK_DIALOG+2:
			{
			    new string[100];

				extract inputtext -> new outamount; else
				{
				    return SCM(playerid, WHITE, ""er"Invalid amount");
				}

				if(outamount > PlayerInfo[playerid][Bank])
				{
					SCM(playerid, WHITE, ""er"You do not have that much money in your bank account!");
				}
				else if(outamount < 1)
				{
					SCM(playerid, WHITE, ""er"Invalid amount!");
				}
				else
				{
					GivePlayerCash(playerid, outamount);
					PlayerInfo[playerid][Bank] -= outamount;
					format(string, sizeof(string), "» You have withdrawn {FF7800}$%s"white" from your bank account", ToCurrency(outamount));
					SCM(playerid, WHITE, string);
				}
				return true;
			}
			case LIFT_DIALOG:
			{
		        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
		        {
		            GameTextForPlayer(playerid, "~r~The floor is already in queue", 3500, 4);
				}
				else if(DidPlayerRequestElevator(playerid))
				{
				    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
				}
				else
				{
			        CallElevator(playerid, listitem);
				}
				return true;
			}
			case LOGIN_DIALOG: // player entered a password
			{
				if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
					return SkipLogin(playerid);
				}
				if(isnull(inputtext)) return SkipLogin(playerid);
				extract inputtext -> new string:password[33]; else // früher war das auch ohne dem makro
				{
					return SkipLogin(playerid);
				}
				new query[255], escape[33];
				mysql_escape_string(password, escape, g_SQL_handle, 33);

				format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Name` = '%s' AND (`Hash` = MD5('%s') OR `Hash` = SHA1('%s'));", __GetName(playerid), escape, escape); // SHA1 because of Stunt Evolution server merge
				mysql_tquery(g_SQL_handle, query, "OnQueryFinish", "siii", query, THREAD_CHECK_PLAYER_PASSWD, playerid, g_SQL_handle);
			    return true;
			}
			case REGISTER_DIALOG2:
			{
			    if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
				    return SCM(playerid, -1, ""er"Wrong input");
				}
				if(isnull(inputtext)) return SCM(playerid, -1, ""er"Wrong input");
				extract inputtext -> new string:password[33]; else
				{
					return SCM(playerid, -1, ""er"Wrong input");
				}
			    MySQL_CreateAccount2(playerid, password);
			    return true;
			}
			case REGISTER_DIALOG:
			{
			    if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
				{
				    return SkipRegistration(playerid);
				}
				if(isnull(inputtext)) return SkipRegistration(playerid);
				extract inputtext -> new string:password[33]; else
				{
					return SkipRegistration(playerid);
				}
			    MySQL_CreateAccount(playerid, password);
			    return true;
			}
			case STREAM_DIALOG:
			{
				switch(listitem)
		    	{
	      			case 0: ShowPlayerDialog(playerid, STREAM_DIALOG+1, DIALOG_STYLE_LIST, ""nef" - Streams > Streams > Electronic", ""dl"#MUSIK.TRANCE - WWW.RAUTEMUSIK.FM\n"dl":: Electro Radio :: all about electromusic", "Select", "Back");
					case 1: ShowPlayerDialog(playerid, STREAM_DIALOG+2, DIALOG_STYLE_LIST, ""nef" - Streams > Metal", ""dl"RockRadio1.Com - Classic Hard Rock and Heavy\n"dl"#MUSIK.METAL - WWW.RAUTEMUSIK.FM", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, STREAM_DIALOG+3, DIALOG_STYLE_LIST, ""nef" - Streams > Pop", ""dl"idobi Radio: New. Music.\n"dl"Antena1 - SP 94.7 FM", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, STREAM_DIALOG+4, DIALOG_STYLE_LIST, ""nef" - Streams > Hip Hop", ""dl"HOT 108 JAMZ - #1 FOR HIP HOP\n"dl"Radio Traditional Hip Hop", "Select", "Back");
					case 4: ShowPlayerDialog(playerid, STREAM_DIALOG+5, DIALOG_STYLE_LIST, ""nef" - Streams > Rap", ""dl"POWERHITZ.COM - #1 FOR HITZ\n"dl"RADIOUP.COM - THE HITLIST", "Select", "Back");
					case 5: ShowPlayerDialog(playerid, STREAM_DIALOG+6, DIALOG_STYLE_LIST, ""nef" - Streams > Mainstream/Rock", ""dl"#MUSIK.MAIN - WWW.RAUTEMUSIK.FM - 24H\n"dl"181.FM - Kickin' Country", "Select", "Back");
					case 6: ShowPlayerDialog(playerid, STREAM_DIALOG+7, DIALOG_STYLE_LIST, ""nef" - Streams > Oldies", ""dl"#MUSIK.GOLDIES - WWW.RAUTEMUSIK.FM\n"dl"181.FM - Good Time Oldie", "Select", "Back");
					case 7: PlayAudioStreamForPlayer(playerid, "http://cp9.shoutcheap.com:2199/tunein/stuntevo.pls");
					case 8: ShowPlayerDialog(playerid, STREAM_DIALOG+8, DIALOG_STYLE_INPUT, ""nef" - Streams > Your own stream", ""white"Please enter the audio stream you want to listen to", "Play", "Back");
				}
				return true;
			}
			case STREAM_DIALOG+1:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=29555");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=108251");
    			}
				return true;
			}
			case STREAM_DIALOG+2:
			{
				switch(listitem)
		    	{
		       		case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=558051");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=318248");
				}
				return true;
			}
			case STREAM_DIALOG+3:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=914897");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=203280");
				}
				return true;
			}
			case STREAM_DIALOG+4:
			{
	  			switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=32999");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1891213");
				}
				return true;
			}
			case STREAM_DIALOG+5:
			{
				switch(listitem)
			    {
			        case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=352174");
			        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213");
				}
				return true;
			}
			case STREAM_DIALOG+6:
			{
				switch(listitem)
			    {
			        case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=38370");
			        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283687");
				}
				return true;
			}
			case STREAM_DIALOG+7:
			{
				switch(listitem)
		    	{
		        	case 0: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105772");
		        	case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103482");
				}
				return true;
			}
			case STREAM_DIALOG+8:
			{
			    extract inputtext -> new string:link[144]; else
			    {
					return ShowPlayerDialog(playerid, STREAM_DIALOG+8, DIALOG_STYLE_INPUT, ""nef" - Streams > Your own stream", ""white"Please enter the audio stream you want to listen to", "Play", "Back");
			    }
				PlayAudioStreamForPlayer(playerid, link);
				return true;
			}
			case TOY_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" - Player Toys > Slot: %i", listitem + 1);
					
			    if(listitem > PlayerInfo[playerid][AdditionalToySlots] + 4)
			    {
			        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This toy slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
			    }
			    else
			    {
			        PlayerInfo[playerid][toy_selected] = listitem;
			        
					if(PlayerToys[playerid][listitem][toy_model] == 0)
					{
					    ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x0500009C, 0x050000FF, 0xFAFAFA4D);
					}
					else
					{
		            	ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, gstr, ""dl"Edit Toy Position\n"dl"Change Bone\n"dl""grey"Remove Toy", "Select", "Cancel");
					}
			    }
				return true;
			}
			case TOY_DIALOG + 1:
			{
				switch(listitem)
				{
				    case 0: // edit
				    {
				        EditAttachedObject(playerid, PlayerInfo[playerid][toy_selected]);
				        ShowPlayerToyTextdraws(playerid);
				        SendInfo(playerid, "~y~~h~You are now editing the toy", 2500);
				    }
				    case 1: // change bone
					{
					    new finstring[750],
							string[128];
							
						format(string, sizeof(string), ""nef" - Player Toys > Slot %i > Change Bone", PlayerInfo[playerid][toy_selected] + 1);

					    strcat(finstring, ""dl"Spine\n"dl"Head\n"dl"Left upper arm\n"dl"Right upper arm\n"dl"Left hand\n"dl"Right hand\n"dl"Left thigh\n"dl"Right tigh\n"dl"Left foot\n"dl"Right foot");
					    strcat(finstring, "\n"dl"Right calf\n"dl"Left calf\n"dl"Left forearm\n"dl"Right forearm\n"dl"Left clavicle\n"dl"Right clavicle\n"dl"Neck\n"dl"Jaw");

					    ShowPlayerDialog(playerid, TOY_DIALOG + 2, DIALOG_STYLE_LIST, string, finstring, "Select", "Cancel");
					}
					case 2: // remove toy
					{
					    if(IsPlayerAttachedObjectSlotUsed(playerid, PlayerInfo[playerid][toy_selected]))
						{
							RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][toy_selected]);
						}
						PlayerToys[playerid][PlayerInfo[playerid][toy_selected]][toy_model] = 0;
						SendInfo(playerid, "~y~~h~Toy removed!", 3500);
					}
				}
			    return true;
			}
			case TOY_DIALOG + 2: //change bone
			{
			    listitem++;
			    PlayerToys[playerid][PlayerInfo[playerid][toy_selected]][toy_bone] = listitem;

			    if(IsPlayerAttachedObjectSlotUsed(playerid, PlayerInfo[playerid][toy_selected]))
				{
					RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][toy_selected]);
				}

			    listitem = PlayerInfo[playerid][toy_selected];

	            SetPlayerAttachedObject(playerid,
	                listitem,
	                PlayerToys[playerid][listitem][toy_model],
	                PlayerToys[playerid][listitem][toy_bone],
	                PlayerToys[playerid][listitem][toy_x],
	                PlayerToys[playerid][listitem][toy_y],
	                PlayerToys[playerid][listitem][toy_z],
	                PlayerToys[playerid][listitem][toy_rx],
	                PlayerToys[playerid][listitem][toy_ry],
	                PlayerToys[playerid][listitem][toy_rz],
	                PlayerToys[playerid][listitem][toy_sx],
	                PlayerToys[playerid][listitem][toy_sy],
	                PlayerToys[playerid][listitem][toy_sz]);

			    SendInfo(playerid, "~g~~h~~h~Bone changed", 2500);
			    return true;
			}
			case VEHICLE_DIALOG:
			{
			   	switch(listitem)
				{
				    case 0:
   					{
    					if(PlayerInfo[playerid][VIP] == 0)
						{
							return SCM(playerid, -1, ""er"You need to be VIP to access this section");
						}
						ShowPlayerDialog(playerid, VEHICLE_DIALOG+16, DIALOG_STYLE_LIST, ""nef" - Vehicles > VIP Vehicles", ""RED_E"Custom Cheetah\n"LB_E"Police Infurnes\n"YELLOW_E"Custom NRG\n"GREEN_E"Custom Bullet\n"WHITE_E"Custom Huntley", "Select", "Back");
					}
					case 1: ShowPlayerDialog(playerid, VEHICLE_DIALOG+1, DIALOG_STYLE_LIST, ""nef" - Vehicles > Airplanes", "Andromada\nAT-400\nBeagle\nCropduster\nDodo\nNevada\nRustler\nShamal\nSkimmer\nStuntplane", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, VEHICLE_DIALOG+2, DIALOG_STYLE_LIST, ""nef" - Vehicles > Helicopters", "Cargobob\nLeviathan\nMaverick\nNews Maverick\nPolice Maverick\nRaindance\nSeasparrow\nSparrow", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, VEHICLE_DIALOG+3, DIALOG_STYLE_LIST, ""nef" - Vehicles > Bikes", "BF-400\nBike\nBMX\nFaggio\nFCR-900\nFreeway\nMountain Bike\nNRG-500\nPCJ-600\nPizzaboy\nQuad\nSanchez\nWayfarer", "Select", "Back");
					case 4: ShowPlayerDialog(playerid, VEHICLE_DIALOG+4, DIALOG_STYLE_LIST, ""nef" - Vehicles > Convertibles", "Comet\nFeltzer\nStallion\nWindsor", "Select", "Back");
					case 5: ShowPlayerDialog(playerid, VEHICLE_DIALOG+5, DIALOG_STYLE_LIST, ""nef" - Vehicles > Industrial", "Benson\nBobcat\nBurrito\nBoxville\nBoxburg\nCement Truck\nDFT-30\nFlatbed\nLinerunner\nMule\nNewsvan\nPacker\nPetrol Tanker\nPony\nRoadtrain\nRumpo\nSadler\nSadler Shit\nTopfun\nTractor\nTrashmaster\nUtility Van\nWalton\nYankee\nYosemite", "Select", "Back");
					case 6: ShowPlayerDialog(playerid, VEHICLE_DIALOG+6, DIALOG_STYLE_LIST, ""nef" - Vehicles > Lowriders", "Blade\nBroadway\nRemington\nSavanna\nSlamvan\nTahoma\nTornado\nVoodoo", "Select", "Back");
					case 7: ShowPlayerDialog(playerid, VEHICLE_DIALOG+7, DIALOG_STYLE_LIST, ""nef" - Vehicles > Off Road", "BF Injection\nDune\nHuntley\nLandstalker\nMesa\nMonster\nMonster A\nMonster B\nPatriot\nRancher A\nRancher B\nSandking", "Select", "Back");
					case 8: ShowPlayerDialog(playerid, VEHICLE_DIALOG+8, DIALOG_STYLE_LIST, ""nef" - Vehicles > Public Service Vehicles", "Ambulance\nBarracks\nBus\nCabbie\nCoach\nCop Bike (HPV-1000)\nEnforcer\nFBI Rancher\nFBI Truck\nFiretruck\nFiretruck LA\nPolice Car (LSPD)\nPolice Car (LVPD)\nPolice Car (SFPD)\nRanger\nRhino\nS.W.A.T\nTaxi", "Select", "Back");
					case 9: ShowPlayerDialog(playerid, VEHICLE_DIALOG+9, DIALOG_STYLE_LIST, ""nef" - Vehicles > Saloons", "Admiral\nBloodring Banger\nBravura\nBuccaneer\nCadrona\nClover\nElegant\nElegy\nEmperor\nEsperanto\nFortune\nGlendale Shit\nGlendale\nGreenwood\nHermes\nIntruder\nMajestic\nManana\nMerit\nNebula\nOceanic\nPicador\nPremier\nPrevion\nPrimo\nSentinel\nStafford\nSultan\nSunrise\nTampa\nVincent\nVirgo\nWillard\nWashington", "Select", "Back");
					case 10: ShowPlayerDialog(playerid, VEHICLE_DIALOG+10, DIALOG_STYLE_LIST, ""nef" - Vehicles > Sport Vehicles", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350", "Select", "Back");
					case 11: ShowPlayerDialog(playerid, VEHICLE_DIALOG+11, DIALOG_STYLE_LIST, ""nef" - Vehicles > Station Wagons", "Moonbeam\nPerenniel\nRegina\nSolair\nStratum", "Select", "Back");
					case 12: ShowPlayerDialog(playerid, VEHICLE_DIALOG+12, DIALOG_STYLE_LIST, ""nef" - Vehicles > Boats", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSquallo\nTropic", "Select", "Back");
					case 13: ShowPlayerDialog(playerid, VEHICLE_DIALOG+13, DIALOG_STYLE_LIST, ""nef" - Vehicles > Trailers", "Article Trailer\nArticle Trailer 2\nArticle Trailer 3\nBaggage Trailer A\nBaggage Trailer B\nFarm Trailer\nPetrol Trailer\nStairs Trailer\nUtility Trailer", "Select", "Back");
					case 14: ShowPlayerDialog(playerid, VEHICLE_DIALOG+14, DIALOG_STYLE_LIST, ""nef" - Vehicles > Unique Vehicles", "Baggage\nBrownstreak (Train)\nCaddy\nCamper\nCamper A\nCombine Harvester\nDozer\nDumper\nForklift\nFreight (Train)\nHotknife\nHotdog\nMower\nMr Whoopee\nRomero\nSecuricar\nStretch\nSweeper\nTram\nTowtruck\nTug", "Select", "Back");
					case 15: ShowPlayerDialog(playerid, VEHICLE_DIALOG+15, DIALOG_STYLE_LIST, ""nef" - Vehicles > RC Vehicles", "RC Bandit\nRC Raider\nRC Goblin\nRC Tiger\nRC Cam", "Select", "Back");
				}
				return true;
			}
			case VEHICLE_DIALOG+1:
			{
	   			new model_array[] = {592, 577, 511, 512, 593, 553, 476, 519, 460, 513};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+2:
			{
			    new model_array[] = {548, 417, 487, 488, 497, 563, 447, 469};
	            CarSpawner(playerid, model_array[listitem], 120);
			    return true;
			}
			case VEHICLE_DIALOG+3:
			{
				new	model_array[] = {581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 471, 468, 586};
    			CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+4:
			{
	   			new	model_array[] = {480, 533, 439, 555};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+5:
			{
				new model_array[] = {499, 422, 482, 498, 609, 524, 578, 455, 403, 414, 582, 443, 514, 413, 515, 440, 543, 605, 459, 531, 408, 552, 478, 456, 554};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+6:
			{
			    new model_array[] = { 536, 575, 534, 567, 535, 566, 576, 412 };
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+7:
			{
	    		new model_array[] = {424, 573, 579, 400, 500, 444, 556, 557, 470, 489, 505, 495};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+8:
			{
				new model_array[] = {416, 433, 431, 438, 437, 523, 427, 490, 528, 407, 544, 596, 598, 597, 599, 432, 601, 420};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+9:
			{
			    new model_array[] = {445, 504, 401, 518, 527, 542, 507, 562, 585, 419, 526, 604, 466, 492, 474, 546, 517, 410, 551, 516, 467, 600, 426, 436, 547, 405, 580, 560, 550, 549, 540, 491, 529, 421};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
   			}
			case VEHICLE_DIALOG+10:
			{
	    		new model_array[] = {602, 429, 496, 402, 541, 415, 589, 587, 565, 494, 502, 503, 411, 559, 603, 475, 506, 451, 558, 477};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+11:
			{
				new model_array[] = {418, 404, 479, 458, 561};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+12:
			{
		        new model_array[] = {472, 473, 493, 595, 484, 430, 453, 452, 446, 454};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+13:
			{
			    new model_array[] = {435, 450, 591, 606, 607, 610, 584, 608, 611};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+14:
			{
		        new model_array[] = {485, 537, 457, 483, 508, 532, 486, 406, 530, 538, 434, 588, 572, 423, 442, 428, 409, 574, 449, 525, 583};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+15:
			{
		        new model_array[] = {441, 465, 501, 564, 594};
	            CarSpawner(playerid, model_array[listitem], 120);
				return true;
			}
			case VEHICLE_DIALOG+16:
			{
			    switch(listitem)
			    {
					case 0: Command_ReProcess(playerid, "/v70", false);
					case 1: Command_ReProcess(playerid, "/v71", false);
					case 2: Command_ReProcess(playerid, "/v74", false);
					case 3: Command_ReProcess(playerid, "/v73", false);
					case 4: Command_ReProcess(playerid, "/v72", false);
			    }
			    return true;
			}
			case WEAPON_DIALOG:
			{
	  			switch(listitem)
		    	{
					case 0: ShowPlayerDialog(playerid, WEAPON_DIALOG+1, DIALOG_STYLE_LIST, ""nef" - Weapons > Rifles", ""dl"AK-47\n"dl"M4\n"dl"Country Rifle\n"dl"Sniper Rifle", "Select", "Back");
					case 1: ShowPlayerDialog(playerid, WEAPON_DIALOG+2, DIALOG_STYLE_LIST, ""nef" - Weapons > Submachine Guns", ""dl"MP 5\n"dl"UZI\n"dl"TEC-9", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, WEAPON_DIALOG+3, DIALOG_STYLE_LIST, ""nef" - Weapons > Shot Guns", ""dl"Pump Gun\n"dl"Sawn-Off\n"dl"Combat Shotgun", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, WEAPON_DIALOG+4, DIALOG_STYLE_LIST, ""nef" - Weapons > Hand Guns", ""dl"9mm\n"dl"Silenced 9mm\n"dl"Desert Eagle", "Select", "Back");
	   				case 4: ShowPlayerDialog(playerid, WEAPON_DIALOG+5, DIALOG_STYLE_LIST, ""nef" - Weapons > Melee Weapons", ""dl"Golf Club\n"dl"Nightstick\n"dl"Knife\n"dl"Shovel\n"dl"Katana\n"dl"Chainsaw\n"dl"Double-ended Dildo\n"dl"Silver Vibrator\n"dl"Flowers", "Select", "Back");
	   				case 5: ShowPlayerDialog(playerid, WEAPON_DIALOG+6, DIALOG_STYLE_LIST, ""nef" - Weapons > Special Weapons", ""dl"Tear Gas\n"dl"Molotov Cocktail\n"dl"Flamethrower\n"dl"Spraycan\n"dl"Fire Extinguisher", "Select", "Back");
				}
				return true;
			}
			case WEAPON_DIALOG+1:
			{
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,30,99999);}
			 		case 1:{GivePlayerWeapon(playerid,31,99999);}
					case 2:{GivePlayerWeapon(playerid,33,99999);}
					case 3:{GivePlayerWeapon(playerid,34,99999);}
				}
				return true;
			}
			case WEAPON_DIALOG+2:
			{
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,29,99999);}
					case 1:{GivePlayerWeapon(playerid,28,99999);}
					case 2:{GivePlayerWeapon(playerid,32,99999);}
				}
				return true;
			}
			case WEAPON_DIALOG+3:
			{
	  			switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,25,99999);}
            		case 1:{GivePlayerWeapon(playerid,26,99999);}
					case 2:{GivePlayerWeapon(playerid,27,99999);}
				}
			    return true;
			}
			case WEAPON_DIALOG+4:
			{
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,22,99999);}
					case 1:{GivePlayerWeapon(playerid,23,99999);}
			    	case 2:{GivePlayerWeapon(playerid,24,99999);}
				}
			    return true;
			}
			case WEAPON_DIALOG+5:
			{
	  			switch(listitem)
				{
					case 0:{GivePlayerWeapon(playerid,2,1);}
            		case 1:{GivePlayerWeapon(playerid,3,1);}
					case 2:{GivePlayerWeapon(playerid,4,1);}
					case 3:{GivePlayerWeapon(playerid,6,1);}
					case 4:{GivePlayerWeapon(playerid,8,1);}
					case 5:{GivePlayerWeapon(playerid,9,1);}
					case 6:{GivePlayerWeapon(playerid,10,1);}
					case 7:{GivePlayerWeapon(playerid,13,1);}
					case 8:{GivePlayerWeapon(playerid,14,1);}
				}
			    return true;
			}
			case WEAPON_DIALOG+6:
			{
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,17,99999);}
					case 1:{GivePlayerWeapon(playerid,18,5);}
			    	case 2:{GivePlayerWeapon(playerid,37,25);}
					case 3:{GivePlayerWeapon(playerid,41,25);}
			    	case 4:{GivePlayerWeapon(playerid,42,25);}
				}
				return true;
			}
			case VMENU_DIALOG:
			{
                if(listitem > PlayerInfo[playerid][AdditionalPVSlots])
			    {
					format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i", listitem + 1);
			        ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, gstr, ""nef_green"This vehicle slot is locked.\n\n"white"You may unlock it by purchasing an extra slot at Gold Credits (/gc)", "OK", "");
			    }
			    else
			    {
			        PVVMenuSel[playerid] = listitem;
			        
				   	if(PlayerPV[playerid][PVVMenuSel[playerid]][Model] == 0)
					{
					    SendInfo(playerid, "~y~~h~This pv slot is currently not in use!", 2500);
					    return 1;
					}

					format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i", listitem + 1);
				    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, ""dl"Spawn Vehicle\n"dl"Attach Neon\n"dl"Change Number Plate\n"dl"Change Vehicle Color\n"dl""grey"Sell vehicle", "Select", "Back");
			    }
				return true;
			}
			case VMENU_DIALOG + 1:
			{
   				switch(listitem)
			    {
			        case 0:
			        {
						DestroyPlayerVehicles(playerid);

                        PVSelect[playerid] = PVVMenuSel[playerid];

						new Float:POS[4],
						    vlabel[128];

                        format(vlabel, sizeof(vlabel), ""nef_yellow"%s´s \n"white"private vehicle", __GetName(playerid));

						GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
						GetPlayerFacingAngle(playerid, POS[3]);

						PlayerPV[playerid][PVSelect[playerid]][PVehicleID] = CreateVehicle_(PlayerPV[playerid][PVSelect[playerid]][Model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
						PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0, -1, -1, -1, 30.0);

						SetVehicleVirtualWorld(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerVirtualWorld(playerid));
						LinkVehicleToInterior(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerInterior(playerid));
						SetVehicleNumberPlate(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Plate]);
						SetVehicleToRespawn(PlayerPV[playerid][PVSelect[playerid]][PVehicleID]);

						PutPlayerInVehicle(playerid, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);

						SendInfo(playerid, "~y~~h~Private Vehicle Spawned", 2500);
					}
					case 1:
					{
						ShowDialog(playerid, NEON_DIALOG);
					}
					case 2:
					{
						ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					}
					case 3:
					{
					    Command_ReProcess(playerid, "/cc", false);
					}
					case 4:
					{
						if(PlayerPV[playerid][PVVMenuSel[playerid]][Neon1] != -1)
						{
							DestroyDynamicObject(PlayerPV[playerid][PVVMenuSel[playerid]][Neon1]);
							PlayerPV[playerid][PVVMenuSel[playerid]][Neon1] = -1;
						}
						if(PlayerPV[playerid][PVVMenuSel[playerid]][Neon2] != -1)
						{
							DestroyDynamicObject(PlayerPV[playerid][PVVMenuSel[playerid]][Neon2]);
							PlayerPV[playerid][PVVMenuSel[playerid]][Neon2] = -1;
						}
					    if(PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleLabel] != Text3D:-1)
					    {
					        DestroyDynamic3DTextLabel(PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleLabel]);
					        PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleLabel] = Text3D:-1;
					    }
						if(PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleID] != -1)
						{
							DestroyVehicle_(PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleID]);
							PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleID] = -1;
						}

                        GivePlayerCash(playerid, floatround(GetPVPriceByModelId(PlayerPV[playerid][PVVMenuSel[playerid]][Model]) / 2));

						PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleID] = -1;
						PlayerPV[playerid][PVVMenuSel[playerid]][PVehicleLabel] = Text3D:-1;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Model] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][PaintJob] = -1;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Color1] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Color2] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod1] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod2] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod3] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod4] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod5] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod6] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod7] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod8] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod9] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod10] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod11] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod12] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod13] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod14] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod15] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod16] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Mod17] = 0;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Neon1] = -1;
					    PlayerPV[playerid][PVVMenuSel[playerid]][Neon2] = -1;

                        strmid(PlayerPV[playerid][PVVMenuSel[playerid]][Plate], "Plate", 0, 13, 13);
                        
                        MySQL_SavePlayer(playerid, true);
                        
                        SendInfo(playerid, "~r~~h~~h~You sold your vehicle!", 4000);
					}
				}
				return true;
			}
			case CARBUY_DIALOG:
			{
                if(PlayerInfo[playerid][VIP] == 0 && listitem == 8)
                {
					SCM(playerid, -1, ""er"You need to be VIP");
					ShowDialog(playerid, CARBUY_DIALOG);
					return 1;
                }
			
			    new string[2048], tmp[128];
			    
        	    for(new i = 0; i < sizeof(PVMatrix); i++)
        	    {
        	        if(PVMatrix[i][pv_category] == listitem)
        	        {
        	            format(tmp, sizeof(tmp), ""dl"%s "green"$%s\n", PVMatrix[i][pv_modelname], ToCurrency(PVMatrix[i][pv_price]));
        	            strcat(string, tmp);
        	        }
        	    }
			    
			    PVCatSel[playerid] = listitem;
			    
			    format(tmp, sizeof(tmp), ""nef" - Private Vehicles > %s", PVCategorys[listitem]);
			    ShowPlayerDialog(playerid, CARBUY_DIALOG + 1, DIALOG_STYLE_LIST, tmp, string, "Select", "Back");
			    return true;
			}
			case CARBUY_DIALOG + 1:
			{
				new idx = 0;
				for(new i = 0; i < sizeof(PVMatrix); i++)
				{
				    if(PVMatrix[i][pv_category] == PVCatSel[playerid])
				    {
				        if(idx == listitem)
				        {
							PlayerPVTMP[playerid][0] = PVMatrix[i][pv_modelid];
							PlayerPVTMP[playerid][1] = PVMatrix[i][pv_price];
							break;
				        }
				        idx++;
				    }
				}

				if(GetPlayerCash(playerid) < PlayerPVTMP[playerid][1])
				{
					SCM(playerid, -1, ""er"You can´t afford that vehicle");
					ShowDialog(playerid, CARBUY_DIALOG);
					return 1;
				}

				ShowDialog(playerid, VEHICLE_PLATE_DIALOG);

				PreviewTmpVeh[playerid] = CreateVehicle_(PlayerPVTMP[playerid][0], -1412.1841, 1027.2224, 1049.1060, 231.6696, 0, 0, -1);
				LinkVehicleToInterior(PreviewTmpVeh[playerid], GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(PreviewTmpVeh[playerid], GetPlayerVirtualWorld(playerid));
			    return true;
			}
			case NEON_DIALOG:
			{
				DestroyPlayerVehicles(playerid);
				
				PVSelect[playerid] = PVVMenuSel[playerid];
				
				new Float:POS[4],
				    vlabel[128];

                format(vlabel, sizeof(vlabel), ""nef_yellow"%s´s \n"white"private vehicle", __GetName(playerid));

				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);

				PlayerPV[playerid][PVSelect[playerid]][PVehicleID] = CreateVehicle_(PlayerPV[playerid][PVSelect[playerid]][Model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
				PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0, -1, -1, -1, 30.0);

				SetVehicleVirtualWorld(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerInterior(playerid));
				SetVehicleNumberPlate(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Plate]);
				SetVehicleToRespawn(PlayerPV[playerid][PVSelect[playerid]][PVehicleID]);

				PutPlayerInVehicle(playerid, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);

			    //Red\nGreen\nBlue\nYellow\nWhite\nPink\nRemove Neon
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
							PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
	     			}
				    case 1:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
					        PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
					}
	    			case 2:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
					        PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        }
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
				    }
				    case 3:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        }
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
					}
	    			case 4:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				        }
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
	       			}
	    			case 5:
				    {
			            if(IsNeonBikeModel(GetVehicleModel(PlayerPV[playerid][PVSelect[playerid]][PVehicleID])))
			            {
			                PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
			                AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
			            }
			            else
			            {
		           		    PlayerPV[playerid][PVSelect[playerid]][Neon1] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        PlayerPV[playerid][PVSelect[playerid]][Neon2] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon1], PlayerPV[playerid][PVSelect[playerid]][PVehicleID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					        AttachDynamicObjectToVehicle(PlayerPV[playerid][PVSelect[playerid]][Neon2], PlayerPV[playerid][PVSelect[playerid]][PVehicleID],  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				        }
				        SendInfo(playerid, "~g~~h~~h~Neon attached", 2500);
	       			}
				    case 6:
				    {
						SendInfo(playerid, "~g~~h~~h~Neon removed", 2500);
				   	}
				}
			    return true;
			}
			case VEHICLE_PLATE_DIALOG:
			{
   				if(strlen(inputtext) < 2 || strlen(inputtext) > 12 || isnull(inputtext))
		    	{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, " ", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, "|", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, ",", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, "'", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "@", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "`", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "\\", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
   			    if(strfind(inputtext, "\"", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "´", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
				if(sscanf(inputtext, "s[13]", PlayerPVTMPPlate[playerid]))
				{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
			 		ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
					return 1;
				}
				mysql_escape_string(PlayerPVTMPPlate[playerid], PlayerPVTMPPlate[playerid], g_SQL_handle, 13);
				
				PVSlotSelect(playerid);
				return true;
			}
			case CUSTOM_PLATE_DIALOG:
			{
   				if(strlen(inputtext) < 2 || strlen(inputtext) > 12 || isnull(inputtext))
		    	{
					SCM(playerid, RED, "Number plate length: 2 - 12 characters");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
				 	return 1;
				}
    			if(strfind(inputtext, "|", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, ",", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, " ", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
    			if(strfind(inputtext, "'", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "@", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "`", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
   			    if(strfind(inputtext, "\\", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
   			    if(strfind(inputtext, "\"", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
			 		ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
			    if(strfind(inputtext, "´", false) != -1)
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
					return 1;
				}
				if(sscanf(inputtext, "s[13]", PlayerPV[playerid][PVVMenuSel[playerid]][Plate]))
				{
					SCM(playerid, RED, ""er"You entered an invalid character!");
				 	ShowDialog(playerid, CUSTOM_PLATE_DIALOG);
				 	return 1;
				}

                mysql_escape_string(PlayerPV[playerid][PVVMenuSel[playerid]][Plate], PlayerPV[playerid][PVVMenuSel[playerid]][Plate], g_SQL_handle, 13);

				DestroyPlayerVehicles(playerid);
				
				PVSelect[playerid] = PVVMenuSel[playerid];

				new Float:POS[4],
				    vlabel[128];

                format(vlabel, sizeof(vlabel), ""nef_yellow"%s´s \n"white"private vehicle", __GetName(playerid));

				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);

				PlayerPV[playerid][PVSelect[playerid]][PVehicleID] = CreateVehicle_(PlayerPV[playerid][PVSelect[playerid]][Model], POS[0], POS[1], POS[2], POS[3], 0, 0, -1);
				PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0, -1, -1, -1, 30.0);

				SetVehicleVirtualWorld(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], GetPlayerInterior(playerid));
				SetVehicleNumberPlate(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Plate]);
				SetVehicleToRespawn(PlayerPV[playerid][PVSelect[playerid]][PVehicleID]);

				PutPlayerInVehicle(playerid, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);

				SendInfo(playerid, "~y~~h~Plate changed!", 2500);
			    return true;
			}
			case BGVOTING_DIALOG:
			{
   				if(CurrentBGMap == BG_VOTING)
				{
				    new string[100];
	 				switch(listitem)
					{
						case 0:
						{
						   	format(string, sizeof(string), "%s(%i) voted for map 'Forest'", __GetName(playerid), playerid);
							BGMSG(string);
							BGMapVotes[0]++;
						}
						case 1:
						{
						   	format(string, sizeof(string), "%s(%i) voted for map 'Quarters'", __GetName(playerid), playerid);
							BGMSG(string);
						   	BGMapVotes[1]++;
						}
						case 2:
						{
						   	format(string, sizeof(string), "%s(%i) voted for map 'Rust'", __GetName(playerid), playerid);
							BGMSG(string);
						   	BGMapVotes[2]++;
						}
						case 3:
						{
						   	format(string, sizeof(string), "%s(%i) voted for map 'Italy'", __GetName(playerid), playerid);
							BGMSG(string);
						   	BGMapVotes[3]++;
						}
						case 4:
						{
						   	format(string, sizeof(string), "%s(%i) voted for map 'Medieval'", __GetName(playerid), playerid);
							BGMSG(string);
						   	BGMapVotes[4]++;
						}
					}
				}
				else
				{
				    SCM(playerid, RED, ""derby_sign" No voting time at the momment!");
				}
			    return true;
			}
		}
	}
	else if(!response)
	{
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0); //1055

 		switch(dialogid)
 		{
			case DIALOG_RACE_RACETYPE, DIALOG_RACE_RACEVW, DIALOG_RACE_RACEVEH, DIALOG_RACE_RACESTARTPOS, DIALOG_RACE_CHECKPOINTS:
			{
			    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
				if(fexist(gstr))
				{
					fremove(gstr);
				}
			    RemoveFromRaceBuilder(playerid);
			    return true;
			}
 		    case CM_DIALOG + 1 .. CM_DIALOG + 14:
 		    {
 		        ShowDialog(playerid, CM_DIALOG);
 		    }
	        case VCONTROL_DIALOG+1:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
     			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
            	SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+2:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+3:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, 0, doors, bonnet, boot, objective);
	        }
	        case VCONTROL_DIALOG+4:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 0, boot, objective);
	        }
	        case VCONTROL_DIALOG+5:
	        {
     			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    return SCM(playerid, -1, ""er"You must be a driver in a vehicle to use vehicle control!");
				}
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 0, objective);
	        }
 		    case GMENU_DIALOG + 1:
 		    {
 		        ShowDialog(playerid, GMENU_DIALOG);
 		        return true;
 		    }
 		    case HELP_DIALOG + 4:
 		    {
 		        ShowPlayerDialog(playerid, HELP_DIALOG + 3, DIALOG_STYLE_LIST, ""nef" - Minigames", ""dl"Race (/race)\n"dl"Derby (/derby)\n"dl"Fallout (/fallout)\n"dl"Gungame (/gungame)\n"dl"Minigun (/minigun)\n"dl"Sniper (/sniper)\n"dl"Death Match (/dm1-4)\n"dl"Team Death Match (/tdm)\n"dl"WAR (/war)", "Select", "");
 		        return true;
 		    }
 		    case HELP_DIALOG + 1, HELP_DIALOG + 2, HELP_DIALOG + 5, HELP_DIALOG + 6:
 		    {
 		        Command_ReProcess(playerid, "/help", false);
 		        return true;
 		    }
 		    case TELE_DIALOG + 1..TELE_DIALOG + 10:
 		    {
 		        ShowDialog(playerid, TELE_DIALOG);
 		        return true;
 		    }
			case PV_SLOT_SELECT_DIALOG:
			{
			    ShowDialog(playerid, VEHICLE_PLATE_DIALOG);
			    return true;
			}
			case NEON_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i", PVVMenuSel[playerid] + 1);
			    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, ""dl"Spawn Vehicle\n"dl"Attach Neon\n"dl"Change Number Plate\n"dl"Change Vehicle Color\n"dl""grey"Sell vehicle", "Select", "Back");
			    return true;
			}
			case CUSTOM_PLATE_DIALOG:
			{
				format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i", PVVMenuSel[playerid] + 1);
			    ShowPlayerDialog(playerid, VMENU_DIALOG + 1, DIALOG_STYLE_LIST, gstr, ""dl"Spawn Vehicle\n"dl"Attach Neon\n"dl"Change Number Plate\n"dl"Change Vehicle Color\n"dl""grey"Sell vehicle", "Select", "Back");
				return true;
			}
			case VMENU_DIALOG + 1:
			{
			    ShowDialog(playerid, VMENU_DIALOG);
			    return true;
			}
 		    case DERBY_VOTING_DIALOG:
 		    {
 		        ShowDialog(playerid, DERBY_VOTING_DIALOG);
 		        return true;
 		    }
 		    case LOGIN_DIALOG:
 		    {
 		        // Skip Login
 		        SkipLogin(playerid);
 		        return true;
 		    }
 		    case REGISTER_DIALOG:
 		    {
 		        SkipRegistration(playerid);
 		        return true;
 		    }
		    case CMDS_DIALOG + 1:
		    {
		        ShowDialog(playerid, CMDS_DIALOG);
		        return true;
		    }
 		    case STREAM_DIALOG:
 		    {
 		        StopAudioStreamForPlayer(playerid);
 		        return true;
			}
			case STREAM_DIALOG+1..STREAM_DIALOG+8:
			{
				ShowDialog(playerid, STREAM_DIALOG);
				return true;
			}
			case VEHICLE_DIALOG+1..VEHICLE_DIALOG+16:
			{
				ShowDialog(playerid, VEHICLE_DIALOG);
				return true;
			}
			case WEAPON_DIALOG+1..WEAPON_DIALOG+6:
			{
				ShowDialog(playerid, WEAPON_DIALOG);
				return true;
			}
			case VEHICLE_PLATE_DIALOG:
			{
			    if(PreviewTmpVeh[playerid] != -1)
			    {
		    		DestroyVehicle_(PreviewTmpVeh[playerid]);
		    		PreviewTmpVeh[playerid] = -1;
				}
				ShowDialog(playerid, CARBUY_DIALOG);
				return true;
			}
			case CARBUY_DIALOG:
			{
   				SetCameraBehindPlayer(playerid);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	TogglePlayerControllable(playerid, true);
		    	return true;
			}
			case CARBUY_DIALOG+1..CARBUY_DIALOG+9:
			{
				ShowDialog(playerid, CARBUY_DIALOG);
				return true;
			}
			case BGVOTING_DIALOG:
			{
		 		ShowDialog(playerid, BGVOTING_DIALOG);
		 		return true;
			}
		}
	}
	return 0;
}

public OnDynamicObjectMoved(objectid)
{
	if(objectid == MellnikGate)
	{
	    IsMellnikGateMoving = false;
	}
	else if(objectid == MellnikRamp)
	{
	    IsMellnikRampMoving = false;
	}
	return 1;
}

public IRC_OnConnect(botid)
{
    IRC_JoinChannel(botid, IRC_CHANNEL);
    IRC_AddToGroup(IRC_GroupID, botid);
    return 1;
}

public IRC_OnDisconnect(botid)
{
	IRC_RemoveFromGroup(IRC_GroupID, botid);
	return 1;
}

public OnReverseDNS(ip[], host[], extra)
{
	format(gstr, sizeof(gstr), "Hostname: %s", host);
	SCM(extra, BLUE, gstr);
	return 1;
}

function:CancelGangCreation(playerid)
{
	PlayerInfo[playerid][GangPosition] = 0;
	PlayerInfo[playerid][GangID] = 0;
	PlayerInfo[playerid][GangName][0] = '\0';
	PlayerInfo[playerid][GangTag][0] = '\0';
 	return 1;
}

function:OnHouseLoadEx(index)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
		new	line[144], buffer[100];

	    HouseInfo[index][iID] = cache_get_row_int(0, 0, g_SQL_handle);
		cache_get_row(0, 1, buffer, g_SQL_handle, sizeof(buffer));
		strmid(HouseInfo[index][Owner], buffer, 0, 25, 25);

        HouseInfo[index][E_x] = cache_get_row_float(0, 2, g_SQL_handle);
        HouseInfo[index][E_y] = cache_get_row_float(0, 3, g_SQL_handle);
        HouseInfo[index][E_z] = cache_get_row_float(0, 4, g_SQL_handle);
		HouseInfo[index][interior] = cache_get_row_int(0, 5, g_SQL_handle);
		HouseInfo[index][price] = cache_get_row_int(0, 6, g_SQL_handle);
		HouseInfo[index][E_score] = cache_get_row_int(0, 7, g_SQL_handle);
		HouseInfo[index][sold] = cache_get_row_int(0, 8, g_SQL_handle);
		HouseInfo[index][locked] = cache_get_row_int(0, 9, g_SQL_handle);

		format(line, sizeof(line), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[index][iID], ToCurrency(HouseInfo[index][price]), HouseInfo[index][E_score], HouseIntTypes[HouseInfo[index][interior]][intname]);

		HouseInfo[index][label] = CreateDynamic3DTextLabel(line, (HouseInfo[index][sold]) ? (0xFF0000FF) : (0x00FF00FF), HouseInfo[index][E_x], HouseInfo[index][E_y], floatadd(HouseInfo[index][E_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
		HouseInfo[index][pickid] = CreateDynamicPickup((HouseInfo[index][sold]) ? (1272) : (1273), 1, HouseInfo[index][E_x], HouseInfo[index][E_y], HouseInfo[index][E_z], -1, -1, -1, 30.0);
		HouseInfo[index][iconid] = CreateDynamicMapIcon(HouseInfo[index][E_x], HouseInfo[index][E_y], HouseInfo[index][E_z], (HouseInfo[index][sold]) ? (32) : (31), 1, 0, -1, -1, 150.0);
		index++;
	}
	return 1;
}

function:OnHouseLoad()
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
		new	line[144], buffer[100], Float:postal[6];

		for(new i = 0; i < rows; i++)
		{
		    HouseInfo[houseid][iID] = cache_get_row_int(i, 0, g_SQL_handle);
			cache_get_row(i, 1, buffer, g_SQL_handle, sizeof(buffer));
			strmid(HouseInfo[houseid][Owner], buffer, 0, 25, 25);

	        HouseInfo[houseid][E_x] = cache_get_row_float(i, 2, g_SQL_handle);
	        HouseInfo[houseid][E_y] = cache_get_row_float(i, 3, g_SQL_handle);
	        HouseInfo[houseid][E_z] = cache_get_row_float(i, 4, g_SQL_handle);
			HouseInfo[houseid][interior] = cache_get_row_int(i, 5, g_SQL_handle);
			HouseInfo[houseid][price] = cache_get_row_int(i, 6, g_SQL_handle);
			HouseInfo[houseid][E_score] = cache_get_row_int(i, 7, g_SQL_handle);
			HouseInfo[houseid][sold] = cache_get_row_int(i, 8, g_SQL_handle);
			HouseInfo[houseid][locked] = cache_get_row_int(i, 9, g_SQL_handle);

			if(!HouseInfo[houseid][sold])
			{
			    format(line, sizeof(line), ""house_mark"\nOwner: ---\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[houseid][iID], ToCurrency(HouseInfo[houseid][price]), HouseInfo[houseid][E_score], HouseIntTypes[HouseInfo[houseid][interior]][intname]);
			}
			else
			{
			    format(line, sizeof(line), ""house_mark"\nOwner: %s\nID: %i\nPrice: $%s\nScore: %i\nInterior: %s", HouseInfo[houseid][Owner], HouseInfo[houseid][iID], ToCurrency(HouseInfo[houseid][price]), HouseInfo[houseid][E_score], HouseIntTypes[HouseInfo[houseid][interior]][intname]);

				for(new ii = 0; ii < MAX_HOUSE_OBJECTS; ii++)
				{
				    cache_get_row(i, ii + 10, buffer, g_SQL_handle, sizeof(buffer));
				    sscanf(buffer, "p<,>iffffff", HouseInfo[houseid][E_Obj_Model][ii], postal[0], postal[1], postal[2], postal[3], postal[4], postal[5]);
					if(HouseInfo[houseid][E_Obj_Model][ii] != 0)
					{
					    format(buffer, sizeof(buffer), "/hmenu to edit\nSlot ID: %i - Object ID: %i", ii + 1, HouseInfo[houseid][E_Obj_Model][ii]);
						HouseInfo[houseid][E_Obj_ObjectID][ii] = CreateDynamicObject(HouseInfo[houseid][E_Obj_Model][ii], postal[0], postal[1], postal[2], postal[3], postal[4], postal[5], HouseInfo[houseid][iID] + 1000, -1, -1);
                        HouseInfo[houseid][E_Obj_Label][ii] = CreateDynamic3DTextLabel(buffer, LIGHT_YELLOW, postal[0], postal[1], postal[2]+0.5, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][iID] + 1000);
					}
				}
			}

            HouseInfo[houseid][date] = cache_get_row_int(i, 20, g_SQL_handle);

			HouseInfo[houseid][label] = CreateDynamic3DTextLabel(line, (HouseInfo[houseid][sold]) ? (0xFF0000FF) : (0x00FF00FF), HouseInfo[houseid][E_x], HouseInfo[houseid][E_y], floatadd(HouseInfo[houseid][E_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
			HouseInfo[houseid][pickid] = CreateDynamicPickup((HouseInfo[houseid][sold]) ? (1272) : (1273), 1, HouseInfo[houseid][E_x], HouseInfo[houseid][E_y], HouseInfo[houseid][E_z], -1, -1, -1, 30.0);
			HouseInfo[houseid][iconid] = CreateDynamicMapIcon(HouseInfo[houseid][E_x], HouseInfo[houseid][E_y], HouseInfo[houseid][E_z], (HouseInfo[houseid][sold]) ? (32) : (31), 1, 0, -1, -1, 150.0);
			
			houseid++;
		}
	}
	printf(">> Loaded %i House(s)", houseid);
	return 1;
}

function:OnPropLoadEx(pindex)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new name[25], string[255];

	    PropInfo[pindex][iID] = cache_get_row_int(0, 0, g_SQL_handle);
	    cache_get_row(0, 1, name, g_SQL_handle, sizeof(name));
	    strmid(PropInfo[pindex][Owner], name, 0, 25, 25);
	    
		PropInfo[pindex][E_x] = cache_get_row_float(0, 2, g_SQL_handle);
		PropInfo[pindex][E_y] = cache_get_row_float(0, 3, g_SQL_handle);
		PropInfo[pindex][E_z] = cache_get_row_float(0, 4, g_SQL_handle);
		PropInfo[pindex][E_Level] = cache_get_row_int(0, 5, g_SQL_handle);
		PropInfo[pindex][sold] = cache_get_row_int(0, 6, g_SQL_handle);
		PropInfo[pindex][date] = cache_get_row_int(0, 7, g_SQL_handle);
		
		format(string, sizeof(string), ""business_mark"\nOwner: ---\nID: %i\nLevel: %i", PropInfo[pindex][iID], PropInfo[pindex][E_Level]);

		PropInfo[pindex][label] = CreateDynamic3DTextLabel(string, -1, PropInfo[pindex][E_x], PropInfo[pindex][E_y], floatadd(PropInfo[pindex][E_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
		PropInfo[pindex][pickid] = CreateDynamicPickup(1274, 1, PropInfo[pindex][E_x], PropInfo[pindex][E_y], PropInfo[pindex][E_z], -1, -1, -1, 30.0);
		PropInfo[pindex][iconid] = CreateDynamicMapIcon(PropInfo[pindex][E_x], PropInfo[pindex][E_y], PropInfo[pindex][E_z], 52, 1, 0, -1, -1, 150.0);
		
		pindex++;
	}
	return 1;
}

function:OnPropLoad()
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new name[25], string[255];

		for(new i = 0; i < rows; i++)
		{
		    PropInfo[propid][iID] = cache_get_row_int(i, 0, g_SQL_handle);
		    cache_get_row(i, 1, name, g_SQL_handle, sizeof(name));
		    strmid(PropInfo[propid][Owner], name, 0, 25, 25);

			PropInfo[propid][E_x] = cache_get_row_float(i, 2, g_SQL_handle);
			PropInfo[propid][E_y] = cache_get_row_float(i, 3, g_SQL_handle);
			PropInfo[propid][E_z] = cache_get_row_float(i, 4, g_SQL_handle);
			PropInfo[propid][E_Level] = cache_get_row_int(i, 5, g_SQL_handle);
			PropInfo[propid][sold] = cache_get_row_int(i, 6, g_SQL_handle);
			PropInfo[propid][date] = cache_get_row_int(i, 7, g_SQL_handle);

			if(!PropInfo[propid][sold])
			{
				format(string, sizeof(string), ""business_mark"\nOwner: ---\n"white"ID: %i\nLevel: %i", PropInfo[propid][iID], PropInfo[propid][E_Level]);
			}
	        else
			{
				format(string, sizeof(string), ""business_mark"\nOwner: %s\n"white"ID: %i\nLevel: %i", PropInfo[propid][Owner], PropInfo[propid][iID], PropInfo[propid][E_Level]);
			}
			PropInfo[propid][label] = CreateDynamic3DTextLabel(string, WHITE, PropInfo[propid][E_x], PropInfo[propid][E_y], floatadd(PropInfo[propid][E_z], 0.3), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 30.0);
			PropInfo[propid][pickid] = CreateDynamicPickup(1274, 1, PropInfo[propid][E_x], PropInfo[propid][E_y], PropInfo[propid][E_z], -1, -1, -1, 30.0);
			PropInfo[propid][iconid] = CreateDynamicMapIcon(PropInfo[propid][E_x], PropInfo[propid][E_y], PropInfo[propid][E_z], (PropInfo[propid][sold]) ? (36) : (52), 1, 0, -1, -1, 150.0);
			
			propid++;
		}
	}

	printf(">> Loaded %i Business(s)", propid);
	return 1;
}

function:OnGangZoneLoadEx(gindex)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    GZoneInfo[gindex][iID] = cache_get_row_int(0, 0, g_SQL_handle);

        format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneInfo[gindex][iID], GZoneInfo[gindex][sZoneName]);

        GZoneInfo[gindex][label] = CreateDynamic3DTextLabel(gstr, WHITE, GZoneInfo[gindex][E_x], GZoneInfo[gindex][E_y], GZoneInfo[gindex][E_z] + 0.3, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 50.0);
        GZoneInfo[gindex][iconid] = CreateDynamicMapIcon(GZoneInfo[gindex][E_x], GZoneInfo[gindex][E_y], GZoneInfo[gindex][E_z], 19, 1, 0, -1, -1, 300.0);
        GZoneInfo[gindex][zoneid] = GangZoneCreate(GZoneInfo[gindex][E_x] - GZONE_SIZE, GZoneInfo[gindex][E_y] - GZONE_SIZE, GZoneInfo[gindex][E_x] + GZONE_SIZE, GZoneInfo[gindex][E_y] + GZONE_SIZE);
        GZoneInfo[gindex][checkid] = CreateDynamicCP(GZoneInfo[gindex][E_x], GZoneInfo[gindex][E_y], GZoneInfo[gindex][E_z], 7.0, 0, -1, -1, 60.0);
		GZoneInfo[gindex][zsphere] = CreateDynamicSphere(GZoneInfo[gindex][E_x], GZoneInfo[gindex][E_y], GZoneInfo[gindex][E_z], GZONE_SIZE, 0, -1, -1);

        GangZoneShowForAll(GZoneInfo[gindex][zoneid], COLOR_NONE);

        gindex++;
	}
	return 1;
}

function:OnGangZoneLoad()
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
	    new Cache:Data = cache_save(g_SQL_handle);
	    
	    for(new i = 0; i < rows; i++)
	    {
	        cache_set_active(Data, g_SQL_handle);
	        
	        GZoneInfo[gzoneid][iID] = cache_get_row_int(i, 0, g_SQL_handle);
	        cache_get_row(i, 1, GZoneInfo[gzoneid][sZoneName], g_SQL_handle, 40);
	        
	        GZoneInfo[gzoneid][E_x] = cache_get_row_float(i, 2, g_SQL_handle);
	        GZoneInfo[gzoneid][E_y] = cache_get_row_float(i, 3, g_SQL_handle);
	        GZoneInfo[gzoneid][E_z] = cache_get_row_float(i, 4, g_SQL_handle);
	        
	        GZoneInfo[gzoneid][localGang] = cache_get_row_int(i, 5, g_SQL_handle);
	        GZoneInfo[gzoneid][iLocked] = cache_get_row_int(i, 6, g_SQL_handle);
	        
	        cache_set_active(Cache:0, g_SQL_handle);
	        
	        if(GZoneInfo[gzoneid][localGang] != 0)
	        {
	    		format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: %s\n"orange"Type /gwar to start an attack!", GZoneInfo[gzoneid][iID], GZoneInfo[gzoneid][sZoneName], GetGangNameByID(GZoneInfo[gzoneid][localGang]));
			}
	        else
	        {
	            format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: ---\n"orange"Type /gwar to start an attack!", GZoneInfo[gzoneid][iID], GZoneInfo[gzoneid][sZoneName]);
	        }
	        
	        GZoneInfo[gzoneid][label] = CreateDynamic3DTextLabel(gstr, WHITE, GZoneInfo[gzoneid][E_x], GZoneInfo[gzoneid][E_y], GZoneInfo[gzoneid][E_z] + 0.3, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 50.0);
	        GZoneInfo[gzoneid][iconid] = CreateDynamicMapIcon(GZoneInfo[gzoneid][E_x], GZoneInfo[gzoneid][E_y], GZoneInfo[gzoneid][E_z], 19, 1, 0, -1, -1, 300.0);
			GZoneInfo[gzoneid][zoneid] = GangZoneCreate(GZoneInfo[gzoneid][E_x] - GZONE_SIZE, GZoneInfo[gzoneid][E_y] - GZONE_SIZE, GZoneInfo[gzoneid][E_x] + GZONE_SIZE, GZoneInfo[gzoneid][E_y] + GZONE_SIZE);
            GZoneInfo[gzoneid][checkid] = CreateDynamicCP(GZoneInfo[gzoneid][E_x], GZoneInfo[gzoneid][E_y], GZoneInfo[gzoneid][E_z], 7.0, 0, -1, -1, 60.0);
            GZoneInfo[gzoneid][zsphere] = CreateDynamicSphere(GZoneInfo[gzoneid][E_x], GZoneInfo[gzoneid][E_y], GZoneInfo[gzoneid][E_z], GZONE_SIZE, 0, -1, -1);

	        gzoneid++;
	    }
	    
	    cache_delete(Data);
	}

	printf(">> Loaded %i Gang Zone(s)", gzoneid);
	return 1;
}

SyncGangZones(playerid)
{
	for(new i = 0; i < gzoneid; i++)
	{
	    if(GZoneInfo[i][localGang] == 0)
	    {
	        GangZoneShowForPlayer(playerid, GZoneInfo[i][zoneid], COLOR_NONE);
	    }
	    else
	    {
			if(PlayerInfo[playerid][GangID] == GZoneInfo[i][localGang])
			{
				GangZoneShowForPlayer(playerid, GZoneInfo[i][zoneid], COLOR_FRIENDLY);
			}
			else
			{
                GangZoneShowForPlayer(playerid, GZoneInfo[i][zoneid], COLOR_HOSTILE);
			}
		}
	}
}

GetGangNameByID(id)
{
	format(gstr, sizeof(gstr), "SELECT `GangName` FROM `gangs` WHERE `ID` = %i;", id);
	new Cache:res = mysql_query(g_SQL_handle, gstr), name[21];
	if(cache_get_row_count(g_SQL_handle) != 0)
	{
		cache_get_row(0, 0, name, g_SQL_handle, sizeof(name));
  	}
  	else
  	{
  	    strmid(name, "UNKNOWN GANG", 0, 20, 20);
  	}
	cache_delete(res);
	return name;
}

GetGZonesByGang(id)
{
	new count = 0;
	for(new i = 0; i < gzoneid; i++)
	{
	    if(GZoneInfo[i][localGang] == id)
	    {
	        ++count;
	    }
	}
	return count;
}

function:LoadHouses()
{
	mysql_tquery(g_SQL_handle, "SELECT * FROM `houses`;", "OnHouseLoad", "");
	return 1;
}

function:LoadProps()
{
	mysql_tquery(g_SQL_handle, "SELECT * FROM `props`;", "OnPropLoad", "");
	return 1;
}

function:LoadGZones()
{
	mysql_tquery(g_SQL_handle, "SELECT * FROM `gzones`;", "OnGangZoneLoad", "");
	return 1;
}

IsPlayerOnDesktop(playerid, afktimems = 5000)
{
	if((PlayerInfo[playerid][tickPlayerUpdate] + afktimems) < (GetTickCount() + 3600000)) return 1;
	return 0;
}

function:BGVoting()
{
	new iTotalVotes = BGMapVotes[0] + BGMapVotes[1] + BGMapVotes[2] + BGMapVotes[3] + BGMapVotes[4];

	if(iTotalVotes == 0)
	{
	    BGMSG("There were no votes! New Voting starting");
	    ExecBGVotingTimer();
		ClearBGVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == gBG_VOTING)
   			{
				ShowDialog(i, BGVOTING_DIALOG);
			}
		}
		return 1;
	}

	new highestmapvotes = -1;
	new draw = 0;

	for(new i = 0; i < sizeof(BGMapVotes); i++)
	{
 		if(BGMapVotes[i] > highestmapvotes && draw == 0)
		{
  			highestmapvotes = BGMapVotes[i];
		}
		else if(BGMapVotes[i] > highestmapvotes && draw != 0)
		{
		    highestmapvotes = BGMapVotes[i];
		    draw = 0;
		}
		else if(BGMapVotes[i] == highestmapvotes)
		{
			draw++;
		}
	}

	if(draw >= 1)
	{
	    BGMSG("Voting was not clear! New Voting starting!");
	    ExecBGVotingTimer();
		ClearBGVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == gBG_VOTING)
   			{
				ShowDialog(i, BGVOTING_DIALOG);
			}
		}
		return 1;
	}

	if(highestmapvotes == BGMapVotes[0])
	{
	    BGMSG("Map 'Forest' won! Let´s start!");
		CurrentBGMap = BG_MAP1;
		ClearBGVotes();
		ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP1, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP1, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP1, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP1, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[1])
	{
	    BGMSG("Map 'Quaters' won! Let´s start!");
	    CurrentBGMap = BG_MAP2;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP2, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP2, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP2, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP2, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[2])
	{
	    BGMSG("Map 'Rust' won! Let´s start!");
	    CurrentBGMap = BG_MAP3;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP3, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP3, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP3, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP3, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[3])
	{
	    BGMSG("Map 'Italy' won! Let´s start!");
	    CurrentBGMap = BG_MAP4;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP4, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP4, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP4, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP4, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	else if(highestmapvotes == BGMapVotes[4])
	{
	    BGMSG("Map 'Medieval' won! Let´s start!");
	    CurrentBGMap = BG_MAP5;
	    ClearBGVotes();
	    ExecBGTimer();

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_VOTING)
		    {
		        SetCameraBehindPlayer(i);
		        TogglePlayerControllable(i, true);
		        SetPlayerVirtualWorld(i, BG_WORLD);
		        ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    	if(BGTeam1Players > BGTeam2Players)
				{
					RandomBGSpawn(i, BG_MAP5, BG_TEAM2);
				    BGTeam2Players++;
				    SetPlayerBGTeam2(i);
				    gTeam[i] = gBG_TEAM2;
				}
				else if(BGTeam1Players < BGTeam2Players)
				{
				  	RandomBGSpawn(i, BG_MAP5, BG_TEAM1);
				   	BGTeam1Players++;
				   	SetPlayerBGTeam1(i);
				   	gTeam[i] = gBG_TEAM1;
				}
				else
				{
			        switch(random(2))
			        {
			            case 0:
			            {
			                SetPlayerBGTeam1(i);
							RandomBGSpawn(i, BG_MAP5, BG_TEAM1);
							BGTeam1Players++;
							gTeam[i] = gBG_TEAM1;
						}
						case 1:
						{
						    SetPlayerBGTeam2(i);
							RandomBGSpawn(i, BG_MAP5, BG_TEAM2);
							BGTeam2Players++;
							gTeam[i] = gBG_TEAM2;
						}
					}
				}
			}
		}
	}
	return 1;
}

function:BattleGround()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
	        SetPlayerBGStaticMeshes(i);
	    }
	}

	CurrentBGMap = BG_VOTING;
	ExecBGVotingTimer();

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
			ShowDialog(i, BGVOTING_DIALOG);
	    }
	}

	ResetBGGameTime();

    BGTeam1Players = 0;
    BGTeam2Players = 0;

	new string[128],
		money;

	if(BGTeam1Kills == BGTeam2Kills)
	{
	    format(string, sizeof(string), "Standoff! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		BGMSG(string);
		BGMSG("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;
	}
	else if(BGTeam1Kills > BGTeam2Kills)
	{
	    format(string, sizeof(string), "Rangers won! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		BGMSG(string);
		BGMSG("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;

		money = (1500 * BGTeam1Players) + (250 * BGTeam2Players);
		
	 	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_TEAM1)
		    {
		        GivePlayerCash(i, money, true, true);
		        GivePlayerScore_(i, 5, true, true);
		        PlayerInfo[i][BGWins]++;
		    }
		}
	}
	else if(BGTeam1Kills < BGTeam2Kills)
	{
	    format(string, sizeof(string), "Spetsnaz won! Rangers kills: %i Spetsnaz kills: %i", BGTeam1Kills, BGTeam2Kills);
		BGMSG(string);
		BGMSG("New Voting starting!");
		BGTeam1Kills = 0;
		BGTeam2Kills = 0;

		money = (1500 * BGTeam1Players) + (250 * BGTeam2Players);

	 	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == gBG_TEAM2)
		    {
		        GivePlayerCash(i, money, true, true);
		        GivePlayerScore_(i, 5, true, true);
		        PlayerInfo[i][BGWins]++;
		    }
		}
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_TEAM2 || gTeam[i] == gBG_VOTING)
	    {
			gTeam[i] = gBG_VOTING;
	    }
	}
	return 1;
}

ExecBGTimer()
{
	KillTimer(tBGTimer);
	tBGTimer = SetTimer("BattleGround", BG_TIME, false);
	return 1;
}

ExecBGVotingTimer()
{
	KillTimer(tBGVoting);
	tBGVoting = SetTimer("BGVoting", BG_VOTING_TIME, false);
	return 1;
}

ClearBGVotes()
{
	BGMapVotes[0] = 0;
	BGMapVotes[1] = 0;
	BGMapVotes[2] = 0;
	BGMapVotes[3] = 0;
	BGMapVotes[4] = 0;
	return 1;
}

function:AutoLogin(playerid)
{
    PlayerInfo[playerid][AllowSpawn] = true;
    PlayerInfo[playerid][bLogged] = true;
    PlayerInfo[playerid][ExitType] = EXIT_LOGGED;
    
    MySQL_LoadPlayer(playerid);
    MySQL_UpdateAccount(playerid);
	return 1;
}

function:RequestRegistration(playerid)
{
	new newtext1[1024], newtext2[128];
    format(newtext2, sizeof(newtext2), ""nef_yellow"Registration "white"- %s", __GetName(playerid));

	format(newtext1, sizeof(newtext1), ""white"Welcome to "SVRLOGO""white"\nHow are you, %s?\n\nDesired name: %s\n\nIt seems that you don´t have an account, please enter a password below:", __GetName(playerid), __GetName(playerid));
	ShowPlayerDialog(playerid, REGISTER_DIALOG, DIALOG_STYLE_PASSWORD, newtext2, newtext1, "Register", "Skip");
	return 1;
}

function:RequestLogin(playerid)
{
	new newtext[1024], newtext2[128];
	
    format(newtext2, sizeof(newtext2), ""nef_yellow"Login "white"- %s", __GetName(playerid));
    format(newtext, sizeof(newtext), ""white"Welcome to "SVRLOGO""white"\nHow are you, %s?\n\nAccount: %s\n\nThe name that you are using is registered! Please enter the password:", __GetName(playerid), __GetName(playerid));
	ShowPlayerDialog(playerid, LOGIN_DIALOG, DIALOG_STYLE_PASSWORD, newtext2, newtext, "Login", "Skip");
    return 1;
}

function:SkipRegistration(playerid)
{
    PlayerInfo[playerid][AllowSpawn] = true;
	
    PlayerInfo[playerid][RegDate] = gettime();
	PlayerInfo[playerid][PayDay] = 60;
	PlayerInfo[playerid][ConnectTime] = gettime();
    PlayerInfo[playerid][Wanteds] = 0;
	PlayerInfo[playerid][LastLogin] = gettime();
	PlayerInfo[playerid][LastNameChange] = 0;
	
	format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerInfo[playerid][Wanteds]);
	PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);
	
	ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""white"NEF", ""white"You have chosen not to register.\n\n"red"Please note:\n"dl"Your statistics won't be saved.\n"dl"You will be limited to some features.\n"dl"\
	You can register at any time using /register.\n\nEnjoy playing here at NEF!", "OK", "");
	
    GameTextForPlayer(playerid, "Welcome", 3000, 4);
	GivePlayerCash(playerid, 20000, false);
	GameTextForPlayer(playerid, "~n~+$20,000~n~Startcash", 3000, 1);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	
	SendWelcomeMSG(playerid);
	return 1;
}

function:SkipLogin(playerid)
{
	if((strlen(__GetName(playerid)) + 4) > 20)
	{
		return Kick(playerid);
	}
	
	new string[255],
	    number = random(998) + 1,
	    newname[26],
	    oldname[26];
	    
	format(newname, sizeof(newname), "%s_%i", __GetName(playerid), number);
	format(oldname, sizeof(oldname), "%s", __GetName(playerid));
	    
    PlayerInfo[playerid][AllowSpawn] = true;
	    
	if(SetPlayerName(playerid, newname) == 1)
	{
		new cname[25];
	    GetPlayerName(playerid, cname, 25);
		PlayerInfo[playerid][sName][0] = '\0';
		strcat(PlayerInfo[playerid][sName], cname, 25);
			
		format(string, sizeof(string), ""white"Your name has been changed to %s because you failed to log in.\n\n"nef_yellow"Please restart the game if this is incorrect.", newname);
		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef"", string, "OK", "");
		
		SendWelcomeMSG(playerid);
		
	    PlayerInfo[playerid][RegDate] = gettime();
		PlayerInfo[playerid][PayDay] = 60;
		PlayerInfo[playerid][ConnectTime] = gettime();
	    PlayerInfo[playerid][Wanteds] = 0;
		PlayerInfo[playerid][LastLogin] = gettime();
		PlayerInfo[playerid][LastNameChange] = 0;

		format(gstr, sizeof(gstr), "~y~[] ~w~%i", PlayerInfo[playerid][Wanteds]);
		PlayerTextDrawSetString(playerid, TXTWantedsTD[playerid], gstr);

		SrvStat[2]++;

        format(gstr, sizeof(gstr), "UPDATE `online` SET `name` = '%s' WHERE `name` = '%s';", newname, oldname);
        mysql_tquery(g_SQL_handle, gstr, "", "");

	    GameTextForPlayer(playerid, "Welcome", 3000, 4);
  		GivePlayerCash(playerid, 20000, false);
    	GameTextForPlayer(playerid, "~n~+$20,000~n~Startcash", 3000, 1);
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else
	{
	    Kick(playerid);
	}
	return 1;
}

GetPlayingTimeFormat(playerid)
{
    PlayerInfo[playerid][TotalTime] = PlayerInfo[playerid][TotalTime] + (gettime() - PlayerInfo[playerid][ConnectTime]);
    PlayerInfo[playerid][ConnectTime] = gettime();

    new ptime[32],
        time[3];

    time[0] = floatround(PlayerInfo[playerid][TotalTime] / 3600, floatround_floor);
    time[1] = floatround(PlayerInfo[playerid][TotalTime] / 60, floatround_floor) % 60;
    time[2] = floatround(PlayerInfo[playerid][TotalTime] % 60, floatround_floor);

	format(ptime, sizeof(ptime), "%ih %02im %02is", time[0], time[1], time[2]);
	return ptime;
}

CarSpawner(playerid, model, respawn_delay = -1)
{
	if(model == 432 || model == 425 || model == 447 || model == 571 || model == 568 || model == 539 || model == 545 || model == 464)
	{
	    if(PlayerInfo[playerid][Level] != MAX_ADMIN_LEVEL)
	    {
            return SCM(playerid, -1, ""er"Only founders can spawn this");
		}
	}
	
	if(model == 520 && PlayerInfo[playerid][VIP] == 0 && PlayerInfo[playerid][Level] == 0) return SCM(playerid, -1, ""er"Only admins can spawn this");
	
	if(model == 538 || model == 537 || model == 449)
	{
		return SCM(playerid, -1, ""er"Cannot spawn these vehicles");
	}
	
	DestroyPlayerVehicles(playerid);
		
	new Float:POS[4],
		string[255],
		color1 = (random(128) + 127),
		color2 = (random(128) + 127);

	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	GetPlayerFacingAngle(playerid, POS[3]);

	PlayerInfo[playerid][Vehicle] = CreateVehicle_(model, POS[0], POS[1], POS[2], POS[3], color1, color2, respawn_delay);

	SetVehicleZAngle(PlayerInfo[playerid][Vehicle], POS[3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetVehicleVirtualWorld(PlayerInfo[playerid][Vehicle], GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(PlayerInfo[playerid][Vehicle], GetPlayerInterior(playerid));
	SetVehicleNumberPlate(PlayerInfo[playerid][Vehicle], "{3399ff}S{FFFFFF}tun{F81414}T");
	SetVehicleToRespawn(PlayerInfo[playerid][Vehicle]);
	if(IsComponentIdCompatible(GetVehicleModel(PlayerInfo[playerid][Vehicle]), 1010)) AddVehicleComponent(PlayerInfo[playerid][Vehicle], 1010);
	PutPlayerInVehicle(playerid, PlayerInfo[playerid][Vehicle], 0);
	format(string, sizeof(string), "Vehicle Spawned!~n~~b~~h~~h~Name: ~w~%s~n~~g~~h~~h~Model: ~w~%i~n~~r~~h~~h~Colors: ~w~%i, %i", GetVehicleNameById(PlayerInfo[playerid][Vehicle]), GetVehicleModel(PlayerInfo[playerid][Vehicle]), color1, color2);
	SendInfo(playerid, string, 2500);
	
	if(PlayerInfo[playerid][bGod])
	{
	    ResetPlayerWeapons(playerid);
	}
	return 1;
}

// --
// -- Messages
// --

FalloutMSG(const string[])
{
	new finstring[200];
	format(finstring, sizeof(finstring), ""fallout_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if((IsPlayerAvail(i)) && (gTeam[i] == FALLOUT))
		{
			SCM(i, GREY, finstring);
		}
	}
}

DerbyMSG(const string[])
{
	new finstring[200];
	format(finstring, sizeof(finstring), ""derby_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if((IsPlayerAvail(i)) && (gTeam[i] == DERBY))
		{
			SCM(i, -1, finstring);
		}
	}
}

BGMSG(const string[])
{
	new finstring[200];
	format(finstring, sizeof(finstring), ""tdm_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerAvail(i) && (gTeam[i] == gBG_TEAM1 || gTeam[i] == gBG_VOTING || gTeam[i] == gBG_TEAM2))
		{
  			SCM(i, -1, finstring);
		}
	}
}

RaceMSG(const string[])
{
	new finstring[200];
	format(finstring, sizeof(finstring), ""race_sign" %s", string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if((IsPlayerAvail(i)) && (gTeam[i] == gRACE))
		{
			SCM(i, -1, finstring);
		}
	}
}

GangMSG(gGangID, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
	    {
			if(PlayerInfo[i][GangID] == gGangID && PlayerInfo[i][GangPosition] != GANG_POS_NONE)
			{
				SCM(i, RED, string);
			}
		}
	}
}

AdminMSG(color, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if((IsPlayerAvail(i)) && (PlayerInfo[i][Level] >= 1))
		{
			SCM(i, color, string);
		}
	}
}

VIPMSG(color, const msg[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if((IsPlayerAvail(i)) && (PlayerInfo[i][VIP] == 1 || PlayerInfo[i][Level] > 0))
		{
			SCM(i, color, msg);
		}
	}
}

MySQL_FetchGangInfo(playerid, gGangID)
{
	format(gstr, sizeof(gstr), "SELECT * FROM `gangs` WHERE `ID` = %i;", gGangID);
	mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_FETCH_GANG_INFO, playerid, g_SQL_handle);
}

MySQL_UpdateGangScore(gGangID, value)
{
	format(gstr2, sizeof(gstr2), "UPDATE `gangs` SET `GangScore` = `GangScore` + %i WHERE `ID` = %i LIMIT 1;", value, gGangID);
	mysql_tquery(g_SQL_handle, gstr2, "", "");
}

MySQL_LoadPlayer(playerid)
{
	format(gstr2, sizeof(gstr2), "SELECT * FROM `accounts` WHERE `Name` = '%s';", __GetName(playerid));
	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_LOAD_PLAYER, playerid, g_SQL_handle);
}

MySQL_LoadPlayerGang(playerid)
{
	format(gstr2, sizeof(gstr2), "SELECT `GangName`, `GangTag` FROM `gangs` WHERE `ID` = %i;", PlayerInfo[playerid][GangID]);
	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_LOAD_PLAYER_GANG, playerid, g_SQL_handle);
}

MySQL_AssignRankIfExist(playerid)
{
  	format(gstr2, sizeof(gstr2), "SELECT `GangPosition` FROM `accounts` WHERE `GangID` = %i AND `Name` = '%s';", PlayerInfo[playerid][GangID], PlayerInfo[playerid][GangAssignRank]);
  	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_ASSIGN_RANK, playerid, g_SQL_handle);
}

MySQL_KickFromGangIfExist(playerid)
{
  	format(gstr2, sizeof(gstr2), "SELECT `GangPosition` FROM `accounts` WHERE `GangID` = %i AND `Name` = '%s';", PlayerInfo[playerid][GangID], PlayerInfo[playerid][GangKickMem]);
  	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_KICK_FROM_GANG, playerid, g_SQL_handle);
}

MySQL_SavePlayer(playerid, bool:save_pv)
{
	if(!islogged(playerid)) return 1;
	
	new query[1400],
	 	query2[600];

    PlayerInfo[playerid][TotalTime] = PlayerInfo[playerid][TotalTime] + (gettime() - PlayerInfo[playerid][ConnectTime]);
    PlayerInfo[playerid][ConnectTime] = gettime();

	format(query, sizeof(query), "UPDATE `accounts` SET `Level` = %i, `Score` = %i, `Money` = %i, `Bank` = %i, `Kills` = %i, `Deaths` = %i, `Time` = %i, \
	`Reaction` = %i, `PayDay` = %i, `Houses` = %i, `Props` = %i, `GangPosition` = %i, `GangID` = %i, `AdditionalPVSlots` = %i, `AdditionalToySlots` = %i, \
	`AdditionalHouseSlots` = %i, `AdditionalPropSlots` = %i, `AdditionalHouseObjSlots` = %i, `DerbyWins` = %i",
		PlayerInfo[playerid][Level],
		GetPlayerScore_(playerid),
		GetPlayerCash(playerid),
		PlayerInfo[playerid][Bank],
		PlayerInfo[playerid][Kills],
		PlayerInfo[playerid][Deaths],
		PlayerInfo[playerid][TotalTime],
		PlayerInfo[playerid][Reaction],
		PlayerInfo[playerid][PayDay],
		PlayerInfo[playerid][Houses],
		PlayerInfo[playerid][Props],
		PlayerInfo[playerid][GangPosition],
		PlayerInfo[playerid][GangID],
		PlayerInfo[playerid][AdditionalPVSlots],
		PlayerInfo[playerid][AdditionalToySlots],
		PlayerInfo[playerid][AdditionalHouseSlots],
		PlayerInfo[playerid][AdditionalPropSlots],
		PlayerInfo[playerid][AdditionalHouseObjSlots],
		PlayerInfo[playerid][DerbyWins]);

    format(query2, sizeof(query2), ", `Color` = %i, `Credits` = %i, `Medkits` = %i, `Skin` = %i, `GungameWins` = %i, `RaceWins` = %i, `BGWins` = %i, `FalloutWins` = %i, `Wanteds` = %i, `VIP` = %i, `LastNameChange` = %i WHERE `Name` = '%s' LIMIT 1;",
		PlayerInfo[playerid][SavedColor],
		GetCredits(playerid),
		PlayerInfo[playerid][Medkits],
		GetPlayerSkin(playerid),
		PlayerInfo[playerid][GungameWins],
		PlayerInfo[playerid][RaceWins],
		PlayerInfo[playerid][BGWins],
		PlayerInfo[playerid][FalloutWins],
		PlayerInfo[playerid][Wanteds],
		PlayerInfo[playerid][VIP],
		PlayerInfo[playerid][LastNameChange],
		__GetName(playerid));

	strcat(query, query2);
	mysql_tquery(g_SQL_handle, query, "", "");

	format(query, sizeof(query), "UPDATE `accounts` SET `Achievements` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i' WHERE `Name` = '%s' LIMIT 1;",
	    pAch[playerid][E_ach_styler],
	    pAch[playerid][E_ach_grimreaper],
	    pAch[playerid][E_ach_masskiller],
	    pAch[playerid][E_ach_eliteracer],
	    pAch[playerid][E_ach_toofast],
	    pAch[playerid][E_ach_scorewhore],
	    pAch[playerid][E_ach_destroyer],
	    pAch[playerid][E_ach_restinpeace],
	    pAch[playerid][E_ach_silentkiller],
		pAch[playerid][E_ach_oneshot2kills],
		pAch[playerid][E_ach_deepimpact],
		pAch[playerid][E_ach_skydiver],
		pAch[playerid][E_ach_biker],
		pAch[playerid][E_ach_bmxmaster],
		__GetName(playerid));
    mysql_tquery(g_SQL_handle, query, "", "");

	if(save_pv)
	{
		format(query, sizeof(query), "UPDATE `accounts` SET `PV_Slot0` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s', `PV_Slot1` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s' WHERE `Name` = '%s' LIMIT 1;",
			PlayerPV[playerid][0][Model],
			PlayerPV[playerid][0][PaintJob],
			PlayerPV[playerid][0][Color1],
			PlayerPV[playerid][0][Color2],
			PlayerPV[playerid][0][Mod1],
			PlayerPV[playerid][0][Mod2],
			PlayerPV[playerid][0][Mod3],
			PlayerPV[playerid][0][Mod4],
			PlayerPV[playerid][0][Mod5],
			PlayerPV[playerid][0][Mod6],
			PlayerPV[playerid][0][Mod7],
			PlayerPV[playerid][0][Mod8],
			PlayerPV[playerid][0][Mod9],
			PlayerPV[playerid][0][Mod10],
			PlayerPV[playerid][0][Mod11],
			PlayerPV[playerid][0][Mod12],
			PlayerPV[playerid][0][Mod13],
			PlayerPV[playerid][0][Mod14],
			PlayerPV[playerid][0][Mod15],
			PlayerPV[playerid][0][Mod16],
			PlayerPV[playerid][0][Mod17],
			PlayerPV[playerid][0][Plate],
			PlayerPV[playerid][1][Model],
			PlayerPV[playerid][1][PaintJob],
			PlayerPV[playerid][1][Color1],
			PlayerPV[playerid][1][Color2],
			PlayerPV[playerid][1][Mod1],
			PlayerPV[playerid][1][Mod2],
			PlayerPV[playerid][1][Mod3],
			PlayerPV[playerid][1][Mod4],
			PlayerPV[playerid][1][Mod5],
			PlayerPV[playerid][1][Mod6],
			PlayerPV[playerid][1][Mod7],
			PlayerPV[playerid][1][Mod8],
			PlayerPV[playerid][1][Mod9],
			PlayerPV[playerid][1][Mod10],
			PlayerPV[playerid][1][Mod11],
			PlayerPV[playerid][1][Mod12],
			PlayerPV[playerid][1][Mod13],
			PlayerPV[playerid][1][Mod14],
			PlayerPV[playerid][1][Mod15],
			PlayerPV[playerid][1][Mod16],
			PlayerPV[playerid][1][Mod17],
			PlayerPV[playerid][1][Plate],
			__GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `PV_Slot2` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s', `PV_Slot3` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s' WHERE `Name` = '%s' LIMIT 1;",
			PlayerPV[playerid][2][Model],
			PlayerPV[playerid][2][PaintJob],
			PlayerPV[playerid][2][Color1],
			PlayerPV[playerid][2][Color2],
			PlayerPV[playerid][2][Mod1],
			PlayerPV[playerid][2][Mod2],
			PlayerPV[playerid][2][Mod3],
			PlayerPV[playerid][2][Mod4],
			PlayerPV[playerid][2][Mod5],
			PlayerPV[playerid][2][Mod6],
			PlayerPV[playerid][2][Mod7],
			PlayerPV[playerid][2][Mod8],
			PlayerPV[playerid][2][Mod9],
			PlayerPV[playerid][2][Mod10],
			PlayerPV[playerid][2][Mod11],
			PlayerPV[playerid][2][Mod12],
			PlayerPV[playerid][2][Mod13],
			PlayerPV[playerid][2][Mod14],
			PlayerPV[playerid][2][Mod15],
			PlayerPV[playerid][2][Mod16],
			PlayerPV[playerid][2][Mod17],
			PlayerPV[playerid][2][Plate],
			PlayerPV[playerid][3][Model],
			PlayerPV[playerid][3][PaintJob],
			PlayerPV[playerid][3][Color1],
			PlayerPV[playerid][3][Color2],
			PlayerPV[playerid][3][Mod1],
			PlayerPV[playerid][3][Mod2],
			PlayerPV[playerid][3][Mod3],
			PlayerPV[playerid][3][Mod4],
			PlayerPV[playerid][3][Mod5],
			PlayerPV[playerid][3][Mod6],
			PlayerPV[playerid][3][Mod7],
			PlayerPV[playerid][3][Mod8],
			PlayerPV[playerid][3][Mod9],
			PlayerPV[playerid][3][Mod10],
			PlayerPV[playerid][3][Mod11],
			PlayerPV[playerid][3][Mod12],
			PlayerPV[playerid][3][Mod13],
			PlayerPV[playerid][3][Mod14],
			PlayerPV[playerid][3][Mod15],
			PlayerPV[playerid][3][Mod16],
			PlayerPV[playerid][3][Mod17],
			PlayerPV[playerid][3][Plate],
			__GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `PV_Slot4` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s', `PV_Slot5` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s' WHERE `Name` = '%s' LIMIT 1;",
			PlayerPV[playerid][4][Model],
			PlayerPV[playerid][4][PaintJob],
			PlayerPV[playerid][4][Color1],
			PlayerPV[playerid][4][Color2],
			PlayerPV[playerid][4][Mod1],
			PlayerPV[playerid][4][Mod2],
			PlayerPV[playerid][4][Mod3],
			PlayerPV[playerid][4][Mod4],
			PlayerPV[playerid][4][Mod5],
			PlayerPV[playerid][4][Mod6],
			PlayerPV[playerid][4][Mod7],
			PlayerPV[playerid][4][Mod8],
			PlayerPV[playerid][4][Mod9],
			PlayerPV[playerid][4][Mod10],
			PlayerPV[playerid][4][Mod11],
			PlayerPV[playerid][4][Mod12],
			PlayerPV[playerid][4][Mod13],
			PlayerPV[playerid][4][Mod14],
			PlayerPV[playerid][4][Mod15],
			PlayerPV[playerid][4][Mod16],
			PlayerPV[playerid][4][Mod17],
			PlayerPV[playerid][4][Plate],
			PlayerPV[playerid][5][Model],
			PlayerPV[playerid][5][PaintJob],
			PlayerPV[playerid][5][Color1],
			PlayerPV[playerid][5][Color2],
			PlayerPV[playerid][5][Mod1],
			PlayerPV[playerid][5][Mod2],
			PlayerPV[playerid][5][Mod3],
			PlayerPV[playerid][5][Mod4],
			PlayerPV[playerid][5][Mod5],
			PlayerPV[playerid][5][Mod6],
			PlayerPV[playerid][5][Mod7],
			PlayerPV[playerid][5][Mod8],
			PlayerPV[playerid][5][Mod9],
			PlayerPV[playerid][5][Mod10],
			PlayerPV[playerid][5][Mod11],
			PlayerPV[playerid][5][Mod12],
			PlayerPV[playerid][5][Mod13],
			PlayerPV[playerid][5][Mod14],
			PlayerPV[playerid][5][Mod15],
			PlayerPV[playerid][5][Mod16],
			PlayerPV[playerid][5][Mod17],
			PlayerPV[playerid][5][Plate],
			__GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `PV_Slot6` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s', `PV_Slot7` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%s' WHERE `Name` = '%s' LIMIT 1;",
			PlayerPV[playerid][6][Model],
			PlayerPV[playerid][6][PaintJob],
			PlayerPV[playerid][6][Color1],
			PlayerPV[playerid][6][Color2],
			PlayerPV[playerid][6][Mod1],
			PlayerPV[playerid][6][Mod2],
			PlayerPV[playerid][6][Mod3],
			PlayerPV[playerid][6][Mod4],
			PlayerPV[playerid][6][Mod5],
			PlayerPV[playerid][6][Mod6],
			PlayerPV[playerid][6][Mod7],
			PlayerPV[playerid][6][Mod8],
			PlayerPV[playerid][6][Mod9],
			PlayerPV[playerid][6][Mod10],
			PlayerPV[playerid][6][Mod11],
			PlayerPV[playerid][6][Mod12],
			PlayerPV[playerid][6][Mod13],
			PlayerPV[playerid][6][Mod14],
			PlayerPV[playerid][6][Mod15],
			PlayerPV[playerid][6][Mod16],
			PlayerPV[playerid][6][Mod17],
			PlayerPV[playerid][6][Plate],
			PlayerPV[playerid][7][Model],
			PlayerPV[playerid][7][PaintJob],
			PlayerPV[playerid][7][Color1],
			PlayerPV[playerid][7][Color2],
			PlayerPV[playerid][7][Mod1],
			PlayerPV[playerid][7][Mod2],
			PlayerPV[playerid][7][Mod3],
			PlayerPV[playerid][7][Mod4],
			PlayerPV[playerid][7][Mod5],
			PlayerPV[playerid][7][Mod6],
			PlayerPV[playerid][7][Mod7],
			PlayerPV[playerid][7][Mod8],
			PlayerPV[playerid][7][Mod9],
			PlayerPV[playerid][7][Mod10],
			PlayerPV[playerid][7][Mod11],
			PlayerPV[playerid][7][Mod12],
			PlayerPV[playerid][7][Mod13],
			PlayerPV[playerid][7][Mod14],
			PlayerPV[playerid][7][Mod15],
			PlayerPV[playerid][7][Mod16],
			PlayerPV[playerid][7][Mod17],
			PlayerPV[playerid][7][Plate],
			__GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");
	}
    return 1;
}

MySQL_UpdatePlayerPass(playerid, hash[])
{
	new escape[33];
	mysql_escape_string(hash, escape, g_SQL_handle, 33);
	format(gstr2, sizeof(gstr2), "UPDATE `accounts` SET `Hash` = MD5('%s') WHERE `Name` = '%s' LIMIT 1;", escape, __GetName(playerid));
 	mysql_tquery(g_SQL_handle, gstr2, "", "");
}

MySQL_FetchGangMemberNames(playerid, gGangID)
{
	format(gstr, sizeof(gstr), "SELECT `Name`, `GangPosition` FROM `accounts` WHERE `GangID` = %i ORDER BY `GangPosition` DESC;", gGangID);
	mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_FETCH_GANG_MEMBER_NAMES, playerid, g_SQL_handle);
}

MySQL_BanIP(const ip[])
{
 	format(gstr, sizeof(gstr), "INSERT INTO `blacklist` VALUES (NULL, '%s');", ip);
 	mysql_tquery(g_SQL_handle, gstr, "", "");
}

MySQL_ExistGang(playerid)
{
	format(gstr, sizeof(gstr), "SELECT `ID` FROM `gangs` WHERE `GangName` = '%s';", PlayerInfo[playerid][GangName]);
	mysql_tquery(g_SQL_handle, gstr, "OnQueryFinish", "siii", gstr, THREAD_GANG_EXIST, playerid, g_SQL_handle);
}

MySQL_CreateGang(playerid)
{
    format(gstr2, sizeof(gstr2), "INSERT INTO `gangs` VALUES (NULL, '%s', '%s', 0, %i);", PlayerInfo[playerid][GangName], PlayerInfo[playerid][GangTag], gettime());
    mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_CREATE_GANG, playerid, g_SQL_handle);
}

MySQL_DestroyGang(playerid, gangname[])
{
	format(gstr2, sizeof(gstr2), "SELECT `ID`, `GangName` FROM `gangs` WHERE `GangName` = '%s';", gangname);
	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_GANG_DESTROY, playerid, g_SQL_handle);
}

MySQL_GangRename(playerid, newgangname[], newgangtag[])
{
	format(gstr2, sizeof(gstr2), "SELECT `ID` FROM `gangs` WHERE `GangName` = '%s';", newgangname);
	mysql_tquery(g_SQL_handle, gstr2, "OnGangRenameAttempt", "iss", playerid, newgangname, newgangtag);
}

MySQL_CreateAccount(playerid, password[])
{
	PlayerInfo[playerid][LastLogin] = gettime();
	PlayerInfo[playerid][LastNameChange] = 0;
	
    new query[350], escape[33];
	mysql_escape_string(password, escape, g_SQL_handle, 33);
    format(query, sizeof(query), "INSERT INTO `accounts` (`Name`, `Color`, `Hash`, `IP`, `GangPosition`, `GangID`, `RegDate`, `LastLogin`) VALUES ('%s', 0, MD5('%s'), '%s', 0, 0, %i, %i);", __GetName(playerid), escape, __GetIP(playerid), gettime(), PlayerInfo[playerid][LastLogin]);
	mysql_tquery(g_SQL_handle, query, "OnQueryFinish", "siii", query, THREAD_CREATE_ACCOUNT, playerid, g_SQL_handle);
}

MySQL_CreateAccount2(playerid, password[])
{
	PlayerInfo[playerid][LastLogin] = gettime();
	PlayerInfo[playerid][LastNameChange] = 0;

    new query[350], escape[33];
	mysql_escape_string(password, escape, g_SQL_handle, 33);
    format(query, sizeof(query), "INSERT INTO `accounts` (`Name`, `Color`, `Hash`, `IP`, `GangPosition`, `GangID`, `RegDate`, `LastLogin`) VALUES ('%s', 0, MD5('%s'), '%s', 0, 0, %i, %i);", __GetName(playerid), escape, __GetIP(playerid), gettime(), PlayerInfo[playerid][LastLogin]);
	mysql_tquery(g_SQL_handle, query, "OnQueryFinish", "siii", query, THREAD_CREATE_ACCOUNT2, playerid, g_SQL_handle);
}

MySQL_UpdateAccount(playerid)
{
    if(PlayerInfo[playerid][bLogged])
    {
	    format(gstr2, sizeof(gstr2), "UPDATE `accounts` SET `IP` = '%s', `LastLogin` = %i WHERE `Name` = '%s' LIMIT 1;", __GetIP(playerid), gettime(), __GetName(playerid));
	    mysql_tquery(g_SQL_handle, gstr2, "", "");
	}
}

MySQL_CreateBan(PlayerName[], AdminName[], Reason[], lift = 0)
{
	new query[300], rescape[129], aescape[25], pescape[25];
	mysql_escape_string(Reason, rescape, g_SQL_handle, 129);
	mysql_escape_string(AdminName, aescape, g_SQL_handle, 25);
	mysql_escape_string(PlayerName, pescape, g_SQL_handle, 25);
    format(query, sizeof(query), "INSERT INTO `bans` VALUES (NULL, '%s', '%s', '%s', %i, %i);", pescape, aescape, rescape, lift, gettime());
    mysql_tquery(g_SQL_handle, query, "", "");
}

MySQL_SaveGangZone(id)
{
	format(gstr, sizeof(gstr), "UPDATE `gzones` SET `localgang` = %i, `locked` = %i WHERE `id` = %i;", GZoneInfo[id][localGang], GZoneInfo[id][iLocked], GZoneInfo[id][iID]);
	mysql_tquery(g_SQL_handle, gstr, "", "");
}

MySQL_SaveHouse(house, bool:save_items = false)
{
    new query[1024];
    
    format(query, sizeof(query), "UPDATE `houses` SET `Owner` = '%s', `XPos` = %.2f, `YPos` = %.2f, `ZPos` = %.2f, `Interior` = %i, `Price` = %i, `Score` = %i, `Sold` = %i, `Locked` = %i, `Date` = %i WHERE `ID` = %i LIMIT 1;",
		HouseInfo[house][Owner],
		HouseInfo[house][E_x],
		HouseInfo[house][E_y],
		HouseInfo[house][E_z],
		HouseInfo[house][interior],
		HouseInfo[house][price],
		HouseInfo[house][E_score],
		HouseInfo[house][sold],
		HouseInfo[house][locked],
		HouseInfo[house][date],
		HouseInfo[house][iID]);
    mysql_tquery(g_SQL_handle, query, "", "");
		
	if(save_items)
	{
		new Float:POS[6];
		for(new i = 0; i < MAX_HOUSE_OBJECTS; i++)
		{
			if(HouseInfo[house][E_Obj_Model][i] != 0)
			{
			    GetDynamicObjectPos(HouseInfo[house][E_Obj_ObjectID][i], POS[0], POS[1], POS[2]);
			    GetDynamicObjectRot(HouseInfo[house][E_Obj_ObjectID][i], POS[3], POS[4], POS[5]);

			    format(query, sizeof(query), "UPDATE `houses` SET `ObjSlot%i` = '%i,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f' WHERE `ID` = %i LIMIT 1;",
				    i,
				    HouseInfo[house][E_Obj_Model][i],
				    POS[0],
				    POS[1],
				    POS[2],
				    POS[3],
				    POS[4],
				    POS[5],
				    HouseInfo[house][iID]);
			}
			else
			{
			    format(query, sizeof(query), "UPDATE `houses` SET `ObjSlot%i` = '0,0.0,0.0,0.0,0.0,0.0,0.0' WHERE `ID` = %i LIMIT 1;", i, HouseInfo[house][iID]);
			}
			mysql_tquery(g_SQL_handle, query, "", "");
		}
	}
}

MySQL_SaveProp(propertyid)
{
    new query[300];
    format(query, sizeof(query), "UPDATE `props` SET `Owner` = '%s', `XPos` = %.2f, `YPos` = %.2f, `ZPos` = %.2f, `Level` = %i, `Sold` = %i, `Date` = %i WHERE `ID` = %i LIMIT 1;",
		PropInfo[propertyid][Owner],
		PropInfo[propertyid][E_x],
		PropInfo[propertyid][E_y],
		PropInfo[propertyid][E_z],
		PropInfo[propertyid][E_Level],
		PropInfo[propertyid][sold],
		PropInfo[propertyid][date],
		PropInfo[propertyid][iID]);

	mysql_tquery(g_SQL_handle, query, "", "");
}

MySQL_FinalGangKick(playerid)
{
	format(gstr2, sizeof(gstr2), "UPDATE `accounts` SET `GangID` = 0, `GangPosition` = 0 WHERE `Name` = '%s' LIMIT 1;", PlayerInfo[playerid][GangKickMem]);
	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_KICK_FROM_GANG_2, playerid, g_SQL_handle);
}

MySQL_FinalRankAssign(playerid)
{
	format(gstr2, sizeof(gstr2), "UPDATE `accounts` SET `GangPosition` = %i WHERE `Name` = '%s' LIMIT 1;", PlayerInfo[playerid][RankSelected], PlayerInfo[playerid][GangAssignRank]);
	mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_ASSIGN_RANK_2, playerid, g_SQL_handle);
}

MySQL_CleanUp()
{
	mysql_tquery(g_SQL_handle, "TRUNCATE TABLE `online`;", "", "");
}

MySQL_Connect()
{
    g_SQL_handle = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS, SQL_PORT, true);

    if(!mysql_errno(g_SQL_handle))
    {
        printf("#Successfully connected to MySQL Server @ %s:%i", SQL_HOST, SQL_PORT);
    }
    else
    {
        printf("#Failed to connect, %i. Second try...", mysql_errno(g_SQL_handle));
        g_SQL_handle = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS, SQL_PORT, true);
        
        if(!mysql_errno(g_SQL_handle))
        {
            printf("#Successfully connected to MySQL Server with second try @ %s:%i", SQL_HOST, SQL_PORT);
        }
        else
        {
            printf("#Failed to connect to %s:%i Aborting...", SQL_HOST, SQL_PORT);
            print("====================="SVRNAME" "CURRENT_VERSION"=====================");
            SendRconCommand("exit");
        }
    }
}

LoadStores()
{
	new file[50],
		count = GetTickCount() + 3600000,
		lstring[128];

	for(new b = 0; b < MAX_BANKS; b++)
	{
	    format(file, sizeof(file), "/Store/Banks/%i.ini", b);
		if(fexist(file))
		{
			BankPickOut[b] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		BankPickInt[b] = CreateDynamicPickup(1559, 1, 2304.69, -16.19, 26.74, (b + 1000), -1, -1, 50.0);
	  		BankPickMenu[b] = CreateDynamicPickup(1559, 1, 2311.63, -3.89, 26.74, (b + 1000), -1, -1, 50.0);
	  		BankMIcon[b] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 25, -1, 0, 0, -1, 300.0);
	  		format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
    for(new a = 0; a < MAX_AMMUNATIONS; a++)
	{
	    format(file, sizeof(file), "/Store/Ammunations/%i.ini", a);
		if(fexist(file))
		{
			AmmunationPickOut[a] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		AmmunationPickInt[a] = CreateDynamicPickup(1559, 1, 315.81, -143.65, 999.60, (a + 1000), 7, -1, 50.0);
			AmmunationMIcon[a] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 6, -1, 0, 0, -1, 300.0);
			format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
			CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new bs = 0; bs < MAX_BURGERSHOTS; bs++)
	{
	    format(file, sizeof(file), "/Store/BurgerShots/%i.ini", bs);
		if(fexist(file))
		{
			BurgerPickOut[bs] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		BurgerPickInt[bs] = CreateDynamicPickup(1559, 1, 362.87, -75.17, 1001.50, (bs + 1000), 10, -1, 50.0);
		   	BurgerMIcon[bs] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 10, -1, 0, 0, -1, 300.0);
		   	format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new cb = 0; cb < MAX_CLUCKINBELLS; cb++)
	{
	    format(file, sizeof(file), "/Store/CluckinBells/%i.ini", cb);
		if(fexist(file))
		{
			CluckinBellPickOut[cb] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		CluckinBellPickInt[cb] = CreateDynamicPickup(1559, 1, 364.87, -11.74, 1001.85, (cb + 1000), 9, -1, 50.0);
			CluckinBellMIcon[cb] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 14, -1, 0, 0, -1, 300.0);
			format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new ps = 0; ps < MAX_PIZZASTACKS; ps++)
	{
	    format(file, sizeof(file), "/Store/WellStackedPizzas/%i.ini", ps);
		if(fexist(file))
		{
			PizzaPickOut[ps] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		PizzaPickInt[ps] = CreateDynamicPickup(1559, 1, 372.36, -133.50, 1001.49, (ps + 1000), 5, -1, 50.0);
			PizzaMIcon[ps] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 29, -1, 0, 0, -1, 300.0);
			format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
	for(new tfs = 0; tfs < MAX_TFS; tfs++)
	{
	    format(file, sizeof(file), "/Store/TwentyFourSeven/%i.ini", tfs);
		if(fexist(file))
		{
			TFSPickOut[tfs] = CreateDynamicPickup(1559, 1, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 0, 0, -1, 50.0);
	  		TFSPickInt[tfs] = CreateDynamicPickup(1559, 1, -25.884, -185.868, 1003.546, (tfs + 1000), 17, -1, 50.0);
			TFSMIcon[tfs] = CreateDynamicMapIcon(dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ"), 17, -1, 0, 0, -1, 300.0);
			format(lstring, sizeof(lstring), ""white"["yellow"Store"white"]\n%s", dini_Get(file, "StoreName"));
	  		CreateDynamic3DTextLabel(lstring, YELLOW, dini_Float(file, "PickOutX"), dini_Float(file, "PickOutY"), dini_Float(file, "PickOutZ") + 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 25.0);
		}
	}
 	printf("#Stores loaded in %i ms", (GetTickCount() + 3600000) - count);
 	return 1;
}

RemoveFirstQueueFloor()
{
	for(new i = 0; i < sizeof(ElevatorQueue) - 1; i++)
	{
	    ElevatorQueue[i] = ElevatorQueue[i + 1];
	}
	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;
	return 1;
}

AddFloorToQueue(floorid)
{
	new slot = -1;
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	    {
	        ReadNextFloorInQueue();
		}
	    return 1;
	}
	return 0;
}

ResetElevatorQueue()
{
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    ElevatorQueue[i] = INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}
	return 1;
}

IsFloorInQueue(floorid)
{
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == floorid)
	    {
	        return 1;
		}
	}
	return 0;
}

ReadNextFloorInQueue()
{
	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	{
	    return 0;
	}
	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);
	return 1;
}

DidPlayerRequestElevator(playerid)
{
	for(new i = 0; i < sizeof(FloorRequestedBy); i++)
	{
	    if(FloorRequestedBy[i] == playerid)
	    {
	        return 1;
		}
	}
	return 0;
}

ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i = 0; i < sizeof(ElevatorQueue); i++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	    {
	        strcat(string, "{FF0000}");
		}
	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, LIFT_DIALOG, DIALOG_STYLE_LIST, ""nef" - Admin Elevator", string, "Accept", "Cancel");
	return 1;
}

CallElevator(playerid, floorid)
{
	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	{
	    return 0;
	}
	
	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);
	return 1;
}

Elevator_Initialize()
{
	Obj_Elevator = CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] = CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] = CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator = Create3DTextLabel("Press 'F' to use elevator", NEF_YELLOW, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i = 0; i < sizeof(Obj_FloorDoors); i++)
	{
	    Obj_FloorDoors[i][0] = CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] = CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "%s\nPress 'F' to call Elevator", FloorNames[i]);

		z = (i == 0) ? (13.4713) : (13.4713 + 8.7396 + ((i-1) * 5.45155));

		Label_Floors[i] = Create3DTextLabel(string, RED, 1783.9799, -1300.7660, z, 10.5, 0, 1);
	}

	Floor_OpenDoors(0);
	Elevator_OpenDoors();
	return 1;
}

DestroyElevator()
{
	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i = 0; i < sizeof(Obj_FloorDoors); i++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}
	return 1;
}

Elevator_OpenDoors()
{
	new Float:POS[3];
	GetObjectPos(Obj_ElevatorDoors[0], POS[0], POS[1], POS[2]);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, POS[1], POS[2], DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, POS[1], POS[2], DOORS_SPEED);
	return 1;
}

Elevator_CloseDoors()
{
    if(ElevatorState == ELEVATOR_STATE_MOVING)
	{
		return 0;
	}
	new Float:POS[3];
	GetObjectPos(Obj_ElevatorDoors[0], POS[0], POS[1], POS[2]);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, POS[1], POS[2], DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, POS[1], POS[2], DOORS_SPEED);
	return 1;
}

Floor_OpenDoors(floorid)
{
    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	return 1;
}

Floor_CloseDoors(floorid)
{
    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	return 1;
}

Elevator_MoveToFloor(floorid)
{
	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, false, "i", floorid);

	return 1;
}

GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	else
	{
		GetPlayerFacingAngle(playerid, a);
	}
	
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

GetVehicleModelID(vehiclename[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(VehicleNames[i], vehiclename, true) != -1)
		return i + 400;
	}
	return INVALID_VEHICLE_ID;
}

RandomSpawn(playerid, bool:_load_old_pos = false)
{
	if(_load_old_pos)
	{
	    LoadPos(playerid);
	}
	else
	{
		new rand = random(4);
		SetPlayerPosEx(playerid, WorldSpawns[rand][0], WorldSpawns[rand][1], floatadd(WorldSpawns[rand][2], 3.0));
		SetPlayerFacingAngle(playerid, WorldSpawns[rand][3]);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

RandomBGSpawn(playerid, Map, Team)
{
	SetPlayerHealth(playerid, 100.0);
	switch(Map)
	{
	    case BG_MAP1:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M1_T1_Spawns[BGSpawn][0], BG_M1_T1_Spawns[BGSpawn][1], floatadd(BG_M1_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M1_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M1_T2_Spawns[BGSpawn][0], BG_M1_T2_Spawns[BGSpawn][1], floatadd(BG_M1_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M1_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP2:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M2_T1_Spawns[BGSpawn][0], BG_M2_T1_Spawns[BGSpawn][1], floatadd(BG_M2_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M2_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M2_T2_Spawns[BGSpawn][0], BG_M2_T2_Spawns[BGSpawn][1], floatadd(BG_M2_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M2_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP3:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M3_T1_Spawns[BGSpawn][0], BG_M3_T1_Spawns[BGSpawn][1], floatadd(BG_M3_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M3_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M3_T2_Spawns[BGSpawn][0], BG_M3_T2_Spawns[BGSpawn][1], floatadd(BG_M3_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M3_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
   	    case BG_MAP4:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M4_T1_Spawns[BGSpawn][0], BG_M4_T1_Spawns[BGSpawn][1], floatadd(BG_M4_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M4_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M4_T2_Spawns[BGSpawn][0], BG_M4_T2_Spawns[BGSpawn][1], floatadd(BG_M4_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M4_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	    case BG_MAP5:
	    {
	        switch(Team)
	        {
	            case BG_TEAM1:
	            {
			        new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M5_T1_Spawns[BGSpawn][0], BG_M5_T1_Spawns[BGSpawn][1], floatadd(BG_M5_T1_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M5_T1_Spawns[BGSpawn][3]);
				}
	            case BG_TEAM2:
	            {
    				new BGSpawn = random(4);
					SetPlayerPosEx(playerid, BG_M5_T2_Spawns[BGSpawn][0], BG_M5_T2_Spawns[BGSpawn][1], floatadd(BG_M5_T2_Spawns[BGSpawn][2], 3.0));
					SetPlayerFacingAngle(playerid, BG_M5_T2_Spawns[BGSpawn][3]);
	            }
			}
	    }
	}
	LoadMap(playerid);
	return 1;
}

IsNumeric(string[])
{
	for(new i = 0, j = strlen(string); i < j; i++)
	{
		if(string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

RandomWeapon(playerid)
{
	ResetPlayerWeapons(playerid);

	if(PlayerInfo[playerid][bGod]) return 1;

	switch(random(8)) // melee
	{
	    case 0: GivePlayerWeapon(playerid, 2, 1);
	    case 1: GivePlayerWeapon(playerid, 3, 1);
	    case 2: GivePlayerWeapon(playerid, 4, 1);
	    case 3: GivePlayerWeapon(playerid, 5, 1);
	    case 4: GivePlayerWeapon(playerid, 6, 1);
	    case 5: GivePlayerWeapon(playerid, 7, 1);
	    case 6: GivePlayerWeapon(playerid, 8, 1);
	    case 7: GivePlayerWeapon(playerid, 9, 1);
	}

	switch(random(3)) // pistol
	{
	    case 0: GivePlayerWeapon(playerid, 22, 99999);
	    case 1: GivePlayerWeapon(playerid, 23, 99999);
	    case 2: GivePlayerWeapon(playerid, 24, 99999);
	}

	switch(random(3)) // shotgun
	{
	    case 0: GivePlayerWeapon(playerid, 25, 99999);
	    case 1: GivePlayerWeapon(playerid, 26, 99999);
	    case 2: GivePlayerWeapon(playerid, 27, 99999);
	}

	switch(random(3)) // mp
	{
	    case 0: GivePlayerWeapon(playerid, 28, 99999);
	    case 1: GivePlayerWeapon(playerid, 29, 99999);
	    case 2: GivePlayerWeapon(playerid, 32, 99999);
	}

	switch(random(2)) //assault
	{
	    case 0: GivePlayerWeapon(playerid, 30, 99999);
	    case 1: GivePlayerWeapon(playerid, 31, 99999);
	}

	switch(random(2)) // rifle
	{
	    case 0: GivePlayerWeapon(playerid, 33, 99999);
	    case 1: GivePlayerWeapon(playerid, 34, 99999);
	}

	switch(random(6)) // heavy
	{
	    case 2: GivePlayerWeapon(playerid, 37, 99999);
	}

	switch(random(3)) // nade
	{
	    case 2: GivePlayerWeapon(playerid, 16, 3);
	}

	switch(random(5))
	{
	    case 1: GivePlayerWeapon(playerid, 41, 50);
	    case 2: GivePlayerWeapon(playerid, 42, 50);
	    case 3: GivePlayerWeapon(playerid, 43, 1);
	}
    return 1;
}

CreateTextdraws()
{
    new count = GetTickCount() + 3600000;
	
	TXTSpeedo_Main = TextDrawCreate(126.500000, 333.666687, "KM/H");
	TextDrawLetterSize(TXTSpeedo_Main, 0.209998, 0.905833);
	TextDrawAlignment(TXTSpeedo_Main, 1);
	TextDrawColor(TXTSpeedo_Main, 0x73B1ED55);
	TextDrawSetShadow(TXTSpeedo_Main, 0);
	TextDrawSetOutline(TXTSpeedo_Main, 0);
	TextDrawBackgroundColor(TXTSpeedo_Main, 51);
	TextDrawFont(TXTSpeedo_Main, 1);
	TextDrawSetProportional(TXTSpeedo_Main, 1);

	TXTRandomInfo = TextDrawCreate(636.000000, 421.000000, "Don't wanna get killed? Type ~g~~h~~h~/god");
	TextDrawAlignment(TXTRandomInfo, 3);
	TextDrawBackgroundColor(TXTRandomInfo, 168430202);
	TextDrawFont(TXTRandomInfo, 1);
	TextDrawLetterSize(TXTRandomInfo, 0.259999, 1.199998);
	TextDrawColor(TXTRandomInfo, -1);
	TextDrawSetOutline(TXTRandomInfo, 1);
	TextDrawSetProportional(TXTRandomInfo, 1);
	TextDrawSetSelectable(TXTRandomInfo, 0);

	TXTVersionInfo = TextDrawCreate(4.000000, 422.000000, ""CURRENT_VERSION" - "SVRURL"");
	TextDrawBackgroundColor(TXTVersionInfo, 168430202);
	TextDrawFont(TXTVersionInfo, 1);
	TextDrawLetterSize(TXTVersionInfo, 0.259999, 1.199998);
	TextDrawColor(TXTVersionInfo, -1);
	TextDrawSetOutline(TXTVersionInfo, 1);
	TextDrawSetProportional(TXTVersionInfo, 1);
	TextDrawSetSelectable(TXTVersionInfo, 0);

	// TXTOnJoin[0] = TextDrawCreate(323.000000, 188.000000, "~y~~h~S~w~tunt ~g~~h~~h~E~w~volution~n~~n~"SVRURLWWW"");
	TXTOnJoin[0] = TextDrawCreate(323.000000, 188.000000, "~y~~h~N~w~ew ~g~~h~~h~E~w~volution ~r~~h~~h~F~w~reeroam~n~~n~"SVRURLWWW"");
	TextDrawAlignment(TXTOnJoin[0], 2);
	TextDrawBackgroundColor(TXTOnJoin[0], 168430202);
	TextDrawFont(TXTOnJoin[0], 1);
	TextDrawLetterSize(TXTOnJoin[0], 0.519999, 2.200000);
	TextDrawColor(TXTOnJoin[0], -1);
	TextDrawSetOutline(TXTOnJoin[0], 1);
	TextDrawSetProportional(TXTOnJoin[0], 1);
	TextDrawSetSelectable(TXTOnJoin[0], 0);

	TXTOnJoin[1] = TextDrawCreate(330.000000, 319.000000, "LOADING GAME ...");
	TextDrawAlignment(TXTOnJoin[1], 2);
	TextDrawBackgroundColor(TXTOnJoin[1], 255);
	TextDrawFont(TXTOnJoin[1], 2);
	TextDrawLetterSize(TXTOnJoin[1], 0.449999, 1.100000);
	TextDrawColor(TXTOnJoin[1], -16843069);
	TextDrawSetOutline(TXTOnJoin[1], 1);
	TextDrawSetProportional(TXTOnJoin[1], 1);
	TextDrawSetSelectable(TXTOnJoin[1], 0);

	JailTD = TextDrawCreate(393.777587, 372.835693, "LD_BUM:bum1");
	TextDrawLetterSize(JailTD, 0.000000, 0.000000);
	TextDrawTextSize(JailTD, 102.666786, -108.515617);
	TextDrawAlignment(JailTD, 3);
	TextDrawColor(JailTD, -1);
	TextDrawFont(JailTD, 4);

	TXTFooter = TextDrawCreate(322.000000, 437.000000, "~y~~h~/derby ~b~~h~0 ~y~~h~/cnr ~b~~h~0 ~y~~h~/race ~b~~h~0 ~y~~h~/fallout ~b~~h~0 ~y~~h~/gungame ~b~~h~0 ~y~~h~/tdm ~b~~h~0 ~y~~h~/war ~b~~h~0 ~y~~h~/minigun ~b~~h~0 ~y~~h~/sniper ~b~~h~0");
	TextDrawAlignment(TXTFooter, 2);
	TextDrawBackgroundColor(TXTFooter, 168430202);
	TextDrawFont(TXTFooter, 2);
	TextDrawLetterSize(TXTFooter, 0.219999, 1.000000);
	TextDrawColor(TXTFooter, -1);
	TextDrawSetOutline(TXTFooter, 1);
	TextDrawSetProportional(TXTFooter, 1);
	TextDrawSetSelectable(TXTFooter, 0);

	TXTFooterBlack = TextDrawCreate(300.000000, 436.000000, "     ");
	TextDrawAlignment(TXTFooterBlack, 2);
	TextDrawBackgroundColor(TXTFooterBlack, 255);
	TextDrawFont(TXTFooterBlack, 1);
	TextDrawLetterSize(TXTFooterBlack, 0.500000, 1.000000);
	TextDrawColor(TXTFooterBlack, -1);
	TextDrawSetOutline(TXTFooterBlack, 0);
	TextDrawSetProportional(TXTFooterBlack, 1);
	TextDrawSetShadow(TXTFooterBlack, 1);
	TextDrawUseBox(TXTFooterBlack, 1);
	TextDrawBoxColor(TXTFooterBlack, 168430165);
	TextDrawTextSize(TXTFooterBlack, 0.000000, -1051.000000);
	TextDrawSetSelectable(TXTFooterBlack, 0);

	AchTD[0] = TextDrawCreate(495.000000, 190.000000, "Box0");
	TextDrawBackgroundColor(AchTD[0], 255);
	TextDrawFont(AchTD[0], 1);
	TextDrawLetterSize(AchTD[0], 0.000000, 9.100000);
	TextDrawColor(AchTD[0], -1);
	TextDrawSetOutline(AchTD[0], 0);
	TextDrawSetProportional(AchTD[0], 1);
	TextDrawSetShadow(AchTD[0], 1);
	TextDrawUseBox(AchTD[0], 1);
	TextDrawBoxColor(AchTD[0], 90);
	TextDrawTextSize(AchTD[0], 141.000000, 0.000000);

	AchTD[1] = TextDrawCreate(495.000000, 190.000000, "Box1");
	TextDrawBackgroundColor(AchTD[1], 255);
	TextDrawFont(AchTD[1], 1);
	TextDrawLetterSize(AchTD[1], 0.000000, 4.299999);
	TextDrawColor(AchTD[1], -1);
	TextDrawSetOutline(AchTD[1], 0);
	TextDrawSetProportional(AchTD[1], 1);
	TextDrawSetShadow(AchTD[1], 1);
	TextDrawUseBox(AchTD[1], 1);
	TextDrawBoxColor(AchTD[1], -241);
	TextDrawTextSize(AchTD[1], 141.000000, 0.000000);

	AchTD[2] = TextDrawCreate(187.000000, 191.000000, "ACHIEVEMENT UNLOCKED");
	TextDrawBackgroundColor(AchTD[2], 255);
	TextDrawFont(AchTD[2], 1);
	TextDrawLetterSize(AchTD[2], 0.649999, 2.000000);
	TextDrawColor(AchTD[2], 16711935);
	TextDrawSetOutline(AchTD[2], 0);
	TextDrawSetProportional(AchTD[2], 1);
	TextDrawSetShadow(AchTD[2], 0);

	AchTD[3] = TextDrawCreate(495.000000, 194.000000, "Box2");
	TextDrawBackgroundColor(AchTD[3], 255);
	TextDrawFont(AchTD[3], 1);
	TextDrawLetterSize(AchTD[3], 0.000000, 9.100000);
	TextDrawColor(AchTD[3], -1);
	TextDrawSetOutline(AchTD[3], 0);
	TextDrawSetProportional(AchTD[3], 1);
	TextDrawSetShadow(AchTD[3], 1);
	TextDrawUseBox(AchTD[3], 1);
	TextDrawBoxColor(AchTD[3], 90);
	TextDrawTextSize(AchTD[3], 141.000000, 0.000000);

	AchTD[4] = TextDrawCreate(450.000000, 192.000000, "Box3");
	TextDrawBackgroundColor(AchTD[4], 255);
	TextDrawFont(AchTD[4], 1);
	TextDrawLetterSize(AchTD[4], 0.000000, 1.700000);
	TextDrawColor(AchTD[4], -1);
	TextDrawSetOutline(AchTD[4], 0);
	TextDrawSetProportional(AchTD[4], 1);
	TextDrawSetShadow(AchTD[4], 1);
	TextDrawUseBox(AchTD[4], 1);
	TextDrawBoxColor(AchTD[4], 16711690);
	TextDrawTextSize(AchTD[4], 182.000000, 0.000000);

	AchTD[5] = TextDrawCreate(317.000000, 193.000000, "]                                            ]");
	TextDrawAlignment(AchTD[5], 2);
	TextDrawBackgroundColor(AchTD[5], 255);
	TextDrawFont(AchTD[5], 2);
	TextDrawLetterSize(AchTD[5], 0.500000, 1.600000);
	TextDrawColor(AchTD[5], 16711935);
	TextDrawSetOutline(AchTD[5], 0);
	TextDrawSetProportional(AchTD[5], 1);
	TextDrawSetShadow(AchTD[5], 0);

	ErrorTD = TextDrawCreate(385.777801, 335.004394, "LD_CHAT:badchat");
	TextDrawLetterSize(ErrorTD, 0.449999, 1.600000);
	TextDrawTextSize(ErrorTD, 42.222240, 31.360012);
	TextDrawAlignment(ErrorTD, 2);
	TextDrawColor(ErrorTD, -1);
	TextDrawSetShadow(ErrorTD, 0);
	TextDrawSetOutline(ErrorTD, 1);
	TextDrawBackgroundColor(ErrorTD, 51);
	TextDrawFont(ErrorTD, 4);
	TextDrawSetProportional(ErrorTD, 1);

	NewMsgTD = TextDrawCreate(370.222778, 329.031158, "LD_CHAT:goodcha");
	TextDrawLetterSize(NewMsgTD, 0.000000, 0.000000);
	TextDrawTextSize(NewMsgTD, 32.444427, 28.871093);
	TextDrawAlignment(NewMsgTD, 2);
	TextDrawColor(NewMsgTD, -1);
	TextDrawSetShadow(NewMsgTD, 0);
	TextDrawSetOutline(NewMsgTD, 0);
	TextDrawFont(NewMsgTD, 4);

	CheckTD = TextDrawCreate(370.222778, 329.031158, "LD_CHAT:thumbup");
	TextDrawLetterSize(CheckTD, 0.000000, 0.000000);
	TextDrawTextSize(CheckTD, 45.777770, 31.359985);
	TextDrawAlignment(CheckTD, 1);
	TextDrawColor(CheckTD, -1);
	TextDrawSetShadow(CheckTD, 0);
	TextDrawSetOutline(CheckTD, 0);
	TextDrawFont(CheckTD, 4);
	
	TXTGodTD = TextDrawCreate(499.000000, 106.000000, "~y~~h~GODMODE ENABLED");
	TextDrawBackgroundColor(TXTGodTD, 168430202);
	TextDrawFont(TXTGodTD, 1);
	TextDrawLetterSize(TXTGodTD, 0.319999, 1.399999);
	TextDrawColor(TXTGodTD, -1);
	TextDrawSetOutline(TXTGodTD, 1);
	TextDrawSetProportional(TXTGodTD, 1);
	TextDrawUseBox(TXTGodTD, 1);
	TextDrawBoxColor(TXTGodTD, 168430202);
	TextDrawTextSize(TXTGodTD, 607.000000, 3.000000);
	TextDrawSetSelectable(TXTGodTD, 0);

	TXTWelcome[0] = TextDrawCreate(435.000000, 106.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawBackgroundColor(TXTWelcome[0], 255);
	TextDrawFont(TXTWelcome[0], 1);
	TextDrawLetterSize(TXTWelcome[0], 0.790000, 1.200000);
	TextDrawColor(TXTWelcome[0], -1);
	TextDrawSetOutline(TXTWelcome[0], 0);
	TextDrawSetProportional(TXTWelcome[0], 1);
	TextDrawSetShadow(TXTWelcome[0], 1);
	TextDrawUseBox(TXTWelcome[0], 1);
	TextDrawBoxColor(TXTWelcome[0], 168430165);
	TextDrawTextSize(TXTWelcome[0], 607.000000, 9.000000);
	TextDrawSetSelectable(TXTWelcome[0], 0);

	// TXTWelcome[1] = TextDrawCreate(520.000000, 118.000000, "~y~~h~S~w~tunt ~g~~h~~h~E~w~volution~n~~n~samp."SVRURL":7777");
	TXTWelcome[1] = TextDrawCreate(520.000000, 118.000000, "~y~~h~N~w~ew ~g~~h~~h~E~w~volution ~r~~h~~h~F~w~reeroam~n~~n~samp."SVRURL":7777");
	TextDrawAlignment(TXTWelcome[1], 2);
	TextDrawBackgroundColor(TXTWelcome[1], 168430202);
	TextDrawFont(TXTWelcome[1], 1);
	TextDrawLetterSize(TXTWelcome[1], 0.329998, 1.399999);
	TextDrawColor(TXTWelcome[1], -1);
	TextDrawSetOutline(TXTWelcome[1], 1);
	TextDrawSetProportional(TXTWelcome[1], 1);
	TextDrawSetSelectable(TXTWelcome[1], 0);

	TXTWelcome[2] = TextDrawCreate(438.000000, 172.000000, "Welcome on "SVRSC" server. Check out these~n~commands:~n~~n~  ~g~~h~~h~/rules~n~  ~r~~h~~h~/cmds~n~  ~p~/help~n~~n~~w~How do I earn money and score?");
	TextDrawBackgroundColor(TXTWelcome[2], 168430202);
	TextDrawFont(TXTWelcome[2], 1);
	TextDrawLetterSize(TXTWelcome[2], 0.229999, 1.099997);
	TextDrawColor(TXTWelcome[2], -1);
	TextDrawSetOutline(TXTWelcome[2], 1);
	TextDrawSetProportional(TXTWelcome[2], 1);
	TextDrawSetSelectable(TXTWelcome[2], 0);

	TXTWelcome[3] = TextDrawCreate(438.000000, 243.000000, "~n~~n~  ~b~~h~~h~See /help for more information.~n~~n~~w~Discuss on our forums!~n~~n~  ~p~Visit "SVRFORUM"");
	TextDrawBackgroundColor(TXTWelcome[3], 168430202);
	TextDrawFont(TXTWelcome[3], 1);
	TextDrawLetterSize(TXTWelcome[3], 0.229999, 1.099997);
	TextDrawColor(TXTWelcome[3], -1);
	TextDrawSetOutline(TXTWelcome[3], 1);
	TextDrawSetProportional(TXTWelcome[3], 1);
	TextDrawSetSelectable(TXTWelcome[3], 0);

	TXTWelcome[4] = TextDrawCreate(469.000000, 336.000000, "Enjoy playing on "SVRSC"!");
	TextDrawBackgroundColor(TXTWelcome[4], 168430202);
	TextDrawFont(TXTWelcome[4], 1);
	TextDrawLetterSize(TXTWelcome[4], 0.259999, 1.199998);
	TextDrawColor(TXTWelcome[4], -1);
	TextDrawSetOutline(TXTWelcome[4], 1);
	TextDrawSetProportional(TXTWelcome[4], 1);
	TextDrawSetSelectable(TXTWelcome[4], 0);

    TXTToyInfo = TextDrawCreate(431.000000, 341.000000, "Hold ~r~space ~w~to rotate your view~n~press ~r~escape ~w~to cancel~n~once you are finished click on the ~r~save ~w~icon");
	TextDrawBackgroundColor(TXTToyInfo, 255);
	TextDrawFont(TXTToyInfo, 0);
	TextDrawLetterSize(TXTToyInfo, 0.400000, 1.200000);
	TextDrawColor(TXTToyInfo, -1);
	TextDrawSetOutline(TXTToyInfo, 1);
	TextDrawSetProportional(TXTToyInfo, 1);

    TXTToyBox = TextDrawCreate(822.000000, 335.000000, "      ");
	TextDrawAlignment(TXTToyBox, 2);
	TextDrawBackgroundColor(TXTToyBox, 255);
	TextDrawFont(TXTToyBox, 1);
	TextDrawLetterSize(TXTToyBox, 0.500000, 1.000000);
	TextDrawColor(TXTToyBox, -1);
	TextDrawSetOutline(TXTToyBox, 0);
	TextDrawSetProportional(TXTToyBox, 1);
	TextDrawSetShadow(TXTToyBox, 1);
	TextDrawUseBox(TXTToyBox, 1);
	TextDrawBoxColor(TXTToyBox, 168430207);
	TextDrawTextSize(TXTToyBox, 1.000000, -804.000000);

    TXTRaceSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Race~>~");
	TextDrawAlignment(TXTRaceSign, 2);
	TextDrawBackgroundColor(TXTRaceSign, 168430202);
	TextDrawFont(TXTRaceSign, 0);
	TextDrawLetterSize(TXTRaceSign, 0.479999, 1.299998);
	TextDrawColor(TXTRaceSign, -1);
	TextDrawSetOutline(TXTRaceSign, 1);
	TextDrawSetProportional(TXTRaceSign, 1);
	TextDrawSetSelectable(TXTRaceSign, 0);

    TXTGunGameSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Gungame~>~");
	TextDrawAlignment(TXTGunGameSign, 2);
	TextDrawBackgroundColor(TXTGunGameSign, 168430202);
	TextDrawFont(TXTGunGameSign, 0);
	TextDrawLetterSize(TXTGunGameSign, 0.479999, 1.299998);
	TextDrawColor(TXTGunGameSign, -1);
	TextDrawSetOutline(TXTGunGameSign, 1);
	TextDrawSetProportional(TXTGunGameSign, 1);
	TextDrawSetSelectable(TXTGunGameSign, 0);

    TXTTeleportInfo = TextDrawCreate(500.000000, 5.000000, "~g~~h~~h~Mellnik ~w~has gone to ~b~~h~~h~/trackmania");
	TextDrawBackgroundColor(TXTTeleportInfo, 168430202);
	TextDrawFont(TXTTeleportInfo, 1);
	TextDrawLetterSize(TXTTeleportInfo, 0.189999, 1.099998);
	TextDrawColor(TXTTeleportInfo, -1);
	TextDrawSetOutline(TXTTeleportInfo, 1);
	TextDrawSetProportional(TXTTeleportInfo, 1);
	TextDrawSetSelectable(TXTTeleportInfo, 0);

    TXTFalloutInfo = TextDrawCreate(513.000000, 344.000000, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~0~n~~w~Status: ~g~~h~~h~Waiting");
	TextDrawBackgroundColor(TXTFalloutInfo, 168430202);
	TextDrawFont(TXTFalloutInfo, 1);
	TextDrawLetterSize(TXTFalloutInfo, 0.270000, 1.099997);
	TextDrawColor(TXTFalloutInfo, -1);
	TextDrawSetOutline(TXTFalloutInfo, 1);
	TextDrawSetProportional(TXTFalloutInfo, 1);
	TextDrawUseBox(TXTFalloutInfo, 1);
	TextDrawBoxColor(TXTFalloutInfo, 168430165);
	TextDrawTextSize(TXTFalloutInfo, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTFalloutInfo, 0);

    TXTFalloutSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Fallout~>~");
	TextDrawAlignment(TXTFalloutSign, 2);
	TextDrawBackgroundColor(TXTFalloutSign, 168430202);
	TextDrawFont(TXTFalloutSign, 0);
	TextDrawLetterSize(TXTFalloutSign, 0.479999, 1.299998);
	TextDrawColor(TXTFalloutSign, -1);
	TextDrawSetOutline(TXTFalloutSign, 1);
	TextDrawSetProportional(TXTFalloutSign, 1);
	TextDrawSetSelectable(TXTFalloutSign, 0);

    TXTTdmSign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~TDM~>~");
	TextDrawAlignment(TXTTdmSign, 2);
	TextDrawBackgroundColor(TXTTdmSign, 168430202);
	TextDrawFont(TXTTdmSign, 0);
	TextDrawLetterSize(TXTTdmSign, 0.479999, 1.299998);
	TextDrawColor(TXTTdmSign, -1);
	TextDrawSetOutline(TXTTdmSign, 1);
	TextDrawSetProportional(TXTTdmSign, 1);
	TextDrawSetSelectable(TXTTdmSign, 0);

    TXTTdmInfo = TextDrawCreate(513.000000, 344.000000, "Timelft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--~n~~w~Map: ~g~~h~~h~Voting~n~~w~Ranger Kills: ~g~~h~~h~---~n~~w~Spetsnaz Kills: ~g~~h~~h~---");
	TextDrawBackgroundColor(TXTTdmInfo, 168430202);
	TextDrawFont(TXTTdmInfo, 1);
	TextDrawLetterSize(TXTTdmInfo, 0.270000, 1.099997);
	TextDrawColor(TXTTdmInfo, -1);
	TextDrawSetOutline(TXTTdmInfo, 1);
	TextDrawSetProportional(TXTTdmInfo, 1);
	TextDrawUseBox(TXTTdmInfo, 1);
	TextDrawBoxColor(TXTTdmInfo, 168430165);
	TextDrawTextSize(TXTTdmInfo, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTTdmInfo, 0);

    TXTDerbySign = TextDrawCreate(77.000000, 315.000000, "~<~~y~~h~Derby~>~");
	TextDrawAlignment(TXTDerbySign, 2);
	TextDrawBackgroundColor(TXTDerbySign, 168430202);
	TextDrawFont(TXTDerbySign, 0);
	TextDrawLetterSize(TXTDerbySign, 0.479999, 1.299998);
	TextDrawColor(TXTDerbySign, -1);
	TextDrawSetOutline(TXTDerbySign, 1);
	TextDrawSetProportional(TXTDerbySign, 1);
	TextDrawSetSelectable(TXTDerbySign, 0);

    TXTDerbyInfo = TextDrawCreate(513.000000, 344.000000, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~0/20~n~~w~Map: ~g~~h~~h~Voting");
	TextDrawBackgroundColor(TXTDerbyInfo, 168430202);
	TextDrawFont(TXTDerbyInfo, 1);
	TextDrawLetterSize(TXTDerbyInfo, 0.270000, 1.099997);
	TextDrawColor(TXTDerbyInfo, -1);
	TextDrawSetOutline(TXTDerbyInfo, 1);
	TextDrawSetProportional(TXTDerbyInfo, 1);
	TextDrawUseBox(TXTDerbyInfo, 1);
	TextDrawBoxColor(TXTDerbyInfo, 168430165);
	TextDrawTextSize(TXTDerbyInfo, 640.000000, -7.000000);
	TextDrawSetSelectable(TXTDerbyInfo, 0);

    TXTLoading = TextDrawCreate(319.000000, 208.000000, "Loading...");
	TextDrawAlignment(TXTLoading, 2);
	TextDrawBackgroundColor(TXTLoading, 255);
	TextDrawFont(TXTLoading, 2);
	TextDrawLetterSize(TXTLoading, 0.469998, 2.099998);
	TextDrawColor(TXTLoading, -1);
	TextDrawSetOutline(TXTLoading, 1);
	TextDrawSetProportional(TXTLoading, 1);
	TextDrawUseBox(TXTLoading, 1);
	TextDrawBoxColor(TXTLoading, 170);
	TextDrawTextSize(TXTLoading, -9.000000, -152.000000);
	
	printf("#TextDraws loaded in %i ms", (GetTickCount() + 3600000) - count);
	return 1;
}

function:xReactionProgress()
{
    if(xTestBusy)
	{
        tReactionTimer = SetTimer("xReactionTest", REAC_TIME, true);
        ReactionOn = false;
	}
	return 1;
}

function:xReactionTest()
{
    ReactionOn = true;
    
	new xLength = (random(8) + 3),
		count = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i)) count++;
	}

	xCash = 250 * count;
	xScore = (random(7) + 2);
	format(xChars, sizeof(xChars), "");
	for(new i = 0; i < xLength; i++)
	{
		format(xChars, sizeof(xChars), "%s%s", xChars, xCharacters[random(sizeof(xCharacters))][0]);
	}
	format(gstr, sizeof(gstr), "["vlila"REACTION"white"]: The first who types '"vlila"%s"white"' wins $%s + %i score", xChars, ToCurrency(xCash), xScore);
	SCMToAll(WHITE, gstr);
	tickReactionStart = GetTickCount() + 3600000;
	KillTimer(tReactionTimer);
	xTestBusy = true;
	SetTimer("xReactionProgress", 60000, false);
	return 1;
}

function:Elevator_Boost(floorid)
{
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
	return 1;
}

function:Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();
	return 1;
}

function:mainmode()
{
    SCMToAll(-1, ""server_sign" "r_besch"Maintenance initiated...");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i)) continue;
	    if(IsPlayerConnected(i))
	    {
			SCM(i, -1, "Your account has been saved and you have been disconnected");
			KickEx(i);
		}
	}
	return 1;
}

LoadServerStaticMeshes()
{
	new string[128], count = GetTickCount() + 3600000;
	format(string, sizeof(string), "hostname %s", HOSTNAME);

	SendRconCommand(string);
	SendRconCommand("weburl "SVRURLWWW"");
	#if IS_RELEASE_BUILD == true
	SendRconCommand("mapname DerbyTdmRaceCNRFunStuntFreeroam");
	SetGameModeText("TdmDerbyRaceCNRFunStuntFreeroam");
	#else
	SendRconCommand("mapname "SVRSC" "CURRENT_VERSION"");
	SetGameModeText(""SVRSC" "CURRENT_VERSION"");
	#endif
	
	EnableVehicleFriendlyFire();
	ShowPlayerMarkers(1);
	DisableInteriorEnterExits();
	ShowNameTags(1);
	SetNameTagDrawDistance(40.0);
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	SetWeather(1);
	SetWorldTime(12);
    CurrentBGMap = BG_VOTING;
	StartTime = gettime();
	Iter_Init(PlayerIgnore);
	
	for(new i = 1; i < MAX_REPORTS; i++)
	{
		Reports[i] = "<none>";
	}
	
	for(new i = 1; i < MAX_ADS; i++)
	{
		Adverts[i] = "<none>";
	}
	
	for(new i = 0; i < 5; i++)
	{
		NPCLabelHandle[i] = Text3D:-1;
	}
	
    g_SpawnAreas[0] = CreateDynamicSphere(341.8535, -1852.6327, 6.8569, 25.0); // <- beach sphere
    g_SpawnAreas[1] = CreateDynamicSphere(385.4325, 2541.2456, 14.5953, 13.5); // <- AA sphere
    g_SpawnAreas[2] = CreateDynamicSphere(-1203.3666, -27.8846, 15.8403, 15.0); // <- SFA 1 sphere
    g_SpawnAreas[3] = CreateDynamicSphere(-1183.3441, -9.4441, 15.8403, 15.0); // <- SFA 2 sphere

	toyslist = LoadModelSelectionMenu("Other/toys.txt");
	hobjslist = LoadModelSelectionMenu("Other/hobjs.txt");
	skinlist = LoadModelSelectionMenu("Other/skins.txt");

	for(new i = 0; i < sizeof(PVCategorys); i++)
	{
	    format(string, sizeof(string), ""dl"%s\n", PVCategorys[i]);
	    strcat(sPVCategory, string);
	}

	for(new i = 0; i < MAX_GZONES; i++)
	{
		GZoneInfo[i][bUnderAttack] = false;
		
		GZoneInfo[i][E_Txt] = TextDrawCreate(503.000000, 298.000000, "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timelft: --:--");
		TextDrawBackgroundColor(GZoneInfo[i][E_Txt], 255);
		TextDrawFont(GZoneInfo[i][E_Txt], 1);
		TextDrawLetterSize(GZoneInfo[i][E_Txt], 0.240000, 1.100000);
		TextDrawColor(GZoneInfo[i][E_Txt], -1);
		TextDrawSetOutline(GZoneInfo[i][E_Txt], 1);
		TextDrawSetProportional(GZoneInfo[i][E_Txt], 1);
		TextDrawSetSelectable(GZoneInfo[i][E_Txt], 0);
	}

    Command_AddAltNamed("rv", "respawnvehicles");
    Command_AddAltNamed("rv", "resetvehicles");
    Command_AddAltNamed("ah", "fh");
    Command_AddAltNamed("find", "locate");
    Command_AddAltNamed("locate", "loc");
    Command_AddAltNamed("vs", "wang");
    Command_AddAltNamed("vs", "vehicleshop");
    Command_AddAltNamed("vs", "ottos");
    Command_AddAltNamed("vs", "otto");
    Command_AddAltNamed("ad", "advert");
    Command_AddAltNamed("ad", "advertisment");
    Command_AddAltNamed("ads", "advertisments");
    Command_AddAltNamed("ads", "adverts");
	Command_AddAltNamed("ls", "grove");
	Command_AddAltNamed("gc", "cm");
	Command_AddAltNamed("buy", "buyhouse");
	Command_AddAltNamed("sell", "sellhouse");
	Command_AddAltNamed("stopanims", "stopanim");
	Command_AddAltNamed("stopanims", "stopanimations");
	Command_AddAltNamed("stopanims", "clearanim");
	Command_AddAltNamed("stopanims", "clearanims");
	Command_AddAltNamed("bmenu", "gotomybizz");
	Command_AddAltNamed("credits", "secredits");
	Command_AddAltNamed("bmenu", "gotomybusiness");
    Command_AddAltNamed("mk", "medkit");
    Command_AddAltNamed("mk", "medkits");
    Command_AddAltNamed("toys", "wear");
	Command_AddAltNamed("beach", "lsb");
	Command_AddAltNamed("mc", "chiliad");
	Command_AddAltNamed("trackmania", "tm");
	Command_AddAltNamed("trackmania2", "tm2");
	Command_AddAltNamed("a51", "area51");
	Command_AddAltNamed("bs", "bsn");
	Command_AddAltNamed("driftcity", "dc");
	Command_AddAltNamed("driftisland", "df");
	Command_AddAltNamed("parkour", "parkour1");
	Command_AddAltNamed("kk", "krustykrab");
	Command_AddAltNamed("bj", "bj1");
	Command_AddAltNamed("station", "train");
	Command_AddAltNamed("myskin", "skin");
	Command_AddAltNamed("myskin", "setskin");
	Command_AddAltNamed("dm", "dm1");
	Command_AddAltNamed("hidef", "hidefooter");
	Command_AddAltNamed("showf", "showfooter");
	Command_AddAltNamed("textdraws", "textdraw");
	Command_AddAltNamed("s", "sp");
	Command_AddAltNamed("s", "spos");
	Command_AddAltNamed("l", "lpos");
	Command_AddAltNamed("l", "load");
	Command_AddAltNamed("l", "lp");
	Command_AddAltNamed("tele", "maps");
	Command_AddAltNamed("tele", "map");
	Command_AddAltNamed("tele", "teles");
	Command_AddAltNamed("tele", "t");
	Command_AddAltNamed("tele", "teleport");
	Command_AddAltNamed("parch", "para");
	Command_AddAltNamed("parch", "pc");
	Command_AddAltNamed("colors", "color");
	Command_AddAltNamed("sb", "speedboost");
	Command_AddAltNamed("sj", "superjump");
	Command_AddAltNamed("sj", "superman");
	Command_AddAltNamed("bbuy", "pbuy");
	Command_AddAltNamed("bsell", "psell");
	Command_AddAltNamed("lock", "pvlock");
	Command_AddAltNamed("unlock", "pvunlock");
	Command_AddAltNamed("tdm", "bg");
	Command_AddAltNamed("gungame", "gg");
	Command_AddAltNamed("adminhelp", "ahelp");
	Command_AddAltNamed("adminhelp", "acmds");
	Command_AddAltNamed("minigun", "mini");
	Command_AddAltNamed("minigun", "mg");
	Command_AddAltNamed("ff", "dive");
	Command_AddAltNamed("ff", "freefall");
	Command_AddAltNamed("exit", "leave");
	Command_AddAltNamed("burn", "explode");
	Command_AddAltNamed("spawn", "kill");
	Command_AddAltNamed("announce", "ann");
	Command_AddAltNamed("announce2", "ann2");
	Command_AddAltNamed("gotomybusiness", "gotomybizz");
	Command_AddAltNamed("gotomybusiness", "gotomyprop");
	Command_AddAltNamed("go", "goto");
	Command_AddAltNamed("slap", "throw");
	Command_AddAltNamed("giveweapon", "givegun");
	Command_AddAltNamed("admins", "admin");
	Command_AddAltNamed("vips", "premiums");
	Command_AddAltNamed("viplounge", "vipl");
	Command_AddAltNamed("vip", "premium");
	Command_AddAltNamed("vip", "vipcmds");
	Command_AddAltNamed("vip", "viphelp");
	Command_AddAltNamed("cd", "count");
	Command_AddAltNamed("cd", "countdown");
	Command_AddAltNamed("rules", "rule");
	Command_AddAltNamed("wanteds", "wanted");
	Command_AddAltNamed("gangs", "groups");
	Command_AddAltNamed("top", "top5");
	Command_AddAltNamed("top", "top10");
	Command_AddAltNamed("vmenu", "pvmenu");
	Command_AddAltNamed("vmenu", "pv");
	Command_AddAltNamed("vmenu", "mypv");
	Command_AddAltNamed("vcontrol", "vctrl");
	Command_AddAltNamed("vcontrol", "vcs");
	Command_AddAltNamed("label", "labels");
	Command_AddAltNamed("cc", "paint");
	Command_AddAltNamed("cc", "vcolor");
	Command_AddAltNamed("changepass", "changepassword");
	Command_AddAltNamed("serverstats", "serverstat");
	Command_AddAltNamed("armourall", "armorall");
	Command_AddAltNamed("hmenu", "myhouse");
	Command_AddAltNamed("hmenu", "myhouses");
	Command_AddAltNamed("hmenu", "houses");
	Command_AddAltNamed("hmenu", "upgrades");
	Command_AddAltNamed("hmenu", "houseupgrades");
	Command_AddAltNamed("hmenu", "houseupgrade");
	Command_AddAltNamed("settings", "setting");
	Command_AddAltNamed("settings", "cp");
	Command_AddAltNamed("minigames", "m");
	Command_AddAltNamed("minigames", "minigame");
	Command_AddAltNamed("answer", "ans");
	Command_AddAltNamed("pm", "pn");
	Command_AddAltNamed("pm", "msg");
	Command_AddAltNamed("toys", "toy");
	Command_AddAltNamed("toys", "hod");
	Command_AddAltNamed("toys", "hods");
	Command_AddAltNamed("toys", "attachments");
	Command_AddAltNamed("toys", "attachment");
	Command_AddAltNamed("toys", "o");
	Command_AddAltNamed("achs", "achievements");
	Command_AddAltNamed("achs", "erfolge");
	Command_AddAltNamed("achs", "ach");
	Command_AddAltNamed("cmds", "c");
	Command_AddAltNamed("help", "hilfe");
	Command_AddAltNamed("cmds", "commands");
	Command_AddAltNamed("cmds", "command");
	Command_AddAltNamed("cmds", "cmd");
	Command_AddAltNamed("serverstats", "uptime");
	Command_AddAltNamed("w", "weps");
	Command_AddAltNamed("w", "weapon");
	Command_AddAltNamed("w", "weapons");
	Command_AddAltNamed("w", "guns");
	Command_AddAltNamed("w", "gun");
	Command_AddAltNamed("w", "gunz");
	Command_AddAltNamed("w", "waffen");
	Command_AddAltNamed("v", "veh");
	Command_AddAltNamed("v", "vehs");
	Command_AddAltNamed("v", "vehicles");
	Command_AddAltNamed("v", "vehicle");
	Command_AddAltNamed("v", "cars");
	Command_AddAltNamed("credits", "credit");
	Command_AddAltNamed("ar", "arrest");
	Command_AddAltNamed("ar", "arest");
	Command_AddAltNamed("ar", "arr");
	Command_AddAltNamed("rob", "robstore");
	Command_AddAltNamed("hmenu", "gotomyhouse");
	Command_AddAltNamed("hmenu", "upgrade");
	Command_AddAltNamed("hmenu", "housemenu");
	Command_AddAltNamed("vmenu", "vehiclemenu");
    Command_AddAltNamed("vmenu", "plate");
	Command_AddAltNamed("new", "news");
	Command_AddAltNamed("new", "changelog");
	Command_AddAltNamed("exit", "raceoff");
	Command_AddAltNamed("exit", "dmoff");
	Command_AddAltNamed("exit", "derbyoff");
	Command_AddAltNamed("exit", "abandon");
	Command_AddAltNamed("exit", "dejar");
	Command_AddAltNamed("gotoxyza", "gotoxyz");
	Command_AddAltNamed("toggletoys", "toggtoys");
	Command_AddAltNamed("toggletoys", "togtoys");
	Command_AddAltNamed("new", "news");
	Command_AddAltNamed("new", "updates");
    Command_AddAltNamed("score", "topscore");
    Command_AddAltNamed("richlist", "topcash");
    Command_AddAltNamed("richlist", "topmoney");
    Command_AddAltNamed("kills", "topkills");
    Command_AddAltNamed("deaths", "topdeaths");
    Command_AddAltNamed("gangs", "topgangs");
    Command_AddAltNamed("races", "topracer");
    Command_AddAltNamed("derbys", "topderby");
    Command_AddAltNamed("gungames", "topgungame");
    Command_AddAltNamed("fallouts", "topfallout");
    Command_AddAltNamed("wanteds", "topwanteds");
    Command_AddAltNamed("rtests", "topreaction");
    Command_AddAltNamed("vmenu", "mycars");
    Command_AddAltNamed("gmenu", "mygang");
    Command_AddAltNamed("hmenu", "myhouses");
	
    AddPlayerClass(3, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
    AddPlayerClass(81, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(1, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(199, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(299, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(5, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(264, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(26, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(289, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(28, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(72, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(248, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(178, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(100, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(115, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(272, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(127, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(138, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(149, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(249, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(162, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(206, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(271, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(145, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(285, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(283, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);

	printf("#Server Meshes loaded in %i ms", (GetTickCount() + 3600000) - count);
	return 1;
}

LoadVisualStaticMeshes()
{
	// 3374 heuballen
	// 2898 grünes rasen ding
	
    new count = GetTickCount() + 3600000;
    
    new object_id = CreateDynamicObject(11317, 1914.20313, -1377.58191, 26.29986,   0.00000, 0.00000, 91.91999); // Gold Credits Wang Cars
    SetDynamicObjectMaterial(object_id, 2, 19341, "egg_texts", "easter_egg01");
    SetDynamicObjectMaterial(object_id, 3, 19341, "egg_texts", "easter_egg01");
    
	MellnikGate = CreateDynamicObject(980, -205.68774, -2285.10693, 30.65776,   0.00000, 0.00000, 122.80286);
	MellnikRamp = CreateDynamicObject(3115, -153.74190, -2210.68457, 27.16690,   0.00000, 0.00000, -145.55995);
    
    pick_chainsaw = CreateDynamicPickup(341, 23, 1219.1809,-924.6318,42.9045);
    pick_life[0] = CreateDynamicPickup(1240, 3, -1987.6259,274.7049,34.9564);
    pick_life[1] = CreateDynamicPickup(1240, 3, 2463.1362,-1683.0521,13.3142);
    pick_life[2] = CreateDynamicPickup(1240, 3, 1184.9302,-1325.9720,13.3399);
    pick_life[3] = CreateDynamicPickup(1240, 3, 241.4559,-1754.1686,4.2808);
    pick_life[4] = CreateDynamicPickup(1240, 3, 333.7505,-1520.1478,35.6370);
    pick_life[5] = CreateDynamicPickup(1240, 3, 800.4719,-1629.9167,13.1530);
    pick_life[6] = CreateDynamicPickup(1240, 3, 2458.5137,2019.7380,10.8325);
    pick_life[7] = CreateDynamicPickup(1240, 3, -588.3522,-3579.2637,3.4029);
    pick_life[8] = CreateDynamicPickup(1240, 3, 2271.3765,1518.1755,42.5862);
    pick_life[9] = CreateDynamicPickup(1240, 3, 2316.5967,1792.5190,10.5918);
    pick_life[10] = CreateDynamicPickup(1240, 3, -2383.1816,-587.0456,131.8897);
    pick_life[11] = CreateDynamicPickup(1240, 3, -1405.9728,492.3374,18.0023);
    pick_life[12] = CreateDynamicPickup(1240, 3, 2035.2893,-2348.9136,13.6844);
    pick_life[13] = CreateDynamicPickup(1240, 3, 400.7469, 2544.7986, 19.6311);

    AdminLC = CreateDynamicPickup(1559, 23, 1805.7494,-1302.6721,120.2656);
    AdminLC2 = CreateDynamicPickup(1559, 23, -794.806396,497.738037,1376.195312);
   	aussenrein = CreateDynamicPickup(1559, 23, 1795.2469,-1406.5632,13.6531);
	innenraus = CreateDynamicPickup(1559, 23, -1405.4905,985.1736,1049.0078);
	vehiclebuy = CreateDynamicPickup(1559, 23, -1407.0137,1013.8229,1049.0288);
	dm1pickup = CreateDynamicPickup(1247, 2, -3954.1172,980.9998,65.6059);
	dm2pickup = CreateDynamicPickup(1247, 2, -3951.4558,982.3098,36.1859);
	VIPLpickup = CreateDynamicPickup(1559, 2, -2624.3010,1411.4360,7.2303);
	VIPLpickup2 = CreateDynamicPickup(1559, 23, -3936.6282,1305.2244,2.4587);
	wangotto[0] = CreateDynamicPickup(1276, 23, -1973.9249,293.3758,35.1719);
	wangotto[1] = CreateDynamicPickup(1276, 23, -1640.6263,1203.1343,7.2387);
	wangotto[2] = CreateDynamicPickup(1276, 23, 2131.7874,-1148.4611,24.3741);
	wangotto[3] = CreateDynamicPickup(1276, 23, 2200.7473,1391.4735,10.8203);

	// old map icons
	CreateDynamicMapIcon(822.6, -1590.3, 13.5, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(-2570.1, 245.4, 10.3, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2726.6, -2026.4, 17.5, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2080.3, 2119.0, 10.8, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(2080.3, 2119.0, 10.8, 7, 1, -1, -1, -1);
	CreateDynamicMapIcon(675.7, -496.6, 16.8, 7, 1, -1, -1, -1);
    CreateDynamicMapIcon(1971.7, -2036.6, 13.5, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(2071.6, -1779.9, 13.5, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(2094.6, 2119.0, 10.8, 39, 1, -1, -1, -1);
    CreateDynamicMapIcon(-2490.5, -40.1, 39.3, 39, 1, -1, -1, -1);
	// old map icons end

	CreateDynamicCP(1024.6803,1292.1177,20.3791, 5.0, 0, -1, -1, 100.0); // Bike Challenge Reward
	CreateDynamicCP(3896.1235,3884.3840,184.7534, 12.0, 0, -1, -1, 100.0); // SkyDive1 Reward
	CreateDynamicCP(-1278.9248,-34.3641,1122.3420, 12.0, 0, -1, -1, 100.0); // SkyDive2 Reward
	CreateDynamicCP(2890.5774, -3223.6228, 2132.9097, 12.0, 0, -1, -1, 100.0); // SkyDive3 Reward
	CreateDynamicCP(148.6426, 3655.9390, 19.3876, 12.0, 0, -1, -1, 100.0); // SkyDive4 Reward
    CreateDynamicCP(3259.0864, -1837.3140, 170.1097, 12.0, 0, -1, -1, 100.0); // BMX Reward
    
    // CNR START
	// Refill Stations
	CreateDynamicCP(2199.9460,2474.7231,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(1596.1165,2196.8958,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(2116.7163,922.6126,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0);
	CreateDynamicCP(2637.9185,1103.4926,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // 10
	// Robbery Locations
	CreateDynamicCP(2097.5847,2224.0974,11.0234, 3.0, CNR_WORLD, -1, -1, 100.0); //24/7
	CreateDynamicCP(2194.4106,1990.7670,12.2969, 3.0, CNR_WORLD, -1, -1, 100.0); // 24/7 2
	CreateDynamicCP(2167.2432,2114.3831,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // Casino
	CreateDynamicCP(2159.0449,943.1320,10.8203, 3.0, CNR_WORLD, -1, -1, 100.0); // Ammunation
	// Exits
	CreateDynamicCP(-31.0415,-92.0112,1003.5469, 2.0, CNR_WORLD, -1, -1, 50.0); //24/7
	CreateDynamicCP(-25.4077,-188.2529,1003.5469, 2.0, CNR_WORLD, -1, -1, 50.0); // 24/7 2
	CreateDynamicCP(1132.9701,-14.2267,1000.6797, 2.0, CNR_WORLD, -1, -1, 50.0); // Casino
	CreateDynamicCP(286.1115,-41.6959,1001.5156, 2.0, CNR_WORLD, -1, -1, 50.0); // Ammunation
	CreateDynamicCP(294.4077,-38.3232,1001.5156, 2.0, CNR_WORLD, -1, -1, 50.0); // Ammunation Menu
	CreateDynamicCP(2297.6804,2466.7480,3.2734, 2.0, CNR_WORLD, -1, -1, 50.0); // PD Refill // 20
	CreateDynamicCP(1291.7106,2672.7725,11.2392, 2.0, CNR_WORLD, -1, -1, 50.0); // Robber Refill
	CreateDynamicCP(2287.0718,2432.3665,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // PD Entrance // 22
	CreateDynamicCP(238.7167,138.6336,1003.0234, 2.0, CNR_WORLD, -1, -1, 75.0); // PD Exit
	CreateDynamicCP(2271.0574,2293.2908,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Roca Escalente Bank // 24
	CreateDynamicCP(2355.3020,1544.3804,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // LV Bank
	CreateDynamicCP(2305.3713,-16.0632,26.7496, 2.0, CNR_WORLD, -1, -1, 75.0); // Roca/LV Bank Exit // 26
	CreateDynamicCP(2019.7651,1007.6656,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // 4D Casino
	CreateDynamicCP(2019.0719,1017.8808,996.8750, 2.0, CNR_WORLD, -1, -1, 75.0); // 4D Exit
	CreateDynamicCP(2089.7944,1514.4180,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Royal Casino
	CreateDynamicCP(2539.2773,2083.7363,10.8203, 2.0, CNR_WORLD, -1, -1, 75.0); // Ammunation
	CreateDynamicCP(2196.8345,1677.1240,12.3672, 2.0, CNR_WORLD, -1, -1, 75.0); // Caligulas Casino
	CreateDynamicCP(2234.1003,1714.3649,1012.3828, 2.0, CNR_WORLD, -1, -1, 75.0); // Caligulas Exit
	CreateDynamicCP(1391.6522,2693.8896,10.8203, 1.5, CNR_WORLD, -1, -1, 75.0); // Robbers Gate
	CreateDynamicCP(1400.9669,2685.9114,10.8203, 1.5, CNR_WORLD, -1, -1, 75.0); // Robbers Gate
	CreateDynamicCP(1902.1838,-1404.4944,14.3474, 3.0, 0, -1, -1, 100.0); // Gold Credits
	CreateDynamicCP(3360.8054,-1934.1283,43.3184, 3.5, 0, -1, -1, 50.0); // bmx bike spawn
	CreateDynamicCP(249.9905, 3772.1204, 5.3780, 12.0, 0, -1, -1, 100.0); // skydive5 checkpoint

	//Stores
	CreateDynamicMapIcon(2539.3477,2081.2295,10.8203, 6, 0, CNR_WORLD, -1, -1); //Ammunation 1
	CreateDynamicMapIcon(2159.0449,943.1320,10.8203, 6, 0, CNR_WORLD, -1, -1); //Ammunation 2
	CreateDynamicMapIcon(2097.5847,2224.0974,11.0234, 49, 0, CNR_WORLD, -1, -1); //24/7 1
	CreateDynamicMapIcon(2194.4106,1990.7670,12.2969, 49, 0, CNR_WORLD, -1, -1); //24/7 2
	CreateDynamicMapIcon(2196.8345,1677.1240,12.3672, 25, 0, CNR_WORLD, -1, -1); //Caligulas
	CreateDynamicMapIcon(2019.7651,1007.6656,10.8203, 25, 0, CNR_WORLD, -1, -1); //4D
	CreateDynamicMapIcon(2167.2432,2114.3831,10.8203, 25, 0, CNR_WORLD, -1, -1); //Other Casino
	CreateDynamicMapIcon(2271.0574,2293.2908,10.8203, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(2355.3020,1544.3804,10.8203, 52, 0, CNR_WORLD, -1, -1); //Bank 2
	CreateDynamicMapIcon(-1550.4073,1168.7106,7.1875, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(-2455.3555,503.9716,30.0781, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(1877.7257,-1737.5585,13.3501, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(1550.1409,-1790.7477,15.2916, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(1462.5692,-1010.9126,26.8438, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(1498.3008,-1581.9375,13.5498, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(368.8708,2580.0532,16.9099, 52, 0, CNR_WORLD, -1, -1); //Bank
	CreateDynamicMapIcon(2225.7664,1838.6151,10.8203, 48, 0, CNR_WORLD, -1, -1); // RPC 1
	CreateDynamicMapIcon(-26.1917,2531.7217,17.4203, 48, 0, CNR_WORLD, -1, -1); // RPC 2
	CreateDynamicMapIcon(-2624.0850,1411.7439,7.0938, 48, 0, CNR_WORLD, -1, -1); // RPC 3
	// CNR END
    
	// anti vehile drop
	CreateObject(4726, 338.60001, -1853.16003, 5.92000,   0.00000, 0.00000, 270.00000); // LS beach
	CreateObject(9241, -1182.88000, -12.16000, 14.00000,   0.00000, 0.00000, -135.00000); //SFA 1
	CreateObject(9241, -1200.43005, -29.73000, 14.00000,   0.00000, 0.00000, -135.00000); //SFA 2
	CreateObject(18783, 385.4325, 2541.2456, 14.5953,   0.00000, 0.00000, 0.00000); //AA
	CreateObject(8040,-1296.403,-1665.809,538.216,0.0,0.0,-6.016); // Ski-Ramp
	CreateObject(8040, 423.46, 3216.41, 739.40,   0.00, 0.00, -106.57); //AAJUMP
	CreateObject(14548,-2183.280,1194.442,1696.073,0.0,0.0,-3.438); // Andro
	CreateObject(18365, 3315.628, -1892.834, 49.420, 0.0, 0.0, 0.0); // bmx
	CreateObject(4867, 3570.977, 1234.999, 8.923, 0.0, 0.0, 90.241); // carsumo
	CreateObject(8420, 317.289, 651.237, 573.563, 0.0, 0.0, 36.956); // pipe
	CreateObject(13607, 1086.370, 1070.795, 70.407, 0.0, 0.0, -34.377); // nrgbowl
	CreateObject(4108, 2773.962, -1274.130, 4315.749, 0.0, 0.0, 0.0); // TugFun
	CreateObject(8040, 310.667, 5487.085, 3426.353, 0.0, 0.0, -89.381); // Drop
 	CreateObject(5794, 4200.000, 1871.350, 2835.076, 0.0, 0.0, 0.0); // LF
 	CreateObject(8357, -2919.677, -313.097, 3.643, 0.0, 0.0, 0.0); // Racemap
 	CreateObject(4232, 1652.955, 2891.235, 140.517, 0.0, 0.0, 23.205); // BC
	CreateObject(8040, 2498.082, -1697.696, 713.894, 0.0, 0.0, -181.341); // SKC
	CreateObject(17864, -2799.695, 2923.545, 9.153, 0.0, 0.0, 0.0); // Kartrack
	CreateObject(8040, 2348.883, -45.075, 366.637, 0.0, 0.0, 90.241); // Waterjump
 	CreateObject(8040, 2121.594, 2546.270, 514.322, 0.0, 0.0, -89.381); // Glassjump
 	CreateObject(8040, 607.596, 2233.157, 940.345, 0.0, 0.0, -179.622); // Bikejump
	CreateObject(8040, 894.12, 2502.60, 694.15,   0.00, 0.00, 180.00); //hugejump
	CreateObject(8040, 493.427, -35.034, 680.793, 0.0, 0.0, -180.000); // huge loop (/loop)
	CreateObject(8040, 941.538, -1387.319, 654.160, 0.0, 0.0, 0.0); // PipeJump static
	CreateObject(8040,865.293,255.333,587.316,0.0,0.0,110.008); // QJUMP
	CreateObject(8040,31.291,274.093,1199.888,0.0,0.0,-35.466); // Spiral
	CreateObject(9612, 2962.32, -661.09, -27.59,   0.00, 0.00, 270.49); //Drag
	CreateObject(8040, -2683.68, 383.00, 921.70,   0.00, 0.00, 65.27); //LoopJump
	CreateObject(8040,2664.19995117,-1044.90002441,883.00,0.0,0.00,359.52038574); //DeathJump
	CreateObject(4867, 1851.615, -3182.590, 17.740, 0.0, 0.0, 0.164); // Planes
	CreateObject(9241, -1191.68677, -22.75382, 13.76887,   0.00000, 0.00000, 45.60000); // sfa
	CreateObject(8172,2740.04785156,1918.12512207,5268.76220703,0,0,0); // Racemap
	CreateObject(3458, -295.32, 3682.53, 21.10,   0.00, 0.00, 0.00); //Static Base
	CreateObject(8040,564.91992188,860.32714844,7107.35400391,0,21.99462891,0); // GoingDown
	CreateObject(8040,2977.97949219,-1437.01464844,1243.90209961,0,0,189.99755859); // skyroad (/skr)
	// anti vehicle drop end

	// vehicle shop
	CreateDynamicMapIcon(1795.2469, -1406.5632, 13.6531, 55, 1, -1, -1, -1, 500.0);
	// vehicle shop end

	// hotspots
	CreateDynamicMapIcon(-1196.1506, -17.3470, 15.8281, 23, 1, -1, -1, -1, 300.0); // SFA
	CreateDynamicMapIcon(385.4325, 2541.2456, 14.5953, 23, 1, -1, -1, -1, 300.0); // AA
	CreateDynamicMapIcon(341.5075, -1852.6332, 8.2612, 23, 1, -1, -1, -1, 300.0); // BEACH
	// hotspots end

	// login obj
	CreateDynamicObject(19462, 388.20001, -1809.04004, 16.17000,   0.00000, 90.00000, 13.00000);
	CreateDynamicObject(19462, 391.57999, -1808.23999, 16.17000,   0.00000, 90.00000, 13.00000);
	CreateDynamicObject(18102, 386.79163, -1807.13257, 20.75563,   0.00000, 0.00000, -245.76001);
	// login obj end
	
	CreateObject(986, 1385.98, 2643.14, 11.81,   0.00, 0.00, 90.13); // Robbers Gate
	Gate[0] = CreateObject(976, 1397.24, 2694.51, 9.91,   0.00, 0.00, 269.23);
	Gate[1] = CreateObject(976, 1397.24, 2693.86, 9.91,   0.00, 0.00, 90.07);

	/*// gehört zu beach
	CreateDynamicObject(10771, 224.30000, -2004.00000, 4.10000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(11145, 274.20001, -1962.30005, 3.20000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(10770, 217.70000, -1999.59998, 37.30000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(11237, 217.10001, -1999.30005, 37.10000,   0.00000, 0.00000, 220.00000);
	// beach start
	CreateObject(10771, 224.30000, -2004.00000, 4.10000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(11145, 274.20001, -1962.30005, 3.20000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(10770, 217.70000, -1999.59998, 37.30000,   0.00000, 0.00000, 220.00000, 350.0);
	CreateObject(11237, 217.10001, -1999.30005, 37.10000,   0.00000, 0.00000, 220.00000, 350.0);
	// beach end*/
    
    AddTeleport(5, "Gold Credits", "gc", 1858.1874,-1466.7080,13.3981);
	AddTeleport(9, "Drift", "drift", -344.308, 1528.474, 75.159);
	AddTeleport(9, "Drift City", "dc", 3431.8589, 484.3132, 1788.7490);
	AddTeleport(9, "Drift Island", "df", 3075.9263,-3153.9749,49.1486);
	AddTeleport(9, "Las Venturas Drift", "lvdrift", 2333.8508,1405.8370,42.5904);
	AddTeleport(9, "San Fierro Drift", "sfdrift", -2410.9963, -600.7848, 132.3277);
	AddTeleport(3, "Trackmania", "tm", 1297.3998, -5626.5122, 81.7);
	AddTeleport(3, "Trackmania 2", "tm2", -1929.1312, 6627.0327, 12.0);
	AddTeleport(3, "Infernus Paradise", "ip", -5051.7461, -2237.2556, 10.9);
	AddTeleport(3, "Infernus Paradise 2", "ip2", -297.6044, 3682.8264, 24.0);
	AddTeleport(3, "Infernus Paradise 3", "ip3", 4546.4175,655.6476,13.4803);
	AddTeleport(3, "Speed", "speed", 680.2595, -1361.8927, 2551.2214);
	AddTeleport(3, "Disney", "disney", 400.2232,636.9904,16.8194);
	AddTeleport(4, "Mellnik´s Island", "mi", -3801.8572, 498.8828, 16.5183);
	AddTeleport(4, "Mellnik´s House", "mh", -182.9842,-2245.7412,31.1492);
	AddTeleport(4, "Treehouse", "treehouse", -804.6822, -2075.3076, 47.1331);
	AddTeleport(4, "Party", "party", -377.2038,2131.4634,133.1797);
	AddTeleport(4, "Balloon", "balloon", 295.4890,-1813.5734,52.0518);
	AddTeleport(1, "Bike Challange", "bikec", 1102.3887, 1355.4951, 10.8203);
	AddTeleport(5, "Hayclimb", "hayclimb", -1788.4408, 575.2750, 35.1641);
	AddTeleport(1, "HalfPipe", "hp", 2848.1548,-1977.4320,10.6646);
	AddTeleport(5, "Slide", "slide", 1572.9949, -1238.7869, 277.7445);
	AddTeleport(4, "Tugfun", "tugfun", 2774.316, -1309.180, 4316.250);
	AddTeleport(1, "Drop", "drop", 309.7934, 5461.4546, 3426.6863);
	AddTeleport(5, "XSlide", "xslide", 1862.760, 1337.315, 55.933);
	AddTeleport(3, "Loop Jump", "loopjump", -2682.3909, 385.2379, 924.8377);
	AddTeleport(3, "Death Jump", "deathjump", 2629.9734,-1029.7679,882.9141);
	AddTeleport(3, "Glass Jump", "glassjump", 2121.4280, 2560.6331, 514.7283);
	AddTeleport(1, "Going Down", "gd", 551.1603,860.3625,7113.0366);
	AddTeleport(1, "Maze 1", "maze", 2330.3174, 535.1375, 2.9512);
	AddTeleport(1, "Maze 2", "maze2", 1458.9336, 1854.9144, 54.7362);
	AddTeleport(1, "Maze 3", "maze3", 836.5298,-2048.2273,12.8672);
	AddTeleport(1, "Maze 4", "maze4", 983.0536,2691.7898,10.6925);
	AddTeleport(3, "Tunnel Jump", "bikejump", -494.527, 1600.167, 844.297);
	AddTeleport(3, "Bike Jump", "bikejump", 641.9279,2222.7144,940.5793);
	AddTeleport(3, "Globe", "globe", 1954.7849,1915.3772,144.7200);
	AddTeleport(3, "Quarry Jump", "qjump", 868.278,245.432,587.522);
	AddTeleport(2, "Skydive", "skydive", 3887.5874,3891.2942,2018.7869);
	AddTeleport(2, "Skydive 2", "skydive2", -1288.0760,-44.0085,4216.4507);
	AddTeleport(2, "Skydive 3", "skydive3", 2875,-3233,3268);
	AddTeleport(2, "Skydive 4", "skydive4", 118.210845,3658.245859,836.183776);
	AddTeleport(2, "Skydive 5", "skydive5", 239.3282, 3754.8267, 888.9833);
	AddTeleport(0, "BMX Parkour", "bmx", 3362.586, -1939.724, 43.027);
	AddTeleport(0, "Quad Parkour", "qp", -2904.806, 880.312, 5.354);
	AddTeleport(0, "Quad Parkour 2", "qp2", 2121.9146,2397.7786,51.2586);
	AddTeleport(8, "Los Santos Beach", "beach", 341.8535, -1852.6327, 8.2618);
	AddTeleport(4, "Mount Chilliad", "mc", -2335.2832, -1644.9913, 486.0481);
	AddTeleport(7, "Bayside", "bayside", -2227.2446,2326.8723,7.5469);
	AddTeleport(7, "San Fierro Airport", "sfa", -1196.3280, -17.4523, 15.8281);
	AddTeleport(7, "Los Santos Airport", "lsa",  2003.1035,-2455.4905,15.8403);
	AddTeleport(7, "Los Santos", "ls", 2494.7476, -1666.6097, 13.3438);
	AddTeleport(7, "Los Santos Police Department", "lspd", 1542.5554, -1674.7850, 13.5547);
	AddTeleport(7, "Las Venturas Police Department", "lvpd", 2290.5759,2421.3708, 10.8203);
	AddTeleport(7, "San Fierro Police Department", "sfpd", -1624.2128,674.2734,6.9573);
	AddTeleport(3, "Skyroad", "skyroad", 2999.2258, -1433.3010, 1244.1365);
	AddTeleport(4, "Tube", "tube", 1254.5294,-2285.2883,1084.8463);
	AddTeleport(4, "Dune Fun", "dfun",  3638.867, 1179.233, 10.214);
	AddTeleport(4, "Dune Fun 2", "dfun2", 473.3654,-1883.9589,2.4099);
	AddTeleport(3, "Skyroad 2", "skyroad2", 2912.3618,-792.8673,10.7623);
	AddTeleport(3, "Skyroad 3", "skyroad3", 205.0412,2481.6416,16.5166);
	AddTeleport(3, "Skyroad 4", "skyroad4", 587.9016,1400.4779,1228.1453);
	AddTeleport(3, "Water Jump", "wj", 341.6029,2008.7330,571.1588);
	AddTeleport(8, "Abandoned Airport", "aa", 386.0204, 2541.1179, 18.0953);
	AddTeleport(6, "Transfender", "trans", 1034.5165,-1039.7190,31.6651);
	AddTeleport(6, "Transfender 2", "trans2", -1932.7380,228.3443,34.1563);
	AddTeleport(6, "Transfender 3", "trans3", 2386.2788,1021.7114,10.8203);
	AddTeleport(6, "Loco Low", "lw", 2645.5457, -2004.5851,13.3828);
	AddTeleport(6, "Arch Wheel Angels", "arch", -2689.1001,217.8290,3.9509);
	AddTeleport(7, "Las Ventuars Airport", "lva", 1320.6082,1268.7208,13.5903);
	AddTeleport(7, "Las Venturas", "lv", 2039.8860,1546.1112,10.4450);
	AddTeleport(6, "Vehicle Shop", "vs", 1850.7683,-1459.0325,13.3984);
	AddTeleport(4, "RectAngle", "rect", 742.8961,533.1397,461.9956);
	AddTeleport(4, "Balloon", "balloon", 295.4890,-1813.5734,52.0518);
	AddTeleport(0, "Parkour 1", "parkour", 2586.5618,-1346.5614,232.2472);
	AddTeleport(0, "Parkour 2", "parkour2", -787.3710,-2766.3005,2660.3042);
	AddTeleport(0, "Parkour 3", "parkour3", -783.9699, -3662.0358, 137.3758);
	AddTeleport(0, "Parkour 4", "parkour4", -2929.4922,-1876.4229,8.3901);
	AddTeleport(0, "Parkour 5", "parkour5", 1441.3851318359, -1700.8812255859, 915.390625);
	AddTeleport(0, "Parkour 6", "parkour6", 2768.4343261719,-2743.7131347656,2460.0815429688);
	AddTeleport(0, "Parkour 7", "parkour7", 3018.1736,-1879.4410,599.0370);
	AddTeleport(0, "Parkour 8", "parkour8", 2246,-1276,942);
	AddTeleport(4, "Krusty Krab", "kk", 2521.0232, -1504.3864, 25.5929);
	AddTeleport(0, "Los Santos Parkour", "lsp", 2505.2646,-1694.4974,17.9575);
	AddTeleport(5, "Bowl", "bowl", -576.6021,421.7149,75.2376);
	AddTeleport(7, "San Fierro", "sf", -1990.6650, 136.9297, 27.3110);
	AddTeleport(5, "Snow Market", "snow", -719.7679,1723.9852,7.0400);
	AddTeleport(1, "Sherman Dam", "sd", -793.2972,2230.8733,45.0103);
	AddTeleport(7, "Quarry", "quarry",  833.0357,851.8098,12.0047);
	AddTeleport(7, "Area 51", "a51", 307.2482,2050.7505,17.6406);
	AddTeleport(2, "Base Jump", "bj", 294.3475,-1610.8379,494.6685);
	AddTeleport(2, "Easter Egg", "ee", -2678.2119,1594.8811,217.2739);
	AddTeleport(0, "Glory", "glory", 2354.1689, -2067.3284, 22.3832);
	AddTeleport(2, "Eiffel Tower", "et", 956.2977,2441.0171,205.7626);
	AddTeleport(2, "Sky", "sky", 1544.1896,-1352.2094,329.4762);
	AddTeleport(2, "San Fierro Tower Jump", "sftj", -1753.6401,884.9623,295.8750);
	AddTeleport(2, "Plane", "plane", 1841.8307,-1398.3483,117.0471);
	AddTeleport(7, "Farm", "farm", -1206.7996,-1056.9430,128.3646);
	AddTeleport(7, "Docks", "docks", 2714.5000,-2711.2676,2.4919);
	AddTeleport(7, "Palomino Creek", "palominocreek", 2343.0247,91.6131,26.3281);
	AddTeleport(7, "Burger Shot", "bs", 1207.7231,-920.2217,43.0507);
	AddTeleport(7, "Burger Shot 2", "bs2", 810.2364,-1632.6433,13.3906);
	AddTeleport(7, "Burger Shot 3", "bs3", 2447.1104,2024.7499,10.8203);
	AddTeleport(7, "Burger Shot 4", "bs4", -2314.1365,-143.7879,35.3203);
	AddTeleport(7, "Burger Shot 5", "bs5", -1907.5175,834.4271,35.0156);
	AddTeleport(7, "Film", "film", 909.7761,-1221.2274,16.9766);
	AddTeleport(8, "Bordel", "bordel", -2682.1389,1344.4447,17.0603);
	AddTeleport(3, "Huge Jump", "hugejump", 863.2654, 2490.4468, 694.3790);
	AddTeleport(3, "Jubber Jump", "jujump", 1387.8517,-2425.5776,525.6338);
	AddTeleport(3, "Loop", "loop",  494.7604,4.7474,704.3844);
	AddTeleport(5, "Dillimore Airport", "da", 788.3009,-471.4969,20.5428);
	AddTeleport(4, "Pool", "pool", 4155.7158,2426.9578,1.2054);
	AddTeleport(4, "Restaurant", "restaurant", 370.4659, -1717.2151, 15.0337);
	AddTeleport(5, "Drag", "drag", -557.0079,-3575.5906,7.0870);
	AddTeleport(7, "San Fierro Station", "sfs", -1952.5077,137.8305,26.2813);
	AddTeleport(7, "Los Santos Station", "lss", 1706.4425,-1943.0046,13.5607);
	AddTeleport(7, "Las Venturas Station", "lvs", 1433.8182,2606.3877,10.6719);
	AddTeleport(7, "Las Venturas Station 2", "lvs2", 2859.3931,1290.5574,11.3906);
	AddTeleport(7, "Glen Park", "glen", 1892.7002, -1165.8480, 24.0390);
	AddTeleport(7, "Market Station", "ms",  800.6712,-1330.6608,13.1061);
	AddTeleport(5, "NRG", "nrg", 442.4455, 816.6687, 9.6865);
	AddTeleport(8, "San Fierro Airport", "sfa", -1196.3280, -17.4523, 15.8281);
	AddTeleport(8, "Mellnik´s Island", "mi", -3801.8572, 498.8828, 16.5183);
	AddTeleport(5, "Racemap", "racemap", -2904.3860, -415.5923, 4.6274);
	AddTeleport(5, "Racemap 2", "racemap2", 2741.1375,1969.4594,5269.7466);

    CreateDynamic3DTextLabel(""white"["nef_green"Private Vehicle Shop"white"]", -1, 1795.2469,-1406.5632,13.6531+0.5, 550.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Gold Credits"white"]", -1, 1902.1838,-1404.4944,16.3474+0.5, 550.0);
    CreateDynamic3DTextLabel(""red">>> SLOW DOWN <<<", RED, 477.7281,1399.4580,735.2565+0.5, 60.0);
    CreateDynamic3DTextLabel(""white"["lila"Mellnik´s Office"white"]", -1, 1794.8202,-1311.3057,120.6237+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["yellow"Admin Liberty City"white"]", -1, 1805.7494,-1302.6721,120.2656+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Private Vehicle Shop"white"]", -1, -1407.0137,1013.8229,1049.0288+0.5, 500.0);
    CreateDynamic3DTextLabel(""white"["nef_yellow"VIP"white"]\nLounge Entrance", -1, -2624.3010,1411.4360,7.2303+0.5, 35.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Mellnik´s Ramp"white"]\n"light_yellow"/rampdown to move it down", -1, -153.74190, -2210.68457, 27.16690+0.5, 20.0);
    CreateDynamic3DTextLabel(""white"["nef_green"Mellnik´s Ramp"white"]\n"light_yellow"/rampup to move it up", -1, -153.74190, -2210.68457, 2.17288+0.5, 20.0);
    CreateDynamic3DTextLabel(""white"["yellow"Bank"white"]\nPress 'SPACE'", -1, 2311.63, -3.89, 26.74+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);

    // Create3DTextLabel("{ffffff}You must to enter in the balloon to start it!\nIf you are in it, write "vgreen"'/ballonup'", 0xF67E0FF, 836.0856, -2000.4789, 14.7462, 40.0, 0);

	//Cop Vehicles
	veh_cnr[0] = AddStaticVehicleEx(598, 2285.7664, 2430.2393, 2.9800, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[1] = AddStaticVehicleEx(598, 2282.8796, 2444.7170, 3.0999, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[2] = AddStaticVehicleEx(528, 2296.8323, 2451.4624, 3.2577, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[3] = AddStaticVehicleEx(490, 2307.7488, 2431.1436, 3.3698, 180.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[4] = AddStaticVehicleEx(427, 2298.2749, 2460.4929, 3.2459, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[5] = AddStaticVehicleEx(427, 2298.1682, 2456.1875, 3.2459, 270.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[6] = AddStaticVehicleEx(598, 2321.2974, 2417.7664, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[7] = AddStaticVehicleEx(598, 2314.1763, 2417.7959, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[8] = AddStaticVehicleEx(598, 2307.0156, 2417.6638, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[9] = AddStaticVehicleEx(598, 2328.1362, 2417.8223, 10.4536, 90.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[10] = AddStaticVehicleEx(598, 2273.5405, 2463.0112, 10.5051, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[11] = AddStaticVehicleEx(598, 2273.5466, 2456.9402, 10.5051, 180.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[12] = AddStaticVehicleEx(598, 2277.9021, 2462.9363, 10.5051, 0.0000, -1, -1, RESPAWN_TIME);
	veh_cnr[13] = AddStaticVehicleEx(415, 2282.2024, 2478.4297, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);
	veh_cnr[14] = AddStaticVehicleEx(415, 2277.7954, 2478.4199, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);
	veh_cnr[15] = AddStaticVehicleEx(415, 2256.1121, 2442.0830, 10.5049, 180.0000, 0, 0, RESPAWN_TIME);

	//Robber Vehicles
	veh_cnr[16] = AddStaticVehicle(415,1265.0553,2647.0955,10.5763,358.8606,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[17] = AddStaticVehicle(415,1269.2340,2647.1277,10.5914,0.4775,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[18] = AddStaticVehicle(415,1275.2147,2646.5723,10.5369,359.2986,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[19] = AddStaticVehicle(415,1280.6333,2646.4082,10.5405,0.2698,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[20] = AddStaticVehicle(415,1286.0792,2646.0735,10.5735,359.1602,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[21] = AddStaticVehicle(415,1291.4120,2646.1455,10.5704,359.3882,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[22] = AddStaticVehicle(560,1296.2256,2645.6201,10.4884,359.6272,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[23] = AddStaticVehicle(560,1301.4585,2645.3882,10.4914,357.7477,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[24] = AddStaticVehicle(560,1306.0946,2645.3152,10.4949,0.9085,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[25] = AddStaticVehicle(560,1310.6602,2645.1082,10.4886,359.2265,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[26] = AddStaticVehicle(480,1265.0846,2695.6172,10.5405,181.0650,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[27] = AddStaticVehicle(480,1269.9628,2695.7546,10.6028,179.3284,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[28] = AddStaticVehicle(480,1274.7405,2695.2100,10.6010,178.8973,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[29] = AddStaticVehicle(480,1283.3344,2696.4670,10.6153,183.1555,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[30] = AddStaticVehicle(480,1288.0040,2696.5303,10.5937,181.8951,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[31] = AddStaticVehicle(480,1292.9833,2696.6577,10.6080,182.2153,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[32] = AddStaticVehicle(560,1297.6299,2697.0762,10.4878,180.0170,randomColors[random(23)], randomColors[random(23)]); // robber car
	veh_cnr[33] = AddStaticVehicle(480,1278.6843,2695.2646,10.5931,180.4225,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[34] = AddStaticVehicle(411,1302.2333,2697.1301,10.5474,177.6185,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[35] = AddStaticVehicle(411,1307.5626,2697.2542,10.5474,180.0817,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[36] = AddStaticVehicle(411,1312.7013,2696.8682,10.5474,179.2350,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[37] = AddStaticVehicle(411,1318.5618,2696.8582,10.5474,181.0543,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[38] = AddStaticVehicle(411,1324.0300,2697.5952,10.5474,180.6811,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[39] = AddStaticVehicle(581,1296.7982,2669.1709,10.4163,359.8661,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[40] = AddStaticVehicle(521,1298.7959,2668.9023,10.4026,1.2673,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[41] = AddStaticVehicle(461,1300.4843,2669.1316,10.4045,0.8748,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[42] = AddStaticVehicle(521,1302.2410,2668.7324,10.3917,359.3293,randomColors[random(23)], randomColors[random(23)]); // rVehicle
	veh_cnr[43] = AddStaticVehicle(522,1297.7581,2676.5684,10.3770,267.7968,randomColors[random(23)], randomColors[random(23)]); // rVehicle

	// Extra CNR Vehicles
	veh_cnr[44] = AddStaticVehicle(429, 2315.6377, 2490.2546, 2.9531,90.5976,0,1); // banshee
	veh_cnr[45] = AddStaticVehicle(429, 2315.6377, 2485.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[46] = AddStaticVehicle(429, 2315.6377, 2480.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[47] = AddStaticVehicle(411, 2315.6377, 2475.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[48] = AddStaticVehicle(411, 2315.6377, 2470.0505, 2.9531,90.1596,0,1); // banshee
	veh_cnr[49] = AddStaticVehicle(411, 2315.6377, 2465.0505, 2.9531,90.1596,0,1); // banshee

	veh_cnr[50] = AddStaticVehicle(415,2273.0752,2408.1292,10.5143,89.6031,0,0); // cheetah
	veh_cnr[51] = AddStaticVehicle(415,2266.0752,2408.2861,10.5151,89.3953,0,0); // cheetah
	veh_cnr[52] = AddStaticVehicle(541,2259.0752,2408.2861,10.5151,89.3953,0,1); // Bullet
	veh_cnr[53] = AddStaticVehicle(541,2252.0752,2408.2861,10.5151,89.3953,0,1); // Bullet
	veh_cnr[54] = AddStaticVehicle(541,2245.0752,2408.2861,10.5151,89.3953,0,1); // Bullet

	veh_cnr[55] = AddStaticVehicle(597,2269.0212,2442.7817,10.5881,0.1288,1,1); // police car
	veh_cnr[56] = AddStaticVehicle(597,2273.5813,2442.8718,10.5879,358.9766,0,0); // police car
	veh_cnr[57] = AddStaticVehicle(597,2277.0212,2442.7817,10.5881,0.1288,1,1); // police car
	veh_cnr[58] = AddStaticVehicle(597,2281.5813,2442.8718,10.5879,358.9766,0,0); // police car
	veh_cnr[59] = AddStaticVehicle(579,2251.9163,2442.2461,10.7527,359.4724,0,0); // huntley
	veh_cnr[60] = AddStaticVehicle(579,2260.3193,2442.0244,10.7540,359.9288,0,0); // huntley
	veh_cnr[61] = AddStaticVehicle(580,2260.4109,2477.2659,10.6165,179.2883,0,0); // stafford
	veh_cnr[62] = AddStaticVehicle(523,2256.5503,2477.2349,10.3924,178.7605,130,151); // Police Bike
	veh_cnr[63] = AddStaticVehicle(523,2254.0439,2476.5071,10.3912,179.8921,130,151); // Police Bike
	veh_cnr[64] = AddStaticVehicle(523,2251.2036,2476.9832,10.3941,178.4231,130,151); // Police Bike
	veh_cnr[65] = AddStaticVehicle(522,2311.9348,2404.8508,10.3843,90.1988,0,154); // Police NRG
	veh_cnr[66] = AddStaticVehicle(522,2307.3904,2404.8455,10.3948,90.1990,0,154); // Police NRG
	veh_cnr[67] = AddStaticVehicle(522,2301.8076,2404.8271,10.3920,90.1989,0,154); // Police NRG
	veh_cnr[68] = AddStaticVehicle(522,2308.5410,2424.6011,10.3888,179.2661,0,1); // Police NRG
	veh_cnr[69] = AddStaticVehicle(490,2303.2266,2430.8889,3.4019,1.0985,0,0); // fbi rancher
	veh_cnr[70] = AddStaticVehicle(490,2298.8901,2430.9990,3.4020,0.3266,0,0); // fbi rancher
	veh_cnr[71] = AddStaticVehicle(497,2305.5271,2384.1899,10.9974,1.0422,1,0); // Police Heli
	veh_cnr[72] = AddStaticVehicle(497,2332.3037,2389.5691,10.9974,357.4843,1,0); // Police Heli
	veh_cnr[73] = AddStaticVehicle(500,2273.3101,2425.0483,10.9230,180.0461,0,0); // Police Mesa
	veh_cnr[74] = AddStaticVehicle(579,1263.8951,2686.1047,10.7459,270.2721,randomColors[random(23)], randomColors[random(23)]); // Robber Huntley
	veh_cnr[75] = AddStaticVehicle(579,1264.3302,2681.0591,10.7514,268.8174,randomColors[random(23)], randomColors[random(23)]); // Robber Huntley
	veh_cnr[76] = AddStaticVehicle(487,1366.3276,2651.1182,10.9969,1.3734,0,6); // Robber Heli
	veh_cnr[77] = AddStaticVehicle(522,2315.1082,2461.6951,2.8463,90.7273,0,154); // Police NRG
	veh_cnr[78] = AddStaticVehicle(522,2315.1082,2459.3013,2.8463,90.7273,0,154); // Police NRG
	veh_cnr[79] = AddStaticVehicle(522,2315.1082,2466.6951,2.8463,90.7273,0,154); // Police NRG

	// CNR LVAir Vehicles.
	veh_cnr[80] = AddStaticVehicleEx(411,1306.25061035,1278.93981934,10.62031269,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[81] = AddStaticVehicleEx(411,1309.57360840,1279.07617188,10.56885719,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[82] = AddStaticVehicleEx(411,1312.77416992,1279.08898926,10.56885719,0.24719238,-1,-1,RESPAWN_TIME); //Infernus
	veh_cnr[83] = AddStaticVehicleEx(522,1329.80957031,1279.55419922,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[84] = AddStaticVehicleEx(522,1328.10888672,1279.55383301,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[85] = AddStaticVehicleEx(522,1326.20581055,1279.62536621,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[86] = AddStaticVehicleEx(522,1324.45275879,1279.59948730,10.48069000,0.0,-1,-1,RESPAWN_TIME); //NRG-500
	veh_cnr[87] = AddStaticVehicleEx(429,1282.96484375,1290.23681641,10.57031250,270.99975586,-1,-1,RESPAWN_TIME); //Banshee
	veh_cnr[88] = AddStaticVehicleEx(451,1283.08300781,1293.23046875,10.68155670,271.99951172,-1,-1,RESPAWN_TIME); //Turismo
	veh_cnr[89] = AddStaticVehicleEx(477,1271.44482422,1290.71228027,10.67031288,270.0,-1,-1,RESPAWN_TIME); //ZR-350
	veh_cnr[90] = AddStaticVehicleEx(506,1283.20556641,1300.58459473,10.65430450,270.0,-1,-1,RESPAWN_TIME); //Super GT
	veh_cnr[91] = AddStaticVehicleEx(541,1283.12548828,1303.69567871,10.54988289,271.74682617,-1,-1,RESPAWN_TIME); //Bullet
	veh_cnr[92] = AddStaticVehicleEx(402,1271.57556152,1294.70288086,10.75295925,272.0,-1,-1,RESPAWN_TIME); //Buffalo
	veh_cnr[93] = AddStaticVehicleEx(559,1271.28588867,1300.21789551,10.56702328,270.0,-1,-1,RESPAWN_TIME); //Jester
	veh_cnr[94] = AddStaticVehicleEx(560,1271.01367188,1304.30175781,10.62528801,271.25000000,-1,-1,RESPAWN_TIME); //Sultan
	veh_cnr[95] = AddStaticVehicleEx(562,1271.05859375,1308.47912598,10.57386208,270.0,-1,-1,RESPAWN_TIME); //Elegy
	veh_cnr[96] = AddStaticVehicleEx(480,1282.87402344,1306.90576172,10.67031288,270.49987793,-1,-1,RESPAWN_TIME); //Comet
	veh_cnr[97] = AddStaticVehicle(487,1296.6503,1255.1896,19.5204,359.1064,0,1); // Cop Heli
	veh_cnr[98] = AddStaticVehicle(487,1358.5673,1271.2000,10.9968,357.7185,149,0); // Cop Heli2
	veh_cnr[99] = AddStaticVehicle(476,1280.4342,1322.4233,11.5314,269.4824,149,0); // Ruster 1
	veh_cnr[100] = AddStaticVehicle(476,1280.1094,1359.2792,11.5311,271.8246,0,0); // ruster 2

	for(new iit = 0; iit < sizeof(veh_cnr); iit++)
	{
		SetVehicleVirtualWorld(veh_cnr[iit], CNR_WORLD);
	}

	printf("#Visual Meshes loaded in %i ms", (GetTickCount() + 3600000) - count);
	return 1;
}

PVSlotSelect(playerid)
{
    new string[1024], tmp[128];

	strcat(string, ""nef_green"Select an unused slot for your new vehicle below:\n");

    for(new i = 0; i < MAX_PLAYER_PVS; i++)
    {
        if(i > PlayerInfo[playerid][AdditionalPVSlots]) // Can not use
        {
        	format(tmp, sizeof(tmp), ""white"PV Slot %i "red"(Locked)\n", i + 1);
        	strcat(string, tmp);
		}
        else // Can use
		{
            if(PlayerPV[playerid][i][Model] != 0)
            {
            	format(tmp, sizeof(tmp), ""white"PV Slot %i "green2"(Used) (Vehicle: %s)\n", i + 1, GetPVNameByModelId(PlayerPV[playerid][i][Model]));
            	strcat(string, tmp);
			}
			else
			{
            	format(tmp, sizeof(tmp), ""white"PV Slot %i\n", i + 1);
            	strcat(string, tmp);
			}
		}
    }

	ShowPlayerDialog(playerid, PV_SLOT_SELECT_DIALOG, DIALOG_STYLE_LIST, ""nef" - Private Vehicle Shop", string, "Select", "Back");
	return 1;
}

CreateFinalCar(playerid, pv_slot)
{
	if(pv_slot > PlayerInfo[playerid][AdditionalPVSlots])
	{
	    SendInfo(playerid, "~y~~h~This pv slot is locked!", 2500);
	    PVSlotSelect(playerid);
	    return 1;
	}

	if(PlayerPV[playerid][pv_slot][Model] != 0)
	{
	    SendInfo(playerid, "~y~~h~This pv slot is currently in use!", 2500);
	    PVSlotSelect(playerid);
	    return 1;
	}

	DestroyPlayerVehicles(playerid);

    if(PreviewTmpVeh[playerid] != -1)
    {
		DestroyVehicle_(PreviewTmpVeh[playerid]);
		PreviewTmpVeh[playerid] = -1;
	}

    PVSelect[playerid] = pv_slot;
    PlayerPV[playerid][PVSelect[playerid]][Model] = PlayerPVTMP[playerid][0];
    strmid(PlayerPV[playerid][PVSelect[playerid]][Plate], PlayerPVTMPPlate[playerid], 0, 13, 13);
    
	new vlabel[100];

	format(vlabel, sizeof(vlabel), ""nef_yellow"%s´s \n"white"private vehicle", __GetName(playerid));

	PlayerPV[playerid][PVSelect[playerid]][PVehicleID] = CreateVehicle_(PlayerPV[playerid][PVSelect[playerid]][Model], 1826.9821, -1383.8724, 25.3348, 180.0407, 0, 0, -1);
	PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0, -1, -1, -1, 30.0);

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetVehicleVirtualWorld(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);
	LinkVehicleToInterior(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);
    GivePlayerCash(playerid, -PlayerPVTMP[playerid][1]);

    SetVehicleNumberPlate(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Plate]);
    SetVehicleToRespawn(PlayerPV[playerid][PVSelect[playerid]][PVehicleID]);

    TogglePlayerControllable(playerid, true);
    PutPlayerInVehicle(playerid, PlayerPV[playerid][PVSelect[playerid]][PVehicleID], 0);
    SendInfo(playerid, "~y~~h~Private vehicle purchased!", 3500);
    gTeam[playerid] = NORMAL;

    RandomWeapon(playerid);

    ShowPlayerDialog(playerid, 5003, DIALOG_STYLE_MSGBOX, ""white"Vehicle bought!", ""white"You can now use these commands:\n\n"dl"/pv\n"dl"/lock\n"dl"/unlock", "OK", "");

	MySQL_SavePlayer(playerid, true);
    return 1;
}

PortPlayerMap(playerid, Float:X, Float:Y, Float:Z, Float:Angle, const mapname[], const cmd[], bool:populate = true)
{
	if(gTeam[playerid] != NORMAL)
	{
	    SCM(playerid, GREY, NOT_AVAIL);
		return 0;
	}

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	switch(YHash(cmd, false))
	{
	    case _I(b,i,k,e,c), _I(s,k,y,d,i,v,e), _I(s,k,y,d,i,v,e,2), _I(s,k,y,d,i,v,e,3), _I(s,k,y,d,i,v,e,4), _I(s,k,y,d,i,v,e,5): { }
		default:
		{
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
		}
	}

    Streamer_UpdateEx(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, floatadd(Z, 3.0));
	SetPlayerFacingAngle(playerid, Angle);

    PlayerPlaySound(playerid, 1039, 0.0, 0.0, 0.0);
	GameTextForPlayer(playerid, mapname, 1000, 6);
    SetCameraBehindPlayer(playerid);
    if(populate) NewMapEvent(playerid, cmd);
	return 1;
}

PortPlayerMapVeh(playerid, Float:X, Float:Y, Float:Z, Float:Angle, Float:XVeh, Float:YVeh, Float:ZVeh, Float:AngleVeh, const mapname[], const cmd[], bool:populate = true)
{
	if(gTeam[playerid] != NORMAL)
	{
	    SCM(playerid, GREY, NOT_AVAIL);
		return 0;
	}
	
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	switch(YHash(cmd, false))
	{
	    case _I(b,i,k,e,c), _I(s,k,y,d,i,v,e), _I(s,k,y,d,i,v,e,2), _I(s,k,y,d,i,v,e,3), _I(s,k,y,d,i,v,e,4), _I(s,k,y,d,i,v,e,5): { }
		default:
		{
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
		}
	}
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new veh = GetPlayerVehicleID(playerid);
	    Streamer_UpdateEx(playerid, XVeh, YVeh, ZVeh);
	    SetVehiclePos(veh, XVeh, YVeh, floatadd(ZVeh, 4.5));
	    SetVehicleVirtualWorld(veh, 0);
   		SetVehicleZAngle(veh, AngleVeh);
		PutPlayerInVehicle(playerid, veh,0);
	}
	else
	{
	    Streamer_UpdateEx(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, floatadd(Z, 3.0));
		SetPlayerFacingAngle(playerid, Angle);
	}
	
	PlayerPlaySound(playerid, 1039, 0.0, 0.0, 0.0);
    GameTextForPlayer(playerid, mapname, 1000, 6);
    SetCameraBehindPlayer(playerid);
    if(populate) NewMapEvent(playerid, cmd);
	return 1;
}

SendWelcomeMSG(playerid)
{
	SCM(playerid, GREY, "===================="white""CURRENT_VERSION""grey"=======================");
	SCM(playerid, NEF_GREEN, "» Type /help for further information");
	SCM(playerid, WHITE, "» /admins to see online administrative personnel");
	SCM(playerid, BLUE, "» You can show/hide the footer with /showf /hidef");
	SCM(playerid, YELLOW, "» Visit our forum at http://"SVRFORUM"");
	SCM(playerid, NEF_YELLOW, "» You can use /radio or /streams for music streams");
	SCM(playerid, RED, "» Welcome on "SVRLOGO"");
	SCM(playerid, GREY, "===================="white""CURRENT_VERSION""grey"=======================");
	return 1;
}

SetPlayerBGStaticMeshes(playerid)
{
    TogglePlayerControllable(playerid, false);
    SetPlayerHealth(playerid, 99999.0);
	ResetPlayerWeapons(playerid);

    switch(CurrentBGMap)
    {
        case BG_VOTING:
        {
			SetPlayerPos(playerid, BG_MAP1_WHILECAM);
       		SetPlayerCameraPos(playerid, BG_MAP1_CAMPOS);
       		SetPlayerCameraLookAt(playerid, BG_MAP1_CAMLA);
        }
        case BG_MAP1:
        {
	  		SetPlayerPos(playerid, BG_MAP1_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP1_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP1_CAMLA);
        }
        case BG_MAP2:
        {
     		SetPlayerPos(playerid, BG_MAP2_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP2_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP2_CAMLA);
        }
        case BG_MAP3:
        {
     		SetPlayerPos(playerid, BG_MAP3_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP3_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP3_CAMLA);
        }
        case BG_MAP4:
        {
     		SetPlayerPos(playerid, BG_MAP4_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP4_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP4_CAMLA);
        }
        case BG_MAP5:
        {
     		SetPlayerPos(playerid, BG_MAP5_WHILECAM);
	       	SetPlayerCameraPos(playerid, BG_MAP5_CAMPOS);
	       	SetPlayerCameraLookAt(playerid, BG_MAP5_CAMLA);
        }
    }
	return 1;
}

function:DerbyVoting()
{
	if(CurrentDerbyPlayers < 2)
	{
	    DerbyMSG("There need to be 2 players to start!");
		ClearDerbyVotes();
		ExecDerbyVotingTimer();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	ClearDerbyAfkPlayers();

	new iTotalVotes;
	iTotalVotes = DerbyMapVotes[0] + DerbyMapVotes[1] + DerbyMapVotes[2] + DerbyMapVotes[3] + DerbyMapVotes[4] + DerbyMapVotes[5] + DerbyMapVotes[6] + DerbyMapVotes[7] + DerbyMapVotes[8];
	if(iTotalVotes == 0)
	{
	    ExecDerbyVotingTimer();
		ClearDerbyVotes();
		DerbyMSG("There were no votes!");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
	    return 1;
	}

	new highestmapvotes = -1, draw = 0;
	for(new i = 0; i < sizeof(DerbyMapVotes); i++)
	{
 		if(DerbyMapVotes[i] > highestmapvotes && draw == 0)
		{
  			highestmapvotes = DerbyMapVotes[i];
		}
		else if(DerbyMapVotes[i] > highestmapvotes && draw != 0)
		{
		    highestmapvotes = DerbyMapVotes[i];
		    draw = 0;
		}
		else if(DerbyMapVotes[i] == highestmapvotes)
		{
			draw++;
		}
	}

	if(draw >= 1)
	{
	    DerbyMSG("Voting was not clear. New Voting starting.");
	    ExecDerbyVotingTimer();
		ClearDerbyVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	new	active_db_players = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == DERBY)
		{
	        SetPlayerVirtualWorld(i, DERBY_WORLD); // <bla>
	        if(IsPlayerOnDesktop(i, 5000))
			{
	            bDerbyAFK[i] = true;
	        }
	        else
			{
	            active_db_players++;
	        }
	    }
	}
	if(active_db_players < 2)
	{
	    // Wir können nicht starten
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	if(highestmapvotes == DerbyMapVotes[0]) StartDerbyMap1();
	else if(highestmapvotes == DerbyMapVotes[1]) StartDerbyMap2();
	else if(highestmapvotes == DerbyMapVotes[2]) StartDerbyMap3();
    else if(highestmapvotes == DerbyMapVotes[3]) StartDerbyMap4();
    else if(highestmapvotes == DerbyMapVotes[4]) StartDerbyMap5();
    else if(highestmapvotes == DerbyMapVotes[5]) StartDerbyMap6();
    else if(highestmapvotes == DerbyMapVotes[6]) StartDerbyMap7();
    else if(highestmapvotes == DerbyMapVotes[7]) StartDerbyMap8();
    else if(highestmapvotes == DerbyMapVotes[8]) StartDerbyMap9();
	return 1;
}

ClearDerbyAfkPlayers()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    bDerbyAFK[i] = false;
	}
	return 1;
}

function:StartDerbyMap1()
{
    CurrentDerbyMap = 1;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Lighthouse' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

	IsDerbyRunning = true;

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
		   	for(new m1s = 0; m1s < sizeof(Derby_Map1Spawns); m1s++)
			{
				if(!Derby_Map1Spawns[m1s][m1sUsed])
		 		{
		 		    Streamer_UpdateEx(i, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]);
	    			SetPlayerPos(i, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					pDerbyCar[i] = CreateVehicle_(vid, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], floatadd(Derby_Map1Spawns[m1s][m1sZ], 6.0), Derby_Map1Spawns[m1s][m1sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
 					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!", 3000, 5);
					Derby_Map1Spawns[m1s][m1sUsed] = true;
					break;
				}
 			}
		}
 	}
 	ExecDerbyTimer();
 	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap2()
{
    CurrentDerbyMap = 2;
    new pcount = 0;
	ClearDerbyVotes();
    DerbyMSG("Map 'Truncat' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
  		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m2s = 0; m2s < sizeof(Derby_Map2Spawns); m2s++)
			{
				if(!Derby_Map2Spawns[m2s][m2sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]);
	    		    SetPlayerPos(i, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					pDerbyCar[i] = CreateVehicle_(vid, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], floatadd(Derby_Map2Spawns[m2s][m2sZ], 6.0), Derby_Map2Spawns[m2s][m2sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
 					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!",3000,5);
					Derby_Map2Spawns[m2s][m2sUsed] = true;
					break;
				}
			}
		}
	}
	ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap3()
{
    CurrentDerbyMap = 3;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Sky Skiing' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m3s = 0; m3s < sizeof(Derby_Map3Spawns); m3s++)
			{
				if(!Derby_Map3Spawns[m3s][m3sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]);
	    		    SetPlayerPos(i, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					pDerbyCar[i] = CreateVehicle_(vid, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], floatadd(Derby_Map3Spawns[m3s][m3sZ], 6.0), Derby_Map3Spawns[m3s][m3sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i , pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!",3000,5);
					Derby_Map3Spawns[m3s][m3sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap4()
{
    CurrentDerbyMap = 4;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Townhall' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m4s = 0; m4s < sizeof(Derby_Map4Spawns); m4s++)
			{
				if(!Derby_Map4Spawns[m4s][m4sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]);
	    		    SetPlayerPos(i, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					pDerbyCar[i] = CreateVehicle_(vid, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], floatadd(Derby_Map4Spawns[m4s][m4sZ], 6.0), Derby_Map4Spawns[m4s][m4sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!",3000,5);
					Derby_Map4Spawns[m4s][m4sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap5()
{
    CurrentDerbyMap = 5;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Glazz' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m5s = 0; m5s < sizeof(Derby_Map5Spawns); m5s++)
			{
				if(!Derby_Map5Spawns[m5s][m5sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]);
	    		    SetPlayerPos(i, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					new vid;
					switch(random(6))
					{
						case 0: vid = 494;
						case 1: vid = 495;
						case 2: vid = 504;
						case 3: vid = 504;
						case 4: vid = 573;
						case 5: vid = 402;
					}
					pDerbyCar[i] = CreateVehicle_(vid, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], floatadd(Derby_Map5Spawns[m5s][m5sZ], 6.0), Derby_Map5Spawns[m5s][m5sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!",3000,5);
					Derby_Map5Spawns[m5s][m5sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap6()
{
    CurrentDerbyMap = 6;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Rambo' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m6s = 0; m6s < sizeof(Derby_Map6Spawns); m6s++)
			{
				if(!Derby_Map6Spawns[m6s][m6sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]);
	    		    SetPlayerPos(i, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					pDerbyCar[i] = CreateVehicle_(573, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], floatadd(Derby_Map6Spawns[m6s][m6sZ], 6.0), Derby_Map6Spawns[m6s][m6sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!", 3000, 5);
					Derby_Map6Spawns[m6s][m6sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap7()
{
    CurrentDerbyMap = 7;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'SilverGround' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m7s = 0; m7s < sizeof(Derby_Map7Spawns); m7s++)
			{
				if(!Derby_Map7Spawns[m7s][m7sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]);
	    		    SetPlayerPos(i, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					pDerbyCar[i] = CreateVehicle_(415, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], floatadd(Derby_Map7Spawns[m7s][m7sZ], 6.0), Derby_Map7Spawns[m7s][m7sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!", 3000, 5);
					Derby_Map7Spawns[m7s][m7sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap8()
{
    CurrentDerbyMap = 8;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Anubis' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m8s = 0; m8s < sizeof(Derby_Map8Spawns); m8s++)
			{
				if(!Derby_Map8Spawns[m8s][m8sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]);
	    		    SetPlayerPos(i, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					pDerbyCar[i] = CreateVehicle_(415, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], floatadd(Derby_Map8Spawns[m8s][m8sZ], 6.0), Derby_Map8Spawns[m8s][m8sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!", 3000, 5);
					Derby_Map8Spawns[m8s][m8sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:StartDerbyMap9()
{
    CurrentDerbyMap = 9;
    new pcount = 0;
	ClearDerbyVotes();
	DerbyMSG("Map 'Confusing' won! Let´s start!");

 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    ClearAnimations(i);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

	        if(IsPlayerOnDesktop(i, 1500))
			{
			    new string[100];
			    format(string, sizeof(string), "%s couldn´t be put in vehicle!", __GetName(i));
				DerbyMSG(string);
				bDerbyAFK[i] = true;
				DerbyWinner[i] = false;
	        }
			else pcount++;
		}
	}

	if(pcount <= 1)
	{
		DerbyMSG("Couldn't start Derby! Too many AFK players");
        ExecDerbyVotingTimer();
        ClearDerbyVotes();
        IsDerbyRunning = false;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
 			if(gTeam[i] == DERBY) ShowDialog(i, DERBY_VOTING_DIALOG);
		}
		return 1;
	}

    IsDerbyRunning = true;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && IsPlayerConnected(i) && !IsPlayerNPC(i) && !bDerbyAFK[i])
		{
			DerbyWinner[i] = true;
			DerbyPlayers++;
			for(new m9s = 0; m9s < sizeof(Derby_Map9Spawns); m9s++)
			{
				if(!Derby_Map9Spawns[m9s][m9sUsed])
	    		{
	    		    Streamer_UpdateEx(i, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], Derby_Map9Spawns[m9s][m9sZ]);
	    		    SetPlayerPos(i, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], Derby_Map9Spawns[m9s][m9sZ]);

	    		    SetPlayerHealth(i, 100.0);
	    		    ResetPlayerWeapons(i);
	    		    ShowPlayerDialog(i, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

					pDerbyCar[i] = CreateVehicle_(415, Derby_Map9Spawns[m9s][m9sX], Derby_Map9Spawns[m9s][m9sY], floatadd(Derby_Map9Spawns[m9s][m9sZ], 6.0), Derby_Map9Spawns[m9s][m9sA], (random(128) + 127), (random(128) + 127), 60);
                    SetVehicleNumberPlate(pDerbyCar[i], "{3399ff}D{FFFFFF}erb{F81414}Y");
                    SetVehicleToRespawn(pDerbyCar[i]);
					SetVehicleVirtualWorld(pDerbyCar[i], GetPlayerVirtualWorld(i));
					TogglePlayerControllable(i, true);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					ClearAnimations(i);
					PutPlayerInVehicle(i, pDerbyCar[i], 0);
					RepairVehicle(pDerbyCar[i]);
					SetCameraBehindPlayer(i);
					
					new Float:POS[3];
					GetVehicleVelocity(pDerbyCar[i], POS[0], POS[1], POS[2]);
					SetVehicleVelocity(pDerbyCar[i], POS[0] * 1.2, POS[1] * 1.2, POS[2] * 1.2);
					
					GameTextForPlayer(i, "~p~[DERBY]: ~w~Derby ist starting!", 3000, 5);
					Derby_Map9Spawns[m9s][m9sUsed] = true;
					break;
				}
			}
		}
	}
    ExecDerbyTimer();
	tDerbyFallOver = SetTimer("DerbyFallOver", DERBY_FALLOVER_CHECK_TIME, true);
	return 1;
}

function:Derby()
{
    IsDerbyRunning = false;
    KillTimer(tDerbyTimer);
    KillTimer(tDerbyFallOver);
    ClearDerbySpawns();
	ClearDerbyVotes();
	ResetDerbyGameTime();
	ExecDerbyVotingTimer();

	if(DerbyPlayers > 1)
	{
    	for(new i = 0; i < MAX_PLAYERS; i++)
    	{
  			if(gTeam[i] == DERBY)
			{
			    RemovePlayerFromVehicle(i);
			    if(pDerbyCar[i] != -1)
			    {
			    	DestroyVehicle_(pDerbyCar[i]);
			    	pDerbyCar[i] = -1;
				}
       			SetPlayerVirtualWorld(i, DERBY_WORLD);
       			SetPlayerDerbyStaticMeshes(i);
				ShowDialog(i, DERBY_VOTING_DIALOG);
			}
		}
  		SCMToAll(-1, ""derby_sign" No winner! new round starting soon. Join with /derby");
	}
	else if(DerbyPlayers == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
    	{
			if(gTeam[i] == DERBY && !bDerbyAFK[i])
			{
			    if(DerbyWinner[i])
			    {
			    	PlayerInfo[i][DerbyWins]++;

					if(PlayerInfo[i][DerbyWins] >= 10 && pAch[i][E_ach_destroyer] == 0)
					{
					    GivePlayerAchievement(i, "Destroyer", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
					    pAch[i][E_ach_destroyer] = 1;
					}

					new money = (3500 * CurrentDerbyPlayers),
						score = floatround(floatdiv(2 * CurrentDerbyPlayers, 1.5)),
						string[128];

			    	GivePlayerCash(i, money, true, true);
			    	GivePlayerScore_(i, score, true, true);
			    	
			    	DerbyWinner[i] = false;
			    	
			    	format(string, sizeof(string), "%s won the Derby and earned "nef_yellow"$%s", __GetName(i), ToCurrency(money));
					DerbyMSG(string);
	   			}
			    if(pDerbyCar[i] != -1)
			    {
			    	DestroyVehicle_(pDerbyCar[i]);
			    	pDerbyCar[i] = -1;
				}
				SetPlayerDerbyStaticMeshes(i);
	      		ShowDialog(i, DERBY_VOTING_DIALOG);
			}
		}
	}
	DerbyPlayers = 0;
	CurrentDerbyPlayers = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
   	{
		if(gTeam[i] == DERBY)
		{
		    if(bDerbyAFK[i])
		    {
		        if(IsPlayerOnDesktop(i, 1300))
		        {
		            continue;
		        }
		        else CurrentDerbyPlayers++;
		    }
		    else CurrentDerbyPlayers++;
		}
	}
	ClearDerbyAfkPlayers();
	return 1;
}

function:DerbyFallOver()
{
	new CURRENT_FALLOVER;
	switch(CurrentDerbyMap)
	{
	    case 1: CURRENT_FALLOVER = DERBY_FALLOVER_M1;
	    case 2: CURRENT_FALLOVER = DERBY_FALLOVER_M2; // <-- ;) ?
	    case 3: CURRENT_FALLOVER = DERBY_FALLOVER_M3; // <-- ;) ? wasch war da falsch    -> http://www.youtube.com/watch?v=1zrtdDQlYOY
	    case 4: CURRENT_FALLOVER = DERBY_FALLOVER_M4;
	    case 5: CURRENT_FALLOVER = DERBY_FALLOVER_M5;
	    case 6: CURRENT_FALLOVER = DERBY_FALLOVER_M6;
	    case 7: CURRENT_FALLOVER = DERBY_FALLOVER_M7;
	    case 8: CURRENT_FALLOVER = DERBY_FALLOVER_M8;
	    case 9: CURRENT_FALLOVER = DERBY_FALLOVER_M9;
	}
	new Float:POS[3], string[64];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] == DERBY && DerbyWinner[i])
		{
		    if(bDerbyAFK[i]) continue;

		    if(IsPlayerOnDesktop(i, 4000))
			{
	   			TogglePlayerControllable(i, true);
			    if(pDerbyCar[i] != -1)
			    {
			        SetVehiclePos(pDerbyCar[i], 0.0, 0.0, 20.0);
					RemovePlayerFromVehicle(i);
					DestroyVehicle_(pDerbyCar[i]);
			    	pDerbyCar[i] = -1;
				}
				format(string, sizeof(string), "%s(%i) was kicked out of derby (AFK)", __GetName(i), i);
                DerbyMSG(string);
				DerbyPlayers--;
	 			DerbyWinner[i] = false;
				SetPlayerDerbyStaticMeshes(i);
				SetPlayerVirtualWorld(i, 12345); // <bla>
	  			if((DerbyPlayers == 1) && (IsDerbyRunning))
	  			{
					Derby();
	  			}
	  			continue;
		    }

			if(GetPlayerPos(i, POS[0], POS[1], POS[2]))
			{
				if(POS[2] <= CURRENT_FALLOVER)
				{
					format(string, sizeof(string), "%s(%i) fell over the map!", __GetName(i), i);
					DerbyMSG(string);
		 			DerbyPlayers--;
     			    if(pDerbyCar[i] != -1)
				    {
						DestroyVehicle_(pDerbyCar[i]);
				    	pDerbyCar[i] = -1;
					}
		 			DerbyWinner[i] = false;
					SetPlayerDerbyStaticMeshes(i);
		  			if((DerbyPlayers == 1) && (IsDerbyRunning))
		  			{
						Derby();
		  			}
				}
            }
		}
	}
}

function:QueueProcess()
{
	mysql_tquery(g_SQL_handle, "SELECT * FROM `queue` WHERE `ExecutionDate` < UNIX_TIMESTAMP();", "OnQueueReceived", "");
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(IsPlayerOnDesktop(i, 30000)) continue;
	
		if(PlayerInfo[i][PayDay] > 1)
		{
		    PlayerInfo[i][PayDay]--;
		}
		else if(PlayerInfo[i][PayDay] <= 1)
		{
		    PlayerInfo[i][PayDay] = 60;
		    
		    new string0[100],
				string1[100],
				string2[100],
				string3[100],
				string4[100],
				string5[100],
				interest = floatround(floatmul(floatdiv(PlayerInfo[i][Bank], 2150.0), 7.0), floatround_round),
				vipinterest = floatround(interest / 2.5),
				b_vipearnings = 0;

			GameTextForPlayer(i, "~g~~h~~h~PayDay~n~~w~Paycheck", 6000, 1);

			format(string0, sizeof(string0), "Bank Balance before PayDay: "green"$%s", ToCurrency(PlayerInfo[i][Bank]));
			format(string1, sizeof(string1), "Bank Interest Gained: "green"$%s", ToCurrency(interest));

			if(PlayerInfo[i][VIP] == 1)
			{
	        	format(string4, sizeof(string4), "Bank Interest Gained "lb_e"(VIP BOOST)"white": "green"$%s", ToCurrency(vipinterest));
	        }
	        else format(string4, sizeof(string4), "Bank Interest Gained "lb_e"(VIP BOOST)"white": "red"---");

			if(PlayerInfo[i][Props] > 0)
			{
			    b_vipearnings = floatround(GetPlayerPropEearnings(i) / 2.5);
			    format(string3, sizeof(string3), "Business earnings: "green"$%s", ToCurrency(GetPlayerPropEearnings(i)));
			   	if(PlayerInfo[i][VIP] == 1)
   				{
			   		format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "green"$%s", ToCurrency(b_vipearnings));
				}
				else format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "red"---");
			}
			else
			{
				format(string3, sizeof(string3), "Business earnings: "red"---");
				format(string5, sizeof(string5), "Business earnings "lb_e"(VIP BOOST)"white": "red"---");
			}

			PlayerInfo[i][Bank] = PlayerInfo[i][Bank] + interest + GetPlayerPropEearnings(i) + vipinterest + b_vipearnings;

			format(string2, sizeof(string2), "Bank Balance after PayDay: "green"$%s", ToCurrency(PlayerInfo[i][Bank]));

			SCM(i, -1, ""green"|--------------------"yellow"PAY-DAY"green"-------------------|");
			SCM(i, WHITE, string0);
			SCM(i, WHITE, string1);
			SCM(i, WHITE, string4);
			SCM(i, WHITE, string3);
			SCM(i, WHITE, string5);
			SCM(i, WHITE, string2);
			SCM(i, -1, ""green"|--------------------------------------------------|");
		}
	}
	return 1;
}

function:OnQueueReceived()
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
		for(new i = 0; i < rows; i++)
		{
		    new action = cache_get_row_int(i, 1, g_SQL_handle);
		    switch(action)
			{
		        case 1: // give a player credits
		        {
		            new name[26], credits, payment[21];
		            cache_get_row(i, 3, gstr2, g_SQL_handle, sizeof(gstr2));
		            
		            sscanf(gstr2, "p<,>s[25]is[20]",
		                name,
		                credits,
						payment);
		            
		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID && islogged(playerid))
		            {
						AlterPlayerCredits(playerid, credits);
						
						format(gstr2, sizeof(gstr2), ""server_sign" "r_besch"You were given %sGC!", ToCurrency(credits));
						SCM(playerid, -1, gstr2);

						format(gstr2, sizeof(gstr2), "~r~~h~~h~You were given ~b~~h~~h~%sGC ~r~~h~~h~!", ToCurrency(credits));
						InfoTD_MSG(playerid, 10000, gstr2);
						MySQL_SavePlayer(playerid, true);
		            }
		            else
		            {
		                mysql_format(g_SQL_handle, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `Credits` = `Credits` + %i WHERE `Name` = '%e' LIMIT 1;", credits, name);
		                mysql_tquery(g_SQL_handle, gstr2, "", "");
						mysql_format(g_SQL_handle, gstr2, sizeof(gstr2), "INSERT INTO `creditslog` VALUES (NULL, '%e', %i, %i);", name, credits, gettime());
						mysql_tquery(g_SQL_handle, gstr2, "", "");
		            }
		            
					format(gstr, sizeof(gstr), "~p~%s received %s credits for donating %s!", name, ToCurrency(credits), payment);
                    GameTextForAll(gstr, 10000, 3);
                    format(gstr, sizeof(gstr), "%s received %s credits for donating %s!", name, ToCurrency(credits), payment);
                    SCMToAll(ORANGE, gstr);
		        }
		        case 2..6: // alter boost
		        {
		            new name[25];
		            cache_get_row(i, 3, name, g_SQL_handle, sizeof(name));
		            
		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID)
		            {
		                switch(action)
		                {
		                    case 2:
							{
							    if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x2) PlayerInfo[playerid][Boost] &= ~BOOST_MONEY_x2;
							    SCM(playerid, -1, ""server_sign" "green"Your Money Boost x2 ran out!");
							    SendInfo(playerid, "~b~~h~~h~Your Money Boost x2 ran out!", 2500);
							}
							case 3:
							{
							    if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x3) PlayerInfo[playerid][Boost] &= ~BOOST_MONEY_x3;
							    SCM(playerid, -1, ""server_sign" "green"Your Money Boost x3 ran out!");
							    SendInfo(playerid, "~b~~h~~h~Your Money Boost x3 ran out!", 2500);
							}
							case 4:
							{
							    if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x2) PlayerInfo[playerid][Boost] &= ~BOOST_SCORE_x2;
							    SCM(playerid, -1, ""server_sign" "green"Your Score Boost x2 ran out!");
							    SendInfo(playerid, "~b~~h~~h~Your Score Boost x2 ran out!", 2500);
							}
							case 5:
							{
							    if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x3) PlayerInfo[playerid][Boost] &= ~BOOST_SCORE_x3;
							    SCM(playerid, -1, ""server_sign" "green"Your Score Boost x3 ran out!");
							    SendInfo(playerid, "~b~~h~~h~Your Score Boost x3 ran out!", 2500);
							}
							case 6:
							{
							    if(PlayerInfo[playerid][Boost] & BOOST_MASTER) PlayerInfo[playerid][Boost] &= ~BOOST_MASTER;
							    SCM(playerid, -1, ""server_sign" "green"Your Master Boost ran out!");
							    SendInfo(playerid, "~b~~h~~h~Your Master Boost ran out!", 2500);
							}
		                }
		            }
		        }
		        case 7: // give a player vip
		        {
		            new name[26], payment[21];
                    cache_get_row(i, 3, gstr2, g_SQL_handle, sizeof(gstr2));
                    
				    sscanf(gstr2, "p<,>s[25]s[20]",
		                name,
		                payment);

		            new playerid = __GetPlayerID(name);
		            if(playerid != INVALID_PLAYER_ID && islogged(playerid))
		            {
		                PlayerInfo[playerid][VIP] = 1;
		                PlayerInfo[playerid][Bank] += 1000000;
		                
		                if(PlayerInfo[playerid][AdditionalPVSlots] < 7)
		                {
		                    PlayerInfo[playerid][AdditionalPVSlots]++;
		                }
		                if(PlayerInfo[playerid][AdditionalPVSlots] < 7)
		                {
		                    PlayerInfo[playerid][AdditionalPVSlots]++;
		                }
						if(PlayerInfo[playerid][AdditionalHouseSlots] < 4)
						{
							PlayerInfo[playerid][AdditionalHouseSlots]++;
						}
						if(PlayerInfo[playerid][AdditionalPropSlots] < 4)
						{
							PlayerInfo[playerid][AdditionalPropSlots]++;
						}
		                
						SCM(playerid, -1, ""server_sign" "r_besch"You received VIP status + $1,000,000 bank money + 2 PV Slots + 1 House Slot + 1 Bizz Slot!");

						InfoTD_MSG(playerid, 10000, "~r~~h~~h~You received VIP status + $1,000,000 bank money + 2 PV Slots + 1 House Slot + 1 Bizz Slot!");
						MySQL_SavePlayer(playerid, true);
		            }
		            else
		            {
						mysql_format(g_SQL_handle, gstr, sizeof(gstr), "SELECT `AdditionalPVSlots`, `AdditionalHouseSlots`, `AdditionalPropSlots` FROM `accounts` WHERE `Name` = '%e';", name);
						new Cache:res = mysql_query(g_SQL_handle, gstr);
						
						if(cache_get_row_count(g_SQL_handle) > 0)
						{
							new pvslot = cache_get_row_int(0, 0, g_SQL_handle),
							    houseslot = cache_get_row_int(0, 1, g_SQL_handle),
							    propslot = cache_get_row_int(0, 2, g_SQL_handle);

			                if(pvslot < 7)
			                {
			                    pvslot++;
			                }
			                if(pvslot < 7)
			                {
			                    pvslot++;
			                }
			                if(houseslot < 4)
			                {
			                    houseslot++;
			                }
			                if(propslot < 4)
			                {
			                    propslot++;
			                }

			                mysql_format(g_SQL_handle, gstr2, sizeof(gstr2), "UPDATE `accounts` SET `VIP` = 1, `Bank` = `Bank` + 1000000, `AdditionalPVSlots` = %i, `AdditionalHouseSlots` = %i, `AdditionalPropSlots` = %i WHERE `Name` = '%e' LIMIT 1;",
								pvslot,
								houseslot,
								propslot,
								name);

			                mysql_tquery(g_SQL_handle, gstr2, "", "");
						}
						
						cache_delete(res);
		            }
		            
					format(gstr, sizeof(gstr), "~p~%s received VIP for donating $%s!", name, payment);
                    GameTextForAll(gstr, 10000, 3);
                    format(gstr, sizeof(gstr), "%s received VIP for donating $%s!", name, payment);
                    SCMToAll(ORANGE, gstr);
		        }
		        default: continue;
		    }
			format(gstr2, sizeof(gstr2), "DELETE FROM `queue` WHERE `ID` = %i LIMIT 1;", cache_get_row_int(i, 0, g_SQL_handle));
			mysql_tquery(g_SQL_handle, gstr2, "", "");
		}
	}
	return 1;
}

function:ProcessTick()
{
	static year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);

	format(gstr, sizeof(gstr), "worldtime %02i:%02i | %02i.%02i", hour, minute, day, month);
	SendRconCommand(gstr);

	if(g_RaceStatus == RaceStatus_Active)
	{
	    Race_CalculatePosition();
	}

	T_RacePlayers = 0;
	T_DerbyPlayers = 0;
	T_GunGamePlayers = 0;
	T_FalloutPlayers = 0;
	T_TDMPlayers = 0;
	T_WarPlayers = 0;
	T_MinigunPlayers = 0;
	T_SniperPlayers = 0;
	T_CNRPlayers = 0;
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	    {
			switch(gTeam[i])
			{
			    case NORMAL:
			    {
	   			    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				    {
						for(new ii = 0; ii < sizeof(g_SpawnAreas); ii++)
						{
						    if(IsPlayerInDynamicArea(i, g_SpawnAreas[ii]))
						    {
						        SetVehicleVelocity(GetPlayerVehicleID(i), 0.0, 0.30, 0.35);
						        break;
						    }
						}
				    }
			    }
			    case gRACE:
			    {
					if(g_RaceStatus == RaceStatus_Active)
					{
			  			if(g_RacePlayerCount == 1)
			  			{
			                format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~1/1~n~~w~Checkpoint: ~b~~h~~h~%i/%i~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~%s", g_CPProgress[i], g_RaceArray[E_rCPs], g_RacePlayerCount, g_NextRace, GameTimeConvert(g_RaceTime));
						}
						else
						{
							format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~%i/%i~n~~w~Checkpoint: ~b~~h~~h~%i/%i~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~%s", g_RacePosition[i], g_RacePlayerCount, g_CPProgress[i], g_RaceArray[E_rCPs], g_RacePlayerCount, g_NextRace, GameTimeConvert(g_RaceTime));
						}
					}
					else if(g_RaceStatus == RaceStatus_StartUp)
					{
						format(gstr2, sizeof(gstr2), "Position: ~r~~h~~h~-/-~n~~w~Checkpoint: ~b~~h~~h~-/-~n~~w~Players: ~g~~h~~h~%i/12~n~~w~Map: ~y~~h~%03i~n~~w~Timeleft: ~r~~h~~h~--:--", g_RacePlayerCount, g_NextRace);
					}
					PlayerTextDrawSetString(i, TXTRaceInfo[i], gstr2);

			        if(IsPlayerInAnyVehicle(i))
			        {
						new kmh = GetPlayerKMH(i);
						if(290 <= kmh > 270)
						{
						  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Possible speed cheat detected | Player: %s(%i) | Race", __GetName(i), i);
							AdminMSG(RED, gstr2);
							print(gstr2);
						}
						else if(kmh > 290)
						{
						    Command_ReProcess(i, "/exit", false);
						  	format(gstr2, sizeof(gstr2), ""yellow"** "red"Speed cheat detected | Player: %s(%i) | Player has been removed from race", __GetName(i), i);
							AdminMSG(RED, gstr2);
							print(gstr2);
						}
					}

					T_RacePlayers++;
			    }
			    case DERBY:
			    {
					T_DerbyPlayers++;
			    }
			    case GUNGAME:
			    {
				    new wp[32],
						pweapon = GetPlayerWeapon(i);

				    GetWeaponName(pweapon, wp, sizeof(wp));
				    format(gstr2, sizeof(gstr2), "Players: ~b~~h~~h~%i~n~~w~Level: ~r~~h~~h~%i of 14~n~~w~Weapon: ~g~~h~~h~%s", GunGamePlayers, GunGame_Player[i][level], wp);
				    PlayerTextDrawSetString(i, TXTGunGameInfo[i], gstr2);

				    T_GunGamePlayers++;
			    }
			    case FALLOUT:
			    {
			        T_FalloutPlayers++;
			    }
			    case gBG_VOTING, gBG_TEAM1, gBG_TEAM2:
			    {
			        T_TDMPlayers++;
			    }
			    case WAR:
			    {
			        T_WarPlayers++;
			    }
			    case MINIGUN:
			    {
			        T_MinigunPlayers++;
			    }
			    case SNIPER:
			    {
			        T_SniperPlayers++;
			    }
			    case CNR:
			    {
					T_CNRPlayers++;
			    }
			    case JAIL:
			    {
					if(pJail[i] > 0)
					{
					    --pJail[i];
					    format(gstr2, sizeof(gstr2), "~b~~h~~h~You will be released in %d seconds.~n~Type /escape to attempt to escape [CNR Only]", pJail[i]);
						InfoTD_MSG(i, 1000, gstr2);
						break;
					}

				    if(pJail[i] <= 0)
				    {
				        if(GetPVarInt(i, "JailedByAdmin") == 1)
				        {
				            gTeam[i] = NORMAL;
				        }
				        else
				        {
				            gTeam[i] = CNR;
				        }

				    	DeletePVar(i, "JailedByAdmin");
						SetPVarInt(i, "HasEscaped", 0);
						SpawnPlayer(i);
				    	SCM(i, COLOR_STEELBLUE, ""RED_E">> "GREY_E"You have been un-jailed by the server. (times up)");
					}
			    }
			}
	    }
	}
                             
	format(gstr2, sizeof(gstr2), "~y~~h~/derby ~b~~h~%i ~y~~h~/cnr ~b~~h~%i ~y~~h~/race ~b~~h~%i ~y~~h~/fallout ~b~~h~%i ~y~~h~/gungame ~b~~h~%i ~y~~h~/tdm ~b~~h~%i ~y~~h~/war ~b~~h~%i ~y~~h~/minigun ~b~~h~%i ~y~~h~/sniper ~b~~h~%i",
        T_DerbyPlayers,
        T_CNRPlayers,
		T_RacePlayers,
		T_FalloutPlayers,
		T_GunGamePlayers,
		T_TDMPlayers,
		T_WarPlayers,
		T_MinigunPlayers,
		T_SniperPlayers);

	TextDrawSetString(TXTFooter, gstr2);

	if(g_FalloutStatus != e_Fallout_Inactive)
	{
	    switch(g_FalloutStatus)
	    {
	        case e_Fallout_Startup:
			{
				format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~%i~n~~w~Status: ~g~~h~~h~Startup", CurrentFalloutPlayers);
			}
	        case e_Fallout_Running:
	        {
		        FalloutGameTime--;
				format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Status: ~g~~h~~h~Playing", GameTimeConvert(FalloutGameTime), CurrentFalloutPlayers);
    		}
		}
		TextDrawSetString(TXTFalloutInfo, gstr2);
	}

	if(CurrentBGMap != BG_VOTING)
	{
		--BGGameTime;
		new bg_players = BGTeam1Players + BGTeam2Players;
		switch(CurrentBGMap)
		{                                     
		    case BG_MAP1: format(gstr2, sizeof(gstr2), "Timelft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Forest~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
		    case BG_MAP2: format(gstr2, sizeof(gstr2), "Timelft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Quaters~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP3: format(gstr2, sizeof(gstr2), "Timelft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Rust~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP4: format(gstr2, sizeof(gstr2), "Timelft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Italy~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
            case BG_MAP5: format(gstr2, sizeof(gstr2), "Timelft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i~n~~w~Map: ~g~~h~~h~Medieval~n~~w~Ranger Kills: ~g~~h~~h~%i~n~~w~Spetsnaz Kills: ~g~~h~~h~%i", GameTimeConvert(BGGameTime), bg_players, BGTeam1Kills, BGTeam2Kills);
		}
		TextDrawSetString(TXTTdmInfo, gstr2);
	}
	else
	{
		TextDrawSetString(TXTTdmInfo, "Timelft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--~n~~w~Map: ~g~~h~~h~Voting~n~~w~Ranger Kills: ~g~~h~~h~---~n~~w~Spetsnaz Kills: ~g~~h~~h~---");
	}

	if(IsDerbyRunning)
	{
 		--DerbyGameTime;
   		switch(CurrentDerbyMap)
	    {                                    
			case 1: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Lighthouse", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 2: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Truncat", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 3: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~SkySkiing", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 4: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Townhall", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 5: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Glazz", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 6: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Rambo", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 7: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~SilverGround", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 8: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Anubis", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		    case 9: format(gstr2, sizeof(gstr2), "Timeleft: ~r~~h~~h~%s~n~~w~Players: ~b~~h~~h~%i/20~n~~w~Map: ~g~~h~~h~Confusing", GameTimeConvert(DerbyGameTime), DerbyPlayers);
		}
		TextDrawSetString(TXTDerbyInfo, gstr2);
	}
	else
	{
		TextDrawSetString(TXTDerbyInfo, "Timeleft: ~r~~h~~h~--:--~n~~w~Players: ~b~~h~~h~--/--~n~~w~Map: ~g~~h~~h~Voting");
	}
	
	for(new i = 0; i < gzoneid; i++)
	{
		if(GZoneInfo[i][bUnderAttack])
		{
			if(GZoneInfo[i][iTimeLeft] > 0)
			{
			    --GZoneInfo[i][iTimeLeft];

			    format(gstr, sizeof(gstr), "Gang War: %s~n~Defend the Gang Zone!~n~~n~~n~Timeleft: %s", GZoneInfo[i][sZoneName], GameTimeConvert(GZoneInfo[i][iTimeLeft]));
			    TextDrawSetString(GZoneInfo[i][E_Txt], gstr);
			}
			else if(GZoneInfo[i][iTimeLeft] <= 0)
			{
			    new Iterator:Players<MAX_PLAYERS>;
			    for(new ii = 0; ii < MAX_PLAYERS; ii++)
			    {
			        if(IsPlayerAvail(ii) && PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang] && PlayerInfo[ii][bGWarMode])
			        {
			            if(!IsPlayerInRangeOfPoint(ii, GZONE_SIZE, GZoneInfo[i][E_x], GZoneInfo[i][E_y], GZoneInfo[i][E_z]) || IsPlayerOnDesktop(ii, 50000)) continue;
                        if(IsPlayerOnDesktop(ii, 2500)) continue;

			            Iter_Add(Players, ii);
			        }
			    }

			    if(Iter_Count(Players) == 0)
			    {
			        if(GZoneInfo[i][DefendingGang] == 0)
			        {
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang failed to capture '%s' as there are no alive players around!", GZoneInfo[i][sZoneName]);
						GangMSG(GZoneInfo[i][AttackingGang], gstr);

						format(gstr, sizeof(gstr), ""orange"Gang %s failed to capture '%s' (No players left!)", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName]);
						SCMToAll(-1, gstr);

						for(new ii = 0; ii < MAX_PLAYERS; ii++)
						{
						    if(IsPlayerAvail(ii) && PlayerInfo[ii][bGWarMode])
						    {
						        if(PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang] || PlayerInfo[ii][GangID] == GZoneInfo[i][DefendingGang])
						        {
						    		ResetPlayerGWarMode(ii);
								}
							}
						}
						
						Iter_Remove(iterGangWar, GZoneInfo[i][AttackingGang]);
						
						GZoneInfo[i][iTimeLeft] = 0;
						GZoneInfo[i][bUnderAttack] = false;
						GZoneInfo[i][AttackingGang] = 0;
						GZoneInfo[i][DefendingGang] = 0;
						GZoneInfo[i][iLocked] = gettime();
						GZoneInfo[i][localGang] = 0;
					}
					else
					{
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang failed to capture '%s' as there are no alive players around!", GZoneInfo[i][sZoneName]);
						GangMSG(GZoneInfo[i][AttackingGang], gstr);

						format(gstr, sizeof(gstr), ""orange"Gang %s failed to capture '%s' The zone remains %s gang territory!", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName], GetGangNameByID(GZoneInfo[i][DefendingGang]));
						SCMToAll(-1, gstr);

						for(new ii = 0; ii < MAX_PLAYERS; ii++)
						{
						    if(IsPlayerAvail(ii) && PlayerInfo[ii][bGWarMode])
						    {
						        if(PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang] || PlayerInfo[ii][GangID] == GZoneInfo[i][DefendingGang])
						        {
						    		ResetPlayerGWarMode(ii);
								}
							}
						}
						
						GangMSG(GZoneInfo[i][DefendingGang], ""gang_sign" "r_besch" The opposing gang failed to capture your gang zone.");

						Iter_Remove(iterGangWar, GZoneInfo[i][AttackingGang]);
						Iter_Remove(iterGangWar, GZoneInfo[i][localGang]);
						
						GZoneInfo[i][localGang] = GZoneInfo[i][DefendingGang];
						GZoneInfo[i][iTimeLeft] = 0;
						GZoneInfo[i][bUnderAttack] = false;
						GZoneInfo[i][AttackingGang] = 0;
						GZoneInfo[i][DefendingGang] = 0;
						GZoneInfo[i][iLocked] = gettime();
					}
			    }
			    else
				{
				    if(GZoneInfo[i][DefendingGang] == 0)
				    {
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang successfully captured '%s' with %i alive players!", GZoneInfo[i][sZoneName], Iter_Count(Players));
						GangMSG(GZoneInfo[i][AttackingGang], gstr);
						GangMSG(GZoneInfo[i][AttackingGang], ""gang_sign" "r_besch" The gang gained 20 gang score and each member $30,000 who were tied.");

						format(gstr, sizeof(gstr), ""orange"Gang %s captured zone '%s' and gained their reward", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName]);
						SCMToAll(-1, gstr);
						SCMToAll(-1, ""orange"This zone is now locked for 2 hours and cannot be attacked in that time!");

						MySQL_UpdateGangScore(GZoneInfo[i][AttackingGang], 20);
						
						Iter_Remove(iterGangWar, GZoneInfo[i][AttackingGang]);
					}
					else
					{
					    format(gstr, sizeof(gstr), ""gang_sign" "r_besch" Your gang successfully captured '%s' with %i alive players!", GZoneInfo[i][sZoneName], Iter_Count(Players));
						GangMSG(GZoneInfo[i][AttackingGang], gstr);
						GangMSG(GZoneInfo[i][AttackingGang], ""gang_sign" "r_besch" The gang gained 20 gang score and each member $30,000 who were tied.");

						format(gstr, sizeof(gstr), ""orange"Gang %s captured zone '%s' which was territory of %s", GetGangNameByID(GZoneInfo[i][AttackingGang]), GZoneInfo[i][sZoneName], GetGangNameByID(GZoneInfo[i][DefendingGang]));
						SCMToAll(-1, gstr);
						SCMToAll(-1, ""orange"This zone is now locked for 2 hours and cannot be attacked in that time!");

						MySQL_UpdateGangScore(GZoneInfo[i][AttackingGang], 20);
						
                        format(gstr, sizeof(gstr), ""gang_sign" "r_besch" '%s' was captured by the gang %s!", GZoneInfo[i][sZoneName], GetGangNameByID(GZoneInfo[i][AttackingGang]));
						GangMSG(GZoneInfo[i][DefendingGang], gstr);
						
						Iter_Remove(iterGangWar, GZoneInfo[i][AttackingGang]);
						Iter_Remove(iterGangWar, GZoneInfo[i][localGang]);
					}
			    
        			format(gstr, sizeof(gstr), ""gwars_mark"\nID: %i\nZone: %s\nControlled by: %s\n"orange"Type /gwar to start an attack!", GZoneInfo[i][iID], GZoneInfo[i][sZoneName], GetGangNameByID(GZoneInfo[i][AttackingGang]));
                    UpdateDynamic3DTextLabelText(GZoneInfo[i][label], WHITE, gstr);
			    
			        GZoneInfo[i][localGang] = GZoneInfo[i][AttackingGang];
			        
					for(new ii = 0; ii < MAX_PLAYERS; ii++)
					{
					    if(IsPlayerAvail(ii) && PlayerInfo[ii][bGWarMode])
					    {
					        if(PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang] || PlayerInfo[ii][GangID] == GZoneInfo[i][DefendingGang])
					        {
					    		ResetPlayerGWarMode(ii);
							}

							if(PlayerInfo[ii][GangID] == GZoneInfo[i][AttackingGang])
							{
							    GivePlayerCash(ii, 30000);
							}
						}
					    SyncGangZones(ii);
					}
					
					GZoneInfo[i][iTimeLeft] = 0;
					GZoneInfo[i][bUnderAttack] = false;
					GZoneInfo[i][AttackingGang] = 0;
					GZoneInfo[i][DefendingGang] = 0;
					GZoneInfo[i][iLocked] = gettime() + 7200;
				}
				
				MySQL_SaveGangZone(i);
			}
		}
	}
	return 1;
}

ResetBGGameTime()
{
	BGGameTime = DEFAULT_BG_TIME;
	return 1;
}

ResetFalloutGameTime()
{
	FalloutGameTime = DEFAULT_FALLOUT_TIME;
	return 1;
}

ResetDerbyGameTime()
{
	DerbyGameTime = DEFAULT_DERBY_TIME;
	return 1;
}

function:ClearDerbyVotes()
{
	for(new i = 0; i < 9; i++)
	{
	    DerbyMapVotes[i] = 0;
	}
	Iter_Clear(DerbyVoters);
	return 1;
}

function:ExecDerbyVotingTimer()
{
	KillTimer(tDerbyVoting);
	tDerbyVoting = SetTimer("DerbyVoting", DERBY_VOTING_TIME, false);
	return 1;
}

function:ExecDerbyTimer()
{
	KillTimer(tDerbyTimer);
    tDerbyTimer = SetTimer("Derby", DERBY_TIME, false);
    return 1;
}

function:ClearDerbySpawns()
{
	for(new i = 0; i < sizeof(Derby_Map1Spawns); i++)
	{
	    Derby_Map1Spawns[i][m1sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map2Spawns); i++)
	{
	    Derby_Map2Spawns[i][m2sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map3Spawns); i++)
	{
	    Derby_Map3Spawns[i][m3sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map4Spawns); i++)
	{
	    Derby_Map4Spawns[i][m4sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map5Spawns); i++)
	{
	    Derby_Map5Spawns[i][m5sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map6Spawns); i++)
	{
	    Derby_Map6Spawns[i][m6sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map7Spawns); i++)
	{
	    Derby_Map7Spawns[i][m7sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map8Spawns); i++)
	{
	    Derby_Map8Spawns[i][m8sUsed] = false;
	}
	for(new i = 0; i < sizeof(Derby_Map9Spawns); i++)
	{
	    Derby_Map9Spawns[i][m9sUsed] = false;
	}
	return 1;
}

function:SetPlayerDerbyStaticMeshes(playerid)
{
    SetPlayerHealth(playerid, 99999.0);
    switch(CurrentDerbyMap)
    {
		case 1:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M1);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M1);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M1);
		}
		case 2:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M2);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M2);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M2);
		}
		case 3:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M3);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M3);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M3);
		}
		case 4:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M4);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M4);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M4);
		}
		case 5:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M5);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M5);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M5);
		}
		case 6:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M6);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M6);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M6);
		}
		case 7:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M7);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M7);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M7);
		}
		case 8:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M8);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M8);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M8);
		}
		case 9:
		{
	 		SetPlayerPos(playerid, DERBY_WIHLE_CAM_M9);
	       	SetPlayerCameraPos(playerid, DERBY_CAMPOS_M9);
	       	SetPlayerCameraLookAt(playerid, DERBY_CAMLA_M9);
		}
	}
	TogglePlayerControllable(playerid, false);
}

UpdateBar(playerid)
{
	new Float:HP;
	GetVehicleHealth(GetPlayerVehicleID(playerid), HP);
	UpdatePlayer3DTextLabelText(playerid, DerbyVehLabel[playerid], -1, UpdateString(HP));
	return 1;
}

UpdateString(Float:HP)
{
	new str[30];
	if(HP == 1000) format(str, sizeof(str), "{00ff00}••••••••••");
	else if(HP >= 900) format(str, sizeof(str), "{66ff00}•••••••••{ffffff}•");
	else if(HP >= 800) format(str, sizeof(str), "{7fff00}••••••••{ffffff}••");
	else if(HP >= 700) format(str, sizeof(str), "{ccff00}•••••••{ffffff}•••");
	else if(HP >= 600) format(str, sizeof(str), "{f7f21a}••••••{ffffff}••••");
	else if(HP >= 500) format(str, sizeof(str), "{f4c430}•••••{ffffff}•••••");
	else if(HP >= 400) format(str, sizeof(str), "{e49b0f}••••{ffffff}••••••");
	else if(HP >= 300) format(str, sizeof(str), "{e4650e}•••{ffffff}•••••••");
	else if(HP >= 250) format(str, sizeof(str), "{ff2400}••{ffffff}••••••••");
	else format(str, sizeof(str), "{ff2400}Boom!");
	return str;
}

function:DeleteDerbyText(playerid)
{
	KillTimer(PlayerInfo[playerid][tTimerHP]);
	LabelActive[playerid] = false;
	UpdateBar(playerid);
	CDamage[playerid] = 0;
}

SetPlayerBGTeam1(playerid)
{
    ResetPlayerWeapons(playerid);
    SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
	SetPlayerSkin(playerid, 285);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerTeam(playerid, 10);
	SetPlayerColor(playerid, BLUE);
	GivePlayerWeapon(playerid, 24, 999999);
	GivePlayerWeapon(playerid, 31, 999999);
	GivePlayerWeapon(playerid, 34, 999999);
	switch(random(3))
	{
		case 1: GivePlayerWeapon(playerid, 35, 1);
	}
	return 1;
}

SetPlayerBGTeam2(playerid)
{
	ResetPlayerWeapons(playerid);
    SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
	SetPlayerSkin(playerid, 122);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerTeam(playerid, 20);
	SetPlayerColor(playerid, RED);
	GivePlayerWeapon(playerid, 24, 999999);
	GivePlayerWeapon(playerid, 30, 999999);
	GivePlayerWeapon(playerid, 34, 999999);
	switch(random(3))
	{
		case 1: GivePlayerWeapon(playerid, 35, 1);
	}
	return 1;
}

ShowPlayerWelcomeTextdraws(playerid)
{
	for(new i = 0; i < sizeof(TXTWelcome); i++)
	{
    	TextDrawShowForPlayer(playerid, TXTWelcome[i]);
	}
}

HidePlayerWelcomeTextdraws(playerid)
{
	for(new i = 0; i < sizeof(TXTWelcome); i++)
	{
    	TextDrawHideForPlayer(playerid, TXTWelcome[i]);
	}
}

ShowPlayerGunGameTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTGunGameSign);
	PlayerTextDrawShow(playerid, TXTGunGameInfo[playerid]);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerGunGameTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTGunGameSign);
	PlayerTextDrawHide(playerid, TXTGunGameInfo[playerid]);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

HidePlayerRaceTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTRaceSign);
	PlayerTextDrawHide(playerid, TXTRaceInfo[playerid]);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerRaceTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTRaceSign);
	PlayerTextDrawShow(playerid, TXTRaceInfo[playerid]);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerToyTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTToyBox);
	TextDrawShowForPlayer(playerid, TXTToyInfo);
}

HidePlayerToyTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTToyBox);
	TextDrawHideForPlayer(playerid, TXTToyInfo);
}

ShowPlayerCNRTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerCNRTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerDerbyTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTDerbyInfo);
	TextDrawShowForPlayer(playerid, TXTDerbySign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerDerbyTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTDerbyInfo);
	TextDrawHideForPlayer(playerid, TXTDerbySign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerBGTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTTdmInfo);
	TextDrawShowForPlayer(playerid, TXTTdmSign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerBGTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTTdmInfo);
	TextDrawHideForPlayer(playerid, TXTTdmSign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerFalloutTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
	TextDrawShowForPlayer(playerid, TXTFalloutInfo);
	TextDrawShowForPlayer(playerid, TXTFalloutSign);
	PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerFalloutTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
	TextDrawHideForPlayer(playerid, TXTFalloutInfo);
	TextDrawHideForPlayer(playerid, TXTFalloutSign);
	PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

HidePlayerDMTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawShow(playerid, TXTWantedsTD[playerid]);
}

ShowPlayerDMTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TXTTeleportInfo);
    PlayerTextDrawHide(playerid, TXTWantedsTD[playerid]);
}

HidePlayerInfoTextdraws(playerid)
{
	TextDrawHideForPlayer(playerid, TXTTeleportInfo);
}

ShowPlayerInfoTextdraws(playerid)
{
	TextDrawShowForPlayer(playerid, TXTTeleportInfo);
}

Fallout_BuildMap()
{
	for(new i = 0; i < 101; i++)
	{
		DestroyDynamicObject(Info[I_iObject][i]);
		Info[I_iNumberout][i] = -1;
		KillTimer(Info[I_iShaketimer][i]);
		KillTimer(Info[I_iTimer][0]);
		Info[I_iShake][i] = 0;
	}

	new j;
	Info[I_iCount] = 15;
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1660.4783, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1655.1112, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1649.7442, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1644.3772, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1639.0102, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1633.6432, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1628.2762, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1622.9092, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1617.5422, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2482.1921, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2477.7395, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2473.2869, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2468.8343, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2464.3817, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2459.9291, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2455.4765, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2451.0239, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2446.5713, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	Info[I_iObject][j++] = CreateDynamicObject(1697, 2442.1187, -1612.1752, 160.0000, 31.8000, 0.0000, 0.0000);
	return 1;
}

Fallout_StartGame()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayerInfo[i][FalloutLost] = false;
	    if(gTeam[i] == FALLOUT)
		{
			SetPlayerHealth(i, 100.0);
	    }
	}

	Info[I_iTimer][1] = SetTimer("FalloutCountDown", 1000, true);

	SCMToAll(-1, ""yellow_e"A new fallout game has started!");
	return 1;
}

Fallout_SetPlayer(playerid)
{
	SetPlayerPos(playerid, 2482.1921 - random(39), -1660.4783 + random(47), 161.0000);
	SetPlayerFacingAngle(playerid, random(360));
	Streamer_Update(playerid);
	TogglePlayerControllable(playerid, false);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, FALLOUT_WORLD);
	ShowPlayerFalloutTextdraws(playerid);
	ResetPlayerWeapons(playerid);
}

Fallout_Cancel()
{
    CurrentFalloutPlayers = 0;
	g_FalloutStatus = e_Fallout_Inactive;
	for(new i = 0; i < 101; i++)
	{
		DestroyDynamicObject(Info[I_iObject][i]);
		Info[I_iNumberout][i] = -1;
		KillTimer(Info[I_iShaketimer][i]);
		Info[I_iShake][i] = 0;
	}
	KillTimer(Info[I_iTimer][0]);
	KillTimer(Info[I_tLoseGame]);
	return 1;
}

function:Fallout_LoseGame()
{
	new players,
		Float:POS[3];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(gTeam[i] != FALLOUT) continue;
		if(PlayerInfo[i][FalloutLost]) continue;

		GetPlayerPos(i, POS[0], POS[1], POS[2]);

		if(POS[2] <= 158.0 && !PlayerInfo[i][FalloutLost])
		{
			GameTextForPlayer(i, "~p~You lost the Fallout!", 3000, 1);

			new string[100];
			format(string, sizeof(string), "%s(%i) fell over the glass bottom!", __GetName(i), i);
			FalloutMSG(string);

			PlayerInfo[i][FalloutLost] = true;
			HidePlayerFalloutTextdraws(i);
			CurrentFalloutPlayers--;
			ResetPlayerWorld(i);
			gTeam[i] = NORMAL;
			RandomSpawn(i, true);
			RandomWeapon(i);
		}
		else
		{
		    players++;
		}
	}

	if(players <= 1 && g_FalloutStatus == e_Fallout_Running)
	{
	    g_FalloutStatus = e_Fallout_Finish;
		SetTimer("DecideFalloutWinners", 1500, false);
	}
	return 1;
}

function:FalloutCountDown()
{
	new player, string[100];

	Info[I_iCount]--;

	if(Info[I_iCount] == 0)
	{
		format(string, sizeof(string), "~b~Start!");
	}
	else
	{
		format(string, sizeof(string), "~y~FALLOUT STARTING IN~n~~p~- %i -~n~~y~SECONDS", Info[I_iCount]);
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gTeam[i] == FALLOUT)
		{
			GameTextForPlayer(i, string, 999, 3);
	    }
	}

	if(Info[I_iCount] <= 0)
	{
		KillTimer(Info[I_iTimer][1]);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(gTeam[i] == FALLOUT)
			{
				Streamer_Update(i);
				TogglePlayerControllable(i, true);
				PlayerInfo[i][FalloutLost] = false;
				player++;
		    }
		}

		if(player <= 1)
		{
		    Fallout_Cancel();

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(gTeam[i] == FALLOUT)
				{
			        HidePlayerFalloutTextdraws(i);
			        ResetPlayerWorld(i);
			        SCM(i, RED, "Fallout canceled due to lack of players!");
                    RandomSpawn(i, true);
					RandomWeapon(i);
			        gTeam[i] = NORMAL;
			    }
			}
		}
		else
		{
			SetTimer("StartFalling", 587, false);
			g_FalloutStatus = e_Fallout_Running;
		}
	}
	return 1;
}

function:SolarFall()
{
	new objectid, go;
	for(new i = 0; i < 101; i++) if(Info[I_iNumberout][i] == -1) go++;

	if(go == 3)
	{
		if(g_FalloutStatus == e_Fallout_Running)
		{
			g_FalloutStatus = e_Fallout_Finish;
			SetTimer("DecideFalloutWinners", 200, false);
		}
		KillTimer(Info[I_iTimer][0]);
		return 1;
	}

	start:
	objectid = random(101);

	if(Info[I_iNumberout][objectid] != -1) goto start;

	Info[I_iNumberout][objectid] = 0;

	Info[I_iShaketimer][objectid] = SetTimerEx("SquareShake", 100, true, "i", objectid);
	return 1;
}

function:StartFalling()
{
	Info[I_iTimer][0] = SetTimer("SolarFall", 500, true);
	Info[I_tLoseGame] = SetTimer("Fallout_LoseGame", 500, true);
	return 1;
}

function:DecideFalloutWinners()
{
	g_FalloutStatus = e_Fallout_Inactive;

	new string[128],
		winners,
		money;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAvail(i))
		{
		    if(gTeam[i] != FALLOUT) continue;
		    HidePlayerFalloutTextdraws(i);
		    ResetPlayerWorld(i);
		    RandomWeapon(i);
			if(!PlayerInfo[i][FalloutLost])
			{
				winners++;

				format(string, sizeof(string), ""fallout_sign" Winner(s): %i. %s", winners, __GetName(i));
				SCMToAll(YELLOW, string);

				money = (2500 * CurrentFalloutPlayers);
                GivePlayerCash(i, money, true, true);
				GivePlayerScore_(i, 5, true, true);
				
				PlayerInfo[i][FalloutWins]++;
				
				if(pAch[i][E_ach_deepimpact] == 0 && PlayerInfo[i][FalloutWins] >= 10)
				{
				    GivePlayerAchievement(i, "Deep Impact", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
				    pAch[i][E_ach_deepimpact] = 1;
				}
				
				gTeam[i] = NORMAL;
				SpawnPlayer(i);
			}
		}
	}
	Fallout_Cancel();

	if(winners == 0) FalloutMSG(""white"There are no winners this round!");
	return 1;
}

function:SquareShake(objectid)
{
	if(objectid == 0)
	{
		return KillTimer(Info[I_iShaketimer][objectid]);
	}

	switch(Info[I_iShake][objectid])
	{
		case 0, 5:
		{
			SetDynamicObjectRot(Info[I_iObject][objectid], 31.8, 2, 0);
		}
		case 1, 6:
		{
			SetDynamicObjectRot(Info[I_iObject][objectid], 33.8, 0, 0);
		}
		case 2, 7:
		{
			SetDynamicObjectRot(Info[I_iObject][objectid], 31.8, -2, 0);
		}
		case 3, 8:
		{
			SetDynamicObjectRot(Info[I_iObject][objectid], 29.8, 0, 0);
		}
		case 4, 9:
		{
			SetDynamicObjectRot(Info[I_iObject][objectid], 31.8, 0, 0);
		}
		case 10:
		{
			new Float:patPOS[3];
			GetDynamicObjectPos(Info[I_iObject][objectid], patPOS[0], patPOS[1], patPOS[2]);
			MoveDynamicObject(Info[I_iObject][objectid], patPOS[0], patPOS[1], floatsub(patPOS[2], 100.0), 4);
		}
		case 11..99:
		{
  			SetDynamicObjectPos(Info[I_iObject][objectid], floatsub(31.8, floatsub((Info[I_iShake][objectid] * 2), 20)), 0, 0);
		}
		case 100:
		{
			DestroyDynamicObject(Info[I_iObject][objectid]);

			KillTimer(Info[I_iShaketimer][objectid]);
		}
	}

	Info[I_iShake][objectid]++;
	return 1;
}

function:ModVehicleColor(playerid)
{
	new color1,
	    color2;

	color1 = PlayerPV[playerid][PVSelect[playerid]][Color1] != 0 ? PlayerPV[playerid][PVSelect[playerid]][Color1] : 0;
	color2 = PlayerPV[playerid][PVSelect[playerid]][Color2] != 0 ? PlayerPV[playerid][PVSelect[playerid]][Color2] : 0;

	ChangeVehicleColor(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], color1, color2);
	return 1;
}

function:ModVehiclePaintJob(playerid)
{
	if(PlayerPV[playerid][PVSelect[playerid]][PaintJob] != -1)
	{
		ChangeVehiclePaintjob(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][PaintJob]);
	}
	return 1;
}

function:ModVehicleComponents(playerid)
{
	if(PlayerPV[playerid][PVSelect[playerid]][Mod1] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod1]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod2] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod2]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod3] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod3]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod4] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod4]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod5] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod5]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod6] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod6]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod7] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod7]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod8] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod8]);
  	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod9] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod9]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod10] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod10]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod11] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod11]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod12] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod12]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod13] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod13]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod14] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod14]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod15] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod15]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod16] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod16]);
	}

	if(PlayerPV[playerid][PVSelect[playerid]][Mod17] != 0)
	{
		AddVehicleComponent(PlayerPV[playerid][PVSelect[playerid]][PVehicleID], PlayerPV[playerid][PVSelect[playerid]][Mod17]);
	}
	return 1;
}

function:SaveVehComponets(playerid, componentid)
{
	for(new s = 0; s < 20; s++)
	{
    	if(componentid == pv_spoiler[s][0])
		{
      		PlayerPV[playerid][PVSelect[playerid]][Mod1] = componentid;
   	    }
	}

	for(new s = 0; s < 3; s++)
	{
    	if(componentid == pv_nitro[s][0])
		{
    		PlayerPV[playerid][PVSelect[playerid]][Mod2] = componentid;
   		}
	}

	for(new s = 0; s < 23; s++)
	{
    	if(componentid == pv_fbumper[s][0])
		{
    		PlayerPV[playerid][PVSelect[playerid]][Mod3] = componentid;
   	 	}
	}

	for(new s = 0; s < 22; s++)
	{
    	if(componentid == pv_rbumper[s][0])
		{
    		PlayerPV[playerid][PVSelect[playerid]][Mod4] = componentid;
   		}
	}

	for(new s = 0; s < 28; s++)
	{
     	if(componentid == pv_exhaust[s][0])
		{
       		PlayerPV[playerid][PVSelect[playerid]][Mod5] = componentid;
		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventr[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod6] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventl[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod7] = componentid;
 		}
	}

	for(new s = 0; s < 4; s++)
	{
		if(componentid == pv_bscoop[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod8] = componentid;
 		}
	}

	for(new s = 0; s < 17; s++)
	{
		if(componentid == pv_roof[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod9] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_lskirt[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod10] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_rskirt[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod11] = componentid;
 		}
	}

	for(new s = 0; s < 1; s++)
	{
		if(componentid == pv_hydraulics[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod12] = componentid;
		}
	}

	for(new s = 0; s < 1; s++)
	{
     	if(componentid == pv_base[s][0])
 		{
       		PlayerPV[playerid][PVSelect[playerid]][Mod13] = componentid;
		}
	}

	for(new s = 0; s < 4; s++)
	{
     	if(componentid == pv_rbbars[s][0])
 		{
       		PlayerPV[playerid][PVSelect[playerid]][Mod14] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_fbbars[s][0])
		{
    		PlayerPV[playerid][PVSelect[playerid]][Mod15] = componentid;
		}
	}

	for(new s = 0; s < 17; s++)
	{
    	if(componentid == pv_wheels[s][0])
		{
      		PlayerPV[playerid][PVSelect[playerid]][Mod16] = componentid;
   	    }
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_lights[s][0])
		{
			PlayerPV[playerid][PVSelect[playerid]][Mod17] = componentid;
 		}
    }
	return 1;
}

function:unmute(playerid)
{
    PlayerInfo[playerid][Muted] = false;
    PlayerInfo[playerid][MuteTimer] = -1;
    return 1;
}

ResetPlayerWorld(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
}

function:IsPlayerAvail(playerid)
{
	if(IsPlayerConnected(playerid) && playerid != INVALID_PLAYER_ID && PlayerInfo[playerid][ExitType] == EXIT_FIRST_SPAWNED && !IsPlayerNPC(playerid))
	{
	    return 1;
	}
	return 0;
}

SollIchDirMaEtWatSagen()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

GameTimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds / 60);
  	seconds -= minutes * 60;
   	format(tmp, sizeof(tmp), "%02i:%02i", minutes, seconds);
   	return tmp;
}

SetPlayerCash(playerid, amount)
{
	if(playerid == INVALID_PLAYER_ID) return 1;
    ResetPlayerMoney(playerid);
	PlayerInfo[playerid][Money] = amount;
    GivePlayerMoney(playerid, PlayerInfo[playerid][Money]);
    return 1;
}

GivePlayerCash(playerid, amount, bool:populate = true, bool:boost = false)
{
	if(playerid == INVALID_PLAYER_ID) return 1;
	
    ResetPlayerMoney(playerid);
    
    if(amount < 0)
    {
        PlayerInfo[playerid][Money] += amount;
        format(gstr, sizeof(gstr), "~r~~h~~h~-$%s", ToCurrency(amount * -1));
	}
	else
	{
		if(boost)
		{
			if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x2)
			{
			    PlayerInfo[playerid][Money] += amount * 2;
			    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s (x2 Boost)", ToCurrency(amount * 2));
			}
			else if(PlayerInfo[playerid][Boost] & BOOST_MONEY_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
			{
			    PlayerInfo[playerid][Money] += amount * 3;
			    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s (x3 Boost)", ToCurrency(amount * 3));
			}
			else
			{
		    	PlayerInfo[playerid][Money] += amount;
		    	format(gstr, sizeof(gstr), "~g~~h~~h~+$%s (No Boost)", ToCurrency(amount));
			}
		}
		else
		{
		    PlayerInfo[playerid][Money] += amount;
		    format(gstr, sizeof(gstr), "~g~~h~~h~+$%s", ToCurrency(amount));
		}
	}
	
    if(populate)
    {
		PlayerTextDrawSetString(playerid, TXTMoney[playerid], gstr);
        PlayerTextDrawShow(playerid, TXTMoney[playerid]);
		SetTimerEx("HideMoneyTD", 3000, false, "ii", playerid, YHash(__GetName(playerid), false));
    }
	
    GivePlayerMoney(playerid, PlayerInfo[playerid][Money]);
	return 1;
}

GetPlayerCash(playerid)
{
    if(playerid == INVALID_PLAYER_ID) return 1;
	return PlayerInfo[playerid][Money];
}

GivePlayerScore_(playerid, amount, bool:populate = true, bool:boost = false)
{
    if(playerid == INVALID_PLAYER_ID) return 1;

    if(amount < 0)
    {
        format(gstr, sizeof(gstr), "~r~~h~~h~-%i Score", amount * -1);
    }
    else
    {
		if(boost)
		{
			if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x2)
			{
			    PlayerInfo[playerid][Score] += amount * 2;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score (x2 Boost)", ToCurrency(amount * 2));
			}
			else if(PlayerInfo[playerid][Boost] & BOOST_SCORE_x3 || PlayerInfo[playerid][Boost] & BOOST_MASTER)
			{
			    PlayerInfo[playerid][Score] += amount * 3;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score (x3 Boost)", ToCurrency(amount * 3));
			}
			else
			{
			    PlayerInfo[playerid][Score] += amount;
			    format(gstr, sizeof(gstr), "~y~~h~+%s Score (No Boost)", ToCurrency(amount));
			}
		}
		else
		{
		    PlayerInfo[playerid][Score] += amount;
		    format(gstr, sizeof(gstr), "~y~~h~+%s Score", ToCurrency(amount));
		}
	}

	SetPlayerScore(playerid, PlayerInfo[playerid][Score]);
	
    if(populate)
    {
		PlayerTextDrawSetString(playerid, TXTScore[playerid], gstr);
        PlayerTextDrawShow(playerid, TXTScore[playerid]);
		SetTimerEx("HideScoreTD", 3000, false, "ii", playerid, YHash(__GetName(playerid), false));
    }
	
	if(pAch[playerid][E_ach_scorewhore] == 0 && PlayerInfo[playerid][Score] >= 2000)
	{
	    GivePlayerAchievement(playerid, "Score Whore", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	    pAch[playerid][E_ach_scorewhore] = 1;
	}
	return 1;
}

SetPlayerScore_(playerid, amount)
{
    if(playerid == INVALID_PLAYER_ID) return 1;
	PlayerInfo[playerid][Score] = amount;
    SetPlayerScore(playerid, PlayerInfo[playerid][Score]);
    
 	if(pAch[playerid][E_ach_scorewhore] == 0 && PlayerInfo[playerid][Score] >= 2000)
	{
	    GivePlayerAchievement(playerid, "Score Whore", "Congrats you earned $30,000!~n~and 10 score!~n~~w~Type /ach to view your achievements.");
	    pAch[playerid][E_ach_scorewhore] = 1;
	}
	return 1;
}

GetPlayerScore_(playerid)
{
    if(playerid == INVALID_PLAYER_ID) return -1;
	return PlayerInfo[playerid][Score];
}

NewMinigameJoin(playerid, const minigame[], const cmd[])
{
	format(gstr, sizeof(gstr), ""r_besch"[JOIN] {D2D2AB}%s(%i) just joined %s [/%s]", __GetName(playerid), playerid, minigame, cmd);
	SCMToAll(-1, gstr);
	format(gstr, sizeof(gstr), "3,1JOIN:4 %s(%i) just joined %s [/%s]", __GetName(playerid), playerid, minigame, cmd);
	IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, gstr);
}

NewMapEvent(playerid, const cmd[])
{
	format(gstr, sizeof(gstr), "~g~~h~~h~%s ~w~has gone to ~b~~h~~h~/%s", __GetName(playerid), cmd);
    TextDrawSetString(TXTTeleportInfo, gstr);
}

IsValidVehicleModel(vmodel)
{
	if(vmodel < 400 || vmodel > 611) return 0;
	return 1;
}

IsValidSkin(skinid)
{
    if(skinid == 74 || skinid > 299 || skinid < 0)
    {
        return 0;
	}
    return 1;
}

__GetPlayerID(const PlayerName[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
    	if(IsPlayerConnected(i) && !IsPlayerNPC(i))
      	{
        	if(!strcmp(PlayerName, __GetName(i), true))
        	{
          		return i;
        	}
      	}
    }
    return INVALID_PLAYER_ID;
}

__GetName(playerid)
{
    new name[25];
	strcat(name, PlayerInfo[playerid][sName], 25);
	
    return name;
}

__GetIP(playerid)
{
	new ip[16];
	strcat(ip, PlayerInfo[playerid][sIP], 16);

    return ip;
}

GetColor__(playerid)
{
	new color = GetPlayerColor(playerid);
	return color;
}

GetUptime()
{
    new Result[128],
        Remaining = gettime() - StartTime,
        Time[4];

    Time[0] = Remaining % 60;
    Remaining /= 60;
    Time[1] = Remaining % 60;
    Remaining /= 60;
    Time[2] = Remaining % 24;
    Remaining /= 24;
    Time[3] = Remaining;

    if(Time[3])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i days, %i hours, %i minutes and %i seconds", Time[3], Time[2], Time[1], Time[0]);
	}
    else if(Time[2])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i hours, %i minutes and %i seconds", Time[2], Time[1], Time[0]);
	}
    else if(Time[1])
    {
        format(Result, sizeof(Result), ""white"Server is up for %i minutes and %i seconds", Time[1], Time[0]);
	}
    else
    {
        format(Result, sizeof(Result), ""white"Server is up for %i seconds", Time[0]);
	}
    return Result;
}

GetVehicleNameById(vehicleid)
{
	new	string[57];

	if(IsValidVehicleModel(GetVehicleModel(vehicleid)))
	{
	    format(string, sizeof(string), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	}
	else
	{
        format(string, sizeof(string), "---");
	}
    return string;
}

PreparePlayerPV(playerid)
{
    PVSelect[playerid] = -1;
	for(new i = 0; i < MAX_PLAYER_PVS; i++)
	{
		PlayerPV[playerid][i][PVehicleID] = -1;
		PlayerPV[playerid][i][PVehicleLabel] = Text3D:-1;
	    PlayerPV[playerid][i][Model] = 0;
	    PlayerPV[playerid][i][PaintJob] = -1;
	    PlayerPV[playerid][i][Color1] = 0;
	    PlayerPV[playerid][i][Color2] = 0;
	    PlayerPV[playerid][i][Mod1] = 0;
	    PlayerPV[playerid][i][Mod2] = 0;
	    PlayerPV[playerid][i][Mod3] = 0;
	    PlayerPV[playerid][i][Mod4] = 0;
	    PlayerPV[playerid][i][Mod5] = 0;
	    PlayerPV[playerid][i][Mod6] = 0;
	    PlayerPV[playerid][i][Mod7] = 0;
	    PlayerPV[playerid][i][Mod8] = 0;
	    PlayerPV[playerid][i][Mod9] = 0;
	    PlayerPV[playerid][i][Mod10] = 0;
	    PlayerPV[playerid][i][Mod11] = 0;
	    PlayerPV[playerid][i][Mod12] = 0;
	    PlayerPV[playerid][i][Mod13] = 0;
	    PlayerPV[playerid][i][Mod14] = 0;
	    PlayerPV[playerid][i][Mod15] = 0;
	    PlayerPV[playerid][i][Mod16] = 0;
	    PlayerPV[playerid][i][Mod17] = 0;
	    PlayerPV[playerid][i][Neon1] = -1;
	    PlayerPV[playerid][i][Neon2] = -1;
	    strmid(PlayerPV[playerid][i][Plate], "Plate", 0, 13, 13);
	}
}

PreparePlayerToy(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		PlayerToys[playerid][i][toy_model] = 0;
		PlayerToys[playerid][i][toy_bone] = 1;
		PlayerToys[playerid][i][toy_x] = 0.0;
		PlayerToys[playerid][i][toy_y] = 0.0;
		PlayerToys[playerid][i][toy_z] = 0.0;
		PlayerToys[playerid][i][toy_rx] = 0.0;
		PlayerToys[playerid][i][toy_ry] = 0.0;
		PlayerToys[playerid][i][toy_rz] = 0.0;
		PlayerToys[playerid][i][toy_sx] = 1.0;
		PlayerToys[playerid][i][toy_sy] = 1.0;
		PlayerToys[playerid][i][toy_sz] = 1.0;
	}
}

RemovePlayerToys(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
	    {
			RemovePlayerAttachedObject(playerid, i);
	    }
	}
}

AttachPlayerToys(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
        SetPlayerAttachedObject(playerid,
            i,
            PlayerToys[playerid][i][toy_model],
            PlayerToys[playerid][i][toy_bone],
            PlayerToys[playerid][i][toy_x],
            PlayerToys[playerid][i][toy_y],
            PlayerToys[playerid][i][toy_z],
            PlayerToys[playerid][i][toy_rx],
            PlayerToys[playerid][i][toy_ry],
            PlayerToys[playerid][i][toy_rz],
            PlayerToys[playerid][i][toy_sx],
            PlayerToys[playerid][i][toy_sy],
            PlayerToys[playerid][i][toy_sz]);
	}
}

MySQL_SavePlayerToys(playerid)
{
    if(islogged(playerid))
    {
		new query[1024];

		format(query, sizeof(query), "UPDATE `accounts` SET `Toy_Slot0` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f', `Toy_Slot1` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f' WHERE `Name` = '%s' LIMIT 1;",
			PlayerToys[playerid][0][toy_model],
		    PlayerToys[playerid][0][toy_bone],
		    PlayerToys[playerid][0][toy_x],
		    PlayerToys[playerid][0][toy_y],
		    PlayerToys[playerid][0][toy_z],
		    PlayerToys[playerid][0][toy_rx],
		    PlayerToys[playerid][0][toy_ry],
		    PlayerToys[playerid][0][toy_rz],
		    PlayerToys[playerid][0][toy_sx],
		    PlayerToys[playerid][0][toy_sy],
		    PlayerToys[playerid][0][toy_sz],
			PlayerToys[playerid][1][toy_model],
		    PlayerToys[playerid][1][toy_bone],
		    PlayerToys[playerid][1][toy_x],
		    PlayerToys[playerid][1][toy_y],
		    PlayerToys[playerid][1][toy_z],
		    PlayerToys[playerid][1][toy_rx],
		    PlayerToys[playerid][1][toy_ry],
		    PlayerToys[playerid][1][toy_rz],
		    PlayerToys[playerid][1][toy_sx],
		    PlayerToys[playerid][1][toy_sy],
		    PlayerToys[playerid][1][toy_sz],
		    __GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Toy_Slot2` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f', `Toy_Slot3` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f' WHERE `Name` = '%s' LIMIT 1;",
			PlayerToys[playerid][2][toy_model],
		    PlayerToys[playerid][2][toy_bone],
		    PlayerToys[playerid][2][toy_x],
		    PlayerToys[playerid][2][toy_y],
		    PlayerToys[playerid][2][toy_z],
		    PlayerToys[playerid][2][toy_rx],
		    PlayerToys[playerid][2][toy_ry],
		    PlayerToys[playerid][2][toy_rz],
		    PlayerToys[playerid][2][toy_sx],
		    PlayerToys[playerid][2][toy_sy],
		    PlayerToys[playerid][2][toy_sz],
			PlayerToys[playerid][3][toy_model],
		    PlayerToys[playerid][3][toy_bone],
		    PlayerToys[playerid][3][toy_x],
		    PlayerToys[playerid][3][toy_y],
		    PlayerToys[playerid][3][toy_z],
		    PlayerToys[playerid][3][toy_rx],
		    PlayerToys[playerid][3][toy_ry],
		    PlayerToys[playerid][3][toy_rz],
		    PlayerToys[playerid][3][toy_sx],
		    PlayerToys[playerid][3][toy_sy],
		    PlayerToys[playerid][3][toy_sz],
		    __GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Toy_Slot4` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f', `Toy_Slot5` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f' WHERE `Name` = '%s' LIMIT 1;",
			PlayerToys[playerid][4][toy_model],
		    PlayerToys[playerid][4][toy_bone],
		    PlayerToys[playerid][4][toy_x],
		    PlayerToys[playerid][4][toy_y],
		    PlayerToys[playerid][4][toy_z],
		    PlayerToys[playerid][4][toy_rx],
		    PlayerToys[playerid][4][toy_ry],
		    PlayerToys[playerid][4][toy_rz],
		    PlayerToys[playerid][4][toy_sx],
		    PlayerToys[playerid][4][toy_sy],
		    PlayerToys[playerid][4][toy_sz],
			PlayerToys[playerid][5][toy_model],
		    PlayerToys[playerid][5][toy_bone],
		    PlayerToys[playerid][5][toy_x],
		    PlayerToys[playerid][5][toy_y],
		    PlayerToys[playerid][5][toy_z],
		    PlayerToys[playerid][5][toy_rx],
		    PlayerToys[playerid][5][toy_ry],
		    PlayerToys[playerid][5][toy_rz],
		    PlayerToys[playerid][5][toy_sx],
		    PlayerToys[playerid][5][toy_sy],
		    PlayerToys[playerid][5][toy_sz],
		    __GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Toy_Slot6` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f', `Toy_Slot7` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f' WHERE `Name` = '%s' LIMIT 1;",
			PlayerToys[playerid][6][toy_model],
		    PlayerToys[playerid][6][toy_bone],
		    PlayerToys[playerid][6][toy_x],
		    PlayerToys[playerid][6][toy_y],
		    PlayerToys[playerid][6][toy_z],
		    PlayerToys[playerid][6][toy_rx],
		    PlayerToys[playerid][6][toy_ry],
		    PlayerToys[playerid][6][toy_rz],
		    PlayerToys[playerid][6][toy_sx],
		    PlayerToys[playerid][6][toy_sy],
		    PlayerToys[playerid][6][toy_sz],
			PlayerToys[playerid][7][toy_model],
		    PlayerToys[playerid][7][toy_bone],
		    PlayerToys[playerid][7][toy_x],
		    PlayerToys[playerid][7][toy_y],
		    PlayerToys[playerid][7][toy_z],
		    PlayerToys[playerid][7][toy_rx],
		    PlayerToys[playerid][7][toy_ry],
		    PlayerToys[playerid][7][toy_rz],
		    PlayerToys[playerid][7][toy_sx],
		    PlayerToys[playerid][7][toy_sy],
		    PlayerToys[playerid][7][toy_sz],
		    __GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Toy_Slot8` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f', `Toy_Slot9` = '%i,%i,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f' WHERE `Name` = '%s' LIMIT 1;",
			PlayerToys[playerid][8][toy_model],
		    PlayerToys[playerid][8][toy_bone],
		    PlayerToys[playerid][8][toy_x],
		    PlayerToys[playerid][8][toy_y],
		    PlayerToys[playerid][8][toy_z],
		    PlayerToys[playerid][8][toy_rx],
		    PlayerToys[playerid][8][toy_ry],
		    PlayerToys[playerid][8][toy_rz],
		    PlayerToys[playerid][8][toy_sx],
		    PlayerToys[playerid][8][toy_sy],
		    PlayerToys[playerid][8][toy_sz],
			PlayerToys[playerid][9][toy_model],
		    PlayerToys[playerid][9][toy_bone],
		    PlayerToys[playerid][9][toy_x],
		    PlayerToys[playerid][9][toy_y],
		    PlayerToys[playerid][9][toy_z],
		    PlayerToys[playerid][9][toy_rx],
		    PlayerToys[playerid][9][toy_ry],
		    PlayerToys[playerid][9][toy_rz],
		    PlayerToys[playerid][9][toy_sx],
		    PlayerToys[playerid][9][toy_sy],
		    PlayerToys[playerid][9][toy_sz],
		    __GetName(playerid));
	    mysql_tquery(g_SQL_handle, query, "", "");
	}
}

function:ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
		case DIALOG_RACE_RACESTARTPOS:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACESTARTPOS, DIALOG_STYLE_MSGBOX, ""nef" - Race Creation "white"- (Step 4/5)", ""white"Set start postions 'KEY_FIRE'", "GO", "Exit");
		}
		case DIALOG_RACE_CHECKPOINTS:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_CHECKPOINTS, DIALOG_STYLE_MSGBOX, ""nef" - Race Creation "white"- (Step 5/5)", ""white"Checkpoints", "GO", "Exit");
		}
		case DIALOG_RACE_RACERDY:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACERDY, DIALOG_STYLE_MSGBOX, ""nef" - Race Creation "white"- (DONE)", ""white"Race has been created - ready to use", "Finish", "");
		}
		case DIALOG_RACE_RACEVEH:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACEVEH, DIALOG_STYLE_INPUT, ""nef" - Race Creation "white"- (Step 3/5)", ""white"vehicle:", "Next", "Exit");
		}
	    case DIALOG_RACE_RACEVW:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACEVW, DIALOG_STYLE_INPUT, ""nef" - Race Creation "white"- (Step 2/5)", ""white"Virtual world:", "Next", "Exit");
		}
		case DIALOG_RACE_RACETYPE:
		{
			ShowPlayerDialog(playerid, DIALOG_RACE_RACETYPE, DIALOG_STYLE_LIST, ""nef" - Race Creation "white"- (Step 1/5)", ""dl"Normal Race\n"dl"Air Race", "Next", "Exit");
		}
	    case PROP_LEVEL_UPGRADE_DIALOG:
	    {
	        new string[512], tmp[255];
	        
	        new p_id = GetPropIdByPlayerSlotSel(playerid);
	        
			if(p_id != -1)
			{
			    strcat(string, ""white"The higher the level the higher the earnings. Upgrade your business\nlevel to receive more money each payday! Max. Level: 20\n\nCurrent Business Level: ");
			    
			    if(PropInfo[p_id][E_Level] >= MAX_PROP_LEVEL)
			    {
				    format(tmp, sizeof(tmp), "%i\nCurrent Business Earnings: $%s\n\nThis business reached its max. level!", PropInfo[p_id][E_Level], ToCurrency(GetPropEearnings(p_id)));
					strcat(string, tmp);
			    }
			    else
			    {
				    format(tmp, sizeof(tmp), "%i\nCurrent Business Earnings: $%s\nEarnings in next level: $%s\n\nUpgrade now for "yellow_e"$%s"white"!",
						PropInfo[p_id][E_Level],
						ToCurrency(GetPropEearnings(p_id)),
						ToCurrency(BLevelMatrix[PropInfo[p_id][E_Level]][E_bearnings]),
						ToCurrency(BLevelMatrix[PropInfo[p_id][E_Level]][E_bupradecoast]));
					strcat(string, tmp);
				}
			}
			else return SendInfo(playerid, "Error couldn't find the business in that slot! Report on forums!", 2500);
	        
	        format(tmp, sizeof(tmp), ""nef" - Business Level Upgrade > Slot: %i", PlayerInfo[playerid][PropSlotSelected] + 1);

            if(PropInfo[p_id][E_Level] == MAX_PROP_LEVEL)
            {
				ShowPlayerDialog(playerid, PROP_LEVEL_UPGRADE_DIALOG, DIALOG_STYLE_MSGBOX, tmp, string, "Back", "");
			}
			else
			{
                ShowPlayerDialog(playerid, PROP_LEVEL_UPGRADE_DIALOG, DIALOG_STYLE_MSGBOX, tmp, string, "Upgrade", "Back");
			}
		}
	    case CM_DIALOG:
	    {
	        new string[1024];

	        strcat(string, ""red"How to get Gold Credits\n"dl"Toy Slots\n"dl"Private Vehicle Slots\n"dl"House Slots\n"dl"House Object Slots\n"dl"Business Slots\n"dl"Instant Namechange Access");
	        strcat(string, "\n"dl"Medkit x20\n"dl"Medkit x100\n"dl"Money Boost x2\n"dl"Money Boost x3\n"dl"Score Boost x2\n"dl"Score Boost x3\n"dl"Master Boost");

	        ShowPlayerDialog(playerid, CM_DIALOG, DIALOG_STYLE_LIST, ""nef" - Gold Credits", string, "Select", "Cancel");
	    }
	    case NO_CREDITS_DIALOG:
	    {
	        ShowPlayerDialog(playerid, NO_CREDITS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Gold Credits", ""nef_green"You don't have enough Gold Credits to perform this action.\n"white"To purchase Gold Credits goto "SVRURLWWW"/credits", "OK", "");
	    }
	    case SERVERSTATS_DIALOG:
	    {
	        new string[650];
	        format(string, sizeof(string), "%s since %s. During that time...\n\n... "yellow_e"%i "white"commands have been performed\n... "yellow_e"%i "white"chat messages have been sent\n... "yellow_e"%i "white"new players have registered\n... "yellow_e"%i "white"players have been murdered",
				GetUptime(), UnixTimeToDate(StartTime), SrvStat[0], SrvStat[1], SrvStat[2], SrvStat[3]);
	        
	        strcat(string, "\n\nServer version: "SVRNAME" "CURRENT_VERSION", "HOTFIX_REV" on "SAMP_VERSION"");
	        
	        ShowPlayerDialog(playerid, SERVERSTATS_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Server Stats", string, "OK", "");
	    }
	    case LABEL_DIALOG + 1:
	    {
	        ShowPlayerDialog(playerid, LABEL_DIALOG + 1, DIALOG_STYLE_INPUT, ""nef" - Change VIP Label Text", ""white"Enter the new text which your label shall display\n"nef_yellow"* "white"Input length: 3-35", "Next", "Cancel");
	    }
	    case LABEL_DIALOG:
	    {
        	ShowPlayerDialog(playerid, LABEL_DIALOG, DIALOG_STYLE_INPUT, ""nef" - Attach VIP Label", ""white"Enter some text which your label shall display\n"nef_yellow"* "white"Input length: 3-35", "Next", "Cancel");
	    }
	    case VCONTROL_DIALOG:
	    {
			ShowPlayerDialog(playerid, VCONTROL_DIALOG, DIALOG_STYLE_LIST, ""nef" - Vehicle Control", ""dl"Engine control\n"dl"Light control\n"dl"Alarm\n"dl"Bonnet\n"dl"Boot", "Select", "Cancel");
	    }
	    case NAME_CHANGE_DIALOG:
	    {
	        new string[1024];

	        if(PlayerInfo[playerid][VIP] == 1)
	        {
	            if((PlayerInfo[playerid][LastNameChange] + 2592000) > gettime())
	            {
	                format(string, sizeof(string), ""red"Namechange not possible"white"\n\nNamechange cooldown: 30 days "lb_e"(VIP)"white"\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s",
						UnixTimeToDate(PlayerInfo[playerid][LastNameChange]),
						UnixTimeToDate(PlayerInfo[playerid][LastNameChange] + 2592000),
						__GetName(playerid));
					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""nef" - Namechange", string, "OK", "");
	            }
	            else
	            {
	                if(PlayerInfo[playerid][LastNameChange] == 0)
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 30 days "lb_e"(VIP)"white"\nLast Namechange: Never\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UnixTimeToDate(PlayerInfo[playerid][RegDate]),
							__GetName(playerid));
	                }
	                else
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 30 days "lb_e"(VIP)"white"\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UnixTimeToDate(PlayerInfo[playerid][LastNameChange]),
							UnixTimeToDate(PlayerInfo[playerid][LastNameChange] + 2592000),
							__GetName(playerid));
	                }
	                
					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG, DIALOG_STYLE_INPUT, ""nef" - Namechange", string, "Change", "Cancel");
	            }
	        }
	        else
	        {
	            if((PlayerInfo[playerid][LastNameChange] + 7776000) > gettime())
	            {
	                format(string, sizeof(string), ""red"Namechange not possible"white"\n\nNamechange cooldown: 90 days\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s",
						UnixTimeToDate(PlayerInfo[playerid][LastNameChange]),
						UnixTimeToDate(PlayerInfo[playerid][LastNameChange] + 7776000),
						__GetName(playerid));
					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG + 5, DIALOG_STYLE_MSGBOX, ""nef" - Namechange", string, "OK", "");
	            }
	            else
	            {
	                if(PlayerInfo[playerid][LastNameChange] == 0)
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 90 days\nLast Namechange: Never\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UnixTimeToDate(PlayerInfo[playerid][RegDate]),
							__GetName(playerid));
	                }
	                else
	                {
		                format(string, sizeof(string), ""green"Namechange possible"white"\n\nNamechange cooldown: 90 days\nLast Namechange: %s\nNext Namechange available: %s\nCurrent Name: %s\n\nEnter a new valid nickname below:",
							UnixTimeToDate(PlayerInfo[playerid][LastNameChange]),
							UnixTimeToDate(PlayerInfo[playerid][LastNameChange] + 7776000),
							__GetName(playerid));
	                }

					return ShowPlayerDialog(playerid, NAME_CHANGE_DIALOG, DIALOG_STYLE_INPUT, ""nef" - Namechange", string, "Change", "Cancel");
	            }
			}
		}
		case HAREFILL_DIALOG:
		{
		 	new tick = GetTickCount() + 3600000;
			if((PlayerInfo[playerid][tickLastRefill] + COOLDOWN_CMD_HAREFILL) >= tick)
			{
				return SCM(playerid, -1, ""er"Please wait a bit before using this command again!");
			}
		    ShowPlayerDialog(playerid, HAREFILL_DIALOG, DIALOG_STYLE_LIST, ""nef" - Health & Armor Refill", ""dl"Health\t\t"grey"[$5,000]\n"dl"Armor\t\t"grey"[$2,500]", "Select", "Cancel");
		}
	    case GANG_SET_RANK_DIALOG:
	    {
			if(PlayerInfo[playerid][GangPosition] == GANG_POS_LEADER)
			{
			    ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG, DIALOG_STYLE_LIST, ""nef" - Gang Rank Menu", ""grey"Select a rank below:\n"dl"Junior Member\n"dl"Member\n"dl"Senior Member\n"dl"Advisor", "Next", "Cancel");
			}
			else if(PlayerInfo[playerid][GangPosition] == GANG_POS_MAIN_LEADER)
			{
	    		ShowPlayerDialog(playerid, GANG_SET_RANK_DIALOG, DIALOG_STYLE_LIST, ""nef" - Gang Rank Menu", ""grey"Select a rank below:\n"dl"Junior Member\n"dl"Member\n"dl"Senior Member\n"dl"Advisor\n"dl"Leader", "Next", "Cancel");
			}
		}
	    case CLOSE_GANG_DIALOG:
	    {
	        ShowPlayerDialog(playerid, CLOSE_GANG_DIALOG, DIALOG_STYLE_MSGBOX, ""nef" - Close Gang", ""white"If you want to close your gang write click on 'Close'\nelse 'Cancel'", "Close", "Cancel");
	    }
	    case GANG_KICK_DIALOG:
	    {
	        ShowPlayerDialog(playerid, GANG_KICK_DIALOG, DIALOG_STYLE_INPUT, ""nef" - Gang Kick Menu", ""white"Enter the "nef_yellow"exact "white"name the of the player you want to kick out of your gang:", "Kick", "Cancel");
	    }
	    case SETTINGS_DIALOG:
	    {
	    	ShowPlayerDialog(playerid, SETTINGS_DIALOG, DIALOG_STYLE_LIST, ""nef" - Settings", GetPlayerSettings(playerid), "Select", "Cancel");
	    }
	    case HELP_DIALOG:
	    {
	        new str[400];
	        strcat(str, ""dl"General Help\n"dl"Commands\n"dl"Shortcuts\n"dl"Minigames\n"dl"Maps\n"dl"Settings\n");
	        strcat(str, ""dl"How do I earn money and score?\n"dl"What can I do on this server?\n"dl"How do I get Gold Credits?\n"dl"How do I get VIP?\n"dl""grey"ServerIP: "SERVER_IP"");
	        ShowPlayerDialog(playerid, HELP_DIALOG, DIALOG_STYLE_LIST, ""nef" - Help", str, "OK", "");
	    }
	    case CMDS_DIALOG:
	    {
        	ShowPlayerDialog(playerid, CMDS_DIALOG, DIALOG_STYLE_LIST, ""nef" - Commands", ""dl"General\n"dl"Account\n"dl"Gang\n"dl"House/Business\n"dl"Private Vehicle\n"dl"Other\n"dl"VIP\n"dl"Gold Credits", "Select", "Cancel");
		}
	    case HOUSE_UPGRADE_DIALOG:
	    {
	        new string[512],
				string2[256];

			format(string, sizeof(string), ""dl"Barrack\n"dl"Standard\n"dl"Advanced Standard\n"dl"Ryders House\n"dl"Bunker House\n"dl"Underground\n"dl"Nice Small Hotel Room\n"dl"CJs House");
			format(string2, sizeof(string2), "\n"dl"Luxus House\n"dl"Strip Club\n"dl"Entire Motel\n"dl"Small Villa\n"dl"Big Villa\n"dl"Madd Doggs Mansion");
			strcat(string, string2);

	        ShowPlayerDialog(playerid, HOUSE_UPGRADE_DIALOG, DIALOG_STYLE_LIST, ""nef" - House Upgrade", string, "Select", "Cancel");
	    }
		case STREAM_DIALOG:
		{
			ShowPlayerDialog(playerid, STREAM_DIALOG, DIALOG_STYLE_LIST, ""nef" - Audio Streams", ""dl"Electro\n"dl"Metal\n"dl"Pop\n"dl"Hip Hop\n"dl"Rap\n"dl"Rock\n"dl"Oldies\n"dl""SVRNAME" Radio\n"dl""grey"Your own stream", "Select", "Stop stream");
		}
		case VEHICLE_PLATE_DIALOG:
  		{
			ShowPlayerDialog(playerid, VEHICLE_PLATE_DIALOG, DIALOG_STYLE_INPUT, ""nef" - Private Vehicle Shop", ""white"Please enter something for your number plate:\nYou can change it later.\nLength: 2 - 12 characters", "Next", "Back");
  		}
		case NEON_DIALOG:
		{
			format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i > Neon Menu", PVVMenuSel[playerid] + 1);
		    ShowPlayerDialog(playerid, NEON_DIALOG, DIALOG_STYLE_LIST, gstr, ""dl"Red\n"dl"Green\n"dl"Blue\n"dl"Yellow\n"dl"White\n"dl"Pink\n"dl""grey"Remove", "Select", "Back");
		}
		case CUSTOM_PLATE_DIALOG:
		{
			format(gstr, sizeof(gstr), ""nef" - Private Vehicle Menu > Slot: %i > Plate", PVVMenuSel[playerid] + 1);
		    ShowPlayerDialog(playerid, CUSTOM_PLATE_DIALOG, DIALOG_STYLE_INPUT, gstr, ""white"Please enter something for your number plate:\nLength: 2 - 12 characters", "Change", "Back");
		}
		case VEHICLE_DIALOG:
		{
			new string[512],
				finstring[1024];

			format(finstring, sizeof(finstring), ""dl""yellow_e"VIP Vehicles\n"dl"Airplanes\n"dl"Helicopters\n"dl"Bikes\n"dl"Convertibles\n"dl"Industrial\n"dl"Lowriders\n"dl"Off Road\n"dl"Public Service Vehicles\n"dl"Saloons\n");
			format(string, sizeof(string), ""dl"Sport Vehicles\n"dl"Station Wagons\n"dl"Boats\n"dl"Trailers\n"dl"Unique Vehicles\n"dl"RC Vehicles");
			strcat(finstring, string, sizeof(string));
			ShowPlayerDialog(playerid, VEHICLE_DIALOG, DIALOG_STYLE_LIST, ""nef" - Vehicle Menu", finstring, "Select", "Cancel");
		}
		case TELE_DIALOG:
		{
			ShowPlayerDialog(playerid, TELE_DIALOG, DIALOG_STYLE_LIST, ""nef" - Teleports", ""dl"Parkours\n"dl"Stunts\n"dl"Basejump/Skydive\n"dl"Vehicle Jumps\n"dl"Fun Maps\n"dl"Specials\n"dl"Vehicle Tuning\n"dl"Cities\n"dl"Hotspots\n"dl"Drifts", "Select", "Cancel");
		}
		case VMENU_DIALOG:
		{
		    new string[1024], tmp[128];
		    
		    for(new i = 0; i < MAX_PLAYER_PVS; i++)
		    {
		        if(i > PlayerInfo[playerid][AdditionalPVSlots]) // Can not use
		        {
	            	format(tmp, sizeof(tmp), ""white"PV Slot %i "red"(Locked)\n", i + 1);
	            	strcat(string, tmp);
				}
		        else // Can use
				{
		            if(PlayerPV[playerid][i][Model] != 0)
		            {
		            	format(tmp, sizeof(tmp), ""white"PV Slot %i "green2"(Used) (Vehicle: %s)\n", i + 1, GetPVNameByModelId(PlayerPV[playerid][i][Model]));
		            	strcat(string, tmp);
					}
					else
					{
		            	format(tmp, sizeof(tmp), ""white"PV Slot %i\n", i + 1);
		            	strcat(string, tmp);
					}
				}
		    }
		    
			ShowPlayerDialog(playerid, VMENU_DIALOG, DIALOG_STYLE_LIST, ""nef" - Private Vehicle Menu", string, "Select", "Cancel");
		}
		case WEAPON_DIALOG:
		{
			ShowPlayerDialog(playerid, WEAPON_DIALOG, DIALOG_STYLE_LIST, ""nef" - Weapons", ""dl"Rifles\n"dl"Submachine Guns\n"dl"Shot Guns\n"dl"Hand Guns\n"dl"Melee Weapons\n"dl"Special Weapons", "Select", "Cancel");
		}
		case CARBUY_DIALOG:
		{
  			ShowPlayerDialog(playerid, CARBUY_DIALOG, DIALOG_STYLE_LIST, ""nef" - Private Vehicle Shop", sPVCategory, "Select", "Cancel");
		}
		case GMENU_DIALOG:
		{
		    format(gstr, sizeof(gstr), ""grey"[%s] %s "white"- Gang Menu", PlayerInfo[playerid][GangTag], PlayerInfo[playerid][GangName]);
		
		    switch(PlayerInfo[playerid][GangPosition])
			{
			    case GANG_POS_JUNIOR_MEMBER, GANG_POS_MEMBER, GANG_POS_SENIOR_MEMBER, GANG_POS_ADVISOR:
			    {
			        ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, ""dl"Gang Info\n"dl"Show all gang members\n"dl"View all gang commands", "Select", "Cancel");
			    }
			    case GANG_POS_LEADER:
			    {
			        ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, ""dl"Gang Info\n"dl"Show All Gang Members\n"dl"View All Gang Commands\n"dl"Set Player Rank", "Select", "Cancel");
			    }
			    case GANG_POS_MAIN_LEADER:
			    {
			    	ShowPlayerDialog(playerid, GMENU_DIALOG, DIALOG_STYLE_LIST, gstr, ""dl"Gang Info\n"dl"Show All Gang Members\n"dl"View All Gang Commands\n"dl"Set Player Rank\n"dl"Kick Player From Gang", "Select", "Cancel");
			    }
			}
		}
		case BGVOTING_DIALOG:
		{
		    ShowPlayerDialog(playerid, BGVOTING_DIALOG, DIALOG_STYLE_LIST, ""nef" - TDM Map Voting", ""dl"Forest\n"dl"Quarters\n"dl"Rust\n"dl"Italy\n"dl"Medieval", "Vote", "");
		}
		case DERBY_VOTING_DIALOG:
		{
            ShowPlayerDialog(playerid, DERBY_VOTING_DIALOG, DIALOG_STYLE_LIST, ""nef" - Derby Map Voting", ""dl"SilverGround\n"dl"Anubis\n"dl"Confusing\n"dl"Lighthouse\n"dl"Truncat\n"dl"Sky Skiing\n"dl"Townhall\n"dl"Glazz\n"dl"Rambo", "Vote", "");
		}
		case BANK_DIALOG:
		{
		    ShowPlayerDialog(playerid, BANK_DIALOG, DIALOG_STYLE_LIST, ""nef" - Bank Menu", ""dl"Deposit\n"dl"Withdraw\n"dl"Check Balance", "Select", "Cancel");
		}
	}
	return 1;
}

function:CoolDownDeath(playerid)
{
	PlayerInfo[playerid][iCoolDownDeath]--;
	return 1;
}

function:CoolDownCommand(playerid)
{
	PlayerInfo[playerid][iCoolDownCommand]--;
	return 1;
}

function:CoolDownText(playerid)
{
	PlayerInfo[playerid][iCoolDownText]--;
	return 1;
}

function:SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z)
{
    Streamer_UpdateEx(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z);
}

function:RandomSvrMsg()
{
    SCMToAll(WHITE, ServerMSGS[random(sizeof(ServerMSGS))]);
	return 1;
}

function:InitSession(playerid)
{
	TXTMoney[playerid] = CreatePlayerTextDraw(playerid, 323.000000, 247.000000, "~g~~h~~h~+$100");
	PlayerTextDrawAlignment(playerid, TXTMoney[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TXTMoney[playerid], 255);
	PlayerTextDrawFont(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTMoney[playerid], 0.299999, 1.399999);
	PlayerTextDrawColor(playerid, TXTMoney[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTMoney[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTMoney[playerid], 0);

	TXTScore[playerid] = CreatePlayerTextDraw(playerid, 323.000000, 262.000000, "~y~~h~+1 Score");
	PlayerTextDrawAlignment(playerid, TXTScore[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TXTScore[playerid], 255);
	PlayerTextDrawFont(playerid, TXTScore[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTScore[playerid], 0.299999, 1.399999);
	PlayerTextDrawColor(playerid, TXTScore[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTScore[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTScore[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTScore[playerid], 0);

	TXTWantedsTD[playerid] = CreatePlayerTextDraw(playerid, -5.000000, 404.000000, "~y~[] ~w~0");
	PlayerTextDrawBackgroundColor(playerid, TXTWantedsTD[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTWantedsTD[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TXTWantedsTD[playerid], 0.300000, 1.299998);
	PlayerTextDrawColor(playerid, TXTWantedsTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTWantedsTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTWantedsTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TXTWantedsTD[playerid], 0);
	
	TXTInfoTD[playerid] = CreatePlayerTextDraw(playerid, 148.888, 361.385, "~b~~h~Welcome!");
 	PlayerTextDrawLetterSize(playerid, TXTInfoTD[playerid], 0.326, 1.654);
	PlayerTextDrawAlignment(playerid, TXTInfoTD[playerid], 1);
	PlayerTextDrawColor(playerid, TXTInfoTD[playerid], -18177);
	PlayerTextDrawSetOutline(playerid, TXTInfoTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TXTInfoTD[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, TXTInfoTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTInfoTD[playerid], 1);
	
	DynamicAchTD[playerid][0] = CreatePlayerTextDraw(playerid, 313.000000, 213.000000, "TITLE");
	PlayerTextDrawAlignment(playerid, DynamicAchTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, DynamicAchTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, DynamicAchTD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, DynamicAchTD[playerid][0], 0.519999, 1.700000);
	PlayerTextDrawColor(playerid, DynamicAchTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, DynamicAchTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, DynamicAchTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, DynamicAchTD[playerid][0], 0);

	DynamicAchTD[playerid][1] = CreatePlayerTextDraw(playerid, 313.000000, 235.000000, "INFO");
	PlayerTextDrawAlignment(playerid, DynamicAchTD[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, DynamicAchTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, DynamicAchTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, DynamicAchTD[playerid][1], 0.290000, 1.200000);
	PlayerTextDrawColor(playerid, DynamicAchTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, DynamicAchTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, DynamicAchTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, DynamicAchTD[playerid][1], 0);
	
	vTD[playerid] = CreatePlayerTextDraw(playerid, 555.110412, 320.119964, "_");
	PlayerTextDrawLetterSize(playerid, vTD[playerid], 0.561555, 3.038580);
	PlayerTextDrawAlignment(playerid, vTD[playerid], 2);
	PlayerTextDrawColor(playerid, vTD[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, vTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, vTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, vTD[playerid], 51);
	PlayerTextDrawFont(playerid, vTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, vTD[playerid], 1);

	TXTKillerText[playerid] = CreatePlayerTextDraw(playerid, 319.000000, 204.000000, "Killed by~n~~r~");
	PlayerTextDrawAlignment(playerid, TXTKillerText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TXTKillerText[playerid], 255);
	PlayerTextDrawFont(playerid, TXTKillerText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, TXTKillerText[playerid], 0.290000, 1.099999);
	PlayerTextDrawColor(playerid, TXTKillerText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTKillerText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTKillerText[playerid], 1);

	TXTRaceInfo[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 344.000000, "Position: ~r~~h~~h~-/-~n~~w~Checkpoint: ~b~~h~~h~-/-~n~~w~Players: ~g~~h~~h~--/12~n~~w~Map: ~y~~h~--~n~~w~Timeleft: ~r~~h~~h~--:--");
	PlayerTextDrawBackgroundColor(playerid, TXTRaceInfo[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTRaceInfo[playerid], 0.270000, 1.099997);
	PlayerTextDrawColor(playerid, TXTRaceInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawUseBox(playerid, TXTRaceInfo[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TXTRaceInfo[playerid], 168430165);
	PlayerTextDrawTextSize(playerid, TXTRaceInfo[playerid], 640.000000, -7.000000);
	PlayerTextDrawSetSelectable(playerid, TXTRaceInfo[playerid], 0);

	TXTGunGameInfo[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 344.000000, "Players: ~b~~h~~h~--~n~~w~Level: ~r~~h~~h~--~n~~w~Weapon: ~g~~h~~h~--");
	PlayerTextDrawBackgroundColor(playerid, TXTGunGameInfo[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTGunGameInfo[playerid], 0.270000, 1.099997);
	PlayerTextDrawColor(playerid, TXTGunGameInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawUseBox(playerid, TXTGunGameInfo[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TXTGunGameInfo[playerid], 168430165);
	PlayerTextDrawTextSize(playerid, TXTGunGameInfo[playerid], 640.000000, -7.000000);
	PlayerTextDrawSetSelectable(playerid, TXTGunGameInfo[playerid], 0);

	TXTPlayerInfo[playerid] = CreatePlayerTextDraw(playerid, 16.000000, 178.000000, "---");
	PlayerTextDrawBackgroundColor(playerid, TXTPlayerInfo[playerid], 168430202);
	PlayerTextDrawFont(playerid, TXTPlayerInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TXTPlayerInfo[playerid], 0.230000, 1.199998);
	PlayerTextDrawColor(playerid, TXTPlayerInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TXTPlayerInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TXTPlayerInfo[playerid], 1);
	PlayerTextDrawUseBox(playerid, TXTPlayerInfo[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TXTPlayerInfo[playerid], 168430165);
	PlayerTextDrawTextSize(playerid, TXTPlayerInfo[playerid], 201.000000, -7.000000);
	PlayerTextDrawSetSelectable(playerid, TXTPlayerInfo[playerid], 0);

	PreloadAnimLib(playerid, "DANCING");

	// Gold Credits
	RemoveBuildingForPlayer(playerid, 5575, 1919.5234, -1400.8984, 16.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1978.1484, -1371.1484, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 1966.7109, -1360.0938, 17.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1971.8203, -1411.8750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 5390, 1919.5234, -1400.8984, 16.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 5415, 1916.9375, -1400.8906, 19.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5663, 1919.4453, -1400.8828, 19.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1958.8828, -1395.1953, 13.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1933.2422, -1376.1719, 13.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1978.1484, -1371.1484, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1858.1875, -1439.6875, 11.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5660, 1916.0547, -1426.2422, 16.0313, 0.25);
	// Gold Credits End
	
    RemoveBuildingForPlayer(playerid, 1231, 154.6641, -1839.4297, 5.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1350, -1772.3125, -121.4375, 2.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 1246.4531, -924.3047, 46.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 621.8125, -465.2656, 14.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 694, 731.6016, -433.0859, 13.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 658.0078, -429.7266, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 709, 706.1016, -427.0313, 15.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 774.0469, -486.0703, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 763.1172, -449.6953, 15.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 727, 1181.8047, -999.5469, 32.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1767.8359, -1455.5859, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1750.3047, -1446.5234, 16.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1762.8047, -1443.7578, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1776.3047, -1444.6797, 16.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1781.3906, -1450.5625, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1785.4297, -1457.5234, 16.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1812.3047, -1455.5078, 16.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 4606, 1825.0000, -1413.9297, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 4607, 1780.0000, -1360.0000, 12.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4608, 1773.2734, -1368.2734, 18.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4609, 1777.8906, -1376.8906, 20.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 4610, 1747.4375, -1361.5078, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1746.7500, -1359.7734, 16.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4759, 1748.9297, -1420.2813, 41.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1748.8438, -1420.4453, 35.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1728.1719, -1428.3750, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1423.7656, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1783.0391, -1440.3438, 13.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1773.5234, -1437.0391, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1762.7188, -1433.5859, 13.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1748.8438, -1420.4453, 35.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 4731, 1748.9297, -1420.2813, 41.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1783.2031, -1427.5234, 17.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1793.6172, -1420.6875, 17.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1417.7969, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.1250, -1413.3125, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 4594, 1825.0000, -1413.9297, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1411.3359, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1405.5391, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1399.6797, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1393.6719, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1740.3672, -1388.0625, 13.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1740.4609, -1386.5234, 13.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1749.5156, -1388.0000, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1749.9063, -1386.4375, 14.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 4714, 1754.5391, -1389.0859, 15.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1758.0469, -1387.9141, 15.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1758.7266, -1386.2578, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1768.1484, -1387.6094, 15.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 4559, 1773.2734, -1368.2734, 18.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4560, 1777.8906, -1376.8906, 20.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.1250, -1402.1563, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1809.8984, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1813.1641, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1815.6406, -1382.2031, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.9609, -1377.7266, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1831.9609, -1381.0703, 13.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1788.9844, -1363.0703, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.8906, -1363.0000, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 4558, 1747.4375, -1361.5078, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0469, -1360.9063, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 4590, 1780.0000, -1360.0000, 12.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0781, -1357.2656, 14.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1359.0938, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1754.5391, -1350.0781, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1759.8047, -1350.0781, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0469, -1353.7813, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.8672, -1353.2656, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1791.4766, -1351.6406, 14.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1800.5469, -1353.2109, 14.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1831.2813, -1354.1016, 14.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.8906, -1344.8984, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1348.4922, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1738.9609, -1342.5703, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1750.1328, -1342.5859, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1760.7969, -1342.5859, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1769.1641, -1342.6094, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1779.6797, -1342.6094, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1790.0859, -1342.6094, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1800.5469, -1342.6094, 14.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1813.9453, -1323.3516, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1828.0000, -1330.4141, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1831.6953, -1326.8906, 13.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1820.0859, -1326.1563, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1817.2109, -1323.3516, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1323.4844, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1842.1328, -1406.4375, 15.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1842.1328, -1379.2422, 15.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1846.2422, -1329.1094, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 5464, 1902.4297, -1309.5391, 29.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1835.9063, -1461.4063, 15.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1846.0469, -1449.8828, 15.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1842.1328, -1431.5859, 15.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 323.4297, -1659.6172, 31.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 339.9531, -1662.2422, 31.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 978, -1197.0078, -10.9844, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, -1244.9219, 5.1250, 25.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 978, -1183.7344, 2.2891, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 16594, -25.2109, 2338.7813, 27.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 16108, -25.2109, 2338.7813, 27.5078, 0.25);
	
	TXTSpeedo[playerid] = CreatePlayerTextDraw(playerid, 147.500000, 325.499938, "Speed");
	PlayerTextDrawLetterSize(playerid, TXTSpeedo[playerid], 0.569999, 3.338332);
	PlayerTextDrawTextSize(playerid, TXTSpeedo[playerid], 0.000000, 2.333331);
	PlayerTextDrawAlignment(playerid, TXTSpeedo[playerid], 1);
	PlayerTextDrawColor(playerid, TXTSpeedo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TXTSpeedo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TXTSpeedo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TXTSpeedo[playerid],0x73B1ED55);
	PlayerTextDrawFont(playerid, TXTSpeedo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TXTSpeedo[playerid], 1);
	return 1;
}

function:SendInfo(playerid, info[], time)
{
	if(strlen(info) > 250) return 1;
	KillTimer(PlayerInfo[playerid][tInfo]);
	PlayerTextDrawSetString(playerid, TXTPlayerInfo[playerid], info);
	PlayerInfo[playerid][tInfo] = SetTimerEx("HideInfo", time, false, "i", playerid);
	PlayerTextDrawShow(playerid, TXTPlayerInfo[playerid]);
	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

function:HideInfo(playerid)
{
	PlayerTextDrawHide(playerid, TXTPlayerInfo[playerid]);
	return 1;
}

function:KickEx(playerid)
{
	PlayerInfo[playerid][KBMarked] = true;
	SetTimerEx("Kick_Delay", 3000, false, "ii", playerid, YHash(__GetName(playerid), false));
	return 1;
}

function:Kick_Delay(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
		Kick(playerid);
	}
	return 1;
}

GetPlayerSettings(playerid)
{
	new string[1024],
	    tmpstring[128];

	if(PlayerInfo[playerid][SpeedBoost])
	{
	    format(tmpstring, sizeof(tmpstring), ""white"1)\tSpeedboost\t"vgreen"[ON]\n");
	    strcat(string, tmpstring);
	}
	else
	{
	    format(tmpstring, sizeof(tmpstring), ""white"1)\tSpeedboost\t"red"[OFF]\n");
	    strcat(string, tmpstring);
	}

	if(PlayerInfo[playerid][SuperJump])
	{
	    format(tmpstring, sizeof(tmpstring), ""white"2)\tSuperjump\t"vgreen"[ON]\n");
	    strcat(string, tmpstring);
	}
	else
	{
	    format(tmpstring, sizeof(tmpstring), ""white"2)\tSuperjump\t"red"[OFF]\n");
	    strcat(string, tmpstring);
	}
	
	if(PlayerInfo[playerid][bFooterEnabled])
	{
	    format(tmpstring, sizeof(tmpstring), ""white"3)\tFooter\t\t"vgreen"[ON]\n");
	    strcat(string, tmpstring);
	}
	else
	{
	    format(tmpstring, sizeof(tmpstring), ""white"3)\tFooter\t\t"red"[OFF]\n");
	    strcat(string, tmpstring);
	}

    format(tmpstring, sizeof(tmpstring), ""white"4)\tColor\t\t{%06x}Color\n", GetColor__(playerid) >>> 8);
    strcat(string, tmpstring);

	if(!PlayerInfo[playerid][bHasSpawn])
	{
	    format(tmpstring, sizeof(tmpstring), ""white"5)\tSpawn Place\t"vgreen"Default Random\n");
	    strcat(string, tmpstring);
	}
	else
	{
	    format(tmpstring, sizeof(tmpstring), ""white"5)\tSpawn Place\t"vgreen"Custom\n");
	    strcat(string, tmpstring);
	}

    format(tmpstring, sizeof(tmpstring), ""grey"6)\tChange Pass\n");
    strcat(string, tmpstring);
    format(tmpstring, sizeof(tmpstring), ""grey"7)\tStats\n");
    strcat(string, tmpstring);
    format(tmpstring, sizeof(tmpstring), ""grey"8)\tHelp\n");
    strcat(string, tmpstring);
    format(tmpstring, sizeof(tmpstring), ""grey"9)\tNetstats");
    strcat(string, tmpstring);
	return string;
}

UnixTimeToDate(unixtime)
{
	new u_year,
	    u_month,
	    u_day,
		u_hour,
		u_minute,
		u_second,
		u_date[50];

    TimestampToDate(unixtime, u_year, u_month, u_day, u_hour, u_minute, u_second, 1);

    format(u_date, sizeof(u_date), "%02i/%02i/%i %02i:%02i:%02i", u_day, u_month, u_year, u_hour, u_minute, u_second);
	return u_date;
}

ToCurrency(CCash)
{
    new szStr[16];
    format(szStr, sizeof(szStr), "%i", CCash);

    for(new iLen = strlen(szStr) - 3; iLen > 0; iLen -= 3)
    {
        strins(szStr, ",", iLen);
    }
    return szStr;
}

GetPlayerKMH(playerid)
{
	new Float:Vx, Float:Vy, Float:Vz, Float:rtn;
  
  	GetVehicleVelocity(GetPlayerVehicleID(playerid), Vx, Vy, Vz);
  	rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz, 2)));
  	return floatround(rtn * 100 * 1.61);
}

function:ChangeColors(playerid)
{
	new vehid = GetPlayerVehicleID(playerid);

	if(PVSelect[playerid] != -1)
	{
	    if(vehid == PlayerPV[playerid][PVSelect[playerid]][PVehicleID]) return 1;
	}

	if(PlayerInfo[playerid][bRainbow] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		ChangeVehicleColor(vehid, randomColors[random(23)], randomColors[random(23)]);
	}
	else
	{
		KillTimer(PlayerInfo[playerid][tRainbow]);
		PlayerInfo[playerid][bRainbow] = false;
		SCM(playerid, -1, ""nef" The Rainbow Effect has been turned off");
	}
	return true;
}

function:DestroyRampObject(objid, playerid)
{
	DestroyDynamicObject(objid);
	PlayerInfo[playerid][RampActive] = false;
}

IsVehicleOneSeater(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 406, 425, 430, 432, 435, 441, 446, 448, 449, 450, 452..454, 460, 464, 465, 472,
		473, 476, 481, 484..486, 493, 501, 509, 510, 512, 513, 519, 520, 530, 531, 532,
	 	539, 553, 564, 568, 571, 572, 574, 577, 584, 590..595, 606,
	 	607, 608, 610, 611: return 1;
	}
	return 0;
}

AddTeleport(teleport_category, const teleport_name[], const teleport_cmd[], Float:x, Float:y, Float:z)
{
	new buffer[70];
	
	format(buffer, sizeof(buffer), ""nef"\n%s (/%s)", teleport_name, teleport_cmd);
	
	CreateDynamic3DTextLabel(buffer, -1, x, y, z + 0.50, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1);

	format(buffer, sizeof(buffer), "%s (/%s)\n", teleport_name, teleport_cmd);
	
	strcat(TeleportDialogString[teleport_category], buffer);
    strmid(Teleports[teleport_category][Teleport_Index[teleport_category]++], teleport_cmd, 0, 26, 26);
    return 1;
}

PushTeleportIntput(playerid, teleport_category, input)
{
	new string[32];
	format(string, sizeof(string), "/%s", Teleports[teleport_category][input]);
	Command_ReProcess(playerid, string, false);
}

function:hidevTD(playerid)
{
	PlayerTextDrawHide(playerid, vTD[playerid]);
	PlayerInfo[playerid][vTDShown] = false;
}

SetPlayerPosition(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
    SetPlayerPos(playerid, X, Y, Z);
	SetCameraBehindPlayer(playerid);
	SetPlayerFacingAngle(playerid, a);
	SetPlayerInterior(playerid, inter);
}

function:ResetRobbery(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
		SetPVarInt(playerid, "HasRobbed", 0);
	}
}

function:JailPlayer(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
		SetPVarInt(playerid, "Robber", 1);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 10);
		SetPlayerWantedLevel(playerid, 0);
		SetPlayerFacingAngle(playerid, 360.0);
		SetPlayerPos(playerid, 197.5662, 175.4800, 1004.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ResetPlayerWeapons(playerid);
		PlayerPlaySound(playerid, 1186, 0, 0, 0);
		TextDrawShowForPlayer(playerid, JailTD);
		SetTimerEx("hideJailTD", 4000, false, "i", playerid);
	}
	return true;
}

function:StartRobbery(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
		new str[255];
		if(GetPVarInt(playerid, "InStore") == 0)
		{
			KillTimer(RobberyTimer[playerid]);
			GameTextForPlayer(playerid, " ", 1000, 3);
			RemovePlayerAttachedObject(playerid, 4);
			SCM(playerid, COLOR_RED, "Server: "GREY_E"Robbery Failed.");
			RobberyCount[playerid] = 0;
			return true;
		}
	 	RobberyCount[playerid]--;
	  	if(RobberyCount[playerid] == 0)
		{
			KillTimer(RobberyTimer[playerid]);
			RemovePlayerAttachedObject(playerid, 4);

			for(new i = 0; i < MAX_PLAYERS; i++)
	 		{
	 			if(GetPVarInt(i, "Cop") != 0)
				{
					PlayCrimeReportForPlayer(i, playerid, 18);
				}
			}
			switch(random(8))
			{
				case 0:
				{
					format(str, sizeof(str), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$13,000", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, str);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$13,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$13,000");
					GivePlayerCash(playerid, 13000, true, true);
				}
				case 1:
				{
					format(str, sizeof(str), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$10,000", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, str);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$10,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$10,000");
					GivePlayerCash(playerid, 10000, true, true);
				}
				case 2:
				{
					format(str, sizeof(str), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$5,000", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, str);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$5,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$5,000");
					GivePlayerCash(playerid, 5000, true, true);
				}
				case 3:
				{
					format(str, sizeof(str), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$8,000", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, str);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$8,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$8,000");
					GivePlayerCash(playerid, 8000, true, true);
				}
				case 4:
				{
					format(str, sizeof(str), "Server: {%06x}%s(%i) "LB_E"has robbed the %s and got away with "LG_E"$3,000", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, GetStoreName(playerid));
					SCMToAll(COLOR_RED, str);
					GameTextForPlayer(playerid, "~w~You have robbed ~g~$3,000", 5000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "ORANGE_E"You have succussfully completed the robbery and got away with "LG_E"$3,000");
					GivePlayerCash(playerid, 3000, true, true);
				}
				case 5..7:
				{
					GameTextForPlayer(playerid, "~r~Robbery Failed", 4000, 3);
					SCM(playerid, COLOR_WHITE, ""nef" "RED_E"You have failed the robbery and got away with nothing, the cops have been notified.");
				}
			}
			return 1;
		}
		else
		{
			format(str, sizeof(str),"~w~~b~robbery in progress~n~~w~stay in the store~n~~r~%i ~w~seconds left.", RobberyCount[playerid]);
			GameTextForPlayer(playerid, str, 2000, 3);
		}
	}
	else
	{
	    KillTimer(RobberyTimer[playerid]);
	    RobberyCount[playerid] = 0;
	}
	return 1;
}

GetStoreName(playerid)
{
	new store_name[40];
	switch(GetPVarInt(playerid, "InStore"))
	{
		case 1:
		{
			store_name = "24/7 in Roca Escalente";
		}
		case 2:
		{
			store_name = "24/7 in Strip";
		}
		case 3:
		{
			store_name = "Casino in Strip";
		}
		case 4:
		{
			store_name = "Ammunation in Come-A-Lot";
		}
		case 5:
		{
			store_name = "Bank in Roca Escalente";
		}
		case 6:
		{
			store_name = "Bank in Las Venturas";
		}
		case 7:
		{
			store_name = "4 Dragons Casino";
		}
		case 8:
		{
			store_name = "Royal Casino";
		}
		case 9:
		{
			store_name = "Ammunation in Strip";
		}
		case 10:
		{
			store_name = "Caligulas Casino";
		}
  	}
	return store_name;
}

function:MoveGate(playerid)
{
	// Return gate back to Original pos.
	MoveObject(Gate[0], 1397.24, 2694.51, 9.91, 3);
	MoveObject(Gate[1], 1397.24, 2693.86, 9.91, 3);
}

function:hideJailTD(playerid)
{
    TextDrawHideForPlayer(playerid, JailTD);
}

function:Maths()
{
	new str[255];
	if(mathsAnswered == 0)
	{
		format(str, sizeof(str), ""RED_E"[MATHS] "white"Previous question(%s) wasn't answered "GREEN_E"(right answer was %i)", mathsCurrent, mathsAnswer);
		SCMToAll(NEF_GREEN, str);
	}
	
    new NR1 = random(100),
		NR2 = random(100),
		NR3 = random(100),
		OP1 = random(3),
		OP2 = random(3),
		FOP1[2],
		FOP2[2];

    mathsAnswer = 0;
    mathsAnswered = 0;
    mathsAward = 0;

    // 0 = -
    // 1 = +
    // 2 = *

	switch(OP1)
	{
		case 0:
        {
        	format(FOP1, sizeof(FOP1), "-");
        	mathsAward = mathsAward + 2500;
            switch(OP2)
            {
            	case 0:
                {
                	format(FOP2, sizeof(FOP2), "-");
                    mathsAnswer = NR1-NR2-NR3;
                    mathsAward = mathsAward + 2500;
             	}
                case 1:
                {
                	format(FOP2, sizeof(FOP2), "+");
                    mathsAnswer = NR1-NR2+NR3;
                    mathsAward = mathsAward + 2000;
                }
                case 2:
                {
                	format(FOP2, sizeof(FOP2), "*");
                	mathsAnswer = NR1-NR2*NR3;
                	mathsAward = mathsAward + 3500;
            	}
          	}
 		}
  		case 1:
    	{
     		format(FOP1, sizeof(FOP1), "+");
			mathsAward = mathsAward + 2000;
            switch(OP2)
			{
   				case 0:
                {
                	format(FOP2, sizeof(FOP2), "-");
                    mathsAnswer = NR1+NR2-NR3;
                    mathsAward = mathsAward + 2500;
                }
                case 1:
                {
                	format(FOP2, sizeof(FOP2), "+");
                    mathsAnswer = NR1+NR2+NR3;
                    mathsAward = mathsAward + 2000;
                }
                case 2:
                {
                	format(FOP2, sizeof(FOP2), "*");
                	mathsAnswer = NR1+NR2*NR3;
                	mathsAward = mathsAward + 3500;
           		}
			}
		}
		case 2:
		{
			format(FOP1, sizeof(FOP1), "*");
			mathsAward = mathsAward + 3500;
			switch(OP2)
			{
				case 0:
				{
					format(FOP2, sizeof(FOP2), "-");
					mathsAnswer = NR1*NR2-NR3;
					mathsAward = mathsAward + 2500;
				}
				case 1:
				{
					format(FOP2, sizeof(FOP2), "+");
					mathsAnswer = NR1*NR2+NR3;
					mathsAward = mathsAward + 2000;
				}
				case 2:
				{
					format(FOP2, sizeof(FOP2), "x");
					mathsAnswer = NR1*NR2*NR3;
					mathsAward = mathsAward + 3500;
				}
			}
		}
	}
	format(mathsCurrent, sizeof(mathsCurrent), "%i%s%i%s%i", NR1, FOP1, NR2, FOP2, NR3);
	format(str, sizeof(str), ""RED_E"[MATHS] "white"Calculate %s and write /answer <answer> "YELLOW_E"(Score: 4 | Money: $%s)", mathsCurrent, ToCurrency(mathsAward));
	SCMToAll(-1, str);
	return 1;
}

CheckPlayerGod(playerid)
{
	TextDrawHideForPlayer(playerid, TXTGodTD);
	SetPlayerHealth(playerid, 100.0);
	PlayerInfo[playerid][bGod] = false;
}

function:hideCheck(playerid)
{
    TextDrawHideForPlayer(playerid, CheckTD);
	return 1;
}

function:hideError(playerid)
{
    TextDrawHideForPlayer(playerid, ErrorTD);
	return 1;
}

function:hideMsgTD(playerid)
{
    TextDrawHideForPlayer(playerid, NewMsgTD);
	return 1;
}

GivePlayerAchievement(playerid, achname[], stuffz[])
{
	if(GetPVarInt(playerid, "AchShowing") == 1) return 1;

	GivePlayerCash(playerid, 30000, true, true);
    PlayerInfo[playerid][Score] += 10;
	SetPlayerScore(playerid, PlayerInfo[playerid][Score]);

	format(gstr, sizeof(gstr), ""nef" {%06x}%s(%i) "GREEN_E"has unlocked the achievement '%s'!", GetColor__(playerid) >>> 8, __GetName(playerid), playerid, achname);
	SCMToAll(-1, gstr);

	ShowPlayerAchievement(playerid, achname, stuffz);
	return 1;
}

ShowPlayerAchievement(playerid, title[], infos[])
{
	TextDrawShowForPlayer(playerid, AchTD[0]);
	TextDrawShowForPlayer(playerid, AchTD[1]);
	TextDrawShowForPlayer(playerid, AchTD[2]);
	TextDrawShowForPlayer(playerid, AchTD[3]);
	TextDrawShowForPlayer(playerid, AchTD[4]);
	TextDrawShowForPlayer(playerid, AchTD[5]);
	PlayerTextDrawSetString(playerid, DynamicAchTD[playerid][0], title);
	PlayerTextDrawSetString(playerid, DynamicAchTD[playerid][1], infos);
	PlayerTextDrawShow(playerid, DynamicAchTD[playerid][0]);
	PlayerTextDrawShow(playerid, DynamicAchTD[playerid][1]);
	PlayerPlaySound(playerid, 1183, 0, 0, 0);
	SetPVarInt(playerid, "AchShowing", 1);
	SetTimerEx("HideAch", 12000, false, "i", playerid);
	return 1;
}

function:HideAch(playerid)
{
	DeletePVar(playerid, "AchShowing");
    PlayerPlaySound(playerid, 1186, 0, 0, 0);
    TextDrawHideForPlayer(playerid, AchTD[0]);
	TextDrawHideForPlayer(playerid, AchTD[1]);
	TextDrawHideForPlayer(playerid, AchTD[2]);
	TextDrawHideForPlayer(playerid, AchTD[3]);
	TextDrawHideForPlayer(playerid, AchTD[4]);
	TextDrawHideForPlayer(playerid, AchTD[5]);
	PlayerTextDrawHide(playerid, DynamicAchTD[playerid][0]);
	PlayerTextDrawHide(playerid, DynamicAchTD[playerid][1]);
	return 1;
}

function:InfoTD_MSG(playerid, ms_time, text[])
{
	if(GetPVarInt(playerid, "InfoTDshown") != -1)
	{
	    PlayerTextDrawHide(playerid, TXTInfoTD[playerid]);
	    KillTimer(GetPVarInt(playerid, "InfoTDshown"));
	}

    PlayerTextDrawSetString(playerid, TXTInfoTD[playerid], text);
    PlayerTextDrawShow(playerid, TXTInfoTD[playerid]);
	SetPVarInt(playerid, "InfoTDshown", SetTimerEx("InfoTD_Hide", ms_time, false, "i", playerid));
}

function:InfoTD_Hide(playerid)
{
	SetPVarInt(playerid, "InfoTDshown", -1);
	PlayerTextDrawHide(playerid, TXTInfoTD[playerid]);
}

IRC_QuitBots()
{
    IRC_Quit(IRC_Bots[0]);
    IRC_Quit(IRC_Bots[1]);
    IRC_Quit(IRC_Bots[2]);
    IRC_Quit(IRC_Bots[3]);
    IRC_Quit(IRC_Bots[4]);
}

IRC_SetUp(bool:restart = false)
{
	#if IRC_CONNECT == true
    if(!restart) IRC_GroupID = IRC_CreateGroup();
    
    #if IS_RELEASE_BUILD == true
	IRC_Bots[0] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]Floatround", "["SVRSC"]Floatround", "foatround");
	IRC_SetIntData(IRC_Bots[0], E_IRC_CONNECT_DELAY, 1);
	
	IRC_Bots[1] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]Inyaface", "["SVRSC"]Inyaface", "inyaface");
	IRC_SetIntData(IRC_Bots[1], E_IRC_CONNECT_DELAY, 6);
	
	IRC_Bots[2] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]SS_FatGuy", "["SVRSC"]SS_FatGuy", "ss_fatguy");
	IRC_SetIntData(IRC_Bots[2], E_IRC_CONNECT_DELAY, 15);
	
	IRC_Bots[3] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]TrainRider", "["SVRSC"]TrainRider", "trainrider");
	IRC_SetIntData(IRC_Bots[3], E_IRC_CONNECT_DELAY, 26);
	
	IRC_Bots[4] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]CrazyLilMan", "["SVRSC"]CrazyLilMan", "crazylilman");
	IRC_SetIntData(IRC_Bots[4], E_IRC_CONNECT_DELAY, 40);
	
	#else
	
	IRC_Bots[0] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]Floatround_BETA", "["SVRSC"]Floatround_BETA", "foatround_BETA");
	IRC_SetIntData(IRC_Bots[0], E_IRC_CONNECT_DELAY, 1);

	IRC_Bots[1] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]Inyaface_BETA", "["SVRSC"]Inyaface_BETA", "inyaface_BETA");
	IRC_SetIntData(IRC_Bots[1], E_IRC_CONNECT_DELAY, 6);

	IRC_Bots[2] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]SS_FatGuy_BETA", "["SVRSC"]SS_FatGuy_BETA", "ss_fatguy_BETA");
	IRC_SetIntData(IRC_Bots[2], E_IRC_CONNECT_DELAY, 15);

	IRC_Bots[3] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]TrainRider_BETA", "["SVRSC"]TrainRider_BETA", "trainrider_BETA");
	IRC_SetIntData(IRC_Bots[3], E_IRC_CONNECT_DELAY, 26);

	IRC_Bots[4] = IRC_Connect(IRC_SERVER, IRC_PORT, "["SVRSC"]CrazyLilMan_BETA", "["SVRSC"]CrazyLilMan_BETA", "crazylilman_BETA");
	IRC_SetIntData(IRC_Bots[4], E_IRC_CONNECT_DELAY, 40);
	#endif
	#endif
}

function:DoLotto()
{
	Iter_Clear(LottoNumbersUsed);
	lotto_number = random(75) + 1;
	lotto_jackpot = 200000 + random(100000);
	lotto_active = true;

	format(gstr, sizeof(gstr), "~g~~h~~<~ Lottery Information ~>~~n~~w~Buy a lotto in any 24/7 shop (/247) inside use /lotto <1-75>~n~~r~~h~Jackpot: $%s - Draw starts in 5 minutes!", ToCurrency(lotto_jackpot));

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
		InfoTD_MSG(i, 15000, gstr);
	}
	
	SetTimer("LottoDraw", 300000, false);
	return 1;
}

function:LottoDraw()
{
    lotto_active = false;

	new string[255];
	format(string, sizeof(string), "~g~~h~~<~ Lottery Information ~>~~n~~w~Numbers have been drawn. Current jackpot is: $%s - Drawn number: %i~n~~b~~h~~h~", ToCurrency(lotto_jackpot), lotto_number);
	
	new bool:found = false;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
	    if(PlayerInfo[i][DrawnNumber] == lotto_number)
	    {
			new str[128];
			format(str, sizeof(str), "We have a winner! %s(%i) has lotto %i and won the jackpot!", __GetName(i), i, lotto_number, ToCurrency(lotto_jackpot));
	        strcat(string, str);
	        GivePlayerCash(i, lotto_jackpot, true, true);
	        PlayerPlaySound(i, 5448, 0, 0, 0);
	        SendInfo(i, "~g~~h~~h~You won the lotto jackpot!", 5000);
	 		format(str, sizeof(str), "5%s(%i)3 won the lottery! Prize: $%s", __GetName(i), i, ToCurrency(lotto_jackpot));
	        IRC_GroupSay(IRC_GroupID, IRC_CHANNEL, str);
	        found = true;
	        break;
	    }
	}
	
	if(!found) strcat(string, "No winner this round!");
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerAvail(i)) continue;
		InfoTD_MSG(i, 15000, string);
	}
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        PlayerInfo[i][DrawnNumber] = -1;
	}

	SetTimer("DoLotto", 1200000, false);
	return 1;
}

IsComponentIdCompatible(modelid, componentid)
{
	if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
	     componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
	     componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
	     componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
	     return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}

GetPVNameByModelId(modelid)
{
	new bool:found = false,
		modelname[32];

	for(new i = 0; i < sizeof(PVMatrix); i++)
	{
	    if(PVMatrix[i][pv_modelid] == modelid)
	    {
	        found = true;
	        strmid(modelname, PVMatrix[i][pv_modelname], 0, 32, 32);
	        break;
	    }
	}
	if(!found) modelname = "INVALID_MODEL_ID";
	return modelname;
}

GetPVPriceByModelId(modelid)
{
	for(new i = 0; i < sizeof(PVMatrix); i++)
	{
	    if(PVMatrix[i][pv_modelid] == modelid)
	    {
	        new pr = PVMatrix[i][pv_price];
	        return pr;
	    }
	}
	return -1;
}

function:AlterPlayerCredits(playerid, amount)
{
	format(gstr, sizeof(gstr), "INSERT INTO `creditslog` VALUES (NULL, '%s', %i, %i);", __GetName(playerid), amount, gettime());
	mysql_tquery(g_SQL_handle, gstr, "", "");
	PlayerInfo[playerid][Credits] += amount;
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return 1;
}

IsAd(const text[])
{
	new is1 = 0,
		r = 0;

 	while(strlen(text[is1]))
 	{
  		if('0' <= text[is1] <= '9')
  		{
 			new is2 = is1 + 1,
			 	p = 0;

			while(p == 0)
  			{
   				if('0' <= text[is2] <= '9' && strlen(text[is2]))
		   		{
			  		is2++;
				}
 				else
  				{
				   	strmid(gstr2[r], text, is1, is2, sizeof(gstr2));
				   	if(strval(gstr2[r]) < sizeof(gstr2)) r++;
				    is1 = is2;
				    p = 1;
				}
			}
		}
 		is1++;
 	}
	if(r >= 4 && r <= 8) return true;
	return false;
}

function:OnNCReceive(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new tmp[128], string[1024], oldname[25], newname[25];
	    strcat(string, ""white"Displaying last 10 Name Change Records:\n\n");
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 1, oldname, g_SQL_handle, sizeof(oldname));
	        cache_get_row(i, 2, newname, g_SQL_handle, sizeof(newname));
	        format(tmp, sizeof(tmp), "%i - %s changed their name to %s on %s\n", i + 1, oldname, newname, UnixTimeToDate(cache_get_row_int(i, 3, g_SQL_handle)));
	        strcat(string, tmp);
	    }

		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Namechange Records", string, "OK", "");
	}
	return 1;
}

function:OnNCReceive2(playerid, name[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new tmp[128], string[1024], oldname[25], newname[25];
	    format(tmp, sizeof(tmp), ""white"%i Name Change Records for %s\n\n", rows, name);
	    strcat(string, tmp);
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_row(i, 1, oldname, g_SQL_handle, sizeof(oldname));
	        cache_get_row(i, 2, newname, g_SQL_handle, sizeof(newname));
	        format(tmp, sizeof(tmp), "%i - %s changed their name to %s on %s\n", i + 1, oldname, newname, UnixTimeToDate(cache_get_row_int(i, 3, g_SQL_handle)));
	        strcat(string, tmp);
	    }

		ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Namechange Records", string, "OK", "");
	}
	else SCM(playerid, -1, ""er"No records found for that player");
	return 1;
}

GetNearestHouse(playerid)
{
	for(new i = 0; i < houseid; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z])) continue;

	    return i;
	}

	return -1;
}

GetHouseIdByPlayerSlotSel(playerid)
{
	new idx = 0;
	for(new i = 0; i < houseid; i++)
	{
        if(!strcmp(HouseInfo[i][Owner], __GetName(playerid), true) && HouseInfo[i][sold] == 1)
        {
            if(idx == PlayerInfo[playerid][HouseSlotSelected])
            {
            	return i;
			}
			else idx++;
		}
	}
	return -1;
}

GetPropIdByPlayerSlotSel(playerid)
{
	new idx = 0;
	for(new i = 0; i < propid; i++)
	{
        if(!strcmp(PropInfo[i][Owner], __GetName(playerid), true) && PropInfo[i][sold] == 1)
        {
            if(idx == PlayerInfo[playerid][PropSlotSelected])
            {
            	return i;
			}
			else idx++;
		}
	}
	return -1;
}

ExitPlayer(playerid)
{
    if(PlayerInfo[playerid][bGWarMode])
    {
        ResetPlayerGWarMode(playerid);
        return 0;
    }
    
	switch(gTeam[playerid])
	{
	    case gBUILDRACE:
	    {
		    format(gstr, sizeof(gstr), "/Race/%03i.race", g_RaceCount + 1);
			if(fexist(gstr))
			{
				fremove(gstr);
			}
			RemoveFromRaceBuilder(playerid);
			return 0;
	    }
	    case CNR:
	    {
	        gTeam[playerid] = NORMAL;

			SetPVarInt(playerid, "Robber", 0);
			SetPVarInt(playerid, "Cop", 0);

			SetPlayerColor(playerid, GetPVarInt(playerid, "oldColor"));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "dSkin"));

            Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
            Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
            Streamer_Update(playerid);
            
		    HidePlayerCNRTextdraws(playerid);
		    SetPlayerWantedLevel(playerid, 0);
		    ResetPlayerWorld(playerid);
		    RandomSpawn(playerid, true);
		    RandomWeapon(playerid);
		    
		    SetPlayerTeam(playerid, NO_TEAM);
		    
		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerInfo[playerid][tickJoin_bmx] = 0;
	        return 0;
	    }
		case VIPL:
		{
 		    SetPlayerPos(playerid, -2623.6348, 1407.9154, 7.1016);
		    ResetPlayerWorld(playerid);
		    gTeam[playerid] = NORMAL;
		    PlayerPlaySound(playerid, 1069, 0, 0, 0);

		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerInfo[playerid][tickJoin_bmx] = 0;
		    return 0;
		}
	    case SPEC:
	    {
	        Command_ReProcess(playerid, "/specoff", false);
	        return 0;
	    }
	    case NORMAL:
	    {
	        SCM(playerid, -1, ""er"You can´t use this command now!");
	        return 0;
	    }
	    case BUYCAR:
	    {
			SetPlayerInterior(playerid, 0);
		    SetPlayerPosEx(playerid, 1798.0952, -1410.8192, floatadd(13.5458, 4.5));
		    RandomWeapon(playerid);
			gTeam[playerid] = NORMAL;

		    RandomWeapon(playerid);

			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			
			LoadMap(playerid);
			return 0;
	    }
	    case STORE:
	    {
	        SCM(playerid, -1, ""er"Leave the store by entering the pickup");
	        return 0;
	    }
	    case MINIGUN, SNIPER:
	    {
			gTeam[playerid] = NORMAL;
			ResetPlayerWeapons(playerid);
			RandomWeapon(playerid);
			RandomSpawn(playerid, true);
			ResetPlayerWorld(playerid);
			ShowPlayerInfoTextdraws(playerid);

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
	    }
		case HOUSE:
		{
		    new bool:found = false;
			for(new i = 0; i < houseid; i++)
			{
		    	if(GetPlayerInterior(playerid) == HouseIntTypes[HouseInfo[i][interior]][interior] && GetPlayerVirtualWorld(playerid) == (HouseInfo[i][iID] + 1000))
				{
				    found = true;
			    	SetPlayerPos(playerid, HouseInfo[i][E_x], HouseInfo[i][E_y], HouseInfo[i][E_z]);
			    	SetPlayerInterior(playerid, 0);
			    	SetPlayerVirtualWorld(playerid, 0);
			    	CancelEdit(playerid);
			    	gTeam[playerid] = NORMAL;
			    	
			    	LoadMap(playerid);
			    	break;
		    	}
		    	else continue;
			}
			if(!found)
			{
				return SCM(playerid, -1, ""er"Go to the house door to exit!");
			}
			return 0;
		}
		case gBG_VOTING:
		{
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
		    SetPlayerTeam(playerid, NO_TEAM);
		    gTeam[playerid] = NORMAL;
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			RandomSpawn(playerid, true);
			RandomWeapon(playerid);
			ResetPlayerWorld(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gBG_TEAM1:
		{
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
			SetPlayerTeam(playerid, NO_TEAM);
		    BGTeam1Players--;
		    gTeam[playerid] = NORMAL;
			RandomSpawn(playerid, true);
			RandomWeapon(playerid);
			ResetPlayerWorld(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gBG_TEAM2:
		{
		    HidePlayerBGTextdraws(playerid);
		    SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
		    SetPlayerTeam(playerid, NO_TEAM);
		    BGTeam2Players--;
		    gTeam[playerid] = NORMAL;
			RandomSpawn(playerid, true);
			RandomWeapon(playerid);
			ResetPlayerWorld(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case DM, WAR:
		{
			gTeam[playerid] = NORMAL;
			RandomWeapon(playerid);
			RandomSpawn(playerid, true);
			ResetPlayerWorld(playerid);
			HidePlayerDMTextdraws(playerid);

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case gRACE:
		{
     		--g_RacePlayerCount;

	    	format(gstr, sizeof(gstr), "%s(%i) left the race!", __GetName(playerid), playerid);
			RaceMSG(gstr);

			gTeam[playerid] = NORMAL;

			if(g_RaceVehicle[playerid] != -1)
			{
				DestroyVehicle_(g_RaceVehicle[playerid]);
				g_RaceVehicle[playerid] = -1;
			}

		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(playerid);

			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			ResetPlayerWorld(playerid);
			RandomWeapon(playerid);
			RandomSpawn(playerid, true);
            ToggleSpeedo(playerid, false);

			g_CPProgress[playerid] = 0;

			HidePlayerRaceTextdraws(playerid);
            DisablePlayerRaceCheckpoint(playerid);

			ResetPlayerWorld(playerid);
			
		    if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god", false);
		    SetPVarInt(playerid, "doingStunt", 0);
		    PlayerInfo[playerid][tickJoin_bmx] = 0;
		    return 0;
		}
		case DERBY:
		{
		    //exit

		    HidePlayerDerbyTextdraws(playerid);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerHealth(playerid, 100.0);
		    SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			RandomSpawn(playerid, true);
			RandomWeapon(playerid);
		    gTeam[playerid] = NORMAL;
		    
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
		    Streamer_Update(playerid);
            
		    if(DerbyVehLabel[playerid] != PlayerText3D:-1)
		    {
		    	DeletePlayer3DTextLabel(playerid, DerbyVehLabel[playerid]);
		    	DerbyVehLabel[playerid] = PlayerText3D:-1;
		    }

		    if(bDerbyAFK[playerid])
			{
		        return 1;
		    }

		    CurrentDerbyPlayers--;

			if(!IsDerbyRunning)
			{
				if(CurrentDerbyPlayers < 2)
				{
				    ClearDerbyVotes();
					ExecDerbyVotingTimer();
				}
				return 1;
			}
			else if(IsDerbyRunning && DerbyWinner[playerid])
			{
			    if(pDerbyCar[playerid] != -1)
			    {
			    	DestroyVehicle_(pDerbyCar[playerid]);
			    	pDerbyCar[playerid] = -1;
				}
				DerbyPlayers--;
				DerbyWinner[playerid] = false;
				if(DerbyPlayers == 1) Derby();
			}

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case FALLOUT:
		{
			gTeam[playerid] = NORMAL;

		    TogglePlayerControllable(playerid, true);
		    RandomSpawn(playerid, true);
		    RandomWeapon(playerid);
		    HidePlayerFalloutTextdraws(playerid);
		    ResetPlayerWorld(playerid);
		    CurrentFalloutPlayers--;
            PlayerInfo[playerid][FalloutLost] = true;
		    new count = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(!IsPlayerAvail(i)) continue;
			    if(gTeam[i] == FALLOUT) count++;
			}

			if(count < 2)
			{
			    KillTimer(Info[I_iTimer][1]);

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(gTeam[i] == FALLOUT)
				    {
				    	TogglePlayerControllable(i, true);
					    RandomSpawn(i, true);
					    RandomWeapon(i);
					    HidePlayerFalloutTextdraws(i);
					    ResetPlayerWorld(i);
					    FalloutMSG("Fallout has been canceled!");
						gTeam[i] = NORMAL;
				    }
				}
				Fallout_Cancel();
			}

			if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
			SetPVarInt(playerid, "doingStunt", 0);
			PlayerInfo[playerid][tickJoin_bmx] = 0;
			return 0;
		}
		case GUNGAME:
		{
		    ResetPlayerWorld(playerid);
  			gTeam[playerid] = NORMAL;

	    	RandomSpawn(playerid, true);
	    	RandomWeapon(playerid);
	    	SetCameraBehindPlayer(playerid);
	    	GunGamePlayers--;
	    	HidePlayerGunGameTextdraws(playerid);

	    	if(GetPVarInt(playerid, "HadGod") == 1) Command_ReProcess(playerid, "/god silent", false);
	    	SetPVarInt(playerid, "doingStunt", 0);
	    	PlayerInfo[playerid][tickJoin_bmx] = 0;
	    	return 0;
		}
		default: return 1;
	}
	return 2;
}

LoadMap(playerid)
{
	Streamer_Update(playerid);
	PlayerInfo[playerid][bLoadMap] = true;
	TogglePlayerControllable(playerid, 0);
	TextDrawShowForPlayer(playerid, TXTLoading);
	new ping = GetPlayerPing(playerid);
	if(ping < 65)
	{
		PlayerInfo[playerid][tLoadMap] = SetTimerEx("FreePlayer", 1550, false, "i", playerid);
	}
	else if(ping < 110)
	{
	    PlayerInfo[playerid][tLoadMap] = SetTimerEx("FreePlayer", 2050, false, "i", playerid);
	}
	else if(ping < 200)
	{
	    PlayerInfo[playerid][tLoadMap] = SetTimerEx("FreePlayer", 3050, false, "i", playerid);
	}
	else
	{
		PlayerInfo[playerid][tLoadMap] = SetTimerEx("FreePlayer", 3550, false, "i", playerid);
	}
}

function:FreePlayer(playerid)
{
	if(PlayerInfo[playerid][bLoadMap])
	{
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid, TXTLoading);
		PlayerInfo[playerid][tLoadMap] = -1;
		PlayerInfo[playerid][bLoadMap] = false;
	}
	return 1;
}

IsNeonBikeModel(modelid)
{
	switch(modelid)
	{
	    case 581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 468, 586: return 1;
	}
	return 0;
}

GetItem(index)
{
	new string[2048], tmp[300];
	format(string, sizeof(string), ""green"* "white"Item: %s\n"green"* "white"Gold Credits: "white"%sGC\n"green"* "white"Quantity: "white"%i\n"green"* "white"Duration: "white"%s\n",
		CreditsProductMatrix[index][E_item_name],
		ToCurrency(CreditsProductMatrix[index][E_item_credits]),
        CreditsProductMatrix[index][E_item_quantity],
        CreditsProductMatrix[index][E_item_duration]);
	
	format(tmp, sizeof(tmp), ""green"* "white"Item Description:\n%s",
		CreditsProductMatrix[index][E_item_description]);
	strcat(string, tmp);
	return string;
}

GetCredits(playerid)
{
	new c = PlayerInfo[playerid][Credits];
	return c;
}

function:OnGangRenameAttempt(playerid, newgangname[], newgangtag[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
		SCM(playerid, -1, ""er"This gang name is already in use!");
	}
	else
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(PlayerInfo[i][GangID] == PlayerInfo[playerid][GangID] || PlayerInfo[i][TmpGangID] == PlayerInfo[playerid][GangID])
	        {
	            strmid(PlayerInfo[i][GangName], newgangname, 0, 21, 21);
	            strmid(PlayerInfo[i][GangTag], newgangtag, 0, 5, 5);
	        }
	    }
	    format(gstr2, sizeof(gstr2), "UPDATE `gangs` SET `GangName` = '%s', `GangTag` = '%s' WHERE `ID` = %i LIMIT 1;", newgangname, newgangtag, PlayerInfo[playerid][GangID]);
	    mysql_tquery(g_SQL_handle, gstr2, "", "");
	    
	    format(gstr2, sizeof(gstr2), ""gang_sign" "r_besch"Gang Founder %s(%i) changed the gang's name to [%s]%s", __GetName(playerid), playerid, newgangtag, newgangname);
		GangMSG(PlayerInfo[playerid][GangID], gstr2);
		
		GivePlayerCash(playerid, -100000);
	}
	return 1;
}

function:OnBoostReceive(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);
	
	if(rows > 0)
	{
	    for(new i = 0; i < rows; i++)
	    {
	        new bool:set = true;
	        
			switch(cache_get_row_int(i, 1, g_SQL_handle))
			{
			    case 2: PlayerInfo[playerid][Boost] |= BOOST_MONEY_x2;
			    case 3: PlayerInfo[playerid][Boost] |= BOOST_MONEY_x3;
			    case 4: PlayerInfo[playerid][Boost] |= BOOST_SCORE_x2;
			    case 5: PlayerInfo[playerid][Boost] |= BOOST_SCORE_x3;
			    case 6: PlayerInfo[playerid][Boost] |= BOOST_MASTER;
			    default: set = false;
			}
			
			if(set)
			{
				PlayerInfo[playerid][BoostDeplete] = cache_get_row_int(i, 2, g_SQL_handle);
				
				format(gstr, sizeof(gstr), ""server_sign" "r_besch"Boost has been loaded! Runs out on: %s", UnixTimeToDate(PlayerInfo[playerid][BoostDeplete]));
				SCM(playerid, -1, gstr);
			}
	    }
	}
	return 1;
}

function:p_medkit(playerid)
{
	if(PlayerInfo[playerid][MedkitTime] > 0)
	{
	    if(!IsPlayerConnected(playerid))
	    {
			KillTimer(PlayerInfo[playerid][tMedkit]);
			PlayerInfo[playerid][tMedkit] = -1;
			return 1;
	    }
	
		new Float:health;
		GetPlayerHealth(playerid, health);

		if(health + 1.0 >= 100.0)
		{
			KillTimer(PlayerInfo[playerid][tMedkit]);
			PlayerInfo[playerid][tMedkit] = -1;
			InfoTD_MSG(playerid, 1500, "~g~~h~~h~Max. Health reached!");
			return 1;
		}

		SetPlayerHealth(playerid, health + 1.0);
		SetPlayerChatBubble(playerid, ""green"Used 1 Medkit!", -1, 15.0, 200);
		
		PlayerInfo[playerid][MedkitTime]--;
	}
	else
	{
	    KillTimer(PlayerInfo[playerid][tMedkit]);
	    PlayerInfo[playerid][tMedkit] = -1;
	    InfoTD_MSG(playerid, 1500, "~g~~h~~h~Medkit depleted!");
	}
	return 1;
}

GetPlayerPropEearnings(playerid)
{
	new __int32 = 0;
	for(new i = 0; i < propid; i++)
	{
	    if(strcmp(PropInfo[i][Owner], __GetName(playerid), true)) continue;
	    
	    __int32 += GetPropEearnings(i);
	}
	return __int32;
}

GetPropEearnings(p_id)
{
	new __int32 = 0;
	for(new i = 0; i < sizeof(BLevelMatrix); i++)
	{
		if(i == (PropInfo[p_id][E_Level] - 1))
		{
		    __int32 = BLevelMatrix[i][E_bearnings];
		    return __int32;
		}
	}
	return 0;
}

GetCNRCops()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Cop"))
		{
		    count++;
		}
	}
	return count;
}

GetCNRRobbers()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Robber"))
		{
		    count++;
		}
	}
	return count;
}

LoadPos(playerid)
{
	SetPlayerPos(playerid, PlayerInfo[playerid][fOldPos][0], PlayerInfo[playerid][fOldPos][1], PlayerInfo[playerid][fOldPos][2] + 1.0);
	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][fOldPos][3]);
	SetCameraBehindPlayer(playerid);
}

SavePos(playerid)
{
	GetPlayerPos(playerid, PlayerInfo[playerid][fOldPos][0], PlayerInfo[playerid][fOldPos][1], PlayerInfo[playerid][fOldPos][2]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][fOldPos][3]);
}

islogged(playerid)
{
	if(PlayerInfo[playerid][ExitType] == EXIT_FIRST_SPAWNED && PlayerInfo[playerid][bLogged])
	{
	    return 1;
	}
	return 0;
}

function:RandomTXTInfo()
{
	TextDrawSetString(TXTRandomInfo, szRandomInfoTXTs[random(sizeof(szRandomInfoTXTs))]);
	return 1;
}

function:OnUnbanAttempt(playerid, unban[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `bans` WHERE `PlayerName` = '%s' LIMIT 1;", unban);

	    mysql_tquery(g_SQL_handle, query, "", "");

	    SCM(playerid, -1, ""er"Player has been unbanned!");
	}
	else
	{
	    SCM(playerid, -1, ""er"Player is not banned or does not exist");
	}
	return 1;
}

function:OnOfflineBanAttempt(playerid, ban[], reason[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
		new buffer[30];
		cache_get_row(0, 0, buffer, g_SQL_handle, sizeof(buffer));
		
		format(gstr, sizeof(gstr), ""er"%s has already been banned by %s", ban, buffer);
	    SCM(playerid, -1, gstr);
	}
	else
	{
	    format(gstr, sizeof(gstr), "SELECT `Level`, `IP` FROM `accounts` WHERE `Name` = '%s';", ban);
	    mysql_tquery(g_SQL_handle, gstr, "OnOfflineBanAttempt2", "iss", playerid, ban, reason);
	}
	return 1;
}

function:OnOfflineBanAttempt2(playerid, ban[], reason[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    if(cache_get_row_int(0, 0, g_SQL_handle) != 0)
	    {
	        return SCM(playerid, -1, ""er"You may not ban admins");
	    }

	    new ip[16];
		cache_get_row(0, 1, ip, g_SQL_handle, sizeof(ip));

		MySQL_CreateBan(ban, __GetName(playerid), reason);
		MySQL_BanIP(ip);

		SCM(playerid, -1, ""er"Player has been banned!");
	}
	else
	{
	    SCM(playerid, -1, ""er"Player does not exist!");
	}
	return 1;
}

function:HideMoneyTD(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
    	PlayerTextDrawHide(playerid, TXTMoney[playerid]);
	}
}

function:HideScoreTD(playerid, namehash)
{
	if(IsPlayerConnected(playerid) && YHash(__GetName(playerid), false) == namehash)
	{
    	PlayerTextDrawHide(playerid, TXTScore[playerid]);
	}
}

GetRankByLevel(alevel)
{
	new rank[20];
	
	switch(alevel)
	{
	    case 1: rank = "Trial Admin";
	    case 2: rank = "Admin";
	    case 3: rank = "Senior Admin";
	    case 4: rank = "Moderator";
	 	case 5: rank = "Head Admin";
	 	case 6: rank = "Founder";
	 	default: rank = "Player";
	}
	return rank;
}

function:OnIpLookUp(playerid, ip[])
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    for(new i = 0; i < rows; i++)
	    {
			new buffer[MAX_PLAYER_NAME+1];
			cache_get_row(i, 0, buffer, g_SQL_handle, sizeof(buffer));

			format(gstr, sizeof(gstr), "%i) %s used %s", i, buffer, ip);
			SCM(playerid, BLUE, gstr);
	    }
	}
	else
	{
  		SCM(playerid, BLUE, "No players found for this ip");
	}
	return 1;
}

function:OnSessionCheck(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows == 0)
	{
		//format(gstr, sizeof(gstr), "SELECT COUNT(`ID`) FROM `queue` WHERE `Extra` LIKE '%%s%'
	    ShowDialog(playerid, NAME_CHANGE_DIALOG);
	}
	else
	{
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - Namechange", ""red"Namechange not possible! You are currently logged into the UCP.\n\n"white"Please log out from the UCP. If you can't do so you have to have up to 30 minutes.", "OK", "");
	}
	return 1;
}

FetchRaces()
{
	g_RaceCount = dini_Int("/Race/Index/Index.ini", "TotalRaces");
}

function:OpenNewRace()
{
	if(g_RaceCount == 0) return 1;
	
	if(g_RaceForceMap != 0)
	{
	    g_NextRace = g_RaceForceMap;
	}
	else
	{
	    g_NextRace = random(g_RaceCount) + 1;
	}
	g_RaceForceMap = 0;
	
	PrepareRace();
	
	format(gstr, sizeof(gstr), ""race_sign" New race "white"%03i is now active [/race]", g_NextRace);
	SCMToAll(-1, gstr);

	format(gstr, sizeof(gstr), "SELECT `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 1;", g_NextRace);
	mysql_tquery(g_SQL_handle, gstr, "OnRaceDataLoaded", "");
	return 1;
}

PrepareRace()
{
	new file[16];
	format(file, sizeof(file), "/Race/%03i.race", g_NextRace);

	if(!fexist(file)) return StopRace();
	
	g_RaceArray[E_vModel] = dini_Int(file, "vModel");
	g_RaceArray[E_rType] = dini_Int(file, "rType");
    g_RaceArray[E_rWorld] = dini_Int(file, "rVirtualWorld");
	g_RaceArray[E_rCPs] = dini_Int(file, "rTotalRaceCPs");
	g_RaceArray[E_DeployTime] = dini_Int(file, "rDeployTime");

	for(new i = 0; i < RACE_MAX_PLAYERS; i++)
	{
	    format(gstr, sizeof(gstr), "vPosX_%i", i);
	    g_RaceVehCoords[i][0] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vPosY_%i", i);
	    g_RaceVehCoords[i][1] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vPosZ_%i", i);
	    g_RaceVehCoords[i][2] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "vAngle_%i", i);
	    g_RaceVehCoords[i][3] = dini_Float(file, gstr);
	}
	
	for(new i = 0; i < g_RaceArray[E_rCPs]; i++)
	{
	    format(gstr, sizeof(gstr), "CP_%i_PosX", i);
	    g_RaceCPs[i][0] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "CP_%i_PosY", i);
	    g_RaceCPs[i][1] = dini_Float(file, gstr);
	    format(gstr, sizeof(gstr), "CP_%i_PosZ", i);
	    g_RaceCPs[i][2] = dini_Float(file, gstr);
	}

	Iter_Clear(RaceJoins);
	
    g_rPosition = 0;
	g_RaceTime = MAX_RACE_TIME;
	g_RacePlayerCount = 0;
	g_RaceCountDown = COUNT_DOWN_TILL_RACE_START;
	g_RaceStatus = RaceStatus_StandBy;
	return 1;
}

function:OnRaceDataLoaded()
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
		new name[25],
		    minute,
		    sec,
		    msec;

		format(gstr, sizeof(gstr), " -> Vehicle: %s | Checkpoints: %i", VehicleNames[g_RaceArray[E_vModel] - 400], g_RaceArray[E_rCPs]);
		SCMToAll(YELLOW, gstr);

		cache_get_row(0, 0, name, g_SQL_handle, sizeof(name));
		ConvertTime(var, cache_get_row_int(0, 1, g_SQL_handle), minute, sec, msec);

		format(gstr, sizeof(gstr), " -> #1 %s | %02i:%02i.%03i", name, minute, sec, msec);
		SCMToAll(YELLOW, gstr);
	}
	return 1;
}

SetupRaceForPlayer(playerid)
{
    gTeam[playerid] = gRACE;
    
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	ResetPlayerWeapons(playerid);
    ShowPlayerRaceTextdraws(playerid);
    HidePlayerInfoTextdraws(playerid);

    SetCP(playerid, g_CPProgress[playerid], g_CPProgress[playerid] + 1, g_RaceArray[E_rCPs], g_RaceArray[E_rType]);

	g_RaceVehicle[playerid] = CreateVehicle_(g_RaceArray[E_vModel], g_RaceVehCoords[g_RaceSpawnCount][0], g_RaceVehCoords[g_RaceSpawnCount][1], g_RaceVehCoords[g_RaceSpawnCount][2] + 0.5, g_RaceVehCoords[g_RaceSpawnCount][3], (random(128) + 127), (random(128) + 127), 60);
	SetPlayerPos(playerid, g_RaceVehCoords[g_RaceSpawnCount][0], g_RaceVehCoords[g_RaceSpawnCount][1], floatadd(g_RaceVehCoords[g_RaceSpawnCount][2], 2.0));
	SetPlayerFacingAngle(playerid, g_RaceVehCoords[g_RaceSpawnCount][3]);
	SetPlayerVirtualWorld(playerid, g_RaceArray[E_rWorld]);
	SetPlayerInterior(playerid, 0);

	SetVehicleNumberPlate(g_RaceVehicle[playerid], "{3399ff}R{FFFFFF}ac{F81414}E");
	SetVehicleToRespawn(g_RaceVehicle[playerid]);
	SetVehicleVirtualWorld(g_RaceVehicle[playerid], g_RaceArray[E_rWorld]);
	if(IsComponentIdCompatible(GetVehicleModel(g_RaceVehicle[playerid]), 1010)) AddVehicleComponent(g_RaceVehicle[playerid], 1010);
	RepairVehicle(g_RaceVehicle[playerid]);

    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 0);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 0);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_CP);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
    
	PutPlayerInVehicle(playerid, g_RaceVehicle[playerid], 0);

    TogglePlayerControllable(playerid, false);
    SetCameraBehindPlayer(playerid);

    ToggleSpeedo(playerid, true);

    g_CPProgress[playerid] = 0;

    format(gstr2, sizeof(gstr2), "SELECT `name`, `time` FROM `race_records` WHERE `track` = %i ORDER BY `time` ASC LIMIT 5;", g_NextRace);
    mysql_tquery(g_SQL_handle, gstr2, "OnQueryFinish", "siii", gstr2, THREAD_RACE_TOPLIST, playerid, g_SQL_handle);

	++g_RacePlayerCount;
	++g_RaceSpawnCount;
}

function:CountTillRace()
{
	switch(g_RaceCountDown)
	{
 		case 0:
	    {
	        KillTimer(g_tRaceCounter);
			StartRace();
	    }
	    case 1..5:
	    {
			format(gstr, sizeof(gstr), "~y~RACE STARTING IN~n~~p~- %i -~n~~y~SECONDS", g_RaceCountDown);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
			    if(gTeam[i] == gRACE)
			    {
			    	GameTextForPlayer(i, gstr, 999, 3);
			    	PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			    }
			}
	    }
	    case 21, 6:
	    {
			format(gstr, sizeof(gstr), ""race_sign" Still %i seconds till %03i named race starts [/race]", g_RaceCountDown - 1, g_NextRace);
			SCMToAll(-1, gstr);
	    }
	}
	return g_RaceCountDown--;
}

StartRace()
{
    g_RaceStatus = RaceStatus_Active;
    g_RaceTick = GetTickCount() + 3600000;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	    if(gTeam[i] == gRACE)
	    {
	        TogglePlayerControllable(i, true);
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
  			GameTextForPlayer(i, "~g~GO~w~! ~g~GO~w~! ~g~GO~w~!", 2000, 5);
			SetCameraBehindPlayer(i);
	    }
	}
	g_tRaceCounter = SetTimer("RaceCounter", 1000, true);
	
    SCMToAll(-1, ""race_sign" The current race has been started!");
}

function:RaceCounter()
{
	if(g_RaceStatus == RaceStatus_Active)
	{
		g_RaceTime--;
		if(g_RacePlayerCount <= 0)
		{
			SCMToAll(-1, ""race_sign" Race ended, no one left in the race");
			return StopRace();
		}
	}
	if(g_RaceTime <= 0)
	{
	    SCMToAll(-1, ""race_sign" Race ended. No time left!");
	    return StopRace();
	}
	return 1;
}

function:StopRace()
{
	KillTimer(g_tRaceCounter);
	KillTimer(g_tRaceOpenSelection);
	g_RacePlayerCount = 0;
	g_RaceSpawnCount = 0;
    g_RaceTick = 0;
	g_RaceStatus = RaceStatus_Inactive;
    g_RaceFinishCount = 0;
    g_iRaceEnd = 0;
    
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	    if(gTeam[i] == gRACE)
	    {
			TogglePlayerControllable(i, true);
			if(g_RaceVehicle[i] != -1)
			{
				DestroyVehicle_(g_RaceVehicle[i]);
				g_RaceVehicle[i] = -1;
			}
			g_CPProgress[i] = 0;
			gTeam[i] = NORMAL;
			ResetPlayerWorld(i);
			RandomWeapon(i);
			HidePlayerRaceTextdraws(i);
			DisablePlayerRaceCheckpoint(i);
			TogglePlayerControllable(i, true);
			ToggleSpeedo(i, false);

		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_OBJECT, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_PICKUP, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_CP, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_MAP_ICON, 1);
		    Streamer_ToggleItemUpdate(i, STREAMER_TYPE_3D_TEXT_LABEL, 1);
		    Streamer_Update(i);

			if(GetPVarInt(i, "HadGod") == 1) Command_ReProcess(i, "/god", false);
		}
	}
	
	g_tRaceOpenSelection = SetTimer("OpenNewRace", (6 * 30 * 1000) + 307, false);
	return 1;
}

function:Race_End()
{
	if(--g_iRaceEnd <= 0)
	{
	    return StopRace();
	}
	if(g_RacePlayerCount <= 1)
	{
	    return StopRace();
	}
	
	format(gstr, sizeof(gstr), "~w~Still ~p~%i ~w~seconds left!", g_iRaceEnd);

    for(new i = 0; i < MAX_PLAYERS; i++)
	{
        if(gTeam[i] == gRACE)
		{
            GameTextForPlayer(i, gstr, 1300, 4);
        }
    }

	g_RaceTime = g_iRaceEnd;

    SetTimer("Race_End", 1000, false);
	return 1;
}

RemoveFromRaceBuilder(playerid)
{
	g_BuildRace = INVALID_PLAYER_ID;
 	g_BuildCheckPointCount = 0;
	g_BuildVehPosCount = 0;
	g_BuildRaceType = 1;
	g_BuildModeVMID = 0;
	g_BuildVirtualWorld = 0;
	g_BuildTakeCheckpoints = false;
	g_BuildTakeVehPos = false;
	
	if(g_BuildVehicle != -1)
	{
		DestroyVehicle_(g_BuildVehicle);
		g_BuildVehicle = -1;
	}
	
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_MAP_ICON, 1);
    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_3D_TEXT_LABEL, 1);
    Streamer_Update(playerid);
    
    gTeam[playerid] = NORMAL;
}

SetCP(playerid, PrevCP, NextCP, MaxCP, Type)
{
	const Float:RACE_CHECKPOINT_SIZE = 12.0;
	if(Type == 1)
	{
		if(NextCP == MaxCP)
		{
			SetPlayerRaceCheckpoint(playerid, 1, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
		else
		{
			SetPlayerRaceCheckpoint(playerid, 0, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
	}
	else if(Type == 2)
	{
		if(NextCP == MaxCP)
		{
			SetPlayerRaceCheckpoint(playerid, 4, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
		else
		{
			SetPlayerRaceCheckpoint(playerid, 3, g_RaceCPs[PrevCP][0], g_RaceCPs[PrevCP][1], g_RaceCPs[PrevCP][2], g_RaceCPs[NextCP][0], g_RaceCPs[NextCP][1], g_RaceCPs[NextCP][2], RACE_CHECKPOINT_SIZE);
		}
	}
}

function:Race_CalculatePosition()
{
	new cp,
	    vehicleid,
		Float:POS[4],
	    c,
		tmp_RacePosition[12][e_race_position];

	const OFFSET_VALUE = 10000;

	for(new i = 0; i < sizeof(tmp_RacePosition); i++)
	{
	    tmp_RacePosition[i][RP_iPlayer] = INVALID_PLAYER_ID;
	    tmp_RacePosition[i][RP_iValue] = -(i + 1);
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
	        if(gTeam[i] == gRACE)
			{
				vehicleid = GetPlayerVehicleID(i);
				GetVehiclePos(vehicleid, POS[0], POS[1], POS[2]);
				cp = g_CPProgress[i] + 1;
				POS[3] = GetDistance2D(POS[0], POS[1], POS[2], g_RaceCPs[cp][0], g_RaceCPs[cp][1], g_RaceCPs[cp][2]);
				if(POS[3] > OFFSET_VALUE)
				{
				    POS[3] = OFFSET_VALUE;
				}
				POS[3] = (OFFSET_VALUE - POS[3]);
	            tmp_RacePosition[c][RP_iPlayer] = i;
	            tmp_RacePosition[c][RP_iValue] = (g_CPProgress[i] * OFFSET_VALUE) + floatround(POS[3]);
	            c++;
	        }
	    }
	}

	SortDeepArray(tmp_RacePosition, RP_iValue, .order = SORT_DESC);

	for(new i = 0; i < sizeof(tmp_RacePosition); i++)
	{
        if(tmp_RacePosition[i][RP_iPlayer] != INVALID_PLAYER_ID)
		{
            g_RacePosition[tmp_RacePosition[i][RP_iPlayer]] = i + 1;
		}
	}
	return 1;
}

GetDistance2D(Float:xPos, Float:yPos, Float:zPos, Float:xPos2, Float:yPos2, Float:zPos2)
{
	xPos -= xPos2;
	yPos -= yPos2;
	zPos -= zPos2;
	return floatround(floatpower((xPos * xPos) + (yPos * yPos) + (zPos * zPos), 0.5));
}

function:DestroyPlayerVehicles(playerid)
{
	for(new obj = 0; obj < 13; obj++)
	{
	    if(hVIPVehObj[playerid][obj] != -1)
	    {
	        DestroyDynamicObject(hVIPVehObj[playerid][obj]);
	        hVIPVehObj[playerid][obj] = -1;
	    }
	}
	
	if(PlayerInfo[playerid][Vehicle] != -1)
	{
		DestroyVehicle_(PlayerInfo[playerid][Vehicle]);
		PlayerInfo[playerid][Vehicle] = -1;
	}

	if(PVSelect[playerid] != -1)
	{
		if(PlayerPV[playerid][PVSelect[playerid]][Neon1] != -1)
		{
			DestroyDynamicObject(PlayerPV[playerid][PVSelect[playerid]][Neon1]);
			PlayerPV[playerid][PVSelect[playerid]][Neon1] = -1;
		}
		if(PlayerPV[playerid][PVSelect[playerid]][Neon2] != -1)
		{
			DestroyDynamicObject(PlayerPV[playerid][PVSelect[playerid]][Neon2]);
			PlayerPV[playerid][PVSelect[playerid]][Neon2] = -1;
		}
	    if(PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] != Text3D:-1)
	    {
	        DestroyDynamic3DTextLabel(PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel]);
	        PlayerPV[playerid][PVSelect[playerid]][PVehicleLabel] = Text3D:-1;
	    }
		if(PlayerPV[playerid][PVSelect[playerid]][PVehicleID] != -1)
		{
			DestroyVehicle_(PlayerPV[playerid][PVSelect[playerid]][PVehicleID]);
			PlayerPV[playerid][PVSelect[playerid]][PVehicleID] = -1;
		}
	}
	
	if(PlayerInfo[playerid][TrailerVid] != -1)
	{
		DestroyVehicle_(PlayerInfo[playerid][TrailerVid]);
		PlayerInfo[playerid][TrailerVid] = -1;
	}
	return 1;
}

function:OnNewsReceived(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_SQL_handle);

	if(rows > 0)
	{
	    new news[512], ass[750];
		cache_get_row(0, 2, gstr, g_SQL_handle, sizeof(gstr));
		cache_get_row(0, 3, news, g_SQL_handle, sizeof(news));
		format(ass, sizeof(ass), ""white"%s\n\n%s\n\nPosted on %s", gstr, news, UnixTimeToDate(cache_get_row_int(0, 4, g_SQL_handle)));
	    ShowPlayerDialog(playerid, NO_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""nef" - News", ass, "OK", "");
	}
	return 1;
}

function:OnRaceRecordPurged(playerid, map)
{
	if(cache_get_row_count(g_SQL_handle) == 1)
	{
		format(gstr, sizeof(gstr), "DELETE FROM `race_records` WHERE `id` = %i;", cache_get_row_int(0, 0, g_SQL_handle));
		mysql_tquery(g_SQL_handle, gstr, "", "");

		format(gstr, sizeof(gstr), ""red"Adm: %s(%i) deleted the first record in race %i", __GetName(playerid), playerid, map);
		AdminMSG(-1, gstr);
		print(gstr);
	}
	else
	{
		SCM(playerid, -1, ""er"First race record not found!");
	}
	return 1;
}

CreateVehicle_(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
	new vid = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay);
	
	if(vid == INVALID_VEHICLE_ID)
	{
	    printf("[ERROR] Could not create vehicle! return: %i, params: %i %.2f %.2f %.2f %.2f %i %i %i", vid, modelid, x, y, z, angle, color1, color2, respawn_delay);
	}
	return vid;
}

DestroyVehicle_(vehicleid)
{
	if(!IsValidVehicle(vehicleid)) return 0;

	new ret = DestroyVehicle(vehicleid);

	if(!ret)
	{
	    printf("[ERROR] Could not destroy vehicle! return %i, params: %i", ret, vehicleid);
	}

	return ret;
}

ToggleSpeedo(playerid, bool:toggle)
{
	if(!toggle)
	{
	    PlayerInfo[playerid][bSpeedo] = false;

		PlayerTextDrawHide(playerid, TXTSpeedo[playerid]);
		TextDrawHideForPlayer(playerid, TXTSpeedo_Main);
	}
	else
	{
	    PlayerInfo[playerid][bSpeedo] = true;

		PlayerTextDrawShow(playerid, TXTSpeedo[playerid]);
		TextDrawShowForPlayer(playerid, TXTSpeedo_Main);
	}
}
